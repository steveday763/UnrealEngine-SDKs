Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x6d94ba8 0x78bfbf3b20

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10] 0x78bfc65c40

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10] 0x78a8151200
	FString Model;//[Offset: 0x10, Size: 0x10] 0x78a8151280

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10] 0x78bfc65ba0

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10] 0x78a8153000
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10] 0x78bfc65b00

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1] 0x78a8153080
	byte CompareType;//[Offset: 0x1, Size: 0x1] 0x78a8153180
	FString MatchString;//[Offset: 0x8, Size: 0x10] 0x78a8151100

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30] 0x7875a43800
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7875a43880
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7875a43900
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1] 0x7875a43980
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1] 0x7875a43a00
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1] 0x7875a43a80
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1] 0x7875a43b00
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1] 0x7875a43b80
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x7875a43c00
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x7875a43c80
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x7875a43d00
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x7875a43d80
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1] 0x7875a43e00
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1] 0x7875a43e80
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1] 0x7875a43f00
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1] 0x7875a43f80
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1] 0x7875a44000
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1] 0x7875a44080
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1] 0x7875a44100
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1] 0x7875a44180
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1] 0x7875a44200
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1] 0x7875a42180
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1] 0x7875a42200
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1] 0x7875a42280
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1] 0x7875a42300
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x7875a42380
	bool bReplicates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x7875a42400
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x7875a42480
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1] 0x7875a42500
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1] 0x7875a42580
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1] 0x7875a42600
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1] 0x78759e5d80
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1] 0x78759e5e20
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1] 0x7875a42780
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34] 0x7875a42c80
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4] 0x7875a42d00
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4] 0x7875a42d80
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40] 0x7875a43100
	Actor* Owner;//[Offset: 0xe0, Size: 0x8] 0x7875a43180
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8] 0x7875a41100
	byte Role;//[Offset: 0xf0, Size: 0x1] 0x7875a41180
	byte NetDormancy;//[Offset: 0xf1, Size: 0x1] 0x7875a41200
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 0x1] 0x78759e60a0
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 0x1] 0x7875a41300
	int InputPriority;//[Offset: 0xf4, Size: 0x4] 0x7875a41380
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 0x8] 0x7875a41400
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 0x4] 0x7875a41480
	int NetTag;//[Offset: 0x104, Size: 0x4] 0x7875a41500
	float NetUpdateFrequency;//[Offset: 0x108, Size: 0x4] 0x7875a41580
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 0x4] 0x7875a41600
	float NetPriority;//[Offset: 0x110, Size: 0x4] 0x7875a41680
	Pawn* Instigator;//[Offset: 0x118, Size: 0x8] 0x7875a41700
	Actor*[] Children;//[Offset: 0x120, Size: 0x10] 0x78759e6140
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 0x8] 0x7875a41800
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 0x10] 0x78759e61e0
	FName[] Layers;//[Offset: 0x150, Size: 0x10] 0x78759e6280
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 0x8] 0x7875a41980
	FName[] Tags;//[Offset: 0x170, Size: 0x10] 0x78759e6320
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 0x1] 0x7875a41a80
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 0x1] 0x7875a41b00
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 0x1] 0x7875a41b80
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 0x1] 0x7875a41c00
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 0x1] 0x7875a41c80
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 0x1] 0x7875a41d00
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 0x1] 0x7875a41d80
	delegate OnClicked;//[Offset: 0x187, Size: 0x1] 0x7875a41e00
	delegate OnReleased;//[Offset: 0x188, Size: 0x1] 0x7875a41e80
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 0x1] 0x7875a41f00
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 0x1] 0x7875a41f80
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 0x1] 0x7875a42000
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 0x1] 0x7875a42080
	delegate OnActorHit;//[Offset: 0x18d, Size: 0x1] 0x7875a42100
	delegate OnDestroyed;//[Offset: 0x18e, Size: 0x1] 0x7875a40080
	delegate OnEndPlay;//[Offset: 0x18f, Size: 0x1] 0x7875a40100
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 0x10] 0x78759e63c0
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 0x10] 0x78759e6460
	bool WasRecentlyRendered(float Tolerance);// 0x942aacc 0x78760bef60
	void UserConstructionScript();// 0x6d94ba8 0x78760bf040
	void TearOff();// 0x942fab4 0x78760bf120
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x942be94 0x78760bf200
	void SetTickGroup(byte NewTickGroup);// 0x942ab80 0x78760bf2e0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x942b814 0x78760bf3c0
	void SetReplicates(bool bInReplicates);// 0x942f938 0x78760bf4a0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x942f880 0x78760bf580
	void SetOwner(Actor* NewOwner);// 0x942b1d0 0x78760bf660
	void SetNetDormancy(byte NewDormancy);// 0x942b058 0x78760bf740
	void SetLifeSpan(float InLifespan);// 0x942b49c 0x78760bf820
	void SetAutoDestroyWhenFinished(bool bVal);// 0x942fa04 0x78760bf900
	void SetActorTickInterval(float TickInterval);// 0x942b2d0 0x78760bf9e0
	void SetActorTickEnabled(bool bEnabled);// 0x942b3b0 0x78760bfac0
	void SetActorScale3D(Vector NewScale3D);// 0x942e87c 0x78760bfba0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x942cef0 0x78760bfc80
	void SetActorHiddenInGame(bool bNewHidden);// 0x942ce00 0x78760bfd60
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x942cd50 0x78760bfe40
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x942b8fc 0x78760bff20
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x942b9ac 0x78760bcaa0
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x78760bcb80
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x78760bcc60
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x6d94ba8 0x78760bcd40
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x6d94ba8 0x78760bce20
	void ReceiveEndPlay(byte EndPlayReason);// 0x6d94ba8 0x78760bcf00
	void ReceiveDestroyed();// 0x6d94ba8 0x78760bcfe0
	void ReceiveBeginPlay();// 0x6d94ba8 0x78760bd0c0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x78760bd1a0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x6d94ba8 0x78760bd280
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x6d94ba8 0x78760bd360
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x6d94ba8 0x78760bd440
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x6d94ba8 0x78760bd520
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x6d94ba8 0x78760bd600
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x6d94ba8 0x78760bd6e0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x6d94ba8 0x78760bd7c0
	void ReceiveActorEndCursorOver();// 0x6d94ba8 0x78760bd8a0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x6d94ba8 0x78760bd980
	void ReceiveActorBeginCursorOver();// 0x6d94ba8 0x78760bda60
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x942a96c 0x78760bdb40
	void OnRep_ReplicateMovement();// 0x942fad0 0x78760bdc20
	void OnRep_ReplicatedMovement();// 0x942b280 0x78760bdd00
	void OnRep_Owner();// 0x942f9e8 0x78760bdde0
	void OnRep_Instigator();// 0x942f810 0x78760bdec0
	void OnRep_AttachmentReplication();// 0x942f82c 0x78760bdfa0
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x942a2a8 0x78760be080
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x942b764 0x78760be160
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x942ad9c 0x78760be240
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942da38 0x78760be320
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x942eb30 0x78760be400
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942cf98 0x78760be4e0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942d188 0x78760be5c0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942d338 0x78760be6a0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942e924 0x78760badc0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942f02c 0x78760baea0
	void K2_OnReset();// 0x6d94ba8 0x78760baf80
	void K2_OnEndViewTarget(PlayerController* PC);// 0x6d94ba8 0x78760bb060
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x6d94ba8 0x78760bb140
	SceneComponent* K2_GetRootComponent();// 0x942ec78 0x78760bb220
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x942a6bc 0x78760bb300
	Rotator K2_GetActorRotation();// 0x942ef34 0x78760bb3e0
	Vector K2_GetActorLocation();// 0x942f1e8 0x78760bb4c0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x942bca4 0x78760bb5a0
	void K2_DestroyComponent(ActorComponent* Component);// 0x942c6f4 0x78760bb680
	void K2_DestroyActor();// 0x942cd14 0x78760bb760
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x942c33c 0x78760bb840
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x942bf84 0x78760bb920
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x942c1ac 0x78760bba00
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x942c564 0x78760bbae0
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942dc34 0x78760bbbc0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942de24 0x78760bbca0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942e014 0x78760bbd80
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942e1c4 0x78760bbe60
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942d4e8 0x78760bbf40
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942d6d8 0x78760bc020
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x942d888 0x78760bc100
	bool IsOverlappingActor(const Actor* Other);// 0x942b100 0x78760bc1e0
	bool IsChildActor();// 0x942b00c 0x78760bc2c0
	bool IsActorTickEnabled();// 0x942b378 0x78760bc3a0
	bool IsActorBeingDestroyed();// 0x942b710 0x78760bc480
	bool HasAuthority();// 0x942ccf0 0x78760bc560
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x942e4d4 0x78760bc640
	Vector GetVelocity();// 0x942ec38 0x78760bc720
	Transform GetTransform();// 0x942f240 0x78760bc800
	bool GetTickableWhenPaused();// 0x942b8c4 0x78760bc8e0
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x942e584 0x78760bc9c0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x942e6e4 0x78760b90e0
	byte GetRemoteRole();// 0x942f848 0x78760b91c0
	ChildActorComponent* GetParentComponent();// 0x942aecc 0x78760b92a0
	Actor* GetParentActor();// 0x942ae98 0x78760b9380
	Actor* GetOwner();// 0x942b1b4 0x78760b9460
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x942b54c 0x78760b9540
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x942b60c 0x78760b9620
	byte GetLocalRole();// 0x942f864 0x78760b9700
	float GetLifeSpan();// 0x942b460 0x78760b97e0
	Controller* GetInstigatorController();// 0x942f27c 0x78760b98c0
	Pawn* GetInstigator();// 0x942f2b0 0x78760b99a0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x942f2e4 0x78760b9a80
	float GetInputAxisValue(const FName InputAxisName);// 0x942f600 0x78760b9b60
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x942f474 0x78760b9c40
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x942e374 0x78760b9d20
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x942e634 0x78760b9e00
	float GetGameTimeSinceCreation();// 0x942b730 0x78760b9ee0
	float GetDotProductTo(const Actor* OtherActor);// 0x942e424 0x78760b9fc0
	float GetDistanceTo(const Actor* OtherActor);// 0x942e794 0x78760ba180
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x942a578 0x78760ba260
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x942a47c 0x78760ba340
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x942a7b8 0x78760ba420
	FName GetAttachParentSocketName();// 0x942ad34 0x78760ba500
	Actor* GetAttachParentActor();// 0x942ad68 0x78760ba5e0
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x942ac28 0x78760ba6c0
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x942af00 0x78760ba7a0
	Vector GetActorUpVector();// 0x942ee8c 0x78760ba880
	float GetActorTimeDilation();// 0x942bbbc 0x78760ba960
	float GetActorTickInterval();// 0x942b29c 0x78760baa40
	Vector GetActorScale3D();// 0x942e844 0x78760bab20
	Vector GetActorRightVector();// 0x942ee38 0x78760bac00
	Vector GetActorRelativeScale3D();// 0x942ceb8 0x78760bace0
	Vector GetActorForwardVector();// 0x942eee0 0x78760b7400
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x942a868 0x78760b74e0
	bool GetActorEnableCollision();// 0x942cd30 0x78760b75c0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x942ec94 0x78760b76a0
	void ForceNetUpdate();// 0x942aab0 0x78760b7780
	void FlushNetDormancy();// 0x942b044 0x78760b7860
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x942c79c 0x78760b7940
	void EnableInput(PlayerController* PlayerController);// 0x942f760 0x78760b7a20
	void DisableInput(PlayerController* PlayerController);// 0x942f6b0 0x78760b7b00
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x942bde4 0x78760b7be0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x942ba5c 0x78760b7cc0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x942bb0c 0x78760b7da0
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x942c90c 0x78760b7e80
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x942cad8 0x78760b7f60
	bool ActorHasTag(FName Tag);// 0x942bbf0 0x78760b8120

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1] 0x7878059400
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1] 0x7878059480
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7878057400
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7878057480
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7878057500
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7878057580
	float TickInterval;//[Offset: 0xc, Size: 0x4] 0x7878057600

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc] 0x7875a42800
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc] 0x7875a42880
	Vector Location;//[Offset: 0x18, Size: 0xc] 0x7875a42900
	Rotator Rotation;//[Offset: 0x24, Size: 0xc] 0x7875a42980
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7875a42a00
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7875a42a80
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1] 0x78759e5ec0
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1] 0x78759e5f60
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1] 0x78759e6000

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4] 0x78c24eb800
	float Y;//[Offset: 0x4, Size: 0x4] 0x78c24eb880
	float Z;//[Offset: 0x8, Size: 0x4] 0x78c24eb900

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4] 0x78c24ed300
	float Yaw;//[Offset: 0x4, Size: 0x4] 0x78c24ed380
	float Roll;//[Offset: 0x8, Size: 0x4] 0x78c24ed400

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8] 0x7875a42e00
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc] 0x7875a42e80
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc] 0x7875a42f00
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc] 0x7875a42f80
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8] 0x7875a43000
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8] 0x7875a43080

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8] 0x7875fc2580
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8] 0x7875fc2600
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8] 0x7875fc2680
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10] 0x7895c17ea0
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10] 0x7895c17fe0
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc] 0x7875fc2800
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc] 0x7875fc2880
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc] 0x7875fc2900
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc] 0x7875fc2980
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x7875fc2a00
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1] 0x7875fc2a80
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1] 0x7875fc2b00
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1] 0x7875fc2b80
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1] 0x7875fc2c00
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1] 0x7875fc2c80
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1] 0x7875fc2d00
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1] 0x7875fc2d80
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1] 0x7875fc2e00
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1] 0x7875fc2e80
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1] 0x7875fc2f00
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1] 0x7875fc2f80
	byte Mobility;//[Offset: 0x14f, Size: 0x1] 0x7875fc3000
	byte DetailMode;//[Offset: 0x150, Size: 0x1] 0x7875fc3080
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1] 0x7875fc3100
	void ToggleVisibility(bool bPropagateToChildren);// 0x96e207c 0x7875fad600
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x96e2a08 0x7875fad6e0
	void SetWorldScale3D(Vector NewScale);// 0x96e3da0 0x7875fad7c0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x96e2144 0x7875fad8a0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x96e51d0 0x7875fad980
	void SetRelativeScale3D(Vector NewScale3D);// 0x96e4a58 0x7875fada60
	void SetMobility(byte NewMobility);// 0x96e1964 0x7875fadb40
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x96e1f80 0x7875fadc20
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x96e1c0c 0x7875fadd00
	void ResetRelativeTransform();// 0x96e4b00 0x7875fadde0
	void OnRep_Visibility(bool OldValue);// 0x96e50d0 0x7875fadec0
	void OnRep_Transform();// 0x96e51bc 0x7875fadfa0
	void OnRep_AttachSocketName();// 0x96e5180 0x7875fae080
	void OnRep_AttachParent();// 0x96e51a8 0x7875fae160
	void OnRep_AttachChildren();// 0x96e5194 0x7875fae240
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3bb0 0x7875fae320
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3e48 0x7875fae400
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e1a14 0x7875fae4e0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3ff8 0x7875fae5c0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e4b80 0x7875fae6a0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e4d70 0x7875faadc0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e1d54 0x7875faaea0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e4f20 0x7875faaf80
	Transform K2_GetComponentToWorld();// 0x96e335c 0x7875fab060
	Vector K2_GetComponentScale();// 0x96e33c8 0x7875fab140
	Rotator K2_GetComponentRotation();// 0x96e3400 0x7875fab220
	Vector K2_GetComponentLocation();// 0x96e3438 0x7875fab300
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x96e2774 0x7875fab3e0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x96e2b04 0x7875fab4c0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x96e2d38 0x7875fab5a0
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3470 0x7875fab680
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3660 0x7875fab760
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3850 0x7875fab840
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e3a00 0x7875fab920
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e46f8 0x7875faba00
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e48a8 0x7875fabae0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e41a8 0x7875fabbc0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e4398 0x7875fabca0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x96e4548 0x7875fabd80
	bool IsVisible();// 0x96e2240 0x7875fabe60
	bool IsSimulatingPhysics(FName BoneName);// 0x96e31f8 0x7875fabf40
	bool IsAnySimulatingPhysics();// 0x96e31b8 0x7875fac020
	Vector GetUpVector();// 0x96e32ec 0x7875fac100
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x96e25b0 0x7875fac1e0
	Rotator GetSocketRotation(FName InSocketName);// 0x96e2438 0x7875fac2c0
	Quat GetSocketQuaternion(FName InSocketName);// 0x96e237c 0x7875fac3a0
	Vector GetSocketLocation(FName InSocketName);// 0x96e24f4 0x7875fac480
	bool GetShouldUpdatePhysicsVolume();// 0x96e5280 0x7875fac560
	Vector GetRightVector();// 0x96e32b4 0x7875fac640
	Transform GetRelativeTransform();// 0x96e4b14 0x7875fac720
	PhysicsVolume* GetPhysicsVolume();// 0x96e1f4c 0x7875fac800
	void GetParentComponents(out SceneComponent*[] Parents);// 0x96e30c0 0x7875fac8e0
	int GetNumChildrenComponents();// 0x96e308c 0x7875fac9c0
	Vector GetForwardVector();// 0x96e3324 0x7875fa90e0
	Vector GetComponentVelocity();// 0x96e2280 0x7875fa91c0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x96e2ed4 0x7875fa92a0
	SceneComponent* GetChildComponent(int ChildIndex);// 0x96e2fdc 0x7875fa9380
	FName GetAttachSocketName();// 0x96e3180 0x7875fa9460
	SceneComponent* GetAttachParent();// 0x96e319c 0x7875fa9540
	FName[] GetAllSocketNames();// 0x96e26c4 0x7875fa9620
	bool DoesSocketExist(FName InSocketName);// 0x96e22c0 0x7875fa9700
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x96e2908 0x7875fa97e0

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30] 0x7878057680
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10] 0x7878000920
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x78780009c0
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4] 0x7878057800
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1] 0x7878057880
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1] 0x7878057900
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1] 0x7878057980
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x7878057a00
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x7878057a80
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1] 0x7878057b00
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1] 0x7878057b80
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1] 0x7878000ce0
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1] 0x7878057c80
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1] 0x7878057d00
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10] 0x7878000c40
	void ToggleActive();// 0x9434e2c 0x787edd66e0
	void SetTickGroup(byte NewTickGroup);// 0x9434828 0x787edd67c0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x9434ca4 0x787edd68a0
	void SetIsReplicated(bool ShouldReplicate);// 0x9434bf4 0x787edd6980
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x94349ac 0x787edd6a60
	void SetComponentTickInterval(float TickInterval);// 0x9434a54 0x787edd6b40
	void SetComponentTickEnabled(bool bEnabled);// 0x9434b3c 0x787edd6c20
	void SetAutoActivate(bool bNewAutoActivate);// 0x9434d54 0x787edd6d00
	void SetActive(bool bNewActive, bool bReset);// 0x9434e48 0x787edd6de0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x9434568 0x787edd6ec0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x9434618 0x787edd6fa0
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x787edd7080
	void ReceiveEndPlay(byte EndPlayReason);// 0x6d94ba8 0x787edd7160
	void ReceiveBeginPlay();// 0x6d94ba8 0x787edd7240
	void OnRep_IsActive();// 0x94350ec 0x787edd7320
	void K2_DestroyComponent(Object* Object);// 0x94348d0 0x787edd3a40
	bool IsComponentTickEnabled();// 0x9434afc 0x787edd3b20
	bool IsBeingDestroyed();// 0x9435108 0x787edd3c00
	bool IsActive();// 0x9434e0c 0x787edd3ce0
	Actor* GetOwner();// 0x94350d0 0x787edd3dc0
	float GetComponentTickInterval();// 0x9434978 0x787edd3ea0
	void Deactivate();// 0x9434f48 0x787edd3f80
	bool ComponentHasTag(FName Tag);// 0x943501c 0x787edd4060
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x94346c8 0x787edd4140
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x9434778 0x787edd4220
	void Activate(bool bReset);// 0x9434f64 0x787edd4300

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 0x4] 0x78e23ddf80
	int Priority;//[Offset: 0x25c, Size: 0x4] 0x78e23de000
	float FluidFriction;//[Offset: 0x260, Size: 0x4] 0x78e23de080
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78e23de100
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78e23de180

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 0x1] 0x78e22b7880
	Color BrushColor;//[Offset: 0x224, Size: 0x4] 0x78e22b7900
	int PolyFlags;//[Offset: 0x228, Size: 0x4] 0x78e22b7980
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1] 0x78e22b7a00
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1] 0x78e22b7a80
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1] 0x78e22b7b00
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1] 0x78e22b7b80
	Model* Brush;//[Offset: 0x230, Size: 0x8] 0x78e22b7c00
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 0x8] 0x78e22b7c80
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78e22b7d00
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 0x10] 0x7875d41be0

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1] 0x78c24ec900
	byte G;//[Offset: 0x1, Size: 0x1] 0x78c24ec980
	byte R;//[Offset: 0x2, Size: 0x1] 0x78c24eca00
	byte A;//[Offset: 0x3, Size: 0x1] 0x78c24eca80

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x448, Size: 0x8] 0x78e23b7280
	BodySetup* BrushBodySetup;//[Offset: 0x450, Size: 0x8] 0x78e23b7300

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 0x4] 0x78760ebd80
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 0x4] 0x78760ebe00
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 0x4] 0x78760ebe80
	byte DepthPriorityGroup;//[Offset: 0x20c, Size: 0x1] 0x78760ebf00
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x20d, Size: 0x1] 0x78760ebf80
	byte IndirectLightingCacheQuality;//[Offset: 0x20e, Size: 0x1] 0x78760ec000
	enum LightmapType;//[Offset: 0x20f, Size: 0x1] 0x7895c1ea20
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78760ec100
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78760ec180
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x78760ec200
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x78760ec280
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x78760ec300
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x78760ec380
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x78760ec400
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x211, Size: 0x1] 0x78760ec480
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x211, Size: 0x1] 0x78760ec500
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x211, Size: 0x1] 0x78760ec580
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x211, Size: 0x1] 0x78760ec600
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x211, Size: 0x1] 0x78760ea580
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1] 0x78760ea600
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1] 0x78760ea680
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1] 0x78760ea700
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x212, Size: 0x1] 0x78760ea780
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x212, Size: 0x1] 0x78760ea800
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x212, Size: 0x1] 0x78760ea880
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x212, Size: 0x1] 0x78760ea900
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x212, Size: 0x1] 0x78760ea980
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x213, Size: 0x1] 0x78760eaa00
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x213, Size: 0x1] 0x78760eaa80
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x213, Size: 0x1] 0x78760eab00
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x213, Size: 0x1] 0x78760eab80
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x213, Size: 0x1] 0x78760eac00
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x213, Size: 0x1] 0x78760eac80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x213, Size: 0x1] 0x78760ead00
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x213, Size: 0x1] 0x78760ead80
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1] 0x78760eae00
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1] 0x78760eae80
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1] 0x78760eaf00
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1] 0x78760eaf80
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1] 0x78760eb000
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1] 0x78760eb080
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1] 0x78760eb100
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1] 0x78760eb180
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x78760eb200
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x78760eb280
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1] 0x78760eb300
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1] 0x78760eb380
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1] 0x78760eb400
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1] 0x78760eb480
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1] 0x78760eb500
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1] 0x78760eb580
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1] 0x78760e9500
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 0x1] 0x78760e9580
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 0x1] 0x78760e9600
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 0x1] 0x78760e9680
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x216, Size: 0x1] 0x78760e9700
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x216, Size: 0x1] 0x78760e9780
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x216, Size: 0x1] 0x78760e9800
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x216, Size: 0x1] 0x78760e9880
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x217, Size: 0x1] 0x78760e9900
	byte bHasCustomNavigableGeometry;//[Offset: 0x218, Size: 0x1] 0x78760e9980
	byte CanCharacterStepUpOn;//[Offset: 0x21a, Size: 0x1] 0x78760e9a00
	LightingChannels LightingChannels;//[Offset: 0x21b, Size: 0x1] 0x78760e9c00
	enum CustomDepthStencilWriteMask;//[Offset: 0x21c, Size: 0x1] 0x7895c1e840
	int CustomDepthStencilValue;//[Offset: 0x220, Size: 0x4] 0x78760e9d00
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x228, Size: 0x10] 0x78760e9d80
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x238, Size: 0x10] 0x78760e9e80
	int TranslucencySortPriority;//[Offset: 0x250, Size: 0x4] 0x78760e9f00
	float TranslucencySortDistanceOffset;//[Offset: 0x254, Size: 0x4] 0x78760e9f80
	int VisibilityId;//[Offset: 0x258, Size: 0x4] 0x78760ea000
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 0x10] 0x7895c1e7a0
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 0x1] 0x78760ea100
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 0x1] 0x78760ea180
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 0x1] 0x78760ea200
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 0x1] 0x7895c1e700
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 0x4] 0x78760ea300
	float BoundsScale;//[Offset: 0x284, Size: 0x4] 0x78760ea380
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 0x10] 0x7895c1e980
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 0x10] 0x7895c1e5c0
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 0x150] 0x78760e6a00
	delegate OnComponentHit;//[Offset: 0x418, Size: 0x1] 0x78760e6a80
	delegate OnComponentBeginOverlap;//[Offset: 0x419, Size: 0x1] 0x78760e6b00
	delegate OnComponentEndOverlap;//[Offset: 0x41a, Size: 0x1] 0x78760e6b80
	delegate OnComponentWake;//[Offset: 0x41b, Size: 0x1] 0x78760e6c00
	delegate OnComponentSleep;//[Offset: 0x41c, Size: 0x1] 0x78760e6c80
	delegate OnBeginCursorOver;//[Offset: 0x41e, Size: 0x1] 0x78760e6d00
	delegate OnEndCursorOver;//[Offset: 0x41f, Size: 0x1] 0x78760e6d80
	delegate OnClicked;//[Offset: 0x420, Size: 0x1] 0x78760e6e00
	delegate OnReleased;//[Offset: 0x421, Size: 0x1] 0x78760e6e80
	delegate OnInputTouchBegin;//[Offset: 0x422, Size: 0x1] 0x78760e6f00
	delegate OnInputTouchEnd;//[Offset: 0x423, Size: 0x1] 0x78760e6f80
	delegate OnInputTouchEnter;//[Offset: 0x424, Size: 0x1] 0x78760e7000
	delegate OnInputTouchLeave;//[Offset: 0x425, Size: 0x1] 0x78760e7080
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x440, Size: 0x8] 0x78760e7100
	bool WasRecentlyRendered(float Tolerance);// 0x96c3940 0x78760b9000
	void WakeRigidBody(FName BoneName);// 0x96bfe6c 0x78760b5720
	void WakeAllRigidBodies();// 0x96bdb50 0x78760b5800
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x96c2288 0x78760b58e0
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0x96be1dc 0x78760b59c0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x96bd1d4 0x78760b5aa0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x96bf6e4 0x78760b5b80
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0x96bf63c 0x78760b5c60
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x96bf78c 0x78760b5d40
	void SetSimulatePhysics(bool bSimulate);// 0x96c21d0 0x78760b5e20
	void SetRenderInMainPass(bool bValue);// 0x96be28c 0x78760b5f00
	void SetRenderCustomDepth(bool bValue);// 0x96be48c 0x78760b5fe0
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x96bf58c 0x78760b60c0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x96bce80 0x78760b61a0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x96c0310 0x78760b6280
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x96c044c 0x78760b6360
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x96c0598 0x78760b6440
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x96c0d98 0x78760b6520
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x96c0840 0x78760b6600
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x96c06e4 0x78760b66e0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x96c0984 0x78760b67c0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x96bfc5c 0x78760b68a0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x96bfbac 0x78760b6980
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x96bfd0c 0x78760b6a60
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x96c27a0 0x78760b6b40
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x96c2898 0x78760b6c20
	void SetMassScale(FName BoneName, float InMassScale);// 0x96bd784 0x78760b6d00
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x96bd4cc 0x78760b6de0
	void SetLinearDamping(float InDamping);// 0x96bd9a8 0x78760b6ec0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x96c39f4 0x78760b6fa0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x96bf8ec 0x78760b7080
	void SetHiddenInSceneCapture(bool bValue);// 0x96be12c 0x78760b7160
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x96c3b3c 0x78760b7240
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x96bf83c 0x78760b7320
	void SetEnableGravity(bool bGravityEnabled);// 0x96bda98 0x78760b3a40
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x96c2e20 0x78760b3b20
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x96c2f14 0x78760b3c00
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x96c3004 0x78760b3ce0
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x96c30f0 0x78760b3dc0
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x96c31e4 0x78760b3ea0
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x96c32d8 0x78760b3f80
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x96c33c8 0x78760b4060
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x96c34b4 0x78760b4140
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x96be33c 0x78760b4220
	void SetCustomDepthStencilValue(int Value);// 0x96be3e4 0x78760b4300
	void SetCullDistance(float NewCullDistance);// 0x96bcdd8 0x78760b43e0
	void SetConstraintMode(byte ConstraintMode);// 0x96c2120 0x78760b44c0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x96bcfe0 0x78760b45a0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x96bcf30 0x78760b4680
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x96bf3d8 0x78760b4760
	void SetCollisionObjectType(byte Channel);// 0x96bf2f4 0x78760b4840
	void SetCollisionEnabled(byte NewType);// 0x96bf4dc 0x78760b4920
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x96bff1c 0x78760b4a00
	void SetCastShadow(bool NewCastShadow);// 0x96bfafc 0x78760b4ae0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x96bf99c 0x78760b4bc0
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0x96bfa4c 0x78760b4ca0
	void SetBoundsScale(float NewBoundsScale);// 0x96c2a4c 0x78760b4d80
	void SetAngularDamping(float InDamping);// 0x96bd8bc 0x78760b4e60
	void SetAllUseCCD(bool InUseCCD);// 0x96bd11c 0x78760b4f40
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x96c0ae0 0x78760b5020
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x96bdb6c 0x78760b5100
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x96bdc70 0x78760b51e0
	void SetAllMassScale(float InMassScale);// 0x96bd61c 0x78760b52c0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x96bd2cc 0x78760b53a0
	void PutRigidBodyToSleep(FName BoneName);// 0x96bfdc4 0x78760b5480
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x96bec00 0x78760b5560
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x96be53c 0x78760b5640
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x96befa0 0x78760b1d60
	bool K2_IsQueryCollisionEnabled();// 0x96bded8 0x78760b1e40
	bool K2_IsPhysicsCollisionEnabled();// 0x96bde90 0x78760b1f20
	bool K2_IsCollisionEnabled();// 0x96bdf20 0x78760b2000
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x96be894 0x78760b20e0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x96c2d6c 0x78760b21c0
	bool IsOverlappingActor(const Actor* Other);// 0x96c2cb8 0x78760b22a0
	bool IsGravityEnabled();// 0x96bda58 0x78760b2380
	bool IsAnyRigidBodyAwake();// 0x96bd0dc 0x78760b2460
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x96c3684 0x78760b2540
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x96c3844 0x78760b2620
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x96c2350 0x78760b2700
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x96c0be4 0x78760b27e0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x96c0ce4 0x78760b28c0
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x96c00c4 0x78760b29a0
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x96c0178 0x78760b2a80
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x96c0244 0x78760b2b60
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x96c2af4 0x78760b2c40
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x96c2bb4 0x78760b2d20
	int GetNumMaterials();// 0x96be0f0 0x78760b2e00
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x96c2388 0x78760b2ee0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x96c2994 0x78760b2fc0
	float GetMassScale(FName BoneName);// 0x96bd6cc 0x78760b30a0
	float GetMass();// 0x96bd490 0x78760b3180
	float GetLinearDamping();// 0x96bd96c 0x78760b3260
	Vector GetInertiaTensor(FName BoneName);// 0x96bd3d4 0x78760b3340
	bool GetGenerateOverlapEvents();// 0x96c3bec 0x78760b3420
	byte GetCollisionResponseToChannel(byte Channel);// 0x96bddd8 0x78760b3500
	FName GetCollisionProfileName();// 0x96bf3a4 0x78760b35e0
	byte GetCollisionObjectType();// 0x96bdd9c 0x78760b36c0
	byte GetCollisionEnabled();// 0x96bdf64 0x78760b37a0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x96bdfa0 0x78760b3880
	Vector GetCenterOfMass(FName BoneName);// 0x96c0010 0x78760b3960
	float GetAngularDamping();// 0x96bd880 0x78760b0080
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x96c2498 0x78760b0160
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x96c25e4 0x78760b0240
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x96c26e8 0x78760b0320
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x96c35d4 0x78760b0400
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x96c3794 0x78760b04e0
	void ClearMoveIgnoreComponents();// 0x96c35a8 0x78760b05c0
	void ClearMoveIgnoreActors();// 0x96c3780 0x78760b06a0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x96bcd1c 0x78760b0780
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x96c1044 0x78760b0860
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x96c0edc 0x78760b0940
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x96c1194 0x78760b0a20
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x96c18a0 0x78760b0b00
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x96c12e4 0x78760b0be0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x96c1a84 0x78760b0cc0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x96c1fd0 0x78760b0da0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x96c14c8 0x78760b0e80
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x96c160c 0x78760b0f60
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x96c1750 0x78760b1040
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x96c1d30 0x78760b1120
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x96c1bc8 0x78760b1200
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x96c1e80 0x78760b12e0

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78760e9a80
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78760e9b00
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78760e9b80

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10] 0x7895c1e8e0

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1] 0x78760e1a00
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4] 0x78760e1a80

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58] 0x78e23b4b80
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e23b4c00
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78e23b4c80
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78e23b4d00
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78e23b4d80
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78e23b4e00
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1] 0x78e23b4e80
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1] 0x78e23b4f00
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1] 0x78e23b4f80
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8] 0x78e23b5000
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10] 0x78e23b5080
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x150] 0x78e23b5100
	Vector BuildScale3D;//[Offset: 0x280, Size: 0xc] 0x78e23b5180

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8] 0x7875c8e080
	byte PhysicsType;//[Offset: 0x30, Size: 0x1] 0x7875c8e100
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1] 0x7875c8e180
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1] 0x7875c8e200

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10] 0x78759e54c0
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10] 0x78759e5560
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10] 0x78759e5600
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10] 0x78759e57e0
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10] 0x78759e5880

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7875a47b00
	float Radius;//[Offset: 0x3c, Size: 0x4] 0x7875a47b80

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4] 0x7875a46600
	FName Name;//[Offset: 0xc, Size: 0x8] 0x7875a46680
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875a46700
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1] 0x7875a46780

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7875a47c80
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7875a47d00
	float X;//[Offset: 0x48, Size: 0x4] 0x7875a47d80
	float Y;//[Offset: 0x4c, Size: 0x4] 0x7875a47e00
	float Z;//[Offset: 0x50, Size: 0x4] 0x7875a47e80

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7875a47f80
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7875a48000
	float Radius;//[Offset: 0x48, Size: 0x4] 0x7875a48080
	float Length;//[Offset: 0x4c, Size: 0x4] 0x7875a48100

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10] 0x78759e56a0
	int[] IndexData;//[Offset: 0x40, Size: 0x10] 0x78759e5740
	Box ElemBox;//[Offset: 0x50, Size: 0x1c] 0x7875a48300
	Transform Transform;//[Offset: 0x70, Size: 0x30] 0x7875a48380

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc] 0x78c24ee600
	Vector Max;//[Offset: 0xc, Size: 0xc] 0x78c24ee680
	byte IsValid;//[Offset: 0x18, Size: 0x1] 0x78c24ee700

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78c24efd80
	Vector Translation;//[Offset: 0x10, Size: 0xc] 0x78c24efe00
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc] 0x78c24efe80

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4] 0x78c24ed100
	float Y;//[Offset: 0x4, Size: 0x4] 0x78c24ed180
	float Z;//[Offset: 0x8, Size: 0x4] 0x78c24ed200
	float W;//[Offset: 0xc, Size: 0x4] 0x78c24ed280

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc] 0x7875a46380
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc] 0x7875a46400
	float Radius0;//[Offset: 0x48, Size: 0x4] 0x7875a46480
	float Radius1;//[Offset: 0x4c, Size: 0x4] 0x7875a46500
	float Length;//[Offset: 0x50, Size: 0x4] 0x7875a46580

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7875b79c80
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7875b79d00
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1] 0x7875b79d80
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875b79e00
	float Restitution;//[Offset: 0x34, Size: 0x4] 0x7875b79e80
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1] 0x7875b79f00
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7875b79f80
	float Density;//[Offset: 0x3c, Size: 0x4] 0x7875b7a000
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7875b7a080
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4] 0x7875b7a100
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4] 0x7875b7a180
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4] 0x7875b7a200
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4] 0x7875b7a280
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8] 0x7875b7a300
	byte SurfaceType;//[Offset: 0x60, Size: 0x1] 0x7875b7a380

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1] 0x78760ea500
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1] 0x78760e8480
	enum SleepFamily;//[Offset: 0x51, Size: 0x1] 0x7895c1e520
	byte DOFMode;//[Offset: 0x52, Size: 0x1] 0x78760e8580
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1] 0x78760e8600
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1] 0x78760e8680
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1] 0x78760e8700
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1] 0x78760e8780
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1] 0x78760e8800
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1] 0x78760e8880
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1] 0x78760e8900
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78760e8980
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78760e8a00
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78760e8a80
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78760e8b00
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x78760e8b80
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x54, Size: 0x1] 0x78760e8c00
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x78760e8c80
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x78760e8d00
	FName CollisionProfileName;//[Offset: 0x64, Size: 0x8] 0x78760e8d80
	byte PositionSolverIterationCount;//[Offset: 0x6c, Size: 0x1] 0x78760e8e00
	byte VelocitySolverIterationCount;//[Offset: 0x6d, Size: 0x1] 0x78760e8e80
	CollisionResponse CollisionResponses;//[Offset: 0x70, Size: 0x30] 0x78760e8000
	float MaxDepenetrationVelocity;//[Offset: 0xa0, Size: 0x4] 0x78760e8080
	float MassInKgOverride;//[Offset: 0xa4, Size: 0x4] 0x78760e8100
	float LinearDamping;//[Offset: 0xb0, Size: 0x4] 0x78760e8180
	float AngularDamping;//[Offset: 0xb4, Size: 0x4] 0x78760e8200
	Vector CustomDOFPlaneNormal;//[Offset: 0xb8, Size: 0xc] 0x78760e8280
	Vector COMNudge;//[Offset: 0xc4, Size: 0xc] 0x78760e8300
	float MassScale;//[Offset: 0xd0, Size: 0x4] 0x78760e8380
	Vector InertiaTensorScale;//[Offset: 0xd4, Size: 0xc] 0x78760e8400
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf0, Size: 0x10] 0x78760e6380
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x100, Size: 0x8] 0x78760e6400
	float MaxAngularVelocity;//[Offset: 0x108, Size: 0x4] 0x78760e6480
	float CustomSleepThresholdMultiplier;//[Offset: 0x10c, Size: 0x4] 0x78760e6500
	float StabilizationThresholdMultiplier;//[Offset: 0x110, Size: 0x4] 0x78760e6580
	float PhysicsBlendWeight;//[Offset: 0x114, Size: 0x4] 0x78760e6600

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78760e6680
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78760e6700
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78760e6780
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78760e6800
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78760e6880
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78760e6900
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78760e6980

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20] 0x78760e7e00
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10] 0x7895c1e480

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1] 0x78760e8f00
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1] 0x78760e8f80
	byte Pawn;//[Offset: 0x2, Size: 0x1] 0x78760e9000
	byte Visibility;//[Offset: 0x3, Size: 0x1] 0x78760e9080
	byte Camera;//[Offset: 0x4, Size: 0x1] 0x78760e9100
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1] 0x78760e9180
	byte Vehicle;//[Offset: 0x6, Size: 0x1] 0x78760e9200
	byte Destructible;//[Offset: 0x7, Size: 0x1] 0x78760e9280
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1] 0x78760e9300
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1] 0x78760e9380
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1] 0x78760e9400
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1] 0x78760e9480
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1] 0x78760e7400
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1] 0x78760e7480
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1] 0x78760e7500
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1] 0x78760e7580
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1] 0x78760e7600
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1] 0x78760e7680
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1] 0x78760e7700
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1] 0x78760e7780
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1] 0x78760e7800
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1] 0x78760e7880
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1] 0x78760e7900
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1] 0x78760e7980
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1] 0x78760e7a00
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1] 0x78760e7a80
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1] 0x78760e7b00
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1] 0x78760e7b80
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1] 0x78760e7c00
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1] 0x78760e7c80
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1] 0x78760e7d00
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1] 0x78760e7d80

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8] 0x78760e7e80
	byte Response;//[Offset: 0x8, Size: 0x1] 0x78760e7f00

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4] 0x78e25a7680
	int TileSize;//[Offset: 0x2c, Size: 0x4] 0x78e25a7700
	int TileBorderSize;//[Offset: 0x30, Size: 0x4] 0x78e25a7780
	enum MaterialType;//[Offset: 0x34, Size: 0x1] 0x78e24e5060
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78e25a7880
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x78e25a7900
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x78e25a7980
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e25a7a00
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x78e25a7a80
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78e25a7b00
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4] 0x78e25a7b80
	byte LODGroup;//[Offset: 0x40, Size: 0x1] 0x78e25a7c00
	int Size;//[Offset: 0x44, Size: 0x4] 0x78e25a7c80
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8] 0x78e25a7d00
	int GetTileSize();// 0x96d3bd0 0x78e2593500
	int GetTileCount();// 0x96d3c04 0x78e25935e0
	int GetTileBorderSize();// 0x96d3ba0 0x78e25936c0
	int GetSize();// 0x96d3b20 0x78e25937a0
	int GetPageTableSize();// 0x96d3aec 0x78e2593880

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0x178, Size: 0x4] 0x78e23d7080
	int FirstResourceMemMip;//[Offset: 0x17c, Size: 0x4] 0x78e23d7100
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1] 0x78e23d7180
	byte AddressX;//[Offset: 0x181, Size: 0x1] 0x78e23d7200
	byte AddressY;//[Offset: 0x182, Size: 0x1] 0x78e23d7280
	IntPoint ImportedSize;//[Offset: 0x184, Size: 0x8] 0x78e23d7300
	int Blueprint_GetSizeY();// 0x9747c2c 0x78e23cc640
	int Blueprint_GetSizeX();// 0x9747c60 0x78e23cc720

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10] 0x7875d25900
	int LODBias;//[Offset: 0x78, Size: 0x4] 0x7875d25980
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1] 0x7875d25a00
	byte Filter;//[Offset: 0x7d, Size: 0x1] 0x7875d25a80
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1] 0x7875c0ff60
	byte LODGroup;//[Offset: 0x7f, Size: 0x1] 0x7875d25b80
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4] 0x7875d25c00
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1] 0x7875c0e340
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1] 0x7875d25d00
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1] 0x7875d25d80
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1] 0x7875d25e00
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1] 0x7875d25e80
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1] 0x7875d25f00
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1] 0x7875d25f80
	AssetUserData*[] AssetUserData;//[Offset: 0x88, Size: 0x10] 0x7875c0e3e0

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8] 0x7875d26080
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4] 0x7875d26100
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4] 0x7875d26180
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4] 0x7875d26200
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7875d26280
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x7875d26300
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x7875d24280
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x7875d24300
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1] 0x7875d24380
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1] 0x7875d24400

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4] 0x78c24ecc80
	int Y;//[Offset: 0x4, Size: 0x4] 0x78c24ecd00

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4] 0x78c24eb980
	int B;//[Offset: 0x4, Size: 0x4] 0x78c24eba00
	int C;//[Offset: 0x8, Size: 0x4] 0x78c24eba80
	int D;//[Offset: 0xc, Size: 0x4] 0x78c24ebb00

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4] 0x7876123f80

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8] 0x78e22bf580
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10] 0x78e22bf600
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10] 0x7875d433a0
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7875d43440
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x96358f8 0x78e2295800
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x9635cd8 0x78e22958e0
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x9635c20 0x78e22959c0
	PhysicalMaterial* GetPhysicalMaterial();// 0x9635d14 0x78e2295aa0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x9635adc 0x78e2295b80
	Material* GetBaseMaterial();// 0x9635d50 0x78e2295c60

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4] 0x78e2561380
	byte AddressX;//[Offset: 0x2c, Size: 0x1] 0x78e2561400
	byte AddressY;//[Offset: 0x2d, Size: 0x1] 0x78e2561480

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c] 0x78e25d2580

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10] 0x7875b0c700
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10] 0x7875b0c780
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4] 0x7875b0c800
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4] 0x7875b0c880
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875b0c900
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4] 0x7875b0c980
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10] 0x7875b0ca00
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10] 0x7875b0ca80
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10] 0x7875b0cb00
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4] 0x7875b0cb80
	float NormalScale;//[Offset: 0x64, Size: 0x4] 0x7875b0cc00
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4] 0x7875b0cc80
	float IOR;//[Offset: 0x6c, Size: 0x4] 0x7875b0cd00
	float Roughness0;//[Offset: 0x70, Size: 0x4] 0x7875b0cd80
	float Roughness1;//[Offset: 0x74, Size: 0x4] 0x7875b0ce00
	float LobeMix;//[Offset: 0x78, Size: 0x4] 0x7875b0ce80
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10] 0x7875b0cf00

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4] 0x78c24ec680
	float G;//[Offset: 0x4, Size: 0x4] 0x78c24ec700
	float B;//[Offset: 0x8, Size: 0x4] 0x78c24ec780
	float A;//[Offset: 0xc, Size: 0x4] 0x78c24ec800

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4] 0x7875acdb00
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4] 0x7875acdb80
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4] 0x7875acdc00
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875acdc80
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7875acdd00
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7875acdd80
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7875acde00
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7875acde80

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4] 0x7875acdf00
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4] 0x7875acdf80
	FName TextureName;//[Offset: 0x8, Size: 0x8] 0x7875ace000

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78e24d8b00
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1] 0x78e237e340

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875acb880
	byte Association;//[Offset: 0x8, Size: 0x1] 0x7875acb900
	int Index;//[Offset: 0xc, Size: 0x4] 0x7875acb980

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78e24cb280
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8] 0x78e24cb300
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8] 0x78e24cb380
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0x14] 0x78e24cb400
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0x14] 0x78e24cb480
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0x14] 0x78e24cb500
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0x14] 0x78e24cb580
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0x14] 0x78e24c9500
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0x14] 0x78e24c9580
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1] 0x78e24c9600
	byte BlendMode;//[Offset: 0x151, Size: 0x1] 0x78e24c9680
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1] 0x78e24c9700
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1] 0x78e24c9780
	byte ShadingModel;//[Offset: 0x154, Size: 0x1] 0x78e24c9800
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1] 0x78e24c9880
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2] 0x78e24c9900
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4] 0x78e24c9980
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0x14] 0x78e24c9a00
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0x14] 0x78e24c9a80
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x18] 0x78e24c9b00
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0x14] 0x78e24c9b80
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0x14] 0x78e24c9c00
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1] 0x78e24c9c80
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1] 0x78e24c9d00
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1] 0x78e24c9d80
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1] 0x78e24c9e00
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1] 0x78e24c9e80
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1] 0x78e24c9f00
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1] 0x78e24c9f80
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1] 0x78e24ca000
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1] 0x78e24ca080
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1] 0x78e24ca100
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4] 0x78e24ca180
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4] 0x78e24ca200
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4] 0x78e24ca280
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4] 0x78e24ca300
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4] 0x78e24ca380
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4] 0x78e24ca400
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4] 0x78e24ca480
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10] 0x78e24ca500
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4] 0x78e24c8480
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1] 0x78e24c8500
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1] 0x78e24c8580
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1] 0x78e24c8600
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1] 0x78e24c8680
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1] 0x78e24c8700
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1] 0x78e24c8780
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1] 0x78e24c8800
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1] 0x78e24c8880
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1] 0x78e24c8900
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1] 0x78e24c8980
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1] 0x78e24c8a00
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1] 0x78e24c8a80
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1] 0x78e24c8b00
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1] 0x78e24c8b80
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1] 0x78e24c8c00
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1] 0x78e24c8c80
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1] 0x78e24c8d00
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1] 0x78e24c8d80
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1] 0x78e24c8e00
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1] 0x78e24c8e80
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1] 0x78e24c8f00
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1] 0x78e24c8f80
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1] 0x78e24c9000
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1] 0x78e24c9080
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1] 0x78e24c9100
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1] 0x78e24c9180
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1] 0x78e24c9200
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1] 0x78e24c9280
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1] 0x78e24c9300
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1] 0x78e24c9380
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1] 0x78e24c9400
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1] 0x78e24c9480
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1] 0x78e24c7400
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1] 0x78e24c7480
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1] 0x78e24c7500
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1] 0x78e24c7580
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1] 0x78e24c7600
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fc, Size: 0x1] 0x78e24c7680
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1] 0x78e24c7700
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1] 0x78e24c7780
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1] 0x78e24c7800
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1] 0x78e24c7880
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1] 0x78e24c7900
	bool WriteDepthToTranslucentMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1] 0x78e24c7980
	byte ShadingRate;//[Offset: 0x1ff, Size: 0x1] 0x78e24c7a00
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78e24c7a80
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78e24c7b00
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x78e24c7b80
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x78e24c7c00
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x78e24c7c80
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1] 0x78e24c7d00
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x200, Size: 0x1] 0x78e24c7d80
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x200, Size: 0x1] 0x78e24c7e00
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1] 0x78e24c7e80
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1] 0x78e24c7f00
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x201, Size: 0x1] 0x78e24c7f80
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x201, Size: 0x1] 0x78e24c8000
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x201, Size: 0x1] 0x78e24c8080
	byte BlendableLocation;//[Offset: 0x202, Size: 0x1] 0x78e24c8100
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x203, Size: 0x1] 0x78e24c8180
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x203, Size: 0x1] 0x78e24c8200
	byte StencilCompare;//[Offset: 0x204, Size: 0x1] 0x78e24c8280
	byte StencilRefValue;//[Offset: 0x205, Size: 0x1] 0x78e24c8300
	byte RefractionMode;//[Offset: 0x206, Size: 0x1] 0x78e24c8380
	int BlendablePriority;//[Offset: 0x208, Size: 0x4] 0x78e24c8400
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1] 0x78e24c6380
	uint32 UsageFlagWarnings;//[Offset: 0x210, Size: 0x4] 0x78e24c6400
	float RefractionDepthBias;//[Offset: 0x214, Size: 0x4] 0x78e24c6480
	Guid StateId;//[Offset: 0x218, Size: 0x10] 0x78e24c6500
	float MaxDisplacement;//[Offset: 0x228, Size: 0x4] 0x78e24c6580
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x260, Size: 0x1d8] 0x78e24c6600

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7878052300
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x7878052380
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x7878052400

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2] 0x7875ac2700

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4] 0x7878052500

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4] 0x7878052580
	FName InputName;//[Offset: 0x4, Size: 0x8] 0x7878052600
	FName ExpressionName;//[Offset: 0xc, Size: 0x8] 0x7878052680

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x150] 0x7875acbe80
	Object*[] ReferencedTextures;//[Offset: 0x150, Size: 0x10] 0x78759ebaa0
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x160, Size: 0x10] 0x78759ebb40
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x170, Size: 0x10] 0x78759ebbe0
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x180, Size: 0x10] 0x78759ebc80
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x190, Size: 0x10] 0x78759ebd20
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1a0, Size: 0x10] 0x78759ebdc0
	FName[] DynamicParameterNames;//[Offset: 0x1b0, Size: 0x10] 0x78759ebe60
	bool[] QualityLevelsUsed;//[Offset: 0x1c0, Size: 0x10] 0x78759ebf00
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1] 0x7875acc500
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 0x1] 0x7875acc580

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x30] 0x7875acbb00
	float[] ScalarValues;//[Offset: 0xf0, Size: 0x10] 0x78759ee020
	LinearColor[] VectorValues;//[Offset: 0x100, Size: 0x10] 0x78759ee0c0
	Texture*[] TextureValues;//[Offset: 0x110, Size: 0x10] 0x78759ee160
	Font*[] FontValues;//[Offset: 0x120, Size: 0x10] 0x78759ee200
	int[] FontPageValues;//[Offset: 0x130, Size: 0x10] 0x78759ee2a0
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x140, Size: 0x10] 0x78759eba00

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10] 0x78759ede40
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10] 0x78759edee0
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10] 0x78759edf80

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1] 0x78e2378c60
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10] 0x78e2378d00
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10] 0x78e2378da0
	int IsRemapped;//[Offset: 0x58, Size: 0x4] 0x78e2410e00
	float EmScale;//[Offset: 0x5c, Size: 0x4] 0x78e2410e80
	float Ascent;//[Offset: 0x60, Size: 0x4] 0x78e2410f00
	float Descent;//[Offset: 0x64, Size: 0x4] 0x78e2410f80
	float Leading;//[Offset: 0x68, Size: 0x4] 0x78e2411000
	int Kerning;//[Offset: 0x6c, Size: 0x4] 0x78e2411080
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8] 0x78e23ff800
	int NumCharacters;//[Offset: 0x118, Size: 0x4] 0x78e23ff880
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10] 0x78e2378e40
	float ScalingFactor;//[Offset: 0x130, Size: 0x4] 0x78e23ff980
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4] 0x78e23ffa00
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8] 0x78e23ffa80
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38] 0x78e23ffb00

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4] 0x7875ac2280
	int StartV;//[Offset: 0x4, Size: 0x4] 0x7875ac2300
	int USize;//[Offset: 0x8, Size: 0x4] 0x7875ac2380
	int VSize;//[Offset: 0xc, Size: 0x4] 0x7875ac2400
	byte TextureIndex;//[Offset: 0x10, Size: 0x1] 0x7875ac2480
	int VerticalOffset;//[Offset: 0x14, Size: 0x4] 0x7875ac2500

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10] 0x7875ac3500
	float Height;//[Offset: 0x10, Size: 0x4] 0x7875ac3580
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7875ac3600
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7875ac3680
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7875ac3700
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7875ac3780
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7875ac3800
	byte CharacterSet;//[Offset: 0x15, Size: 0x1] 0x7875ac3880
	FString Chars;//[Offset: 0x18, Size: 0x10] 0x7875ac3900
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10] 0x7875ac3980
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10] 0x7875ac3a00
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10] 0x7875ac3a80
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7875ac3b00
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7875ac3b80
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10] 0x7875ac3c00
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7875ac3c80
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4] 0x7875ac3d00
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4] 0x7875ac3d80
	int XPadding;//[Offset: 0x78, Size: 0x4] 0x7875ac3e00
	int YPadding;//[Offset: 0x7c, Size: 0x4] 0x7875ac3e80
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4] 0x7875ac3f00
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4] 0x7875ac3f80
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4] 0x7875ac4000
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4] 0x7875ac4080
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7875ac4100
	int Kerning;//[Offset: 0x94, Size: 0x4] 0x7875ac4180
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x7875ac4200
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4] 0x7875ac2180
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4] 0x7875ac2200

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10] 0x7875966800
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18] 0x7875966880
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10] 0x787800aec0

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10] 0x787800ae20

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875966a00
	FontData Font;//[Offset: 0x8, Size: 0x20] 0x7875966d00

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10] 0x7875966a80
	enum Hinting;//[Offset: 0x10, Size: 0x1] 0x787800ace0
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1] 0x787800ad80
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4] 0x7875966c00
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8] 0x7875966c80

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10] 0x7875966e00
	float ScalingFactor;//[Offset: 0x10, Size: 0x4] 0x7875966e80

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10] 0x787800ac40
	FString Cultures;//[Offset: 0x28, Size: 0x10] 0x7875966980

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78a8150980
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78a8150a00

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78a8150a80
	int Value;//[Offset: 0x4, Size: 0x4] 0x78a8150b00

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x7875acbf80
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8] 0x7875acc000

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10] 0x7875acc100
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8] 0x7875acc180

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10] 0x78e24db580
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10] 0x78e237f9c0
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10] 0x78e237fa60

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4] 0x7875acd700

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875acd800
	Guid ID;//[Offset: 0x8, Size: 0x10] 0x7875acd880

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10] 0x7875acd780

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10] 0x7875d43760
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e22bc880
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8] 0x78e22bc900
	float GrassDensity;//[Offset: 0x48, Size: 0x4] 0x78e22bc980
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4] 0x78e22bca00
	int StartCullDistance;//[Offset: 0x50, Size: 0x4] 0x78e22bca80
	int EndCullDistance;//[Offset: 0x54, Size: 0x4] 0x78e22bcb00
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e22bcb80
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78e22bcc00

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8] 0x78759c2480
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10] 0x787800ba00
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4] 0x78759c2580
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78759c2600
	float PlacementJitter;//[Offset: 0x20, Size: 0x4] 0x78759c2680
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4] 0x78759c2700
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4] 0x78759c2780
	int MinLOD;//[Offset: 0x2c, Size: 0x4] 0x78759c2800
	enum Scaling;//[Offset: 0x30, Size: 0x1] 0x787800baa0
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8] 0x78759c2900
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8] 0x78759c2980
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8] 0x78759c2a00
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78759c2a80
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78759c2b00
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1] 0x78759c2b80
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1] 0x78759c2c00
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78759c2c80
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78759c2d00
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78759c2d80

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4] 0x78e25d1e80
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 0x4] 0x78e25d1f00
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 0x10] 0x78e24e6be0
	float LightmapUVDensity;//[Offset: 0x98, Size: 0x4] 0x78e25d2000
	int LightMapResolution;//[Offset: 0x9c, Size: 0x4] 0x78e25d2080
	int LightMapCoordinateIndex;//[Offset: 0xa0, Size: 0x4] 0x78e25d2100
	float DistanceFieldSelfShadowBias;//[Offset: 0xa4, Size: 0x4] 0x78e25d0080
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8] 0x78e25d0100
	int LODForCollision;//[Offset: 0xb0, Size: 0x4] 0x78e25d0180
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78e25d0200
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x78e25d0280
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x78e25d0300
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x78e25d0380
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1] 0x78e25d0400
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1] 0x78e25d0480
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 0x1] 0x78e25d0500
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1] 0x78e25d0580
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb5, Size: 0x1] 0x78e25d0600
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10] 0x78e24e6c80
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc] 0x78e25d0700
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc] 0x78e25d0780
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c] 0x78e25d0800
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4] 0x78e25d0880
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10] 0x78e24e6d20
	Object* EditableMesh;//[Offset: 0x140, Size: 0x8] 0x78e25d0980
	NavCollisionBase* NavCollision;//[Offset: 0x148, Size: 0x8] 0x78e25d0a00
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x97363d4 0x78e259cf00
	void RemoveSocket(StaticMeshSocket* Socket);// 0x9735c54 0x78e259cfe0
	StaticMaterial[] GetStaticMaterials();// 0x97364e8 0x78e259d0c0
	int GetNumSections(int InLOD);// 0x9736064 0x78e259d1a0
	int GetNumLODs();// 0x97361ec 0x78e259d280
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x9736614 0x78e259d360
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x9736570 0x78e259d440
	int GetMaterialIndex(FName MaterialSlotName);// 0x9735e54 0x78e259d520
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x9735fb4 0x78e259d600
	BoxSphereBounds GetBounds();// 0x9736180 0x78e259d6e0
	Box GetBoundingBox();// 0x9736114 0x78e259d7c0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x9735cfc 0x78e259d8a0
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x973632c 0x78e259d980
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x9736220 0x78e259da60
	void AddSocket(StaticMeshSocket* Socket);// 0x9735dac 0x78e259db40
	FName AddMaterial(MaterialInterface* Material);// 0x9735f04 0x78e259dc20

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7875b0ab00
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7875b0ab80
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8] 0x7875b0ac00
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14] 0x7875b0ac80

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a85580
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7875a85600
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4] 0x7875a85680

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4] 0x7876123e80

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78e25d1c00
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc] 0x78e25d1c80
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc] 0x78e25d1d00
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc] 0x78e25d1d80
	FString Tag;//[Offset: 0x58, Size: 0x10] 0x78e25d1e00

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc] 0x78c24ee300
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc] 0x78c24ee380
	float SphereRadius;//[Offset: 0x18, Size: 0x4] 0x78c24ee400

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e24dbb00

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x88cff54 0x78e2340da0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x88cfb08 0x78e2340e80
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x88d0098 0x78e2340f60
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x88cfc14 0x78e2341040

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x889e6e0 0x78e2341120
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x889c578 0x78e2341200
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x889c480 0x78e23412e0
	void ReversePolygonFacing(PolygonID PolygonID);// 0x889c3cc 0x78e23413c0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x88a0e24 0x78e23414a0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x88a0b20 0x78e2341580
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x88a0228 0x78e2341660
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x889fbac 0x78e2341740
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x889f530 0x78e2341820
	void ReserveNewEdges(int NumberOfNewEdges);// 0x88a06ec 0x78e2341900
	bool IsVertexValid(VertexID VertexID);// 0x88a0bc8 0x78e23419e0
	bool IsVertexOrphaned(VertexID VertexID);// 0x889f214 0x78e2341ac0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x88a0794 0x78e2341ba0
	bool IsTriangleValid(const TriangleID TriangleID);// 0x889fc54 0x78e2341c80
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x889d7ac 0x78e231e780
	bool IsPolygonValid(PolygonID PolygonID);// 0x889f5d8 0x78e231e860
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x889f2d4 0x78e231e940
	bool IsEmpty();// 0x88a0ecc 0x78e231ea20
	bool IsEdgeValid(EdgeID EdgeID);// 0x88a02d0 0x78e231eb00
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x889dfa8 0x78e231ebe0
	bool IsEdgeInternal(EdgeID EdgeID);// 0x889e0b4 0x78e231ecc0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x889ee20 0x78e231eda0
	Vector GetVertexPosition(VertexID VertexID);// 0x889e7e4 0x78e231ee80
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x889f10c 0x78e231ef60
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x889e624 0x78e231f040
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x889e51c 0x78e231f120
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x889d140 0x78e231f200
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x889c6b8 0x78e231f2e0
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x889e404 0x78e231f3c0
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x889e230 0x78e231f4a0
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x889ec4c 0x78e231f580
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x889ea78 0x78e231f660
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x889eff4 0x78e231f740
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x889e8a4 0x78e231f820
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x889d478 0x78e231f900
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x889d694 0x78e231f9e0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x889d590 0x78e231fac0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x889d86c 0x78e231fba0
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x889d928 0x78e231fc80
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x889d360 0x78e231fd60
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x889d248 0x78e231fe40
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x889cc80 0x78e231ff20
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x889ce54 0x78e231caa0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x889d028 0x78e231cb80
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x889c7c0 0x78e231cc60
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x889cb68 0x78e231cd40
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x889ca50 0x78e231ce20
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x889c200 0x78e231cf00
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x889c87c 0x78e231cfe0
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x889ed64 0x78e231d0c0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x889e348 0x78e231d1a0
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x889e174 0x78e231d280
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x889eb90 0x78e231d360
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x889e9bc 0x78e231d440
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x889ef38 0x78e231d520
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x889cd98 0x78e231d600
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x889cf6c 0x78e231d6e0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x889c994 0x78e231d7c0
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x889c144 0x78e231d8a0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x889ddd4 0x78e231d980
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x889dc00 0x78e231da60
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x889d9e4 0x78e231db40
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x889dafc 0x78e231dc20
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x889de90 0x78e231dd00
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x889dcbc 0x78e231dde0
	void Empty();// 0x88a0f04 0x78e231dec0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x88a0854 0x78e231dfa0
	void DeleteVertex(VertexID VertexID);// 0x88a0c88 0x78e231e080
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x889fd14 0x78e231e160
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x889f394 0x78e231e240
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x889f698 0x78e231e320
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x88a0390 0x78e231e400
	void CreateVertexWithID(VertexID VertexID);// 0x88a0d3c 0x78e231e4e0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x88a096c 0x78e231e5c0
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x88a0a64 0x78e231e6a0
	VertexID CreateVertex();// 0x88a0df0 0x78e231adc0
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x889feec 0x78e231aea0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x88a00a4 0x78e231af80
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x889f870 0x78e231b060
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x889f448 0x78e231b140
	PolygonGroupID CreatePolygonGroup();// 0x889f4fc 0x78e231b220
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x889fa28 0x78e231b300
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x88a04a8 0x78e231b3e0
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x88a05e4 0x78e231b4c0
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x889c318 0x78e231b5a0

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4] 0x7876126980

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4] 0x78c24ed600
	float Y;//[Offset: 0x4, Size: 0x4] 0x78c24ed680

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4] 0x78a8150680
	float Max;//[Offset: 0x4, Size: 0x4] 0x78a8150700

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4] 0x78c24eb600
	float Y;//[Offset: 0x4, Size: 0x4] 0x78c24eb680
	float Z;//[Offset: 0x8, Size: 0x4] 0x78c24eb700
	float W;//[Offset: 0xc, Size: 0x4] 0x78c24eb780

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4] 0x7878054f00
	float Time;//[Offset: 0x4, Size: 0x4] 0x7878054f80
	float Distance;//[Offset: 0x8, Size: 0x4] 0x7878055000
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc] 0x7878055080
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc] 0x7878055100
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc] 0x7878055180
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc] 0x7878055200
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc] 0x7878055280
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc] 0x7878053200
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4] 0x7878053280
	int Item;//[Offset: 0x58, Size: 0x4] 0x7878053300
	byte ElementIndex;//[Offset: 0x5c, Size: 0x1] 0x7878053380
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 0x1] 0x7878053400
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 0x1] 0x7878053480
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8] 0x7878053500
	Actor* Actor;//[Offset: 0x68, Size: 0x8] 0x7878053580
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8] 0x7878053680
	FName BoneName;//[Offset: 0x78, Size: 0x8] 0x7878053700
	FName MyBoneName;//[Offset: 0x80, Size: 0x8] 0x7878053780

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x9634200 0x78e24b7240
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x9634308 0x78e24b7320
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x9634574 0x78e24b3a40
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x963467c 0x78e24b3b20
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x96348e8 0x78e24b3c00
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x96349f0 0x78e24b3ce0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x9633f40 0x78e24b3dc0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x963407c 0x78e24b3ea0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x963414c 0x78e24b3f80
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x96343f8 0x78e24b4060
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x96344c4 0x78e24b4140
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x963476c 0x78e24b4220
	float K2_GetScalarParameterValue(FName ParameterName);// 0x9634838 0x78e24b4300
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x9633e44 0x78e24b43e0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x9633cf4 0x78e24b44c0
	void CopyInterpParameters(MaterialInstance* Source);// 0x9633d9c 0x78e24b45a0

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8] 0x78e22bee80
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8] 0x78e22bef00
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8] 0x78e22bef80
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78e22bf000
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78e22bf080
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10] 0x7875d42fe0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10] 0x7875d43080
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10] 0x7875d43120
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10] 0x7875d431c0
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10] 0x7875d43260
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8] 0x78e22bf380
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40] 0x78e22bf400
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x150] 0x78e22bf480
	Object*[] CachedReferencedTextures;//[Offset: 0x2d8, Size: 0x10] 0x7875d43300

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875acc700
	float ParameterValue;//[Offset: 0x10, Size: 0x4] 0x7875acc780
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x7875acc800

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875acc880
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10] 0x7875acc900
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10] 0x7875acc980

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875acca00
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x7875acca80
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x7875accb00

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875accb80
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8] 0x7875accc00
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10] 0x7875accc80

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875accd00
	Font* FontValue;//[Offset: 0x10, Size: 0x8] 0x7875accd80
	int FontPage;//[Offset: 0x18, Size: 0x4] 0x7875acce00
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10] 0x7875acce80

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ace080
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ace100
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ace180
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ace200
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875ace280
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875ace300
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875ace380
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875ace400
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875ace480
	byte BlendMode;//[Offset: 0x2, Size: 0x1] 0x7875ace500
	byte ShadingModel;//[Offset: 0x3, Size: 0x1] 0x7875ace580
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4] 0x7875ace600

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10] 0x7875b30a60
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10] 0x7875b30b00
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10] 0x7875b30ba0
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10] 0x7875b30c40

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7875b0d280

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10] 0x7875b0b700
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875b0b780
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10] 0x7875b0b800

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7875b0d380
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1] 0x7875b0d400
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1] 0x7875b0d480
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1] 0x7875b0d500

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4] 0x7875b0d600
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875b0d680

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40] 0x7875b0b680

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10] 0x78759edc60
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10] 0x78759edd00
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10] 0x78759edda0
	FString KeyString;//[Offset: 0x30, Size: 0x10] 0x7875acda80

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x7875b60300
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x7875b60380
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x7875b60400
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 0x1] 0x7875b60480
	float BaseEyeHeight;//[Offset: 0x22c, Size: 0x4] 0x7875b60500
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 0x1] 0x7875b60580
	enum AutoPossessAI;//[Offset: 0x231, Size: 0x1] 0x7875b33120
	byte RemoteViewPitch;//[Offset: 0x232, Size: 0x1] 0x7875b60680
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 0x8] 0x7875b331c0
	PlayerState* PlayerState;//[Offset: 0x240, Size: 0x8] 0x7875b60700
	Controller* LastHitBy;//[Offset: 0x250, Size: 0x8] 0x7875b60780
	Controller* Controller;//[Offset: 0x258, Size: 0x8] 0x7875b60800
	Vector ControlInputVector;//[Offset: 0x264, Size: 0xc] 0x7875b60880
	Vector LastControlInputVector;//[Offset: 0x270, Size: 0xc] 0x7875b60900
	void SpawnDefaultController();// 0x9688f2c 0x7875a52b60
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x96890a4 0x7875a52c40
	void ReceiveUnpossessed(Controller* OldController);// 0x6d94ba8 0x7875a52d20
	void ReceivePossessed(Controller* NewController);// 0x6d94ba8 0x7875a52e00
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x9689340 0x7875a52ee0
	void OnRep_PlayerState();// 0x968919c 0x7875a52fc0
	void OnRep_Controller();// 0x96891b8 0x7875a530a0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x9688998 0x7875a53180
	Vector K2_GetMovementInputVector();// 0x9688960 0x7875a53260
	bool IsPlayerControlled();// 0x9688fe4 0x7875a53340
	bool IsPawnControlled();// 0x9689228 0x7875a53420
	bool IsMoveInputIgnored();// 0x9688adc 0x7875a53500
	bool IsLocallyControlled();// 0x9689024 0x7875a535e0
	bool IsControlled();// 0x9689260 0x7875a536c0
	bool IsBotControlled();// 0x9688fa4 0x7875a537a0
	Vector GetPendingMovementInputVector();// 0x9688da4 0x7875a53880
	Vector GetNavAgentLocation();// 0x9689064 0x7875a53960
	PawnMovementComponent* GetMovementComponent();// 0x96894c0 0x7875a50080
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x9689298 0x7875a50160
	Vector GetLastMovementInputVector();// 0x9688d6c 0x7875a50240
	Rotator GetControlRotation();// 0x96891d4 0x7875a50320
	Controller* GetController();// 0x968920c 0x7875a50400
	Rotator GetBaseAimRotation();// 0x9688f64 0x7875a504e0
	void DetachFromControllerPendingDestroy();// 0x9688f48 0x7875a505c0
	Vector ConsumeMovementInputVector();// 0x9688d2c 0x7875a506a0
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x9688ddc 0x7875a50780
	void AddControllerYawInput(float Val);// 0x9688bcc 0x7875a50860
	void AddControllerRollInput(float Val);// 0x9688b1c 0x7875a50940
	void AddControllerPitchInput(float Val);// 0x9688c7c 0x7875a50a20

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 0x8] 0x7875cbc100
	delegate OnInstigatedAnyDamage;//[Offset: 0x238, Size: 0x10] 0x7875cbc180
	FName StateName;//[Offset: 0x248, Size: 0x8] 0x7875cbc200
	Pawn* Pawn;//[Offset: 0x250, Size: 0x8] 0x7875cbc280
	Character* Character;//[Offset: 0x260, Size: 0x8] 0x7875cbc300
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 0x8] 0x7875cbc380
	Rotator ControlRotation;//[Offset: 0x288, Size: 0xc] 0x7875cbc400
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1] 0x7875cbc480
	void UnPossess();// 0x94c9100 0x7875d13a40
	void StopMovement();// 0x94c90e4 0x7875d13b20
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x94c9770 0x7875d13c00
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x94c902c 0x7875d13ce0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x94c8f18 0x7875d13dc0
	void SetControlRotation(out const Rotator NewRotation);// 0x94c9874 0x7875d13ea0
	void ResetIgnoreMoveInput();// 0x94c9010 0x7875d13f80
	void ResetIgnoreLookInput();// 0x94c8efc 0x7875d14060
	void ResetIgnoreInputFlags();// 0x94c8ea0 0x7875d14140
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x6d94ba8 0x7875d14220
	void ReceivePossess(Pawn* PossessedPawn);// 0x6d94ba8 0x7875d14300
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x6d94ba8 0x7875d143e0
	void Possess(Pawn* InPawn);// 0x94c9114 0x7875d144c0
	void OnRep_PlayerState();// 0x94c95e0 0x7875d145a0
	void OnRep_Pawn();// 0x94c95fc 0x7875d14680
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x94c9618 0x7875d14760
	Pawn* K2_GetPawn();// 0x94c92f4 0x7875d14840
	bool IsPlayerController();// 0x94c9258 0x7875d14920
	bool IsMoveInputIgnored();// 0x94c8fd0 0x7875d14a00
	bool IsLookInputIgnored();// 0x94c8ebc 0x7875d14ae0
	bool IsLocalPlayerController();// 0x94c91fc 0x7875d14bc0
	bool IsLocalController();// 0x94c91bc 0x7875d14ca0
	Actor* GetViewTarget();// 0x94c92b8 0x7875d14d80
	Rotator GetDesiredRotation();// 0x94c9278 0x7875d14e60
	Rotator GetControlRotation();// 0x94c992c 0x7875d14f40
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x94c9328 0x7875d15020
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x94c9470 0x7875d15100
	PlayerController* CastToPlayerController();// 0x94c95ac 0x7875d151e0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 0x4] 0x78e256d500
	int PlayerId;//[Offset: 0x224, Size: 0x4] 0x78e256d580
	byte Ping;//[Offset: 0x228, Size: 0x1] 0x78e256d600
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 0x1] 0x78e256d680
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 0x1] 0x78e256b600
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 0x1] 0x78e256b680
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 0x1] 0x78e256b700
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 0x1] 0x78e256b780
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 0x1] 0x78e256b800
	int StartTime;//[Offset: 0x22c, Size: 0x4] 0x78e256b880
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 0x8] 0x78e24e3580
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 0x10] 0x78e256b900
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 0x28] 0x78e256b980
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 0x8] 0x78e256ba00
	FString PlayerNamePrivate;//[Offset: 0x2f8, Size: 0x10] 0x78e256ba80
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x6d94ba8 0x78e24bd360
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x6d94ba8 0x78e24bd440
	void OnRep_UniqueId();// 0x96b086c 0x78e24bd520
	void OnRep_Score();// 0x96b08dc 0x78e24bd600
	void OnRep_PlayerName();// 0x96b08c0 0x78e24bd6e0
	void OnRep_PlayerId();// 0x96b0888 0x78e24bd7c0
	void OnRep_bIsInactive();// 0x96b08a4 0x78e24bd8a0
	bool IsOnlyASpectator();// 0x96b079c 0x78e24bd980
	FString GetPlayerName();// 0x96b07bc 0x78e24bda60

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10] 0x7878007220

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8] 0x7875b67080
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 0x8] 0x7875b67100
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 0x8] 0x7875b67180
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 0x30] 0x7875b67200
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 0x30] 0x7875b67280
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 0x4] 0x7875b67300
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 0xc] 0x7875b67380
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10] 0x7875b65300
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4] 0x7875b65380
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4] 0x7875b65400
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1] 0x7875b65480
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1] 0x7875b65500
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4] 0x7875b65580
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x7875b65600
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1] 0x7875b65680
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1] 0x7875b65700
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1] 0x7875b65780
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1] 0x7875b65800
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1] 0x7875b65880
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1] 0x7875b65900
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1] 0x7875b65980
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1] 0x7875b65a00
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1] 0x7875b65a80
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1] 0x7875b65b00
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4] 0x7875b65b80
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4] 0x7875b65c00
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4] 0x7875b65c80
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4] 0x7875b65d00
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4] 0x7875b65d80
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4] 0x7875b65e00
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 0x4] 0x7875b65e80
	delegate OnReachedJumpApex;//[Offset: 0x358, Size: 0x10] 0x7875b65f00
	delegate MovementModeChangedDelegate;//[Offset: 0x378, Size: 0x10] 0x7875b65f80
	delegate OnCharacterMovementUpdated;//[Offset: 0x388, Size: 0x10] 0x7875b66000
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 0x38] 0x7875b66080
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40] 0x7875b66100
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10] 0x7875b33080
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98] 0x7875b66200
	void UnCrouch(bool bClientSimulation);// 0x94b2ad4 0x7875a53b20
	void StopJumping();// 0x94b3234 0x7875a53c00
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x94b2f7c 0x7875a53ce0
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x94b57e0 0x7875a53dc0
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x94b4244 0x7875a53ea0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x94b50ec 0x7875a53f80
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x94b4854 0x7875a54060
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x94b43b4 0x7875a54140
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x94b4c4c 0x7875a54220
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x94b53a4 0x7875a54300
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x94b2984 0x7875a543e0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x94b302c 0x7875a544c0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x94b2c44 0x7875a545a0
	void OnRep_RootMotion();// 0x94b2970 0x7875a54680
	void OnRep_ReplicatedBasedMovement();// 0x94b333c 0x7875a54760
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x94b3328 0x7875a54840
	void OnRep_IsCrouched();// 0x94b326c 0x7875a54920
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x6d94ba8 0x7875a54a00
	void OnLanded(out const HitResult Hit);// 0x6d94ba8 0x7875a54ae0
	void OnJumped();// 0x94b2de0 0x7875a54bc0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x94b2dfc 0x7875a54ca0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x6d94ba8 0x7875a54d80
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x6d94ba8 0x7875a54e60
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x6d94ba8 0x7875a54f40
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x6d94ba8 0x7875a55020
	void Jump();// 0x94b3250 0x7875a55100
	bool IsPlayingRootMotion();// 0x94b2938 0x7875a551e0
	bool IsPlayingNetworkedRootMotionMontage();// 0x94b28c8 0x7875a552c0
	bool IsJumpProvidingForce();// 0x94b317c 0x7875a553a0
	bool HasAnyRootMotion();// 0x94b2900 0x7875a55480
	AnimMontage* GetCurrentMontage();// 0x94b2f48 0x7875a55560
	Vector GetBaseTranslationOffset();// 0x94b3300 0x7875a55640
	Rotator GetBaseRotationOffsetRotator();// 0x94b3288 0x7875a51d60
	float GetAnimRootMotionTranslationScale();// 0x94b2894 0x7875a51e40
	void Crouch(bool bClientSimulation);// 0x94b2b8c 0x7875a51f20
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x94b3c88 0x7875a52000
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x94b56f4 0x7875a520e0
	void ClientCheatWalk();// 0x94b2a78 0x7875a521c0
	void ClientCheatGhost();// 0x94b2a40 0x7875a522a0
	void ClientCheatFly();// 0x94b2a5c 0x7875a52380
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x94b3450 0x7875a52460
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x94b3940 0x7875a52540
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x94b3eec 0x7875a52620
	void ClientAckGoodMove(float Timestamp);// 0x94b419c 0x7875a52700
	bool CanJumpInternal();// 0x94b31bc 0x7875a527e0
	bool CanJump();// 0x94b31fc 0x7875a528c0
	bool CanCrouch();// 0x94b2a94 0x7875a529a0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x94b3358 0x7875a52a80

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30] 0x78e2365180
	float BlendInTime;//[Offset: 0xd8, Size: 0x4] 0x78e2365200
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30] 0x78e2365280
	float BlendOutTime;//[Offset: 0x110, Size: 0x4] 0x78e2363200
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4] 0x78e2363280
	FName SyncGroup;//[Offset: 0x118, Size: 0x8] 0x78e2363300
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4] 0x78e2363380
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20] 0x78e2363400
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10] 0x78e2370d80
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10] 0x78e2370e20
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10] 0x78e2370ec0
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x78e2363600
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x78e2363680
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1] 0x78e2363700
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1] 0x78e2363780
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10] 0x78e2370f60
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10] 0x78e2371000
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28] 0x78e2363900
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8] 0x78e2363980
	float GetDefaultBlendOutTime();// 0x9452ddc 0x78e2349fc0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10] 0x78e2371280
	float SequenceLength;//[Offset: 0x90, Size: 0x4] 0x78e2362e80
	float RateScale;//[Offset: 0x94, Size: 0x4] 0x78e2362f00
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10] 0x78e2362f80
	float GetPlayLength();// 0x9461b14 0x78e234a0a0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78e233fb80
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10] 0x7875d4ea20
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10] 0x7875d4eac0

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4] 0x7875a4c180
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4] 0x7875a4c200
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4] 0x7875a4c280
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4] 0x7875a4c300
	FName NotifyName;//[Offset: 0x40, Size: 0x8] 0x7875a4c380
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8] 0x7875a4c400
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8] 0x7875a4c480
	float Duration;//[Offset: 0x58, Size: 0x4] 0x7875a4c500
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30] 0x7875a4c580
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7875a4c600
	byte MontageTickType;//[Offset: 0x91, Size: 0x1] 0x7875a4a580
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4] 0x7875a4a600
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1] 0x7875a4a680
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4] 0x7875a4a700
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1] 0x7875a4a780
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1] 0x7875a4a800
	int TrackIndex;//[Offset: 0xa4, Size: 0x4] 0x7875a4a880

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8] 0x7875a4ab80
	int SlotIndex;//[Offset: 0x10, Size: 0x4] 0x7875a4ac00
	int SegmentIndex;//[Offset: 0x14, Size: 0x4] 0x7875a4ac80
	byte LinkMethod;//[Offset: 0x18, Size: 0x1] 0x7875a4ad00
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1] 0x7875a4ad80
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4] 0x7875a4ae00
	float SegmentLength;//[Offset: 0x20, Size: 0x4] 0x7875a4ae80
	float LinkValue;//[Offset: 0x24, Size: 0x4] 0x7875a4af00
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8] 0x7875a4af80

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x6d94ba8 0x7875b812e0
	FString GetNotifyName();// 0x945d89c 0x7875b813c0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 0x8] 0x78e24e5d80
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 0x8] 0x78e24e5e20
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 0x8] 0x78e25c4a80
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 0x8] 0x78e25c4b00
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 0x18] 0x78e25c4b80
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 0xc] 0x78e25c4c00
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 0xc] 0x78e25c4c80
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 0x10] 0x78e24e5ec0
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 0x10] 0x78e24e5f60
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 0x10] 0x78e24e6000
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 0x4] 0x78e25c4e80
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 0x1] 0x78e25c4f00
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 0x1] 0x78e25c4f80
	byte AnimationMode;//[Offset: 0x8b7, Size: 0x1] 0x78e25c5000
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b9, Size: 0x1] 0x78e25c5080
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b9, Size: 0x1] 0x78e25c5100
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8b9, Size: 0x1] 0x78e25c5180
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8b9, Size: 0x1] 0x78e25c5200
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8b9, Size: 0x1] 0x78e25c5280
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8b9, Size: 0x1] 0x78e25c3200
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 0x1] 0x78e25c3280
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 0x1] 0x78e25c3300
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 0x1] 0x78e25c3380
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 0x1] 0x78e25c3400
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 0x1] 0x78e25c3480
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 0x1] 0x78e25c3500
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 0x1] 0x78e25c3580
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 0x1] 0x78e25c3600
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 0x1] 0x78e25c3680
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 0x1] 0x78e25c3700
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 0x1] 0x78e25c3780
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 0x1] 0x78e25c3800
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 0x1] 0x78e25c3880
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 0x1] 0x78e25c3900
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 0x1] 0x78e25c3980
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 0x1] 0x78e25c3a00
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 0x1] 0x78e25c3a80
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 0x1] 0x78e25c3b00
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 0x1] 0x78e25c3b80
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 0x1] 0x78e25c3c00
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 0x1] 0x78e25c3c80
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 0x1] 0x78e25c3d00
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 0x1] 0x78e25c3d80
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 0x1] 0x78e25c3e00
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 0x1] 0x78e25c3e80
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 0x1] 0x78e25c3f00
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 0x2] 0x78e25c3f80
	float ClothBlendWeight;//[Offset: 0x8c8, Size: 0x4] 0x78e25c4000
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1] 0x78e25c4080
	FName[] DisallowedAnimCurves;//[Offset: 0x8d0, Size: 0x10] 0x78e24e60a0
	BodySetup* BodySetup;//[Offset: 0x8e0, Size: 0x8] 0x78e25c4180
	delegate OnConstraintBroken;//[Offset: 0x8f0, Size: 0x10] 0x78e25c4200
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x900, Size: 0x8] 0x78e24e6140
	float TeleportDistanceThreshold;//[Offset: 0x9d8, Size: 0x4] 0x78e25c2180
	float TeleportRotationThreshold;//[Offset: 0x9dc, Size: 0x4] 0x78e25c2200
	uint32 LastPoseTickFrame;//[Offset: 0x9e8, Size: 0x4] 0x78e25c2280
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa40, Size: 0x8] 0x78e25c2300
	delegate OnAnimInitialized;//[Offset: 0xb10, Size: 0x10] 0x78e25c2380
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x96f633c 0x78e259ace0
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x96f5480 0x78e2597400
	void ToggleDisablePostProcessBlueprint();// 0x96f74f4 0x78e25974e0
	void TermBodiesBelow(FName ParentBoneName);// 0x96f4014 0x78e25975c0
	void SuspendClothingSimulation();// 0x96f55a4 0x78e25976a0
	void Stop();// 0x96f5db8 0x78e2597780
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x96f56bc 0x78e2597860
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x96f5204 0x78e2597940
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x96f52b4 0x78e2597a20
	void SetTeleportRotationThreshold(float Threshold);// 0x96f4d68 0x78e2597b00
	void SetTeleportDistanceThreshold(float Threshold);// 0x96f4c8c 0x78e2597be0
	void SetPosition(float InPos, bool bFireNotifies);// 0x96f5c84 0x78e2597cc0
	void SetPlayRate(float Rate);// 0x96f5ba8 0x78e2597da0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x96f3ebc 0x78e2597e80
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x96f4a14 0x78e2597f60
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x96f5858 0x78e2598040
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x96f3e0c 0x78e2598120
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x96f472c 0x78e2598200
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x96f4924 0x78e25982e0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x96f740c 0x78e25983c0
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x96f5154 0x78e25984a0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x96f3264 0x78e2598580
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x96f3360 0x78e2598660
	void SetClothMaxDistanceScale(float Scale);// 0x96f55e0 0x78e2598740
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x96f4b60 0x78e2598820
	void SetAnimClass(class Object NewClass);// 0x96f67d4 0x78e2598900
	void SetAnimationMode(byte InAnimationMode);// 0x96f6054 0x78e25989e0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x96f5e7c 0x78e2598ac0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x96f2ef0 0x78e2598ba0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x96f5388 0x78e2598c80
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x96f4e44 0x78e2598d60
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x96f5080 0x78e2598e40
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x96f3634 0x78e2598f20
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x96f377c 0x78e2599000
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x96f34a4 0x78e2595720
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x96f3f64 0x78e2595800
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x96f3bac 0x78e25958e0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x96f3cbc 0x78e25959c0
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x96f3a10 0x78e2595aa0
	void ResumeClothingSimulation();// 0x96f5590 0x78e2595b80
	void ResetClothTeleportMode();// 0x96f5544 0x78e2595c60
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x96f60fc 0x78e2595d40
	void ResetAllowedAnimCurveEvaluation();// 0x96f4f50 0x78e2595e20
	void ResetAllBodiesSimulatePhysics();// 0x96f3ca8 0x78e2595f00
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x96f5f24 0x78e2595fe0
	void Play(bool bLooping);// 0x96f5dcc 0x78e25960c0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x96f59a0 0x78e25961a0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x96f648c 0x78e2596280
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x96f63e4 0x78e2596360
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x96f4528 0x78e2596440
	bool IsPlaying();// 0x96f5d80 0x78e2596520
	bool IsClothingSimulationSuspended();// 0x96f5558 0x78e2596600
	bool IsBodyGravityEnabled(FName BoneName);// 0x96f4870 0x78e25966e0
	bool HasValidAnimationInstance();// 0x96f61a4 0x78e25967c0
	float GetTeleportRotationThreshold();// 0x96f4e10 0x78e25968a0
	float GetTeleportDistanceThreshold();// 0x96f4d34 0x78e2596980
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x96f6ee4 0x78e2596a60
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x96f6884 0x78e2596b40
	Vector GetSkeletalCenterOfMass();// 0x96f43ec 0x78e2596c20
	AnimInstance* GetPostProcessInstance();// 0x96f6738 0x78e2596d00
	float GetPosition();// 0x96f5c50 0x78e2596de0
	float GetPlayRate();// 0x96f5b74 0x78e2596ec0
	float GetMorphTarget(FName MorphTargetName);// 0x96f5794 0x78e2596fa0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x96f628c 0x78e2597080
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x96f61dc 0x78e2597160
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x96f657c 0x78e2597240
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x96f6688 0x78e2597320
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x96f70a4 0x78e2593a40
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x96f6ae4 0x78e2593b20
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x96f7258 0x78e2593c00
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x96f6ce4 0x78e2593ce0
	bool GetDisablePostProcessBlueprint();// 0x96f74bc 0x78e2593dc0
	bool GetDisableAnimCurves();// 0x96f5130 0x78e2593ea0
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x96f2d48 0x78e2593f80
	float GetClothMaxDistanceScale();// 0x96f5688 0x78e2594060
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x96f4c58 0x78e2594140
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x96f4424 0x78e2594220
	AnimInstance* GetAnimInstance();// 0x96f676c 0x78e2594300
	class Object GetAnimClass();// 0x96f67a0 0x78e25943e0
	byte GetAnimationMode();// 0x96f6020 0x78e25944c0
	bool GetAllowRigidBodyAnimNode();// 0x96f5364 0x78e25945a0
	bool GetAllowedAnimCurveEvaluate();// 0x96f5060 0x78e2594680
	void ForceClothNextUpdateTeleportAndReset();// 0x96f55b8 0x78e2594760
	void ForceClothNextUpdateTeleport();// 0x96f55cc 0x78e2594840
	FName FindConstraintBoneName(int ConstraintIndex);// 0x96f31b4 0x78e2594920
	void ClearMorphTargets();// 0x96f5844 0x78e2594a00
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x96f3078 0x78e2594ae0
	void BindClothToMasterPoseComponent();// 0x96f5530 0x78e2594bc0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x96f4f64 0x78e2594ca0
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x96f40bc 0x78e2594d80
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x96f4254 0x78e2594e60
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x96f38c4 0x78e2594f40

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x478, Size: 0x8] 0x78e25a0780
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x480, Size: 0x8] 0x78e25a0800
	enum[] SkinCacheUsage;//[Offset: 0x488, Size: 0x10] 0x78e24e3080
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x498, Size: 0x10] 0x78e24e3120
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a0, Size: 0x8] 0x78e25a0980
	int ForcedLodModel;//[Offset: 0x5a8, Size: 0x4] 0x78e25a0a00
	int MinLodModel;//[Offset: 0x5ac, Size: 0x4] 0x78e25a0a80
	float StreamingDistanceMultiplier;//[Offset: 0x5b8, Size: 0x4] 0x78e25a0b00
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5c8, Size: 0x10] 0x78e24e31c0
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5fc, Size: 0x1] 0x78e24e3260
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5fe, Size: 0x1] 0x78e25a0c80
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5fe, Size: 0x1] 0x78e25a0d00
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5fe, Size: 0x1] 0x78e25a0d80
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5fe, Size: 0x1] 0x78e25a0e00
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5fe, Size: 0x1] 0x78e25a0e80
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ff, Size: 0x1] 0x78e25a0f00
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ff, Size: 0x1] 0x78e25a0f80
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ff, Size: 0x1] 0x78e25a1000
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5ff, Size: 0x1] 0x78e25a1080
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5ff, Size: 0x1] 0x78e256f800
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5ff, Size: 0x1] 0x78e256f880
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5ff, Size: 0x1] 0x78e256f900
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5ff, Size: 0x1] 0x78e256f980
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1] 0x78e256fa00
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 0x1] 0x78e256fa80
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x600, Size: 0x1] 0x78e256fb00
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x600, Size: 0x1] 0x78e256fb80
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x600, Size: 0x1] 0x78e256fc00
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x600, Size: 0x1] 0x78e256fc80
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x601, Size: 0x1] 0x78e256fd00
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x601, Size: 0x1] 0x78e256fd80
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x604, Size: 0x4] 0x78e256fe00
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x618, Size: 0x1c] 0x78e256fe80
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 0x40] 0x78e256ff00
	void UnloadSkinWeightProfile(FName InProfileName);// 0x96ffb8c 0x78e25914a0
	void UnHideBoneByName(FName BoneName);// 0x96fed70 0x78e2591580
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x96ff280 0x78e2591660
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x96ff0ac 0x78e2591740
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x96feb38 0x78e2591820
	void ShowAllMaterialSections(int LODIndex);// 0x96fea90 0x78e2591900
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x96ff9b0 0x78e25919e0
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x96fff58 0x78e2591ac0
	bool SetSkinWeightProfile(FName InProfileName);// 0x96ffc48 0x78e2591ba0
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x96ffda4 0x78e2591c80
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x9700380 0x78e24be780
	void SetRenderStatic(bool bNewValue);// 0x96fe8e4 0x78e24be860
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x96ff858 0x78e24be940
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x96ff700 0x78e24bea20
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x9700a88 0x78e24beb00
	void SetMinLOD(int InNewMinLOD);// 0x97009ac 0x78e24bebe0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x96ff604 0x78e24becc0
	void SetForcedLOD(int InNewForcedLOD);// 0x9700904 0x78e24beda0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x9700770 0x78e24bee80
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x9700820 0x78e24bef60
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x97006c8 0x78e24bf040
	bool IsUsingSkinWeightProfile();// 0x96ffb50 0x78e24bf120
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x96fe994 0x78e24bf200
	bool IsBoneHiddenByName(FName BoneName);// 0x96fecbc 0x78e24bf2e0
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x96fee18 0x78e24bf3c0
	int GetVertexOffsetUsage(int LODIndex);// 0x96ffaa0 0x78e24bf4a0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x9700064 0x78e24bf580
	FName GetSocketBoneName(FName InSocketName);// 0x9700484 0x78e24bf660
	Vector GetRefPosePosition(int BoneIndex);// 0x96ff454 0x78e24bf740
	FName GetParentBone(FName BoneName);// 0x97002d0 0x78e24bf820
	int GetNumLODs();// 0x9700a54 0x78e24bf900
	int GetNumBones();// 0x9700694 0x78e24bf9e0
	int GetForcedLOD();// 0x97008d0 0x78e24bfac0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x97001c8 0x78e24bfba0
	FName GetCurrentSkinWeightProfileName();// 0x96ffb70 0x78e24bfc80
	FName GetBoneName(int BoneIndex);// 0x9700534 0x78e24bfd60
	int GetBoneIndex(FName BoneName);// 0x97005e4 0x78e24bfe40
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x96fef0c 0x78e24bff20
	void ClearVertexColorOverride(int LODIndex);// 0x96ffeb0 0x78e24bcaa0
	void ClearSkinWeightProfile();// 0x96ffc34 0x78e24bcb80
	void ClearSkinWeightOverride(int LODIndex);// 0x96ffcfc 0x78e24bcc60
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x96ff508 0x78e24bcd40

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x448, Size: 0x10] 0x7895c1eb60
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1] 0x78760eb680
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x963bde0 0x78760b89e0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x963bed0 0x78760b8ac0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x963bfc4 0x78760b8ba0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x963c108 0x78760b8c80
	FName[] GetMaterialSlotNames();// 0x963c1c4 0x78760b8d60
	MaterialInterface*[] GetMaterials();// 0x963c334 0x78760b8e40
	int GetMaterialIndex(FName MaterialSlotName);// 0x963c27c 0x78760b8f20

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4] 0x7875b05080
	byte Weights;//[Offset: 0x30, Size: 0x1] 0x7875b05100

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8] 0x78e25ae600
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c] 0x78e25ae680
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c] 0x78e25ae700
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc] 0x78e25ac680
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc] 0x78e25ac700
	SkeletalMaterial[] Materials;//[Offset: 0xd8, Size: 0x10] 0x78e24e4200
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xe8, Size: 0x10] 0x78e24e42a0
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xf8, Size: 0x10] 0x78e24e4340
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4] 0x78e25ac900
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x15c, Size: 0x1] 0x78e25ac980
	byte SkelMirrorAxis;//[Offset: 0x15d, Size: 0x1] 0x78e25aca00
	byte SkelMirrorFlipAxis;//[Offset: 0x15e, Size: 0x1] 0x78e25aca80
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15f, Size: 0x1] 0x78e25acb00
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15f, Size: 0x1] 0x78e25acb80
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15f, Size: 0x1] 0x78e25acc00
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15f, Size: 0x1] 0x78e25acc80
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15f, Size: 0x1] 0x78e25acd00
	BodySetup* BodySetup;//[Offset: 0x160, Size: 0x8] 0x78e25acd80
	PhysicsAsset* PhysicsAsset;//[Offset: 0x168, Size: 0x8] 0x78e25ace00
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x170, Size: 0x8] 0x78e25ace80
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x178, Size: 0x10] 0x78e24e43e0
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x78e25acf80
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 0x10] 0x78e24e4480
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 0x8] 0x78e24e4520
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 0x10] 0x78e24e45c0
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 0x30] 0x78e25ad100
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10] 0x78e24e4660
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 0x10] 0x78e24e4700
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 0x10] 0x78e24e47a0
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x96ed3e4 0x78e25953a0
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x96ed138 0x78e2595480
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x96ed9a4 0x78e2595560
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x96ed8e4 0x78e2595640
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x96ed7c0 0x78e2591d60
	int NumSockets();// 0x96ecd80 0x78e2591e40
	FString[] K2_GetAllMorphTargetNames();// 0x96ed2cc 0x78e2591f20
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x96ecbcc 0x78e2592000
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x96eccd0 0x78e25920e0
	Skeleton* GetSkeleton();// 0x96edc18 0x78e25921c0
	PhysicsAsset* GetShadowPhysicsAsset();// 0x96ed6ac 0x78e25922a0
	PhysicsAsset* GetPhysicsAsset();// 0x96ed6c8 0x78e2592380
	NodeMappingContainer*[] GetNodeMappingData();// 0x96ed628 0x78e2592460
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x96ed578 0x78e2592540
	MorphTarget*[] GetMorphTargets();// 0x96ed4f4 0x78e2592620
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x96ed248 0x78e2592700
	SkeletalMaterial[] GetMaterials();// 0x96edab8 0x78e25927e0
	SkeletalMeshLODSettings* GetLODSettings();// 0x96ed98c 0x78e25928c0
	BoxSphereBounds GetImportedBounds();// 0x96edb40 0x78e25929a0
	Object* GetDefaultAnimatingRig();// 0x96ed6e4 0x78e2592a80
	BoxSphereBounds GetBounds();// 0x96edbac 0x78e2592b60
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x96ecdb4 0x78e2592c40
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x96ecf80 0x78e2592d20
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x96ed088 0x78e2592e00

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10] 0x78e24e5880
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10] 0x78e24e5920
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10] 0x78e25c5e80
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10] 0x78e24e59c0
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10] 0x78e24e5a60
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50] 0x78e25c6000
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10] 0x78e24e5b00
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10] 0x78e24e5ba0
	AssetUserData*[] AssetUserData;//[Offset: 0x380, Size: 0x10] 0x78e24e5c40

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875b03280
	int ParentIndex;//[Offset: 0x8, Size: 0x4] 0x7875b03300
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1] 0x7875b03380

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8] 0x7875b03880
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8] 0x7875b03900
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8] 0x7875b03980

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8] 0x78e25c6200
	FName BoneName;//[Offset: 0x30, Size: 0x8] 0x78e25c6280
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc] 0x78e25c6300
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78e25c4280
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc] 0x78e25c4300
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x78e25c4380
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x96fca20 0x78e259ab20
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x96fcb58 0x78e259ac00

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8] 0x78e236e580
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10] 0x78e2373c60

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7875a65080
	float BlendScale;//[Offset: 0x10, Size: 0x4] 0x7875a65100

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78759ceb80

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7875b03780
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10] 0x78759ee520

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8] 0x7875b00780
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8] 0x7875b00800
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14] 0x7875b00880

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x7875b02480
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1] 0x7875b02500

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7875b02b00
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7875b02b80
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10] 0x78759eeac0
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14] 0x7875b02c80
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c] 0x7875b01680
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10] 0x78759eeb60
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10] 0x78759eec00
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4] 0x7875b01800
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8] 0x7875b01880
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8] 0x7875b01900
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10] 0x7875b01980
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1] 0x78759eeca0
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x7875b01a80
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x7875b01b00
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x7875b01b80
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x7875b01c00

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875a8ee00
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875a8ee80
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875a8ef00
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875a8ef80
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875a8f000
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875a8f080
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875a8f100
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875a8f180
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4] 0x7875a8f200
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4] 0x7875a8f280
	float ThresholdUV;//[Offset: 0xc, Size: 0x4] 0x7875a8f300
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4] 0x7875a8f380

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1] 0x7875b02d00
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4] 0x7875b02d80
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4] 0x7875b02e00
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4] 0x7875b02e80
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4] 0x7875b02f00
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4] 0x7875b02f80
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1] 0x7875b03000
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1] 0x7875b03080
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1] 0x7875b03100
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1] 0x7875b03180
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1] 0x7875b01100
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7875b01180
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7875b01200
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4] 0x7875b01280
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4] 0x7875b01300
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4] 0x7875b01380
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7875b01400
	float VolumeImportance;//[Offset: 0x30, Size: 0x4] 0x7875b01480
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7875b01500
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1] 0x7875b01580
	int BaseLOD;//[Offset: 0x38, Size: 0x4] 0x7875b01600

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x78e2365d00
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10] 0x78e2370a60
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x78e2365e00
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8] 0x78e2365e80
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1] 0x78e2365f00
	byte RefPoseType;//[Offset: 0x151, Size: 0x1] 0x78e2365f80
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8] 0x78e2366000
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4] 0x78e2366080
	FName RetargetSource;//[Offset: 0x164, Size: 0x8] 0x78e2366100
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x170, Size: 0x10] 0x78e2370b00
	enum Interpolation;//[Offset: 0x180, Size: 0x1] 0x78e2370ba0
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1] 0x78e2366280
	byte RootMotionRootLock;//[Offset: 0x182, Size: 0x1] 0x78e2366300
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 0x1] 0x78e2364280
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1] 0x78e2364300
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1] 0x78e2364380
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10] 0x78e2370c40
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1b0, Size: 0x10] 0x78e2370ce0

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x7875a4fb00

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10] 0x7875d4fe20

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10] 0x78e2361a80

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8] 0x78e2363a80

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8] 0x7875a4f980
	float Time;//[Offset: 0x8, Size: 0x4] 0x7875a4fa00

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4] 0x7875a8a400
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10] 0x78759eb6e0
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10] 0x78759eb820
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10] 0x78759eb960

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x7875a8a480
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88] 0x7875a88600

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10] 0x7875a8a500
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10] 0x78759eb640

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60] 0x787595f780

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875a88480
	FString Value;//[Offset: 0x8, Size: 0x10] 0x7875a88500

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x7875a88700
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80] 0x7875a88a00

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78759eb780
	int DefaultValue;//[Offset: 0x78, Size: 0x4] 0x7875a88900
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7875a88980

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875a88780
	int Value;//[Offset: 0x4, Size: 0x4] 0x7875a88800

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x7875a88b00
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x80] 0x7875a88d80

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x6e, Size: 0x1] 0x7875a88b80
	SimpleCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x78759eb8c0

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4] 0x787595f600
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1] 0x787595f680
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1] 0x787595f700

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875a88c00
	float Value;//[Offset: 0x4, Size: 0x4] 0x7875a88c80

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7876123d00

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8] 0x78e24dbb80

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10] 0x78e2335180
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10] 0x78e2335200

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10] 0x78e24e1dc0
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10] 0x78e24e1e60
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10] 0x78e24e1f00
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c] 0x78e2561100
	enum SolverType;//[Offset: 0x7c, Size: 0x1] 0x78e24e1fa0
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 0x1] 0x78e2561200
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8] 0x78e2561280
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10] 0x78e24e2040

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78e2562f80
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a0, Size: 0x10] 0x78e24e1d20

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7875aea380
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24] 0x7875aea400

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8] 0x7875aea480
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875aea500
	float OrientationStrength;//[Offset: 0xc, Size: 0x4] 0x7875ae8480
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4] 0x7875ae8500
	float PositionStrength;//[Offset: 0x14, Size: 0x4] 0x7875ae8580
	float VelocityStrength;//[Offset: 0x18, Size: 0x4] 0x7875ae8600
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4] 0x7875ae8680
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4] 0x7875ae8700

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c8] 0x78e2564700
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1f0, Size: 0x10] 0x78e24e1c80
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x200, Size: 0x114] 0x78e2564800

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8] 0x7875a87600
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8] 0x7875a87680
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8] 0x7875a87700
	Vector Pos1;//[Offset: 0x30, Size: 0xc] 0x7875a87780
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc] 0x7875a87800
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc] 0x7875a87880
	Vector Pos2;//[Offset: 0x54, Size: 0xc] 0x7875a87900
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc] 0x7875a87980
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc] 0x7875a87a00
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc] 0x7875a87a80
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x7875a87b00
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x114] 0x7875a86c80

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4] 0x7875a87b80
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4] 0x7875a87c00
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4] 0x7875a87c80
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4] 0x7875a87d00
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4] 0x7875a87d80
	float LinearPlasticityThreshold;//[Offset: 0x14, Size: 0x4] 0x7875a87e00
	float AngularBreakThreshold;//[Offset: 0x18, Size: 0x4] 0x7875a87e80
	float AngularPlasticityThreshold;//[Offset: 0x1c, Size: 0x4] 0x7875a87f00
	LinearConstraint LinearLimit;//[Offset: 0x20, Size: 0x1c] 0x7875a88180
	ConeConstraint ConeLimit;//[Offset: 0x3c, Size: 0x20] 0x7875a88400
	TwistConstraint TwistLimit;//[Offset: 0x5c, Size: 0x1c] 0x7875a86700
	LinearDriveConstraint LinearDrive;//[Offset: 0x78, Size: 0x4c] 0x7875a86780
	AngularDriveConstraint AngularDrive;//[Offset: 0xc4, Size: 0x4c] 0x7875a86800
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x7875a86880
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x7875a86900
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1] 0x7875a86980
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1] 0x7875a86a00
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1] 0x7875a86a80
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1] 0x7875a86b00
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1] 0x7875a86b80
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1] 0x7875a86c00

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4] 0x7875a87f80
	byte XMotion;//[Offset: 0x18, Size: 0x1] 0x7875a88000
	byte YMotion;//[Offset: 0x19, Size: 0x1] 0x7875a88080
	byte ZMotion;//[Offset: 0x1a, Size: 0x1] 0x7875a88100

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7875a86480
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7875a86500
	float Restitution;//[Offset: 0x8, Size: 0x4] 0x7875a86580
	float ContactDistance;//[Offset: 0xc, Size: 0x4] 0x7875a86600
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875a86680

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7875a88200
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4] 0x7875a88280
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1] 0x7875a88300
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1] 0x7875a88380

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4] 0x7875a86380
	byte TwistMotion;//[Offset: 0x18, Size: 0x1] 0x7875a86400

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc] 0x7875a86d00
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc] 0x7875a86d80
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10] 0x7875a86e00
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10] 0x7875a86e80
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10] 0x7875a86f00
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7875a86f80

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7875a87100
	float Damping;//[Offset: 0x4, Size: 0x4] 0x7875a87180
	float MaxForce;//[Offset: 0x8, Size: 0x4] 0x7875a87200
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875a87280
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7875a87300

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10] 0x7875a87000
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10] 0x7875a87080
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10] 0x7875a87380
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc] 0x7875a85300
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc] 0x7875a85380
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1] 0x7875a85400

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x114] 0x7875ae9f00
	FName ProfileName;//[Offset: 0x114, Size: 0x8] 0x7875ae9f80

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4] 0x7875aea000
	int SolverIterations;//[Offset: 0x4, Size: 0x4] 0x7875aea080
	int JointIterations;//[Offset: 0x8, Size: 0x4] 0x7875aea100
	int CollisionIterations;//[Offset: 0xc, Size: 0x4] 0x7875aea180
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4] 0x7875aea200
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4] 0x7875aea280
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4] 0x7875aea300

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50] 0x7875b1d480
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50] 0x7875b1d540
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50] 0x7875b1d600
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28] 0x78e24dd080
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28] 0x78e24dd100

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8] 0x7875ae4400
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7875ae4480

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4] 0x78e25c4700
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1] 0x78e25c4780
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78e25c4800
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1] 0x78e25c4880
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4] 0x78e25c4900
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4] 0x78e25c4980
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10] 0x78e24e5ce0

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8] 0x7875b36140

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7875b04080
	float LODHysteresis;//[Offset: 0x4, Size: 0x4] 0x7875b04100
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1] 0x78759ee8e0
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10] 0x78759ee980
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10] 0x78759eea20
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4] 0x7875b02300
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8] 0x7875b02380
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c] 0x7875b02400

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875b04200
	FName BoneName;//[Offset: 0x4, Size: 0x8] 0x7875b02180

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8] 0x7875d4f060
	byte BlueprintType;//[Offset: 0x58, Size: 0x1] 0x78e233ca80
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78e233cb00
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78e233cb80
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78e233cc00
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4] 0x78e233cc80
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8] 0x78e233cd00
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10] 0x7875d4f100
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10] 0x7875d4f1a0
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10] 0x7875d4f240
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8] 0x78e233cf00

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8] 0x7875d4f2e0
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8] 0x7875d4f380
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e233cf80
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10] 0x78e233d000

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10] 0x78e24e4d40
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10] 0x78e24e4de0
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8] 0x78e25ac580

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8] 0x78e24e4e80
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8] 0x78e25a9d00
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48] 0x78e25a9d80
	FName AttachToName;//[Offset: 0x80, Size: 0x8] 0x78e25a9e00
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8] 0x78e25a9e80
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8] 0x78e25a9f00
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78e25a9f80
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10] 0x78e24e4f20
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10] 0x78e24e4fc0
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10] 0x78e25aa100
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8] 0x78e25aa180

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10] 0x78759e9a20
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7875a65300

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x7875a67200
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x7875a67280
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8] 0x7875a67300

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8] 0x7875a64300
	FString DataValue;//[Offset: 0x8, Size: 0x10] 0x7875a64380

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4] 0x78e25d6e00
	byte LengthMode;//[Offset: 0x2c, Size: 0x1] 0x78e25d6e80
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78e25d6f00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78e25d6f80
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1] 0x78e25d7000
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1] 0x78e25d7080
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10] 0x78e24e8ee0
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10] 0x78e24e8f80
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10] 0x78e24e9020
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10] 0x78e24e6780
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10] 0x78e24e6820
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10] 0x78e25d7380
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1] 0x78e25d5300
	FName VariableName;//[Offset: 0x94, Size: 0x8] 0x78e25d5380
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8] 0x78e25d5400
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8] 0x78e25d5480
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8] 0x78e25d5500

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8] 0x7875b0fc00
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8] 0x7875b0fc80

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8] 0x7875b0ff00
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875b0ff80

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80] 0x78e23d5a80
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78e23d5b00
	float GetFloatValue(float InTime);// 0x94ce130 0x78e23c90e0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x94cb828 0x78e23c91c0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x94cb92c 0x78e23c92a0

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10] 0x787800a100

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1] 0x787595f100
	byte TangentMode;//[Offset: 0x1, Size: 0x1] 0x787595f180
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1] 0x787595f200
	float Time;//[Offset: 0x4, Size: 0x4] 0x787595f280
	float Value;//[Offset: 0x8, Size: 0x4] 0x787595f300
	float ArriveTangent;//[Offset: 0xc, Size: 0x4] 0x787595f380
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4] 0x787595f400
	float LeaveTangent;//[Offset: 0x14, Size: 0x4] 0x787595f480
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4] 0x787595f500

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8] 0x7875b0fd00

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8] 0x7875b0fe80

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8] 0x7875b0fd80

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78e23d6980
	Vector GetVectorValue(float InTime);// 0x94d08a4 0x78e23cc1e0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8] 0x7875b0fe00

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80] 0x78e23d5380
	float AdjustHue;//[Offset: 0x230, Size: 0x4] 0x78e23d5400
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4] 0x78e23d5480
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4] 0x78e23d5500
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4] 0x78e23d5580
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4] 0x78e23d5600
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4] 0x78e23d5680
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4] 0x78e23d5700
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x94ce800 0x78e23cc800
	LinearColor GetLinearColorValue(float InTime);// 0x94ce970 0x78e23cc8e0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x94ce8b4 0x78e23cc9c0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7875a65380
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8] 0x78759e9ac0

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10] 0x78e23798e0
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10] 0x78e2379980

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8] 0x78759ec7c0
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8] 0x7875ac5680
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20] 0x7875ac5800
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48] 0x7875ac5880

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8] 0x78759ec860
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8] 0x7875ac5700
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10] 0x7875ac5780

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8] 0x7875b6c780
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1] 0x7875b6c800
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x7875b6c880
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1] 0x7875b6c900
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1] 0x7875b6c980
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1] 0x7875b6ca00
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1] 0x7875b6ca80
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10] 0x7875b6cb00
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10] 0x7875b6cb80
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10] 0x7875b6cc00
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10] 0x7875b6cc80
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70] 0x7875b6cd00
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10] 0x7875b35100
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x94447b8 0x7875a5c800
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x944607c 0x7875a5c8e0
	Pawn* TryGetPawnOwner();// 0x9447e58 0x7875a5c9c0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x94474e0 0x7875a590e0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x9447cc8 0x7875a591c0
	void SetRootMotionMode(byte Value);// 0x9445c70 0x7875a592a0
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x9447bf0 0x7875a59380
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x9447b18 0x7875a59460
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x9444ac8 0x7875a59540
	void SavePoseSnapshot(FName SnapshotName);// 0x9447da8 0x7875a59620
	void ResetDynamics(enum InTeleportType);// 0x9444264 0x7875a59700
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x94475d4 0x7875a597e0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x944788c 0x7875a598c0
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x9447014 0x7875a599a0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x9447108 0x7875a59a80
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x94466f8 0x7875a59b60
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x9446ab4 0x7875a59c40
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x9446ba8 0x7875a59d20
	void Montage_Resume(const AnimMontage* Montage);// 0x9446ec4 0x7875a59e00
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x94471fc 0x7875a59ee0
	void Montage_Pause(const AnimMontage* Montage);// 0x9446f6c 0x7875a59fc0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x9446ce4 0x7875a5a0a0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x9446dd4 0x7875a5a180
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x944694c 0x7875a5a260
	bool Montage_IsActive(const AnimMontage* Montage);// 0x9446a00 0x7875a5a340
	float Montage_GetPosition(const AnimMontage* Montage);// 0x94467ec 0x7875a5a420
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x94464e4 0x7875a5a500
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x9446644 0x7875a5a5e0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x944689c 0x7875a5a6c0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x9446594 0x7875a5a7a0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x94448b0 0x7875a5a880
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x94461cc 0x7875a5a960
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x9446124 0x7875a5aa40
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x94443cc 0x7875a5ab20
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x94473e4 0x7875a5ac00
	bool IsAnyMontagePlaying();// 0x94464ac 0x7875a5ace0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x9444568 0x7875a57400
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x9444664 0x7875a574e0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x944430c 0x7875a575c0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x94451d0 0x7875a576a0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x94452c8 0x7875a57780
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x9444ee8 0x7875a57860
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x9444fe0 0x7875a57940
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x94450d8 0x7875a57a20
	bool GetReceiveNotifiesFromLinkedInstances();// 0x9447ca8 0x7875a57b00
	bool GetPropagateNotifiesToLinkedInstances();// 0x9447bd0 0x7875a57be0
	SkeletalMeshComponent* GetOwningComponent();// 0x9447ab0 0x7875a57cc0
	Actor* GetOwningActor();// 0x9447ae4 0x7875a57da0
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x9445ec0 0x7875a57e80
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x9445dc8 0x7875a57f60
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x9445fcc 0x7875a58040
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x9445d18 0x7875a58120
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x94462bc 0x7875a58200
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x94463c8 0x7875a582e0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x94453c0 0x7875a583c0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x94454b8 0x7875a584a0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x94455b0 0x7875a58580
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x9445758 0x7875a58660
	float GetInstanceMachineWeight(int MachineIndex);// 0x9445850 0x7875a58740
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x94456a8 0x7875a58820
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x9445900 0x7875a58900
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x94459b0 0x7875a589e0
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x9445a60 0x7875a58ac0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x9445b10 0x7875a58ba0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x9445bc0 0x7875a58c80
	float GetCurveValue(FName CurveName);// 0x9444e38 0x7875a58d60
	FName GetCurrentStateName(int MachineIndex);// 0x9444bbc 0x7875a58e40
	AnimMontage* GetCurrentActiveMontage();// 0x9446478 0x7875a58f20
	void GetAllCurveNames(out FName[] OutNames);// 0x9444c6c 0x7875a59000
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x9444d2c 0x7875a55720
	void ClearMorphTargets();// 0x9444ab4 0x7875a55800
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x94449a8 0x7875a558e0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x6d94ba8 0x7875a559c0
	void BlueprintPostEvaluateAnimation();// 0x6d94ba8 0x7875a55aa0
	void BlueprintLinkedAnimationLayersInitialized();// 0x6d94ba8 0x7875a55b80
	void BlueprintInitializeAnimation();// 0x6d94ba8 0x7875a55c60
	void BlueprintBeginPlay();// 0x6d94ba8 0x7875a55d40

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10] 0x78759e6b40
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50] 0x7875a0bd40

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8] 0x7875a4e000

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10] 0x78759e6be0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10] 0x78759e01a0
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10] 0x78759e0240
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8] 0x78759d7e00
	FName SnapshotName;//[Offset: 0x28, Size: 0x8] 0x78759d7e80
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78759d7f00

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8] 0x7875a47600
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8] 0x7875a47680
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4] 0x7875a47700

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10] 0x78759ee700
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20] 0x7875b04000

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875b03a00
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7875b03a80
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875b03b00
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10] 0x78759ee5c0
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10] 0x78759ee660

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8] 0x7875b03b80

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x7875b03c80
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875b03d00
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875b03d80

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10] 0x78759ee7a0
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10] 0x78759ee840

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875b04f00
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1] 0x7875b04f80
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4] 0x7875b05000

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8] 0x7875b00900
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875b00980
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875b00a00
	float SavedPosition;//[Offset: 0xc, Size: 0x4] 0x7875b00a80
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4] 0x7875b00b00

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50] 0x7875b197c0
	void SetNumSubsteps(int NumSubsteps);// 0x8911924 0x7875be0940
	void SetNumIterations(int NumIterations);// 0x89119d4 0x7875be0a20
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x8911b58 0x7875be0b00
	void PhysicsAssetUpdated();// 0x8911c24 0x7875be0be0
	float GetSimulationTime();// 0x891187c 0x7875be0cc0
	int GetNumSubsteps();// 0x8911898 0x7875be0da0
	int GetNumKinematicParticles();// 0x89118ec 0x7875be0e80
	int GetNumIterations();// 0x89118b4 0x7875be0f60
	int GetNumDynamicParticles();// 0x89118d0 0x7875be1040
	int GetNumCloths();// 0x8911908 0x7875be1120
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x89117c0 0x7875be1200
	void EnableGravityOverride(out const Vector InVector);// 0x8911aa0 0x7875be12e0
	void DisableGravityOverride();// 0x8911a84 0x7875be13c0
	void ClothConfigUpdated();// 0x8911c08 0x7875be14a0

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4] 0x7875b05200

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10] 0x78759efe20

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10] 0x78c24edd80
	Plane YPlane;//[Offset: 0x10, Size: 0x10] 0x78c24ede00
	Plane ZPlane;//[Offset: 0x20, Size: 0x10] 0x78c24ede80
	Plane WPlane;//[Offset: 0x30, Size: 0x10] 0x78c24edf00

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4] 0x78c24ed480

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x6d94ba8 0x7875c23420
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x6d94ba8 0x7875c23500
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x6d94ba8 0x7875c235e0
	FString GetNotifyName();// 0x945f890 0x7875c236c0

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10] 0x78759e75e0

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80] 0x7875a49a00

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8] 0x7875a49a80
	SmartName Name;//[Offset: 0x8, Size: 0xc] 0x7875a49b80
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4] 0x7875a49c00

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8] 0x7875a49b00

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8] 0x787595cd80
	float BlendTime;//[Offset: 0x8, Size: 0x4] 0x787595ce00
	enum BlendOption;//[Offset: 0x24, Size: 0x1] 0x787800a420

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10] 0x78759e8580

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8] 0x7875a4b900
	float StartTime;//[Offset: 0x38, Size: 0x4] 0x7875a4b980
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8] 0x7875a4ba00
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10] 0x78759e7220

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8] 0x7875a4bb00
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10] 0x7875a4bb80

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10] 0x78759e7680

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8] 0x7875a49e80
	float StartPos;//[Offset: 0x8, Size: 0x4] 0x7875a49f00
	float AnimStartTime;//[Offset: 0xc, Size: 0x4] 0x7875a49f80
	float AnimEndTime;//[Offset: 0x10, Size: 0x4] 0x7875a4a000
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4] 0x7875a4a080
	int LoopingCount;//[Offset: 0x18, Size: 0x4] 0x7875a4a100

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8] 0x7875a4bc00
	float DisplayTime;//[Offset: 0x38, Size: 0x4] 0x7875a4bc80
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4] 0x7875a4bd00

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4] 0x7875a4bd80
	float TriggerTime;//[Offset: 0x4, Size: 0x4] 0x7875a4be00
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1] 0x7875a4be80

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4] 0x7875b41080
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4] 0x7875b0f800
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10] 0x7875b30600
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4] 0x7875b0fa00

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875b0f880
	float Alpha;//[Offset: 0xc, Size: 0x4] 0x7875b0f900

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8] 0x78e23d2780
	float GravityScale;//[Offset: 0x150, Size: 0x4] 0x78e23d2800
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4] 0x78e23d2880
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4] 0x78e23d2900
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4] 0x78e23d2980
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4] 0x78e23d2a00
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4] 0x78e23d2a80
	byte MovementMode;//[Offset: 0x168, Size: 0x1] 0x78e23d2b00
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1] 0x78e23d2b80
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1] 0x78e2374700
	float GroundFriction;//[Offset: 0x16c, Size: 0x4] 0x78e23d2c80
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4] 0x78e23d2d00
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4] 0x78e23d2d80
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4] 0x78e23d2e00
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4] 0x78e23d2e80
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4] 0x78e23d2f00
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4] 0x78e23d2f80
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4] 0x78e23d3000
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4] 0x78e23d3080
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4] 0x78e23d3100
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4] 0x78e23d3180
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4] 0x78e23d1100
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4] 0x78e23d1180
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4] 0x78e23d1200
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4] 0x78e23d1280
	float AirControl;//[Offset: 0x1c4, Size: 0x4] 0x78e23d1300
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4] 0x78e23d1380
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4] 0x78e23d1400
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4] 0x78e23d1480
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4] 0x78e23d1500
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4] 0x78e23d1580
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4] 0x78e23d1600
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4] 0x78e23d1680
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc] 0x78e23d1700
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x78e23d1780
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1] 0x78e23d1800
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1] 0x78e23d1880
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1] 0x78e23d1900
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1] 0x78e23d1980
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1] 0x78e23d1a00
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1] 0x78e23d1a80
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78e23d1b00
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78e23d1b80
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78e23d1c00
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1] 0x78e23d1c80
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1] 0x78e23d1d00
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1] 0x78e23d1d80
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1] 0x78e23d1e00
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1] 0x78e23d1e80
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1] 0x78e23d1f00
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1] 0x78e23d1f80
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1] 0x78e23d2000
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1] 0x78e23d2080
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1] 0x78e23d2100
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1] 0x78e23d0080
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1] 0x78e23d0100
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8] 0x78e23d0180
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4] 0x78e23d0200
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4] 0x78e23d0280
	float Mass;//[Offset: 0x208, Size: 0x4] 0x78e23d0300
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4] 0x78e23d0380
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4] 0x78e23d0400
	float PushForceFactor;//[Offset: 0x214, Size: 0x4] 0x78e23d0480
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4] 0x78e23d0500
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4] 0x78e23d0580
	float MinTouchForce;//[Offset: 0x220, Size: 0x4] 0x78e23d0600
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4] 0x78e23d0680
	float RepulsionForce;//[Offset: 0x228, Size: 0x4] 0x78e23d0700
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc] 0x78e23d0780
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10] 0x78e23d0800
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc] 0x78e23d0880
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc] 0x78e23d0900
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4] 0x78e23d0980
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4] 0x78e23d0a00
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4] 0x78e23d0a80
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc] 0x78e23d0b00
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc] 0x78e23d0b80
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4] 0x78e23d0c00
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4] 0x78e23d0c80
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4] 0x78e23d0d00
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4] 0x78e23d0d80
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4] 0x78e23d0e00
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4] 0x78e23d0e80
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4] 0x78e23d0f00
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4] 0x78e23d0f80
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4] 0x78e23d1000
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4] 0x78e23d1080
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4] 0x78e23bf800
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4] 0x78e23bf880
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4] 0x78e23bf900
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4] 0x78e23bf980
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4] 0x78e23bfa00
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4] 0x78e23bfa80
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4] 0x78e23bfb00
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4] 0x78e23bfb80
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4] 0x78e23bfc00
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4] 0x78e23bfc80
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4] 0x78e23bfd00
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4] 0x78e23bfd80
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x94] 0x78e23bfe00
	byte DefaultLandMovementMode;//[Offset: 0x384, Size: 0x1] 0x78e23bfe80
	byte DefaultWaterMovementMode;//[Offset: 0x385, Size: 0x1] 0x78e23bff00
	byte GroundMovementMode;//[Offset: 0x386, Size: 0x1] 0x78e23bff80
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x387, Size: 0x1] 0x78e23be780
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x387, Size: 0x1] 0x78e23be800
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x387, Size: 0x1] 0x78e23be880
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x387, Size: 0x1] 0x78e23be900
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x387, Size: 0x1] 0x78e23be980
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x387, Size: 0x1] 0x78e23bea00
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x387, Size: 0x1] 0x78e23bea80
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x387, Size: 0x1] 0x78e23beb00
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1] 0x78e23beb80
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1] 0x78e23bec00
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388, Size: 0x1] 0x78e23bec80
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x388, Size: 0x1] 0x78e23bed00
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x388, Size: 0x1] 0x78e23bed80
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x388, Size: 0x1] 0x78e23bee00
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x388, Size: 0x1] 0x78e23bee80
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x388, Size: 0x1] 0x78e23bef00
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x389, Size: 0x1] 0x78e23bef80
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x389, Size: 0x1] 0x78e23bf000
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x389, Size: 0x1] 0x78e23bf080
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x389, Size: 0x1] 0x78e23bf100
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x389, Size: 0x1] 0x78e23bf180
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x389, Size: 0x1] 0x78e23bf200
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x389, Size: 0x1] 0x78e23bf280
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a, Size: 0x1] 0x78e23bf300
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a, Size: 0x1] 0x78e23bf380
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38a, Size: 0x1] 0x78e23bf400
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38a, Size: 0x1] 0x78e23bf480
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38a, Size: 0x1] 0x78e23bf500
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38a, Size: 0x1] 0x78e23bf580
	float AvoidanceConsiderationRadius;//[Offset: 0x39c, Size: 0x4] 0x78e23bf600
	Vector RequestedVelocity;//[Offset: 0x3a0, Size: 0xc] 0x78e23bf680
	int AvoidanceUID;//[Offset: 0x3ac, Size: 0x4] 0x78e23bf700
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b0, Size: 0x4] 0x78e23bf780
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b4, Size: 0x4] 0x78e23bd700
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3b8, Size: 0x4] 0x78e23bd780
	float AvoidanceWeight;//[Offset: 0x3bc, Size: 0x4] 0x78e23bd800
	Vector PendingLaunchVelocity;//[Offset: 0x3c0, Size: 0xc] 0x78e23bd880
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4] 0x78e23bd900
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4] 0x78e23bd980
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4] 0x78e23bda00
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4] 0x78e23bda80
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4] 0x78e23bdb00
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4] 0x78e23bdb80
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30] 0x78e23bdc00
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4] 0x78e23bdc80
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x980, Size: 0x38] 0x78e23bdd00
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9b8, Size: 0x38] 0x78e23bdd80
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa80, Size: 0x40] 0x78e23bde00
	Vector AnimRootMotionVelocity;//[Offset: 0xac0, Size: 0xc] 0x78e23bde80
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x94b9d50 0x78e23c8ac0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x94b9e2c 0x78e23c8ba0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x94ba654 0x78e23c8c80
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x94ba81c 0x78e23c8d60
	void SetGroupsToIgnore(int GroupFlags);// 0x94ba8d0 0x78e23c8e40
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x94ba978 0x78e23c8f20
	void SetGroupsToAvoid(int GroupFlags);// 0x94baa2c 0x78e23c9000
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x94baad4 0x78e23c5720
	void SetAvoidanceGroup(int GroupFlags);// 0x94bab88 0x78e23c5800
	void SetAvoidanceEnabled(bool bEnable);// 0x94ba76c 0x78e23c58e0
	float K2_GetWalkableFloorZ();// 0x94b9df8 0x78e23c59c0
	float K2_GetWalkableFloorAngle();// 0x94b9ed4 0x78e23c5aa0
	float K2_GetModifiedMaxAcceleration();// 0x94ba308 0x78e23c5b80
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x94b9c20 0x78e23c5c60
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x94b9a10 0x78e23c5d40
	bool IsWalking();// 0x94ba614 0x78e23c5e20
	bool IsWalkable(out const HitResult Hit);// 0x94b9f08 0x78e23c5f00
	float GetValidPerchRadius();// 0x94b9fec 0x78e23c5fe0
	float GetPerchRadiusThreshold();// 0x94ba020 0x78e23c60c0
	PrimitiveComponent* GetMovementBase();// 0x94ba5c4 0x78e23c61a0
	float GetMinAnalogSpeed();// 0x94ba344 0x78e23c6280
	float GetMaxJumpHeightWithJumpTime();// 0x94ba380 0x78e23c6360
	float GetMaxJumpHeight();// 0x94ba3bc 0x78e23c6440
	float GetMaxBrakingDeceleration();// 0x94ba290 0x78e23c6520
	float GetMaxAcceleration();// 0x94ba2cc 0x78e23c6600
	Vector GetLastUpdateVelocity();// 0x94bac30 0x78e23c66e0
	Rotator GetLastUpdateRotation();// 0x94bac58 0x78e23c67c0
	Vector GetLastUpdateLocation();// 0x94bac94 0x78e23c68a0
	Vector GetImpartedMovementBaseVelocity();// 0x94ba584 0x78e23c6980
	Vector GetCurrentAcceleration();// 0x94ba258 0x78e23c6a60
	Character* GetCharacterOwner();// 0x94ba750 0x78e23c6b40
	float GetAnalogInputModifier();// 0x94ba224 0x78e23c6c20
	void DisableMovement();// 0x94ba5f8 0x78e23c6d00
	void ClearAccumulatedForces();// 0x94ba208 0x78e23c6de0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x94b97c4 0x78e23c6ec0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x94ba3f8 0x78e23c6fa0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x94ba104 0x78e23c7080
	void AddForce(Vector Force);// 0x94ba054 0x78e23c7160

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8] 0x7875c59600
	Vector K2_GetInputVector();// 0x968a4b0 0x7875c2c1e0
	bool IsMoveInputIgnored();// 0x968a51c 0x7875c2c2c0
	Vector GetPendingInputVector();// 0x968a5d4 0x7875c2c3a0
	Pawn* GetPawnOwner();// 0x968a4e8 0x7875c2c480
	Vector GetLastInputVector();// 0x968a59c 0x7875c2c560
	Vector ConsumeInputVector();// 0x968a55c 0x7875c2c640
	void AddInputVector(Vector WorldVector, bool bForce);// 0x968a60c 0x7875c2c720

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30] 0x7875c59a80
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4] 0x7875c59b00
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1] 0x7875c59b80
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1] 0x7875c59c00
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1] 0x7875c59c80
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1] 0x7875c59d00
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8] 0x7875c59d80
	void StopMovementKeepPathing();// 0x9647e38 0x7875c2c800
	void StopActiveMovement();// 0x9647e88 0x7875c2c8e0
	bool IsSwimming();// 0x9647d38 0x7875c2c9c0
	bool IsMovingOnGround();// 0x9647d78 0x7875c290e0
	bool IsFlying();// 0x9647cf8 0x7875c291c0
	bool IsFalling();// 0x9647db8 0x7875c292a0
	bool IsCrouching();// 0x9647df8 0x7875c29380

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8] 0x787805a780
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8] 0x787805a800
	Vector Velocity;//[Offset: 0xc4, Size: 0xc] 0x787805a880
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc] 0x787805a900
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc] 0x787805a980
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x787805aa00
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x787805aa80
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1] 0x787805ab00
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1] 0x787805ab80
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1] 0x787805ac00
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1] 0x787805ac80
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1] 0x787805ad00
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1] 0x787805ad80
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1] 0x7878002860
	void StopMovementImmediately();// 0x964035c 0x787edd7940
	void SnapUpdatedComponentToPlane();// 0x963f914 0x787edd7a20
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x96401c0 0x787edd7b00
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x963fc9c 0x787edd7be0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x963fe44 0x787edd7cc0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x963fd4c 0x787edd7da0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x963fbe4 0x787edd7e80
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x963ff10 0x787edd7f60
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x9640270 0x787edd8040
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x963ffc0 0x787edd8120
	float K2_GetModifiedMaxSpeed();// 0x9640434 0x787edd8200
	float K2_GetMaxSpeedModifier();// 0x9640470 0x787edd82e0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x9640378 0x787edd83c0
	Vector GetPlaneConstraintOrigin();// 0x963fb64 0x787edd84a0
	Vector GetPlaneConstraintNormal();// 0x963fba4 0x787edd8580
	enum GetPlaneConstraintAxisSetting();// 0x963fef4 0x787edd8660
	PhysicsVolume* GetPhysicsVolume();// 0x9640320 0x787edd8740
	float GetMaxSpeed();// 0x96404ac 0x787edd8820
	float GetGravityZ();// 0x96404e8 0x787edd8900
	Vector ConstrainNormalToPlane(Vector Normal);// 0x963f930 0x787edd89e0
	Vector ConstrainLocationToPlane(Vector Location);// 0x963f9ec 0x787edd8ac0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x963faa8 0x787edd8ba0

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4] 0x7875ae2d80
	float AgentHeight;//[Offset: 0x8, Size: 0x4] 0x7875ae2e00
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4] 0x7875ae2e80
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4] 0x7875ae2f00
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18] 0x7875ae2f80

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ae3000
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ae3080
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ae3100
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ae3180
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875ae1100

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8] 0x78a8150e80
	FString SubPathString;//[Offset: 0x8, Size: 0x10] 0x78a8150f00

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ae1180
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ae1200
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ae1280
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ae1300
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875ae1380
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875ae1400
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875ae1480
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875ae1500
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875ae1580
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7875ae1600
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7875ae1680
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7875ae1700
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7875ae1780
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7875ae1800
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7875ae1880
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7875ae1900
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7875ae1980
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7875ae1a00
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7875ae1a80
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7875ae1b00
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7875ae1b80
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7875ae1c00
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7875ae1c80
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7875ae1d00
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7875ae1d80
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7875ae1e00
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7875ae1e80
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7875ae1f00
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7875ae1f80
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7875ae2000
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7875ae2080
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7875ae2100

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875a86100
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875a86180
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875a86200
	float FloorDist;//[Offset: 0x4, Size: 0x4] 0x7875a86280
	float LineDist;//[Offset: 0x8, Size: 0x4] 0x7875a86300
	HitResult HitResult;//[Offset: 0xc, Size: 0x88] 0x7875a84280

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7875a84800
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7875a84880
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7875a84900
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7875a84980
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1] 0x7875a84a80
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc] 0x7875a84b00

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1] 0x7875a84a00

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a47800
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x7875a47880
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30] 0x7875a47900

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x460, Size: 0x4] 0x78e23bb800
	float CapsuleRadius;//[Offset: 0x464, Size: 0x4] 0x78e23bb880
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x94b15c8 0x78e23c7240
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x94b14c8 0x78e23c7320
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x94b13c8 0x78e23c3a40
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x94b0e5c 0x78e23c3b20
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x94b0f6c 0x78e23c3c00
	float GetUnscaledCapsuleRadius();// 0x94b10b4 0x78e23c3ce0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x94b1074 0x78e23c3dc0
	float GetUnscaledCapsuleHalfHeight();// 0x94b1098 0x78e23c3ea0
	float GetShapeScale();// 0x94b0e1c 0x78e23c3f80
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x94b10d0 0x78e23c4060
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x94b1210 0x78e23c4140
	float GetScaledCapsuleRadius();// 0x94b1398 0x78e23c4220
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x94b1334 0x78e23c4300
	float GetScaledCapsuleHalfHeight();// 0x94b1374 0x78e23c43e0

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x448, Size: 0x8] 0x78e23b6300
	class NavAreaBase* AreaClass;//[Offset: 0x450, Size: 0x8] 0x78e2375100
	Color ShapeColor;//[Offset: 0x458, Size: 0x4] 0x78e23b4280
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1] 0x78e23b4300
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1] 0x78e23b4380
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1] 0x78e23b4400

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8] 0x7875a84d80
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x7875a84e00
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc] 0x7875a84e80
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc] 0x7875a84f00
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875a84f80
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875a85000
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7875a85080

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875a84300
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98] 0x7875a84d00

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a84380
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8] 0x7875a84400
	float Position;//[Offset: 0x10, Size: 0x4] 0x7875a84480
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc] 0x7875a84500
	Rotator Rotation;//[Offset: 0x20, Size: 0xc] 0x7875a84580
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8] 0x7875a84600
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8] 0x7875a84680
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875a84700
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7875a84780
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38] 0x7875a84b80
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc] 0x7875a84c00
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc] 0x7875a84c80

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e23d6600
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78e23d6680
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78e23d6700
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4] 0x78e23d6780
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4] 0x78e23d6800
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4] 0x78e23d6880
	float DamageFalloff;//[Offset: 0x38, Size: 0x4] 0x78e23d6900

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 0x8] 0x7875d24980
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 0x8] 0x7875d24a00
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 0x8] 0x7875d24a80
	HUD* MyHUD;//[Offset: 0x2b0, Size: 0x8] 0x7875d24b00
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 0x8] 0x7875d24b80
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 0x8] 0x7875c0e5c0
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7875d24c00
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 0xc] 0x7875d24c80
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 0x4] 0x7875d24d00
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 0x10] 0x7875c0e660
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 0x10] 0x7875c0e700
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 0x4] 0x7875d24e80
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 0xc] 0x7875d24f00
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 0xc] 0x7875d24f80
	int ClientCap;//[Offset: 0x330, Size: 0x4] 0x7875d25000
	CheatManager* CheatManager;//[Offset: 0x338, Size: 0x8] 0x7875d25080
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 0x8] 0x7875c0e7a0
	PlayerInput* PlayerInput;//[Offset: 0x348, Size: 0x8] 0x7875d25100
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x350, Size: 0x10] 0x7875c0e840
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 0x1] 0x7875d25200
	byte NetPlayerIndex;//[Offset: 0x3d1, Size: 0x1] 0x7875d25280
	NetConnection* PendingSwapConnection;//[Offset: 0x410, Size: 0x8] 0x7875d23200
	NetConnection* NetConnection;//[Offset: 0x418, Size: 0x8] 0x7875d23280
	float InputYawScale;//[Offset: 0x42c, Size: 0x4] 0x7875d23300
	float InputPitchScale;//[Offset: 0x430, Size: 0x4] 0x7875d23380
	float InputRollScale;//[Offset: 0x434, Size: 0x4] 0x7875d23400
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1] 0x7875d23480
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x438, Size: 0x1] 0x7875d23500
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x438, Size: 0x1] 0x7875d23580
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x438, Size: 0x1] 0x7875d23600
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x438, Size: 0x1] 0x7875d23680
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x438, Size: 0x1] 0x7875d23700
	float ForceFeedbackScale;//[Offset: 0x43c, Size: 0x4] 0x7875d23780
	Key[] ClickEventKeys;//[Offset: 0x440, Size: 0x10] 0x7875c0e8e0
	byte DefaultMouseCursor;//[Offset: 0x450, Size: 0x1] 0x7875d23880
	byte CurrentMouseCursor;//[Offset: 0x451, Size: 0x1] 0x7875d23900
	byte DefaultClickTraceChannel;//[Offset: 0x452, Size: 0x1] 0x7875d23980
	byte CurrentClickTraceChannel;//[Offset: 0x453, Size: 0x1] 0x7875d23a00
	float HitResultTraceDistance;//[Offset: 0x454, Size: 0x4] 0x7875d23a80
	uint16 SeamlessTravelCount;//[Offset: 0x458, Size: 0x2] 0x7875d23b00
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x45a, Size: 0x2] 0x7875d23b80
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d0, Size: 0x8] 0x7875d23c00
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d8, Size: 0x1] 0x7875d23c80
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f0, Size: 0x8] 0x7875d23d00
	SpectatorPawn* SpectatorPawn;//[Offset: 0x548, Size: 0x8] 0x7875d23d80
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1] 0x7875d23e00
	Vector SpawnLocation;//[Offset: 0x558, Size: 0xc] 0x7875d23e80
	bool WasInputKeyJustReleased(Key Key);// 0x96a1020 0x7875d1e4e0
	bool WasInputKeyJustPressed(Key Key);// 0x96a11b0 0x7875d1e5c0
	void ToggleSpeaking(bool bInSpeaking);// 0x96a667c 0x7875d1e6a0
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x96a32fc 0x7875d1adc0
	void SwitchLevel(FString URL);// 0x96a7768 0x7875d1aea0
	void StopHapticEffect(enum Hand);// 0x96a30c0 0x7875d1af80
	void StartFire(byte FireModeNum);// 0x96a67ec 0x7875d1b060
	void SetVirtualJoystickVisibility(bool bVisible);// 0x96a0360 0x7875d1b140
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x96a00c8 0x7875d1b220
	void SetName(FString S);// 0x96a7824 0x7875d1b300
	void SetMouseLocation(const int X, const int Y);// 0x96a689c 0x7875d1b3e0
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x96a3f08 0x7875d1b4c0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x96a2f84 0x7875d1b5a0
	void SetDisableHaptics(bool bNewDisabled);// 0x96a2ecc 0x7875d1b680
	void SetControllerLightColor(Color Color);// 0x96a2e28 0x7875d1b760
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x969fc50 0x7875d1b840
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x969ff90 0x7875d1b920
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x969fe8c 0x7875d1ba00
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x96a18dc 0x7875d1bae0
	void ServerViewPrevPlayer();// 0x96a19d8 0x7875d1bbc0
	void ServerViewNextPlayer();// 0x96a1a34 0x7875d1bca0
	void ServerVerifyViewTarget();// 0x96a1a90 0x7875d1bd80
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x96a1aec 0x7875d1be60
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x96a1bc8 0x7875d1bf40
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x96a1ca4 0x7875d1c020
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x96a60b8 0x7875d1c100
	void ServerToggleAILogging();// 0x96a16e0 0x7875d1c1e0
	void ServerShortTimeout();// 0x96a1de0 0x7875d1c2c0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x96a7f70 0x7875d1c3a0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x96a1ef4 0x7875d1c480
	void ServerRestartPlayer();// 0x96a2030 0x7875d1c560
	void ServerPause();// 0x96a208c 0x7875d1c640
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x96a20e8 0x7875d1c720
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x96a638c 0x7875d1c800
	void ServerExecRPC(FString Msg);// 0x96a7c28 0x7875d1c8e0
	void ServerExec(FString Msg);// 0x96a7b74 0x7875d1c9c0
	void ServerCheckClientPossessionReliable();// 0x96a1e3c 0x7875d190e0
	void ServerCheckClientPossession();// 0x96a1e98 0x7875d191c0
	void ServerChangeName(FString S);// 0x96a21c0 0x7875d192a0
	void ServerCamera(FName NewMode);// 0x96a22ac 0x7875d19380
	void ServerAcknowledgePossession(Pawn* P);// 0x96a2394 0x7875d19460
	void SendToConsole(FString Command);// 0x96a5a98 0x7875d19540
	void RestartLevel();// 0x96a7dd0 0x7875d19620
	void ResetControllerLightColor();// 0x96a2e14 0x7875d19700
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x96a698c 0x7875d197e0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x96a3168 0x7875d198c0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x96a33ec 0x7875d199a0
	void Pause();// 0x96a78e0 0x7875d19a80
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x969fb98 0x7875d19b60
	void LocalTravel(FString URL);// 0x96a7d14 0x7875d19c40
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x96a38a4 0x7875d19d20
	bool IsInputKeyDown(Key Key);// 0x96a1340 0x7875d19e00
	void GetViewportSize(out int SizeX, out int SizeY);// 0x96a4030 0x7875d19ee0
	SpectatorPawn* GetSpectatorPawn();// 0x969fb7c 0x7875d19fc0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x96a08a8 0x7875d1a0a0
	Vector GetInputVectorKeyState(Key Key);// 0x96a0d04 0x7875d1a180
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x96a0b5c 0x7875d1a260
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x96a0618 0x7875d1a340
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x96a09c0 0x7875d1a420
	float GetInputKeyTimeDown(Key Key);// 0x96a071c 0x7875d1a500
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x96a04c8 0x7875d1a5e0
	float GetInputAnalogKeyState(Key Key);// 0x96a0e94 0x7875d1a6c0
	HUD* GetHUD();// 0x96a3ffc 0x7875d1a7a0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x96a6d94 0x7875d1a880
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x96a6f68 0x7875d1a960
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x96a712c 0x7875d1aa40
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x96a72f0 0x7875d1ab20
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x96a7478 0x7875d1ac00
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x96a75f0 0x7875d1ace0
	Vector GetFocalLocation();// 0x969fb3c 0x7875d17400
	void FOV(float NewFOV);// 0x96a7dec 0x7875d174e0
	void EnableCheats();// 0x96a7e9c 0x7875d175c0
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x96a6ae4 0x7875d176a0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x96a6c84 0x7875d17780
	void ConsoleKey(Key Key);// 0x96a5b54 0x7875d17860
	void ClientWasKicked(const FText KickReason);// 0x96a2740 0x7875d17940
	void ClientVoiceHandshakeComplete();// 0x96a6660 0x7875d17a20
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x96a284c 0x7875d17b00
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x96a2908 0x7875d17be0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x96a5ce0 0x7875d17cc0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x96a2ae4 0x7875d17da0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x96a2c80 0x7875d17e80
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x96a173c 0x7875d17f60
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x96a36b4 0x7875d18040
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x96a3a80 0x7875d18120
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x96a3b7c 0x7875d18200
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x96a3c80 0x7875d182e0
	void ClientStartOnlineSession();// 0x96a2724 0x7875d183c0
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x96a4e3c 0x7875d184a0
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x96a4f2c 0x7875d18580
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x96a3d4c 0x7875d18660
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x96a3dfc 0x7875d18740
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x96a7eb8 0x7875d18820
	void ClientSetHUD(class HUD NewHUDClass);// 0x96a4134 0x7875d18900
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x96a41e4 0x7875d189e0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x96a432c 0x7875d18ac0
	void ClientSetCameraMode(FName NewCamMode);// 0x96a44c4 0x7875d18ba0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x96a4574 0x7875d18c80
	void ClientSetBlockOnAsyncLoading();// 0x96a47a8 0x7875d18d60
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x96a79ac 0x7875d18e40
	void ClientReturnToMainMenu(FString ReturnReason);// 0x96a7ab8 0x7875d18f20
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x96a2658 0x7875d19000
	void ClientRestart(Pawn* NewPawn);// 0x96a47c4 0x7875d15720
	void ClientReset();// 0x96a4874 0x7875d15800
	void ClientRepObjRef(Object* Object);// 0x96a78fc 0x7875d158e0
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x96a247c 0x7875d159c0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x96a4890 0x7875d15aa0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x96a4a20 0x7875d15b80
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x96a4b6c 0x7875d15c60
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x96a4cf8 0x7875d15d40
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x96a37ac 0x7875d15e20
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x96a50bc 0x7875d15f00
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x96a5ecc 0x7875d15fe0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x96a53c0 0x7875d160c0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x96a5514 0x7875d161a0
	void ClientIgnoreLookInput(bool bIgnore);// 0x96a55cc 0x7875d16280
	void ClientGotoState(FName NewState);// 0x96a5684 0x7875d16360
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x96a5734 0x7875d16440
	void ClientForceGarbageCollection();// 0x96a5838 0x7875d16520
	void ClientFlushLevelStreaming();// 0x96a5854 0x7875d16600
	void ClientEndOnlineSession();// 0x96a2708 0x7875d166e0
	void ClientEnableNetworkVoice(bool bEnable);// 0x96a6734 0x7875d167c0
	void ClientCommitMapChange();// 0x96a5868 0x7875d168a0
	void ClientClearCameraLensEffects();// 0x96a3d30 0x7875d16980
	void ClientCapBandwidth(int Cap);// 0x96a5884 0x7875d16a60
	void ClientCancelPendingMapChange();// 0x96a5934 0x7875d16b40
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x96a5950 0x7875d16c20
	void ClearAudioListenerOverride();// 0x969ff7c 0x7875d16d00
	void ClearAudioListenerAttenuationOverride();// 0x969fe78 0x7875d16de0
	bool CanRestartPlayer();// 0x969fe38 0x7875d16ec0
	void Camera(FName NewMode);// 0x96a02b0 0x7875d16fa0
	void AddYawInput(float Val);// 0x96a1580 0x7875d17080
	void AddRollInput(float Val);// 0x96a14d0 0x7875d17160
	void AddPitchInput(float Val);// 0x96a1630 0x7875d17240
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x96a0418 0x7875d17320

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8] 0x78a064fc80

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10] 0x7875b73d00
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10] 0x7875b73d80
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28] 0x7875b73e00
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10] 0x7875b73e80
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10] 0x7875b73f00
	Margin Padding;//[Offset: 0x190, Size: 0x10] 0x7875b73f80
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10] 0x7875b34d40
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8] 0x7875b74080
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10] 0x7875b34de0
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10] 0x7875b34e80
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8] 0x7875b74200
	int Priority;//[Offset: 0x1e0, Size: 0x4] 0x7875b72180
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1] 0x7875b72200
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1] 0x7875b72280
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1] 0x7875b72300
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1] 0x7875b72380
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1] 0x7875b72400
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1] 0x7875b34f20
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8] 0x7875b72500
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10] 0x7875b34fc0
	void UnregisterInputComponent();// 0x86d9540 0x7875b81c80
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x86db094 0x7875a5e780
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x86dadfc 0x7875a5e860
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x86dafec 0x7875a5e940
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x86dad54 0x7875a5ea20
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x7875a5eb00
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x86d957c 0x7875a5ebe0
	void StopListeningForAllInputActions();// 0x86d9568 0x7875a5ecc0
	void StopAnimationsAndLatentActions();// 0x86db284 0x7875a5eda0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x86d9f80 0x7875a5ee80
	void StopAllAnimations();// 0x86d9f6c 0x7875a5ef60
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x86db68c 0x7875a5f040
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x86d9a44 0x7875a5f120
	void SetPadding(Margin InPadding);// 0x86da778 0x7875a5f200
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x86db314 0x7875a5f2e0
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x86d9b38 0x7875a5f3c0
	void SetInputActionPriority(int NewPriority);// 0x86d93e4 0x7875a5f4a0
	void SetInputActionBlocking(bool bShouldBlock);// 0x86d9334 0x7875a5f580
	void SetForegroundColor(SlateColor InForegroundColor);// 0x86da824 0x7875a5f660
	void SetDesiredSizeInViewport(Vector2D Size);// 0x86db5e8 0x7875a5f740
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x86da9bc 0x7875a5f820
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x86d9d18 0x7875a5f900
	void SetAnchorsInViewport(Anchors Anchors);// 0x86db53c 0x7875a5f9e0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x86db498 0x7875a5fac0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x86d999c 0x7875a5fba0
	void RemoveFromViewport();// 0x86db784 0x7875a5fc80
	void RegisterInputComponent();// 0x86d9554 0x7875a5fd60
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7875a5fe40
	void PlaySound(SoundBase* SoundToPlay);// 0x86d982c 0x7875a5ff20
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x86da2c8 0x7875a5caa0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x86da028 0x7875a5cb80
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x86da178 0x7875a5cc60
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x86da544 0x7875a5cd40
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x86d9ebc 0x7875a5ce20
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x6d94ba8 0x7875a5cf00
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x6d94ba8 0x7875a5cfe0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x6d94ba8 0x7875a5d0c0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x6d94ba8 0x7875a5d1a0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x6d94ba8 0x7875a5d280
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x6d94ba8 0x7875a5d360
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5d440
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x6d94ba8 0x7875a5d520
	void OnPaint(out PaintContext Context);// 0x6d94ba8 0x7875a5d600
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5d6e0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5d7c0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5d8a0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5d980
	void OnMouseCaptureLost();// 0x6d94ba8 0x7875a5da60
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5db40
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875a5dc20
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x6d94ba8 0x7875a5dd00
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x6d94ba8 0x7875a5dde0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x6d94ba8 0x7875a5dec0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x6d94ba8 0x7875a5dfa0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x6d94ba8 0x7875a5e080
	void OnInitialized();// 0x6d94ba8 0x7875a5e160
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x6d94ba8 0x7875a5e240
	void OnFocusLost(FocusEvent InFocusEvent);// 0x6d94ba8 0x7875a5e320
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6d94ba8 0x7875a5e400
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6d94ba8 0x7875a5e4e0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6d94ba8 0x7875a5e5c0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6d94ba8 0x7875a5e6a0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x6d94ba8 0x7875a5adc0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x6d94ba8 0x7875a5aea0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x86dab14 0x7875a5af80
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x86daa64 0x7875a5b060
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x6d94ba8 0x7875a5b140
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x6d94ba8 0x7875a5b220
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x86d9670 0x7875a5b300
	bool IsPlayingAnimation();// 0x86d9808 0x7875a5b3e0
	bool IsListeningForInputAction(FName ActionName);// 0x86d948c 0x7875a5b4c0
	bool IsInViewport();// 0x86db3bc 0x7875a5b5a0
	bool IsInteractable();// 0x6d94ba8 0x7875a5b680
	bool IsAnyAnimationPlaying();// 0x86d9c2c 0x7875a5b760
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x86d98e8 0x7875a5b840
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x86d9c64 0x7875a5b920
	Pawn* GetOwningPlayerPawn();// 0x86db2e0 0x7875a5ba00
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x86db2ac 0x7875a5bae0
	bool GetIsVisible();// 0x86db3f4 0x7875a5bbc0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x86d9e0c 0x7875a5bca0
	Anchors GetAnchorsInViewport();// 0x86db460 0x7875a5bd80
	Vector2D GetAlignmentInViewport();// 0x86db42c 0x7875a5be60
	void FlushAnimations();// 0x86d98d4 0x7875a5bf40
	void Destruct();// 0x6d94ba8 0x7875a5c020
	void Construct();// 0x6d94ba8 0x7875a5c100
	void CancelLatentActions();// 0x86db298 0x7875a5c1e0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x86db18c 0x7875a5c2c0
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x86daef4 0x7875a5c3a0
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x86dabc4 0x7875a5c480
	void AddToViewport(int ZOrder);// 0x86db84c 0x7875a5c560
	bool AddToPlayerScreen(int ZOrder);// 0x86db798 0x7875a5c640

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8] 0x7875fca180
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10] 0x7875fca200
	FText ToolTipText;//[Offset: 0x40, Size: 0x18] 0x7875fca280
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10] 0x7875fca300
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8] 0x7875fca380
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10] 0x7875fca400
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10] 0x7875fca480
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c] 0x7875fca500
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8] 0x7875fc8480
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x7875fc8500
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1] 0x7875fc8580
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1] 0x7875fc8600
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1] 0x7875fc8680
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8] 0x7875fc8700
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7875fc8780
	byte Cursor;//[Offset: 0xc1, Size: 0x1] 0x7875fc8800
	enum Clipping;//[Offset: 0xc2, Size: 0x1] 0x7895c1bfa0
	enum Visibility;//[Offset: 0xc3, Size: 0x1] 0x7895c1bf00
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4] 0x7875fc8980
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8] 0x7875fc8a00
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1] 0x7895c1c040
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10] 0x7895c1bd20
	void SetVisibility(enum InVisibility);// 0x86e6c50 0x7875fe21c0
	void SetUserFocus(PlayerController* PlayerController);// 0x86e6594 0x7875fe22a0
	void SetToolTipText(out const FText InToolTipText);// 0x86e6ed0 0x7875fe2380
	void SetToolTip(Widget* Widget);// 0x86e6e28 0x7875fe2460
	void SetRenderTranslation(Vector2D Translation);// 0x86e7174 0x7875fe2540
	void SetRenderTransformPivot(Vector2D Pivot);// 0x86e70d0 0x7875fe2620
	void SetRenderTransformAngle(float Angle);// 0x86e724c 0x7875fe2700
	void SetRenderTransform(WidgetTransform InTransform);// 0x86e743c 0x7875fe27e0
	void SetRenderShear(Vector2D Shear);// 0x86e72f4 0x7875fe28c0
	void SetRenderScale(Vector2D Scale);// 0x86e7398 0x7875fe29a0
	void SetRenderOpacity(float InOpacity);// 0x86e6b74 0x7875fe2a80
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x86e611c 0x7875fe2b60
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x86e5f2c 0x7875fe2c40
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x86e6024 0x7875fe2d20
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x86e6210 0x7875fe2e00
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x86e6304 0x7875fe2ee0
	void SetKeyboardFocus();// 0x86e6828 0x7875fe2fc0
	void SetIsEnabled(bool bInIsEnabled);// 0x86e6fe0 0x7875fe30a0
	void SetFocus();// 0x86e663c 0x7875fe3180
	void SetCursor(byte InCursor);// 0x86e6d80 0x7875fe3260
	void SetClipping(enum InClipping);// 0x86e6a98 0x7875fe3340
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x86e6444 0x7875fe3420
	void ResetCursor();// 0x86e6d6c 0x7875fe3500
	void RemoveFromParent();// 0x86e5edc 0x7875fe35e0
	EventReply OnReply__DelegateSignature();// 0x6d94ba8 0x7875fe36c0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x6d94ba8 0x7875fe37a0
	bool IsVisible();// 0x86e6d34 0x7875fe3880
	bool IsHovered();// 0x86e69a8 0x7875fe3960
	void InvalidateLayoutAndVolatility();// 0x86e656c 0x7875fe0080
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x86e6650 0x7875fe0160
	bool HasUserFocus(PlayerController* PlayerController);// 0x86e6774 0x7875fe0240
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x86e683c 0x7875fe0320
	bool HasMouseCapture();// 0x86e6938 0x7875fe0400
	bool HasKeyboardFocus();// 0x86e6970 0x7875fe04e0
	bool HasFocusedDescendants();// 0x86e6704 0x7875fe05c0
	bool HasAnyUserFocus();// 0x86e673c 0x7875fe06a0
	Widget* GetWidget__DelegateSignature();// 0x6d94ba8 0x7875fe0780
	enum GetVisibility();// 0x86e6d00 0x7875fe0860
	Geometry GetTickSpaceGeometry();// 0x86e5e6c 0x7875fe0940
	FText GetText__DelegateSignature();// 0x6d94ba8 0x7875fe0a20
	enum GetSlateVisibility__DelegateSignature();// 0x6d94ba8 0x7875fe0b00
	SlateColor GetSlateColor__DelegateSignature();// 0x6d94ba8 0x7875fe0be0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x6d94ba8 0x7875fe0cc0
	float GetRenderTransformAngle();// 0x86e7218 0x7875fe0da0
	float GetRenderOpacity();// 0x86e6c1c 0x7875fe0e80
	PanelWidget* GetParent();// 0x86e5ef8 0x7875fe0f60
	Geometry GetPaintSpaceGeometry();// 0x86e5e34 0x7875fe1040
	PlayerController* GetOwningPlayer();// 0x86e5dc4 0x7875fe1120
	LocalPlayer* GetOwningLocalPlayer();// 0x86e5d88 0x7875fe1200
	byte GetMouseCursor__DelegateSignature();// 0x6d94ba8 0x7875fe12e0
	LinearColor GetLinearColor__DelegateSignature();// 0x6d94ba8 0x7875fe13c0
	bool GetIsEnabled();// 0x86e7098 0x7875fe14a0
	int GetInt32__DelegateSignature();// 0x6d94ba8 0x7875fe1580
	GameInstance* GetGameInstance();// 0x86e5e00 0x7875fe1660
	float GetFloat__DelegateSignature();// 0x6d94ba8 0x7875fe1740
	Vector2D GetDesiredSize();// 0x86e6538 0x7875fe1820
	enum GetClipping();// 0x86e6b40 0x7875fe1900
	enum GetCheckBoxState__DelegateSignature();// 0x6d94ba8 0x7875fe19e0
	Geometry GetCachedGeometry();// 0x86e5ea4 0x7875fe1ac0
	bool GetBool__DelegateSignature();// 0x6d94ba8 0x7875fe1ba0
	FText GetAccessibleText();// 0x86e5cb8 0x7875fe1c80
	FText GetAccessibleSummaryText();// 0x86e5be8 0x7875fae780
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x6d94ba8 0x7875fae860
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x6d94ba8 0x7875fae940
	void ForceVolatile(bool bForce);// 0x86e69e8 0x7875faea20
	void ForceLayoutPrepass();// 0x86e6580 0x7875faeb00

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10] 0x7875fc6680
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1] 0x7875fc6700

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4] 0x7875fc6400
	float Top;//[Offset: 0x4, Size: 0x4] 0x7875fc6480
	float Right;//[Offset: 0x8, Size: 0x4] 0x7875fc6500
	float Bottom;//[Offset: 0xc, Size: 0x4] 0x7875fc6580

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8] 0x78e22cf700
	Widget* Content;//[Offset: 0x30, Size: 0x8] 0x78e22cf780

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10] 0x7895c1a560
	bool RemoveChildAt(int Index);// 0x86bf7fc 0x7875fe9460
	bool RemoveChild(Widget* Content);// 0x86bf698 0x7875fe9540
	bool HasChild(Widget* Content);// 0x86bf8b0 0x7875fe9620
	bool HasAnyChildren();// 0x86bf660 0x7875fe9700
	int GetChildrenCount();// 0x86bfb74 0x7875fe97e0
	int GetChildIndex(const Widget* Content);// 0x86bf964 0x7875fe98c0
	Widget* GetChildAt(int Index);// 0x86bfac4 0x7875fe99a0
	Widget*[] GetAllChildren();// 0x86bfa14 0x7875fe9a80
	void ClearChildren();// 0x86bf644 0x7875fe9b60
	PanelSlot* AddChild(Widget* Content);// 0x86bf74c 0x7875fe9c40

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78e2303300
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10] 0x7875d48a80
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78e2303400
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10] 0x78e2303480
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x86e8c48 0x78e22fe400
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x86e89b0 0x78e22fe4e0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x86e8ba0 0x78e22fe5c0
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x86e8908 0x78e22fe6a0
	float GetStartTime();// 0x86e8e6c 0x78e22fadc0
	float GetEndTime();// 0x86e8e38 0x78e22faea0
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x86e8d40 0x78e22faf80
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x86e8aa8 0x78e22fb060

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8] 0x7875bc9280
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1] 0x7875b38e40
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7875bc9380
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1] 0x7875bc9400
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1] 0x7875b38ee0
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x836e1dc 0x7875bb6d00
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x836e2dc 0x7875bb6de0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10] 0x7875bc7600

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x78759c4980
	int SequenceID;//[Offset: 0x10, Size: 0x4] 0x78759c4a00
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4] 0x78759c4a80

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160] 0x78e22c3200
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118] 0x78e22c3280
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0] 0x78e22c3300
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30] 0x78e22c3380
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10] 0x7875d44a20
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10] 0x78e22c3480
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10] 0x78e22c3500
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1] 0x78e22c3580
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1] 0x78e22c3600
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1] 0x7875d44ac0

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50] 0x787597ac00
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10] 0x78759c7e00
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4] 0x78759c7f00
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8] 0x78759c8200

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78759c5380

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78759c7800
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2] 0x78759c7880
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1] 0x787800d1c0
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8] 0x78759c7980
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10] 0x787800d260
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38] 0x78759c7a80
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8] 0x78759c7b00
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78759c7b80
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78759c7c00
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78759c7c80

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4] 0x7875bcca00
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7875bcca80
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10] 0x7875b388a0
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10] 0x7875bccb80
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10] 0x7875bccc00

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78759cc200
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78759cc280
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78759cc300
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78759cc380
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78759cc400

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10] 0x787800f060

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78759cbf00
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10] 0x78759cbf80
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4] 0x78759cc000
	enum Flags;//[Offset: 0x1c, Size: 0x1] 0x787800efc0
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2] 0x78759cc100

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2] 0x7875bcd300
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38] 0x7875bcd380
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10] 0x7875bcd400
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4] 0x7875bcd480
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4] 0x7875bcd500
	int RowIndex;//[Offset: 0xa8, Size: 0x4] 0x7875bcd580
	int OverlapPriority;//[Offset: 0xac, Size: 0x4] 0x7875bcd600
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7875bcd680
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7875bcb600
	float StartTime;//[Offset: 0xb4, Size: 0x4] 0x7875bcb680
	float EndTime;//[Offset: 0xb8, Size: 0x4] 0x7875bcb700
	float PrerollTime;//[Offset: 0xbc, Size: 0x4] 0x7875bcb780
	float PostrollTime;//[Offset: 0xc0, Size: 0x4] 0x7875bcb800
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7875bcb880
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x7875bcb900
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2] 0x7875bcb980
	void SetRowIndex(int NewRowIndex);// 0x836d08c 0x7875bba880
	void SetPreRollFrames(int InPreRollFrames);// 0x836cd3c 0x7875bba960
	void SetPostRollFrames(int InPostRollFrames);// 0x836cc6c 0x7875bbaa40
	void SetOverlapPriority(int NewPriority);// 0x836cfcc 0x7875bbab20
	void SetIsLocked(bool bInIsLocked);// 0x836ce10 0x7875bbac00
	void SetIsActive(bool bInIsActive);// 0x836cee8 0x7875bbace0
	void SetCompletionMode(enum InCompletionMode);// 0x836d1fc 0x7875bb7400
	void SetBlendType(enum InBlendType);// 0x836d130 0x7875bb74e0
	bool IsLocked();// 0x836cdf0 0x7875bb75c0
	bool IsActive();// 0x836cec8 0x7875bb76a0
	int GetRowIndex();// 0x836d070 0x7875bb7780
	int GetPreRollFrames();// 0x836cd20 0x7875bb7860
	int GetPostRollFrames();// 0x836cc50 0x7875bb7940
	int GetOverlapPriority();// 0x836cfb0 0x7875bb7a20
	enum GetCompletionMode();// 0x836d2a0 0x7875bb7b00
	OptionalMovieSceneBlendType GetBlendType();// 0x836d1e0 0x7875bb7be0

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1] 0x787800dd00
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78759c5e80

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78759c8b00
	enum CompletionMode;//[Offset: 0x1, Size: 0x1] 0x787800f6a0

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4] 0x78759c8c00
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4] 0x78759c8c80
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10] 0x78759c8d00
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78759c8d80
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4] 0x78759c8e00
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10] 0x78759c8e80
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78759c8f00
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4] 0x78759c8f80

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4] 0x78c24efc00

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78a8150780
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78a8150800

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78a8150880
	FrameNumber Value;//[Offset: 0x4, Size: 0x4] 0x78a8150900

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78759c7e80

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4] 0x78759c7f80
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50] 0x7875977c00
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50] 0x7875977cc0

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18] 0x78759cb580
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60] 0x78759c9500
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50] 0x7875979d00
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50] 0x7875979e80

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4] 0x78759ca400
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10] 0x787800f560

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4] 0x78759c7380

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18] 0x78759c9580
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20] 0x78759c9600
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20] 0x78759c9a80
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8] 0x78759c9b00
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4] 0x78759c9b80
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10] 0x78759c9c00
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4] 0x78759c9c80
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4] 0x78759c9d00
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4] 0x78759c9d80
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x78759c9e00
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10] 0x78759c9e80
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10] 0x78759c9f00
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10] 0x78759c9f80
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10] 0x78759ca000
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10] 0x78759ca080
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2] 0x78759ca100
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1] 0x78759ca180
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18] 0x78759ca200
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10] 0x78759ca280

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78759c9680
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10] 0x787800f4c0

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x78759c9700
	FrameTime Offset;//[Offset: 0x4, Size: 0x8] 0x78759c9780

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78c24efa00
	float SubFrame;//[Offset: 0x4, Size: 0x4] 0x78c24efa80

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc] 0x78759c9800
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8] 0x78759c9980

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4] 0x78759c9880
	FrameNumber End;//[Offset: 0x4, Size: 0x4] 0x78759c9900

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4] 0x78c24efb00
	int Denominator;//[Offset: 0x4, Size: 0x4] 0x78c24efb80

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60] 0x78759c6380
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60] 0x78759c6400
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10] 0x787800d3a0
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10] 0x787800d4e0
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10] 0x787800d580

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc] 0x78759c6580
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4] 0x78759c6600

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8] 0x78759c6480
	uint32 EntityID;//[Offset: 0x8, Size: 0x4] 0x78759c6500

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10] 0x78759c6700
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4] 0x78759c6780
	enum Flags;//[Offset: 0x18, Size: 0x1] 0x787800d440
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x78759c6880
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x78759c6900

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10] 0x78759c6a00

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10] 0x787800d620
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10] 0x787800d940
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10] 0x787800db20

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10] 0x787800d6c0
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10] 0x787800d760
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10] 0x787800d8a0

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4] 0x78759c6c80
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4] 0x78759c6d00

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8] 0x78759c6f00
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2] 0x78759c6f80

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78759c6e00
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78759c6e80

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2] 0x78759c7080
	enum Flags;//[Offset: 0x2, Size: 0x1] 0x787800d800
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4] 0x78759c7180

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10] 0x787800d9e0
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10] 0x787800da80

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc] 0x78759c5500
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2] 0x78759c5580
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2] 0x78759c5600

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4] 0x78759c5300
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4] 0x78759c5400
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4] 0x78759c5480

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78759c5880
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78759c5900
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78759c5980
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78759c5a00

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10] 0x7875d44c00
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10] 0x7875d44ca0
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10] 0x7875d44d40
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50] 0x7875b1bbc0
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10] 0x7875d44de0
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8] 0x78e22c3b80
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10] 0x78e22c3c00
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10] 0x78e22c3c80
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8] 0x78e22c3d00
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8] 0x78e22c3d80
	enum EvaluationType;//[Offset: 0x118, Size: 0x1] 0x7875d44e80
	enum ClockSource;//[Offset: 0x119, Size: 0x1] 0x7875d44f20
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18] 0x78e22c3f00
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10] 0x7875d44fc0

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30] 0x78759cc500
	FName[] Tags;//[Offset: 0x30, Size: 0x10] 0x787800f100
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78759cc600
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x78759ca580
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x78759ca600
	Guid Guid;//[Offset: 0x44, Size: 0x10] 0x78759ca680
	FString Name;//[Offset: 0x58, Size: 0x10] 0x78759ca700
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8] 0x78759ca780
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10] 0x787800f1a0
	enum Ownership;//[Offset: 0x80, Size: 0x1] 0x787800f240
	FName LevelName;//[Offset: 0x84, Size: 0x8] 0x78759ca900

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10] 0x787800f740
	Guid Guid;//[Offset: 0x10, Size: 0x10] 0x78759c9080
	FString Name;//[Offset: 0x20, Size: 0x10] 0x78759c9100
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8] 0x787800cea0
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10] 0x78759c9180

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10] 0x78759c6080
	FString BindingName;//[Offset: 0x10, Size: 0x10] 0x78759c6100
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10] 0x787800dda0

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10] 0x787800e020

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4] 0x78759c6300
	FString Label;//[Offset: 0x8, Size: 0x10] 0x78759c4280
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78759c4300

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8] 0x7875a12e00
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8] 0x7875a12e80
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10] 0x7875a12f00
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875a12f80

--------------------------------
Class: Geometry

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x260, Size: 0x8] 0x78e2302d00
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x270, Size: 0xe8] 0x78e2302d80
	void SetUserTag(FName InUserTag);// 0x86d6ff4 0x78e22fc2c0
	FName GetUserTag();// 0x86d709c 0x78e22fc3a0

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8] 0x78759c7400
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8] 0x78759c7480
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8] 0x78759c7500
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50] 0x787597a840

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50] 0x7875b1b8c0
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50] 0x7875b1b980
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50] 0x7875b1ba40
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50] 0x7875b1bb00

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138] 0x78e22c4c80

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38] 0x78759c5800

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50] 0x7875d48c60
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8] 0x78e2302c80

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a11200
	Widget* Content;//[Offset: 0x8, Size: 0x8] 0x7875a11280

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8] 0x78e230aa80

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8] 0x7875969900
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8] 0x7875969980

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8] 0x78e2326700
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e2326780
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e2326800
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78e2326880
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78e2326900
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78e2326980
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78e2326a00
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x78e2326a80
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x78e2326b00
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1] 0x7875d49340
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50] 0x7875d493e0
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24] 0x78e2326c80
	float Duration;//[Offset: 0x104, Size: 0x4] 0x78e2326d00
	float MaxDistance;//[Offset: 0x108, Size: 0x4] 0x78e2326d80
	float TotalSamples;//[Offset: 0x10c, Size: 0x4] 0x78e2326e00
	float Priority;//[Offset: 0x110, Size: 0x4] 0x78e2326e80
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8] 0x78e2326f00
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8] 0x78e2326f80
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10] 0x7875d49480
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8] 0x78e2327080
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10] 0x7875d49520
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10] 0x7875d495c0
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10] 0x7875d49660

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78] 0x78e25c7400
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10] 0x78e24e56a0
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10] 0x78e24e5740
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8] 0x78e25c7580

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4] 0x7875b08100
	float Pitch;//[Offset: 0x4, Size: 0x4] 0x7875b08180
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x7875b08200
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4] 0x7875b08280
	float LFEBleed;//[Offset: 0x10, Size: 0x4] 0x7875b08300
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4] 0x7875b08380
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4] 0x7875b08400
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4] 0x7875b06380
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7875b06400
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1] 0x7875b06480
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1] 0x7875b06500
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1] 0x7875b06580
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1] 0x7875b06600
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1] 0x7875b06680
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1] 0x7875b06700
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4] 0x7875b06780
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40] 0x7875b06a00
	byte OutputTarget;//[Offset: 0x68, Size: 0x1] 0x7875b06a80
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1] 0x78759ef880
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8] 0x7875b06b80

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10] 0x7875b06800
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10] 0x7875b06880
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10] 0x7875b06900
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10] 0x7875b06980

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4] 0x7875961d80
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8] 0x7875961e00

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78e25cd580
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10] 0x78e24e7360
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8] 0x78e25cd680
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4] 0x78e25cb600
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4] 0x78e25cb680
	enum GainMode;//[Offset: 0x68, Size: 0x1] 0x78e24e7400
	float OutputVolume;//[Offset: 0x6c, Size: 0x4] 0x78e25cb780
	float WetLevel;//[Offset: 0x70, Size: 0x4] 0x78e25cb800
	float DryLevel;//[Offset: 0x74, Size: 0x4] 0x78e25cb880
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x78, Size: 0x10] 0x78e25cb900
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x88, Size: 0x10] 0x78e25cb980
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0x98, Size: 0x10] 0x78e25cba00
	delegate OnSubmixRecordedFileDone;//[Offset: 0xa8, Size: 0x10] 0x78e25cba80
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x971e1a0 0x78e259c1e0
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x971eb10 0x78e259c2c0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x971e9c0 0x78e259c3a0
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x971e248 0x78e259c480
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x971ed58 0x78e259c560
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x971ea68 0x78e259c640
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x971e0ac 0x78e259c720
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x971e46c 0x78e259c800
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x971e57c 0x78e259c8e0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x971e8b0 0x78e259c9c0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8] 0x78e25ca980

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10] 0x78e24e7860

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x170, Size: 0x4] 0x78e2327b00
	int StreamingPriority;//[Offset: 0x174, Size: 0x4] 0x78e2327b80
	enum SampleRateQuality;//[Offset: 0x178, Size: 0x1] 0x7875d4b8c0
	byte SoundGroup;//[Offset: 0x17a, Size: 0x1] 0x78e2327c80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17b, Size: 0x1] 0x78e2327d00
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17b, Size: 0x1] 0x78e2327d80
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17b, Size: 0x1] 0x78e2327e00
	enum LoadingBehavior;//[Offset: 0x17c, Size: 0x1] 0x7875d4b960
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17d, Size: 0x1] 0x78e2327f00
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17d, Size: 0x1] 0x78e2327f80
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17e, Size: 0x1] 0x78e2328000
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17e, Size: 0x1] 0x78e2328080
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x180, Size: 0x48] 0x78e2328100
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10] 0x7875d490c0
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10] 0x7875d49160
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10] 0x7875d49200
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4] 0x78e2328300
	FString SpokenText;//[Offset: 0x240, Size: 0x10] 0x78e2328380
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4] 0x78e2328400
	float Volume;//[Offset: 0x254, Size: 0x4] 0x78e2326380
	float Pitch;//[Offset: 0x258, Size: 0x4] 0x78e2326400
	int NumChannels;//[Offset: 0x25c, Size: 0x4] 0x78e2326480
	int SampleRate;//[Offset: 0x260, Size: 0x4] 0x78e2326500
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10] 0x7875d492a0
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8] 0x78e2326600
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8] 0x78e2326680

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1] 0x7875b31280
	enum PitchRouting;//[Offset: 0x41, Size: 0x1] 0x7875b31320
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1] 0x7875b313c0
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1] 0x7875b31460

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10] 0x7875b31140
	float TimeSec;//[Offset: 0x10, Size: 0x4] 0x7875b0a200

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4] 0x7875b0a080
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4] 0x7875b0a100

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7875b0a280
	float TimeSec;//[Offset: 0x4, Size: 0x4] 0x7875b0a300

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18] 0x787805a500
	float Time;//[Offset: 0x18, Size: 0x4] 0x7878058480

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4] 0x7875b0a380
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7875b0a400
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7875b0a480
	float QFactor;//[Offset: 0xc, Size: 0x4] 0x7875b0a500

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8] 0x7875b06c00
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4] 0x7875b06c80
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4] 0x7875b06d00

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e25c8a00
	float EQPriority;//[Offset: 0x2c, Size: 0x4] 0x78e25c8a80
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40] 0x78e25c8b00
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10] 0x78e24e54c0
	float InitialDelay;//[Offset: 0x80, Size: 0x4] 0x78e25c8c00
	float FadeInTime;//[Offset: 0x84, Size: 0x4] 0x78e25c8c80
	float Duration;//[Offset: 0x88, Size: 0x4] 0x78e25c8d00
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4] 0x78e25c8d80

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4] 0x7875b09100
	float Gain0;//[Offset: 0x14, Size: 0x4] 0x7875b09180
	float Bandwidth0;//[Offset: 0x18, Size: 0x4] 0x7875b09200
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4] 0x7875b09280
	float Gain1;//[Offset: 0x20, Size: 0x4] 0x7875b09300
	float Bandwidth1;//[Offset: 0x24, Size: 0x4] 0x7875b09380
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4] 0x7875b09400
	float Gain2;//[Offset: 0x2c, Size: 0x4] 0x7875b09480
	float Bandwidth2;//[Offset: 0x30, Size: 0x4] 0x7875b07400
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4] 0x7875b07480
	float Gain3;//[Offset: 0x38, Size: 0x4] 0x7875b07500
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4] 0x7875b07580

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8] 0x7875b07600
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4] 0x7875b07680
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4] 0x7875b07700
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4] 0x7875b07780
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7875b07800
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4] 0x7875b07880

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24] 0x78e25c9480

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4] 0x7875b07c00
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7875b07c80
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1] 0x7875b07d00
	float RetriggerTime;//[Offset: 0x8, Size: 0x4] 0x7875b07d80
	float VolumeScale;//[Offset: 0xc, Size: 0x4] 0x7875b07e00
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4] 0x78759ef7e0
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4] 0x7875b07f00
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875b07f80
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4] 0x7875b08000
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4] 0x7875b08080

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0] 0x78e25c7600

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7875b06d80
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x7875b06e00
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x7875b06e80
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x7875b06f00
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x7875b06f80
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x7875b07000
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x7875b07080
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1] 0x7875b07100
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x7875b07180
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x7875b07200
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x7875b07280
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x7875b07300
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1] 0x7875b07380
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4] 0x7875b05300
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1] 0x78759ef920
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1] 0x7875b05400
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1] 0x78759ef9c0
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1] 0x78759efa60
	float OmniRadius;//[Offset: 0xbc, Size: 0x4] 0x7875b05580
	float StereoSpread;//[Offset: 0xc0, Size: 0x4] 0x7875b05600
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4] 0x7875b05680
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4] 0x7875b05700
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88] 0x7875b05780
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88] 0x7875b05800
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4] 0x7875b05880
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4] 0x7875b05900
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4] 0x7875b05980
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4] 0x7875b05a00
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4] 0x7875b05a80
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4] 0x7875b05b00
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4] 0x7875b05b80
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4] 0x7875b05c00
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4] 0x7875b05c80
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4] 0x7875b05d00
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4] 0x7875b05d80
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4] 0x7875b05e00
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4] 0x7875b05e80
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4] 0x7875b05f00
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4] 0x7875b05f80
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4] 0x7875b06000
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4] 0x7875b06080
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4] 0x7875b06100
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4] 0x7875b06180
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4] 0x7875b06200
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4] 0x7875b06280
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4] 0x7875b06300
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88] 0x7875b04280
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10] 0x78759efba0
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4] 0x7875b04780
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4] 0x7875b04800
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4] 0x7875b04880
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4] 0x7875b04900
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4] 0x7875b04980
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88] 0x7875b04a00
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30] 0x7875b04c00

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1] 0x78759e7d60
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1] 0x7875a61a00
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4] 0x7875a61a80
	enum FalloffMode;//[Offset: 0x10, Size: 0x1] 0x78759e7e00
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc] 0x7875a61b80
	float ConeOffset;//[Offset: 0x20, Size: 0x4] 0x7875a61c00
	float FalloffDistance;//[Offset: 0x24, Size: 0x4] 0x7875a61c80
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88] 0x7875a61d00

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80] 0x787595d700
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8] 0x787595d780

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8] 0x7875b04300
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1] 0x78759efb00
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4] 0x7875b04400
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4] 0x7875b04480
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4] 0x7875b04500
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4] 0x7875b04580
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7875b04600
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88] 0x7875b04680

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10] 0x78759efc40
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10] 0x78759efce0
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10] 0x78759efd80

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x78759ea420
	enum SendStage;//[Offset: 0x1, Size: 0x1] 0x78759ea4c0
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8] 0x7875a62b80
	float SendLevel;//[Offset: 0x10, Size: 0x4] 0x7875a62c00
	float MinSendLevel;//[Offset: 0x14, Size: 0x4] 0x7875a62c80
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4] 0x7875a62d00
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4] 0x7875a62d80
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4] 0x7875a62e00
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88] 0x7875a62e80

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10] 0x78e24e5600
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e25c8f00

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8] 0x7875b07b00
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875b07b80

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1] 0x7875b311e0
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8] 0x7875b08500
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8] 0x7875b08580
	float SendLevel;//[Offset: 0x18, Size: 0x4] 0x7875b08600
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4] 0x7875b08680
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4] 0x7875b08700
	float MinSendDistance;//[Offset: 0x24, Size: 0x4] 0x7875b08780
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4] 0x7875b08800
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88] 0x7875b08880

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x36c, Size: 0x1] 0x78e24e7900
	float SourceBusDuration;//[Offset: 0x370, Size: 0x4] 0x78e25cab00
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8] 0x78e25cab80
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1] 0x78e25cac00

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1] 0x78e2372040

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10] 0x78e22e4080
	Object* Payload;//[Offset: 0x38, Size: 0x8] 0x78e22e4100
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8] 0x78e22e4180
	enum Pivot;//[Offset: 0x48, Size: 0x1] 0x7875d479a0
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8] 0x78e22e2180
	delegate OnDrop;//[Offset: 0x58, Size: 0x10] 0x78e22e2200
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10] 0x78e22e2280
	delegate OnDragged;//[Offset: 0x78, Size: 0x10] 0x78e22e2300
	void Drop(out const PointerEvent PointerEvent);// 0x86a86bc 0x78e229f120
	void Dragged(out const PointerEvent PointerEvent);// 0x86a83f4 0x78e229f200
	void DragCancelled(out const PointerEvent PointerEvent);// 0x86a8558 0x78e229f2e0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8] 0x7875fc8f00
	Vector2D Scale;//[Offset: 0x8, Size: 0x8] 0x7875fc8f80
	Vector2D Shear;//[Offset: 0x10, Size: 0x8] 0x7875fc9000
	float Angle;//[Offset: 0x18, Size: 0x4] 0x7875fc9080

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875fc5a00
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1] 0x7895c18800
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1] 0x7895c186c0
	FText AccessibleText;//[Offset: 0x30, Size: 0x18] 0x7875fc5b80
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10] 0x7875fc5c00
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18] 0x7875fc5d00
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10] 0x7875fc5e00

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24] 0x78e230b200
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24] 0x78e230b280
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24] 0x78e230b300
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24] 0x78e230b380
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24] 0x78e230b400
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24] 0x78e230b480

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1] 0x78759e33a0
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8] 0x7875a12300
	Widget* Widget;//[Offset: 0xc, Size: 0x8] 0x7875a12380
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10] 0x7875a12400

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8] 0x78e22cf280
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28] 0x78e22cf300
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8] 0x78e22cf380

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10] 0x78759e2180
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8] 0x78759dcc80

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78759dca80
	int ArrayIndex;//[Offset: 0x8, Size: 0x4] 0x78759dcb00
	Struct* Struct;//[Offset: 0x10, Size: 0x8] 0x78759dcb80

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8] 0x7875fc6380
	Margin Margin;//[Offset: 0x10, Size: 0x10] 0x7875fc6600
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28] 0x7875fc6780
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8] 0x7875fc6800
	FName ResourceName;//[Offset: 0x50, Size: 0x8] 0x7875fc6880
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14] 0x7875fc6900
	byte DrawAs;//[Offset: 0x6c, Size: 0x1] 0x7875fc6980
	byte Tiling;//[Offset: 0x6d, Size: 0x1] 0x7875fc6a00
	byte Mirroring;//[Offset: 0x6e, Size: 0x1] 0x7875fc6a80
	byte ImageType;//[Offset: 0x6f, Size: 0x1] 0x7875fc6b00
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7875fc6b80
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x7875fc6c00

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8] 0x78c24ee480
	Vector2D Max;//[Offset: 0x8, Size: 0x8] 0x78c24ee500
	byte bIsValid;//[Offset: 0x10, Size: 0x1] 0x78c24ee580

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 0x8] 0x78e256bd80
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78e256be00
	float DefaultFOV;//[Offset: 0x238, Size: 0x4] 0x78e256be80
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 0x4] 0x78e256bf00
	float DefaultAspectRatio;//[Offset: 0x248, Size: 0x4] 0x78e256bf80
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 0x600] 0x78e256c000
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 0x600] 0x78e256c080
	TViewTarget ViewTarget;//[Offset: 0xe90, Size: 0x610] 0x78e256c100
	TViewTarget PendingViewTarget;//[Offset: 0x14a0, Size: 0x610] 0x78e256c180
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ae0, Size: 0x600] 0x78e256c200
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20e0, Size: 0x600] 0x78e256c280
	CameraModifier*[] ModifierList;//[Offset: 0x26e0, Size: 0x10] 0x78e24e3620
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26f0, Size: 0x10] 0x78e24e3760
	float FreeCamDistance;//[Offset: 0x2700, Size: 0x4] 0x78e256c380
	Vector FreeCamOffset;//[Offset: 0x2704, Size: 0xc] 0x78e256c400
	Vector ViewTargetOffset;//[Offset: 0x2710, Size: 0xc] 0x78e256c480
	delegate OnAudioFadeChangeEvent;//[Offset: 0x2720, Size: 0x10] 0x78e256c500
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2740, Size: 0x10] 0x78e24e3800
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2750, Size: 0x8] 0x78e256c600
	CameraAnimInst* AnimInstPool;//[Offset: 0x2758, Size: 0x8] 0x78e256a580
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2798, Size: 0x10] 0x78e24e38a0
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x27b8, Size: 0x10] 0x78e24e3940
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27c8, Size: 0x10] 0x78e24e39e0
	CameraActor* AnimCameraActor;//[Offset: 0x27d8, Size: 0x8] 0x78e256a780
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27e0, Size: 0x1] 0x78e256a800
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27e0, Size: 0x1] 0x78e256a880
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27e0, Size: 0x1] 0x78e256a900
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27e0, Size: 0x1] 0x78e256a980
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27e1, Size: 0x1] 0x78e256aa00
	float ViewPitchMin;//[Offset: 0x27e4, Size: 0x4] 0x78e256aa80
	float ViewPitchMax;//[Offset: 0x27e8, Size: 0x4] 0x78e256ab00
	float ViewYawMin;//[Offset: 0x27ec, Size: 0x4] 0x78e256ab80
	float ViewYawMax;//[Offset: 0x27f0, Size: 0x4] 0x78e256ac00
	float ViewRollMin;//[Offset: 0x27f4, Size: 0x4] 0x78e256ac80
	float ViewRollMax;//[Offset: 0x27f8, Size: 0x4] 0x78e256ad00
	float ServerUpdateCameraTimeout;//[Offset: 0x2800, Size: 0x4] 0x78e256ad80
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x969caec 0x78e24bdb40
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x969d8d8 0x78e24bdc20
	void StopCameraFade();// 0x969d288 0x78e24bdd00
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x969cbdc 0x78e24bdde0
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x969d5d0 0x78e24bdec0
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x969d7d4 0x78e24bdfa0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x969cce0 0x78e24be080
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x969d4cc 0x78e24be160
	void StopAllCameraShakes(bool bImmediately);// 0x969d71c 0x78e24be240
	void StopAllCameraAnims(bool bImmediate);// 0x969cb24 0x78e24be320
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x969d9dc 0x78e24be400
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x969dbbc 0x78e24be4e0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x969d2a4 0x78e24be5c0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x969d13c 0x78e24be6a0
	void SetGameCameraCutThisFrame();// 0x969cb00 0x78e24badc0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x969df94 0x78e24baea0
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x969dd70 0x78e24baf80
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x969cde4 0x78e24bb060
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x969e26c 0x78e24bb140
	void OnPhotographySessionStart();// 0x969e250 0x78e24bb220
	void OnPhotographySessionEnd();// 0x969e234 0x78e24bb300
	void OnPhotographyMultiPartCaptureStart();// 0x969e218 0x78e24bb3e0
	void OnPhotographyMultiPartCaptureEnd();// 0x969e1fc 0x78e24bb4c0
	PlayerController* GetOwningPlayerController();// 0x969e1c0 0x78e24bb5a0
	float GetFOVAngle();// 0x969df58 0x78e24bb680
	Rotator GetCameraRotation();// 0x969df18 0x78e24bb760
	Vector GetCameraLocation();// 0x969ded8 0x78e24bb840
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x969e050 0x78e24bb920
	void ClearCameraLensEffects();// 0x969dd54 0x78e24bba00
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x6d94ba8 0x78e24bbae0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x969e108 0x78e24bbbc0
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x969de20 0x78e24bbca0

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875bc5500
	float ShakeScale;//[Offset: 0x2c, Size: 0x4] 0x7875bc5580
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8] 0x7875bc5600
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8] 0x7875bc5680
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x94a9288 0x7875bb3b20
	CameraShakePattern* GetRootShakePattern();// 0x94a9330 0x7875bb3c00

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8] 0x78e23b6980
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8] 0x78e23b6a00
	float PlayRate;//[Offset: 0x50, Size: 0x4] 0x78e23b6a80
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8] 0x78e23b6b00
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8] 0x78e23b6b80
	enum PlaySpace;//[Offset: 0x78, Size: 0x1] 0x78e2374de0
	void Stop(bool bImmediate);// 0x94a5a3c 0x78e23c2380
	void SetScale(float NewDuration);// 0x94a58ec 0x78e23c2460
	void SetDuration(float NewDuration);// 0x94a5994 0x78e23c2540

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8] 0x78e23b6e00
	float AnimLength;//[Offset: 0x30, Size: 0x4] 0x78e23b6e80
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c] 0x78e23b6f00
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e23b6f80
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78e23b7000
	float BaseFOV;//[Offset: 0x54, Size: 0x4] 0x78e23b7080
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x560] 0x78e23b7100
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 0x4] 0x78e23b7180

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10] 0x78e237b280
	FName GroupName;//[Offset: 0x40, Size: 0x8] 0x78e242c200
	Color GroupColor;//[Offset: 0x48, Size: 0x4] 0x78e242c280
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78e242c300
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1] 0x78e242c380
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1] 0x78e242c400
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1] 0x78e242c480
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1] 0x78e242c500

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10] 0x78e237b0a0
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8] 0x78e237b140
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1] 0x78e242ba00
	FString TrackTitle;//[Offset: 0x58, Size: 0x10] 0x78e242ba80
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e242bb00
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78e242bb80
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78e242bc00
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78e242bc80
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78e242bd00
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78e242bd80
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78e242be00
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78e242be80

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875a84200
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875a82180
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875a82200
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875a82280
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875a82300
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875a82380
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875a82400
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875a82480
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875a82500
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7875a82580
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7875a82600
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7875a82680
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7875a82700
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7875a82780
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7875a82800
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7875a82880
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1] 0x7875a82900
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1] 0x7875a82980
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1] 0x7875a82a00
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1] 0x7875a82a80
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1] 0x7875a82b00
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1] 0x7875a82b80
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1] 0x7875a82c00
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1] 0x7875a82c80
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1] 0x7875a82d00
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1] 0x7875a82d80
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1] 0x7875a82e00
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1] 0x7875a82e80
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1] 0x7875a82f00
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1] 0x7875a82f80
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1] 0x7875a83000
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1] 0x7875a83080
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7875a83100
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1] 0x7875a83180
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1] 0x7875a81100
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1] 0x7875a81180
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1] 0x7875a81200
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1] 0x7875a81280
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1] 0x7875a81300
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1] 0x7875a81380
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1] 0x7875a81400
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1] 0x7875a81480
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1] 0x7875a81500
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1] 0x7875a81580
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1] 0x7875a81600
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1] 0x7875a81680
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1] 0x7875a81700
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1] 0x7875a81780
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1] 0x7875a81800
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1] 0x7875a81880
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1] 0x7875a81900
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1] 0x7875a81980
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1] 0x7875a81a00
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1] 0x7875a81a80
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1] 0x7875a81b00
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1] 0x7875a81b80
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1] 0x7875a81c00
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1] 0x7875a81c80
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1] 0x7875a81d00
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1] 0x7875a81d80
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1] 0x7875a81e00
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1] 0x7875a81e80
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1] 0x7875a81f00
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1] 0x7875a81f80
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875a82000
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875a82080
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7875a82100
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7875a80080
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7875a80100
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1] 0x7875a80180
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1] 0x7875a80200
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1] 0x7875a80280
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1] 0x7875a80300
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1] 0x7875a80380
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1] 0x7875a80400
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1] 0x7875a80480
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1] 0x7875a80500
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1] 0x7875a80580
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1] 0x7875a80600
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1] 0x7875a80680
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7875a80700
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1] 0x7875a80780
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1] 0x7875a80800
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1] 0x7875a80880
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1] 0x7875a80900
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1] 0x7875a80980
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1] 0x7875a80a00
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1] 0x7875a80a80
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1] 0x7875a80b00
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1] 0x7875a80b80
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1] 0x7875a80c00
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1] 0x7875a80c80
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1] 0x7875a80d00
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1] 0x7875a80d80
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1] 0x7875a80e00
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1] 0x7875a80e80
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875a80f00
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7875a80f80
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7875a81000
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7875a81080
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1] 0x7875a6f800
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1] 0x7875a6f880
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1] 0x7875a6f900
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1] 0x7875a6f980
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1] 0x7875a6fa00
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1] 0x7875a6fa80
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1] 0x7875a6fb00
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1] 0x7875a6fb80
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1] 0x7875a6fc00
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1] 0x7875a6fc80
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1] 0x7875a6fd00
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1] 0x7875a6fd80
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1] 0x7875a6fe00
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1] 0x7875a6fe80
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1] 0x7875a6ff00
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1] 0x7875a6ff80
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1] 0x7875a6e780
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1] 0x7875a6e800
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1] 0x7875a6e880
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1] 0x7875a6e900
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1] 0x7875a6e980
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1] 0x7875a6ea00
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1] 0x7875a6ea80
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1] 0x7875a6eb00
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1] 0x7875a6eb80
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1] 0x7875a6ec00
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1] 0x7875a6ec80
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1] 0x7875a6ed00
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875a6ed80
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7875a6ee00
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7875a6ee80
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x7875a6ef00
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x7875a6ef80
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x7875a6f000
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x7875a6f080
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x7875a6f100
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1] 0x7875a6f180
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1] 0x7875a6f200
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1] 0x7875a6f280
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1] 0x7875a6f300
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1] 0x7875a6f380
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1] 0x7875a6f400
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1] 0x7875a6f480
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1] 0x7875a6f500
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1] 0x7875a6f580
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1] 0x7875a6f600
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1] 0x7875a6f680
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1] 0x7875a6f700
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1] 0x7875a6f780
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1] 0x7875a6d700
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1] 0x7875a6d780
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1] 0x7875a6d800
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1] 0x7875a6d880
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1] 0x7875a6d900
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1] 0x7875a6d980
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1] 0x7875a6da00
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1] 0x7875a6da80
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1] 0x7875a6db00
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1] 0x7875a6db80
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1] 0x7875a6dc00
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7875a6dc80
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1] 0x7875a6dd00
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1] 0x7875a6dd80
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1] 0x7875a6de00
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1] 0x7875a6de80
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1] 0x7875a6df00
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1] 0x7875a6df80
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1] 0x7875a6e000
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1] 0x7875a6e080
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1] 0x7875a6e100
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1] 0x7875a6e180
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1] 0x7875a6e200
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1] 0x7875a6e280
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1] 0x7875a6e300
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1] 0x7875a6e380
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1] 0x7875a6e400
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1] 0x7875a6e480
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1] 0x7875a6e500
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1] 0x7875a6e580
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1] 0x7875a6e600
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1] 0x7875a6e680
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1] 0x7875a6e700
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1] 0x7875a6c680
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1] 0x7875a6c700
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1] 0x7875a6c780
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1] 0x7875a6c800
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1] 0x7875a6c880
	byte BloomMethod;//[Offset: 0x18, Size: 0x1] 0x7875a6c900
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1] 0x7875a6c980
	byte TemperatureType;//[Offset: 0x1a, Size: 0x1] 0x7875a6ca00
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4] 0x7875a6ca80
	float WhiteTint;//[Offset: 0x20, Size: 0x4] 0x7875a6cb00
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10] 0x7875a6cb80
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10] 0x7875a6cc00
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10] 0x7875a6cc80
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10] 0x7875a6cd00
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10] 0x7875a6cd80
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10] 0x7875a6ce00
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10] 0x7875a6ce80
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10] 0x7875a6cf00
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10] 0x7875a6cf80
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10] 0x7875a6d000
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10] 0x7875a6d080
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10] 0x7875a6d100
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10] 0x7875a6d180
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10] 0x7875a6d200
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10] 0x7875a6d280
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10] 0x7875a6d300
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10] 0x7875a6d380
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10] 0x7875a6d400
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10] 0x7875a6d480
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10] 0x7875a6d500
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4] 0x7875a6d580
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4] 0x7875a6d600
	float BlueCorrection;//[Offset: 0x178, Size: 0x4] 0x7875a6d680
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4] 0x7875a6b600
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4] 0x7875a6b680
	float FilmSlope;//[Offset: 0x184, Size: 0x4] 0x7875a6b700
	float FilmToe;//[Offset: 0x188, Size: 0x4] 0x7875a6b780
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4] 0x7875a6b800
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4] 0x7875a6b880
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4] 0x7875a6b900
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10] 0x7875a6b980
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10] 0x7875a6ba00
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4] 0x7875a6ba80
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4] 0x7875a6bb00
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4] 0x7875a6bb80
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10] 0x7875a6bc00
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10] 0x7875a6bc80
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10] 0x7875a6bd00
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4] 0x7875a6bd80
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4] 0x7875a6be00
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4] 0x7875a6be80
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4] 0x7875a6bf00
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10] 0x7875a6bf80
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4] 0x7875a6c000
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4] 0x7875a6c080
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4] 0x7875a6c100
	float BloomThreshold;//[Offset: 0x220, Size: 0x4] 0x7875a6c180
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4] 0x7875a6c200
	float Bloom1Size;//[Offset: 0x228, Size: 0x4] 0x7875a6c280
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4] 0x7875a6c300
	float Bloom3Size;//[Offset: 0x230, Size: 0x4] 0x7875a6c380
	float Bloom4Size;//[Offset: 0x234, Size: 0x4] 0x7875a6c400
	float Bloom5Size;//[Offset: 0x238, Size: 0x4] 0x7875a6c480
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4] 0x7875a6c500
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10] 0x7875a6c580
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10] 0x7875a6c600
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10] 0x7875a6a580
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10] 0x7875a6a600
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10] 0x7875a6a680
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10] 0x7875a6a700
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4] 0x7875a6a780
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8] 0x7875a6a800
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8] 0x7875a6a880
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4] 0x7875a6a900
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4] 0x7875a6a980
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4] 0x7875a6aa00
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4] 0x7875a6aa80
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8] 0x7875a6ab00
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4] 0x7875a6ab80
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10] 0x7875a6ac00
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10] 0x7875a6ac80
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4] 0x7875a6ad00
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8] 0x7875a6ad80
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4] 0x7875a6ae00
	float CameraISO;//[Offset: 0x304, Size: 0x4] 0x7875a6ae80
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4] 0x7875a6af00
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4] 0x7875a6af80
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4] 0x7875a6b000
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4] 0x7875a6b080
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4] 0x7875a6b100
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1] 0x7875a6b180
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c, Size: 0x1] 0x7875a6b200
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 0x8] 0x7875a6b280
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 0x8] 0x7875a6b300
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 0x4] 0x7875a6b380
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 0x4] 0x7875a6b400
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 0x4] 0x7875a6b480
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 0x4] 0x7875a6b500
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 0x4] 0x7875a6b580
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 0x4] 0x7875a69500
	float HistogramLogMin;//[Offset: 0x348, Size: 0x4] 0x7875a69580
	float HistogramLogMax;//[Offset: 0x34c, Size: 0x4] 0x7875a69600
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 0x4] 0x7875a69680
	float LensFlareIntensity;//[Offset: 0x354, Size: 0x4] 0x7875a69700
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 0x10] 0x7875a69780
	float LensFlareBokehSize;//[Offset: 0x368, Size: 0x4] 0x7875a69800
	float LensFlareThreshold;//[Offset: 0x36c, Size: 0x4] 0x7875a69880
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 0x8] 0x7875a69900
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 0x10] 0x7875a69980
	float VignetteIntensity;//[Offset: 0x3f8, Size: 0x4] 0x7875a69a00
	float GrainJitter;//[Offset: 0x3fc, Size: 0x4] 0x7875a69a80
	float GrainIntensity;//[Offset: 0x400, Size: 0x4] 0x7875a69b00
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 0x4] 0x7875a69b80
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 0x4] 0x7875a69c00
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 0x4] 0x7875a69c80
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1] 0x7875a69d00
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 0x4] 0x7875a69d80
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 0x4] 0x7875a69e00
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 0x4] 0x7875a69e80
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 0x4] 0x7875a69f00
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 0x4] 0x7875a69f80
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 0x4] 0x7875a6a000
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 0x4] 0x7875a6a080
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 0x4] 0x7875a6a100
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 0x4] 0x7875a6a180
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 0x4] 0x7875a6a200
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1] 0x7875a6a280
	int RayTracingAOSamplesPerPixel;//[Offset: 0x440, Size: 0x4] 0x7875a6a300
	float RayTracingAOIntensity;//[Offset: 0x444, Size: 0x4] 0x7875a6a380
	float RayTracingAORadius;//[Offset: 0x448, Size: 0x4] 0x7875a6a400
	LinearColor IndirectLightingColor;//[Offset: 0x44c, Size: 0x10] 0x7875a6a480
	float IndirectLightingIntensity;//[Offset: 0x45c, Size: 0x4] 0x7875a6a500
	enum RayTracingGIType;//[Offset: 0x460, Size: 0x1] 0x78759e93e0
	int RayTracingGIMaxBounces;//[Offset: 0x464, Size: 0x4] 0x7875a68500
	int RayTracingGISamplesPerPixel;//[Offset: 0x468, Size: 0x4] 0x7875a68580
	float ColorGradingIntensity;//[Offset: 0x46c, Size: 0x4] 0x7875a68600
	Texture* ColorGradingLUT;//[Offset: 0x470, Size: 0x8] 0x7875a68680
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 0x4] 0x7875a68700
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 0x4] 0x7875a68780
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 0x4] 0x7875a68800
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 0x4] 0x7875a68880
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 0x4] 0x7875a68900
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 0x4] 0x7875a68980
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 0x4] 0x7875a68a00
	float DepthOfFieldScale;//[Offset: 0x494, Size: 0x4] 0x7875a68a80
	float DepthOfFieldNearBlurSize;//[Offset: 0x498, Size: 0x4] 0x7875a68b00
	float DepthOfFieldFarBlurSize;//[Offset: 0x49c, Size: 0x4] 0x7875a68b80
	float DepthOfFieldOcclusion;//[Offset: 0x4a0, Size: 0x4] 0x7875a68c00
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a4, Size: 0x4] 0x7875a68c80
	float DepthOfFieldVignetteSize;//[Offset: 0x4a8, Size: 0x4] 0x7875a68d00
	float MotionBlurAmount;//[Offset: 0x4ac, Size: 0x4] 0x7875a68d80
	float MotionBlurMax;//[Offset: 0x4b0, Size: 0x4] 0x7875a68e00
	int MotionBlurTargetFPS;//[Offset: 0x4b4, Size: 0x4] 0x7875a68e80
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4] 0x7875a68f00
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4] 0x7875a68f80
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4] 0x7875a69000
	float LPVSize;//[Offset: 0x4c4, Size: 0x4] 0x7875a69080
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4] 0x7875a69100
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4] 0x7875a69180
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4] 0x7875a69200
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4] 0x7875a69280
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4] 0x7875a69300
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4] 0x7875a69380
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4] 0x7875a69400
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4] 0x7875a69480
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4] 0x7875a67400
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4] 0x7875a67480
	enum ReflectionsType;//[Offset: 0x4f0, Size: 0x1] 0x78759e9480
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f4, Size: 0x4] 0x7875a67580
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f8, Size: 0x4] 0x7875a67600
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4fc, Size: 0x4] 0x7875a67680
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x500, Size: 0x4] 0x7875a67700
	int RayTracingReflectionsMaxBounces;//[Offset: 0x504, Size: 0x4] 0x7875a67780
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x508, Size: 0x4] 0x7875a67800
	enum RayTracingReflectionsShadows;//[Offset: 0x50c, Size: 0x1] 0x78759e9520
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50d, Size: 0x1] 0x7875a67900
	enum TranslucencyType;//[Offset: 0x50e, Size: 0x1] 0x78759e95c0
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x510, Size: 0x4] 0x7875a67a00
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x514, Size: 0x4] 0x7875a67a80
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x518, Size: 0x4] 0x7875a67b00
	enum RayTracingTranslucencyShadows;//[Offset: 0x51c, Size: 0x1] 0x78759e9660
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1] 0x7875a67c00
	int PathTracingMaxBounces;//[Offset: 0x520, Size: 0x4] 0x7875a67c80
	int PathTracingSamplesPerPixel;//[Offset: 0x524, Size: 0x4] 0x7875a67d00
	float PathTracingFilterWidth;//[Offset: 0x528, Size: 0x4] 0x7875a67d80
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x52c, Size: 0x1] 0x7875a67e00
	float PathTracingMaxPathExposure;//[Offset: 0x530, Size: 0x4] 0x7875a67e80
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534, Size: 0x1] 0x7875a67f00
	float LPVFadeRange;//[Offset: 0x538, Size: 0x4] 0x7875a67f80
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x53c, Size: 0x4] 0x7875a68000
	float ScreenPercentage;//[Offset: 0x540, Size: 0x4] 0x7875a68080
	WeightedBlendables WeightedBlendables;//[Offset: 0x548, Size: 0x10] 0x7875a68280

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10] 0x78759e9700

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4] 0x7875a68100
	Object* Object;//[Offset: 0x8, Size: 0x8] 0x7875a68180

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8] 0x78e242bf00
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8] 0x78e242bf80
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10] 0x78e237b1e0

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18] 0x78e242d700
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18] 0x78e242d780
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10] 0x78e242d800
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8] 0x78e242d880
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4] 0x78e242d900
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4] 0x78e242d980
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78e242da00
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78e242da80
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78e242db00
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x78e242db80
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1] 0x78e242dc00
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1] 0x78e242dc80
	byte RotMode;//[Offset: 0xc1, Size: 0x1] 0x78e242dd00

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc66500
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24ef300
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24ef380

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24ef400
	Vector OutVal;//[Offset: 0x4, Size: 0xc] 0x78c24ef480
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x78c24ef500
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x78c24ef580
	byte InterpMode;//[Offset: 0x28, Size: 0x1] 0x78c24ef600

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10] 0x78759ec2c0

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8] 0x7875ac7500
	float Time;//[Offset: 0x8, Size: 0x4] 0x7875ac7580

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc] 0x78e242e600
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc] 0x78e242e680

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f1, Size: 0x1] 0x78e2374980
	float InnerAttenuationRadius;//[Offset: 0x1f4, Size: 0x4] 0x78e23b7980
	float OuterAttenuationRadius;//[Offset: 0x1f8, Size: 0x4] 0x78e23b7a00
	class CameraShakeBase* CameraShake;//[Offset: 0x200, Size: 0x8] 0x78e2374a20
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x78e23b7a80
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x94a9f78 0x78e23c53a0
	void StopAllCameraShakes(bool bImmediately);// 0x94a9ec8 0x78e23c5480
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x94aa074 0x78e23c5560
	void Start();// 0x94aa1fc 0x78e23c5640
	float GetAttenuationFactor(out const Vector Location);// 0x94a9e10 0x78e23c1d60

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e23b8080
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78e23b8100
	byte Priority;//[Offset: 0x29, Size: 0x1] 0x78e23b8180
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8] 0x78e23b8200
	float AlphaInTime;//[Offset: 0x38, Size: 0x4] 0x78e23b8280
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4] 0x78e23b8300
	float Alpha;//[Offset: 0x40, Size: 0x4] 0x78e23b8380
	bool IsDisabled();// 0x94a7730 0x78e23c1e40
	Actor* GetViewTarget();// 0x94a76f4 0x78e23c1f20
	void EnableModifier();// 0x94a7620 0x78e23c2000
	void DisableModifier(bool bImmediate);// 0x94a763c 0x78e23c20e0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x6d94ba8 0x78e23c21c0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x6d94ba8 0x78e23c22a0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 0x8] 0x78e23f6400
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 0x8] 0x78e23f6480
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 0x8] 0x78e23f6500
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30] 0x78e23f6580
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4] 0x78e23f6600
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1] 0x78e23f6680
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1] 0x78e23f6700
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10] 0x78e2377b80
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4] 0x78e23f6780

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 0x8] 0x78e23f6800
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78e23f6880
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78e23f6900
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78e23f6980
	delegate OnParticleSpawn;//[Offset: 0x230, Size: 0x10] 0x78e23f6a00
	delegate OnParticleBurst;//[Offset: 0x240, Size: 0x10] 0x78e23f6a80
	delegate OnParticleDeath;//[Offset: 0x250, Size: 0x10] 0x78e23f6b00
	delegate OnParticleCollide;//[Offset: 0x260, Size: 0x10] 0x78e23f6b80
	void ToggleActive();// 0x94ed00c 0x78e23e2a80
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x94ecd40 0x78e23e2b60
	void SetTemplate(ParticleSystem* NewTemplate);// 0x94ecf24 0x78e23e2c40
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x94eca70 0x78e23e2d20
	void SetFloatParameter(FName ParameterName, float Param);// 0x94ece30 0x78e23e2e00
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x94ecc50 0x78e23e2ee0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x94ecb60 0x78e23e2fc0
	void OnRep_bCurrentlyActive();// 0x94ed048 0x78e23e30a0
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x94ed064 0x78e23e3180
	bool IsActive();// 0x94ecfd4 0x78e23e3260
	void Deactivate();// 0x94ed020 0x78e23e3340
	void Activate();// 0x94ed034 0x78e23e3420

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4] 0x78e24fe400
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4] 0x78e24fe480
	float WarmupTime;//[Offset: 0x38, Size: 0x4] 0x78e24fe500
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4] 0x78e24fe580
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10] 0x78e24e25e0
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8] 0x78e24fe680
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8] 0x78e24fe700
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4] 0x78e24fc680
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4] 0x78e24fc700
	float[] LODDistances;//[Offset: 0x68, Size: 0x10] 0x78e24e2680
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10] 0x78e24e2720
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c] 0x78e24fc880
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4] 0x78e24fc900
	float Delay;//[Offset: 0xa8, Size: 0x4] 0x78e24fc980
	float DelayLow;//[Offset: 0xac, Size: 0x4] 0x78e24fca00
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e24fca80
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78e24fcb00
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78e24fcb80
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78e24fcc00
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78e24fcc80
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78e24fcd00
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1] 0x78e24fcd80
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1] 0x78e24fce00
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1] 0x78e24fce80
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1] 0x78e24fcf00
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1] 0x78e24fcf80
	byte LODMethod;//[Offset: 0xb3, Size: 0x1] 0x78e24fd000
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1] 0x78e24e27c0
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1] 0x78e24fd100
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1] 0x78e24e2860
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4] 0x78e24fd200
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4] 0x78e24fd280
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x78e24fd300
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c] 0x78e24fd380
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10] 0x78e24e2900
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10] 0x78e24e0060
	bool ContainsEmitterType(class Object TypeData);// 0x9681440 0x78e24b6600

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4] 0x7875c45e00
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4] 0x7875c45e80

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8] 0x78e24de100
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4] 0x78e24de180
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1] 0x78e24de200
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1] 0x78e24e0d80
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1] 0x78e24de300
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1] 0x78e24de380
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1] 0x78e24de400
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1] 0x78e24de480
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1] 0x78e24de500
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e24de580
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10] 0x78e24e0e20
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4] 0x78e24de680
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4] 0x78e24de700
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4] 0x78e24dc680
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4] 0x78e24dc700

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4] 0x78e24dda00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x78e24dda80
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8] 0x78e24ddb00
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10] 0x78e24e09c0
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8] 0x78e24ddc00
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8] 0x78e24ddc80
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8] 0x78e24ddd00
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10] 0x78e24e0a60
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10] 0x78e24e0b00
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10] 0x78e24e0ba0
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10] 0x78e24e0c40
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10] 0x78e24e0ce0
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e24de000
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4] 0x78e24de080

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8] 0x78e24f7a80
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4] 0x78e24f7b00
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4] 0x78e24f7b80
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc] 0x78e24f7c00
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc] 0x78e24f7c80
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1] 0x78e24f7d00
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1] 0x78e24f7d80
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1] 0x78e24f7e00
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1] 0x78e24f7e80
	byte SortMode;//[Offset: 0x5a, Size: 0x1] 0x78e24f7f00
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1] 0x78e24f7f80
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78e24f8000
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78e24f8080
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4] 0x78e24f8100
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30] 0x78e24f8180
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10] 0x78e24e02e0
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4] 0x78e24f8280
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4] 0x78e24f8300
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e24f8380
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1] 0x78e24f8400
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1] 0x78e24f6380
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1] 0x78e24f6400
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1] 0x78e24f6480
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78e24f6500
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78e24f6580
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1] 0x78e24f6600
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1] 0x78e24f6680
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1] 0x78e24f6700
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4] 0x78e24f6780
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4] 0x78e24f6800
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4] 0x78e24f6880
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4] 0x78e24f6900
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc] 0x78e24f6980
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4] 0x78e24f6a00
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1] 0x78e24e0380
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1] 0x78e24f6b00
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1] 0x78e24f6b80
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc] 0x78e24f6c00
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4] 0x78e24f6c80
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4] 0x78e24f6d00
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8] 0x78e24f6d80
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4] 0x78e24f6e00
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4] 0x78e24f6e80
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc] 0x78e24f6f00
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10] 0x78e24e0420

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e24df480
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78e24df500
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x78e24df580
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x78e24df600
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x78e24df680
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x78e24df700
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x78e24df780
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x78e24dd700
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x78e24dd780
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x78e24dd800
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x78e24dd880
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x78e24dd900
	byte LODValidity;//[Offset: 0x2a, Size: 0x1] 0x78e24dd980

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x7875a8ac00
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x7875a8ac80
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8] 0x7875a8ad00

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7878052d80

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4] 0x7878052e00
	float TimeBias;//[Offset: 0x4, Size: 0x4] 0x7878052e80
	float[] Values;//[Offset: 0x8, Size: 0x10] 0x78780011e0
	byte Op;//[Offset: 0x18, Size: 0x1] 0x7878052f80
	byte EntryCount;//[Offset: 0x19, Size: 0x1] 0x7878053000
	byte EntryStride;//[Offset: 0x1a, Size: 0x1] 0x7878051100
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1] 0x7878053080
	byte LockFlag;//[Offset: 0x1c, Size: 0x1] 0x7878053100

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78e23f3b00
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78e23f3b80

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4] 0x7875ae4280
	int CountLow;//[Offset: 0x4, Size: 0x4] 0x7875ae4300
	float Time;//[Offset: 0x8, Size: 0x4] 0x7875ae4380

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30] 0x78e24f8d80
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30] 0x78e24f8e00
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1] 0x78e24f8e80
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10] 0x78e24e0240
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30] 0x78e24f8f80
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78e24f9000

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24f9080
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78e24f9100

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10] 0x78e24e0880

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7875ae5980
	int Frequency;//[Offset: 0x4, Size: 0x4] 0x7875ae5a00
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4] 0x7875ae5a80
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875ae5b00
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1] 0x7875ae5b80
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1] 0x7875ae5c00
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1] 0x7875ae5c80
	FName CustomName;//[Offset: 0x10, Size: 0x8] 0x7875ae5d00
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10] 0x78759ed300

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1] 0x78e24f7300
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48] 0x78e24f7380
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4] 0x78e24f5300
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48] 0x78e24f5380
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4] 0x78e24f5400
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48] 0x78e24f5480
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4] 0x78e24f5500

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24f5580

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4] 0x7875a8a980
	float MaxValue;//[Offset: 0x24, Size: 0x4] 0x7875a8aa00
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc] 0x7875a8aa80
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc] 0x7875a8ab00
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8] 0x7875a8ab80

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78e23f3400
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x78e23f3480
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x78e23f3500

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ae5700
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ae5780
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ae5800

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1] 0x78e24f2700
	FName EventName;//[Offset: 0x2c, Size: 0x8] 0x78e24f2780

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x448, Size: 0x8] 0x78e2560100
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x450, Size: 0x10] 0x78e24e20e0
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x460, Size: 0x10] 0x78e24e2180
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x471, Size: 0x1] 0x78e2560280
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x471, Size: 0x1] 0x78e2560300
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x471, Size: 0x1] 0x78e2560380
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x471, Size: 0x1] 0x78e2560400
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x471, Size: 0x1] 0x78e2560480
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x472, Size: 0x1] 0x78e2560500
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x472, Size: 0x1] 0x78e2560580
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x472, Size: 0x1] 0x78e2560600
	byte LODMethod;//[Offset: 0x47d, Size: 0x1] 0x78e2560680
	enum RequiredSignificance;//[Offset: 0x47e, Size: 0x1] 0x78e24e2220
	ParticleSysParam[] InstanceParameters;//[Offset: 0x480, Size: 0x10] 0x78e24e22c0
	delegate OnParticleSpawn;//[Offset: 0x490, Size: 0x10] 0x78e2560800
	delegate OnParticleBurst;//[Offset: 0x4a0, Size: 0x10] 0x78e2560880
	delegate OnParticleDeath;//[Offset: 0x4b0, Size: 0x10] 0x78e2560900
	delegate OnParticleCollide;//[Offset: 0x4c0, Size: 0x10] 0x78e2560980
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1] 0x78e2560a00
	Vector OldPosition;//[Offset: 0x4d4, Size: 0xc] 0x78e2560a80
	Vector PartSysVelocity;//[Offset: 0x4e0, Size: 0xc] 0x78e2560b00
	float WarmupTime;//[Offset: 0x4ec, Size: 0x4] 0x78e2560b80
	float WarmupTickRate;//[Offset: 0x4f0, Size: 0x4] 0x78e2560c00
	float SecondsBeforeInactive;//[Offset: 0x4f8, Size: 0x4] 0x78e2560c80
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x500, Size: 0x4] 0x78e2560d00
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x520, Size: 0x10] 0x78e24e2360
	float CustomTimeDilation;//[Offset: 0x538, Size: 0x4] 0x78e2560e00
	SceneComponent* AutoAttachParent;//[Offset: 0x590, Size: 0x8] 0x78e2560e80
	FName AutoAttachSocketName;//[Offset: 0x598, Size: 0x8] 0x78e2560f00
	enum AutoAttachLocationRule;//[Offset: 0x5a0, Size: 0x1] 0x78e24e2400
	enum AutoAttachRotationRule;//[Offset: 0x5a1, Size: 0x1] 0x78e24e24a0
	enum AutoAttachScaleRule;//[Offset: 0x5a2, Size: 0x1] 0x78e24e2540
	delegate OnSystemFinished;//[Offset: 0x5d0, Size: 0x10] 0x78e24ff800
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x9683330 0x78e24b8ac0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x9683688 0x78e24b8ba0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x9683730 0x78e24b8c80
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x968427c 0x78e24b8d60
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x9684134 0x78e24b8e40
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x96843c0 0x78e24b8f20
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x968464c 0x78e24b9000
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x9684504 0x78e24b5720
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x9684790 0x78e24b5800
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x96848d4 0x78e24b58e0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x96849cc 0x78e24b59c0
	int GetNumActiveParticles();// 0x9683654 0x78e24b5aa0
	MaterialInterface* GetNamedMaterial(FName InName);// 0x9683178 0x78e24b5b80
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x968397c 0x78e24b5c60
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x9683820 0x78e24b5d40
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x9683ad0 0x78e24b5e20
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x9683d80 0x78e24b5f00
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x9683c24 0x78e24b5fe0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x9683ed4 0x78e24b60c0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x9684028 0x78e24b61a0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x9682fa4 0x78e24b6280
	void EndTrails();// 0x96834b8 0x78e24b6360
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x9683230 0x78e24b6440
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x96834cc 0x78e24b6520

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x96824ac 0x7875be9b60
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x9681ee8 0x7875be9c40
	void SetIntParameter(FName ParameterName, int Param);// 0x96826a0 0x7875be9d20
	void SetFloatParameter(FName ParameterName, float Param);// 0x96825a4 0x7875be9e00
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x968217c 0x7875be9ee0
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x96823b4 0x7875be9fc0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x968279c 0x7875bea0a0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x9681fa0 0x7875bea180
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x96822bc 0x7875bea260
	void ReleaseToPool();// 0x9681ecc 0x7875bea340
	FXSystemAsset* GetFXSystemAsset();// 0x9682280 0x7875bea420

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875ae8780
	byte ParamType;//[Offset: 0x8, Size: 0x1] 0x7875ae8800
	float Scalar;//[Offset: 0xc, Size: 0x4] 0x7875ae8880
	float Scalar_Low;//[Offset: 0x10, Size: 0x4] 0x7875ae8900
	Vector Vector;//[Offset: 0x14, Size: 0xc] 0x7875ae8980
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc] 0x7875ae8a00
	Color Color;//[Offset: 0x2c, Size: 0x4] 0x7875ae8a80
	Actor* Actor;//[Offset: 0x30, Size: 0x8] 0x7875ae8b00
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8] 0x7875ae8b80

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4] 0x78e2560080

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10] 0x78e237b460
	int ActiveTab;//[Offset: 0x38, Size: 0x4] 0x78e242aa00

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10] 0x7875ac6400
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10] 0x78759ec540
	float ViewStartInput;//[Offset: 0x20, Size: 0x4] 0x7875ac6980
	float ViewEndInput;//[Offset: 0x24, Size: 0x4] 0x7875ac6a00
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4] 0x7875ac6a80
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4] 0x7875ac6b00

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8] 0x7875ac6480
	Color CurveColor;//[Offset: 0x8, Size: 0x4] 0x7875ac6500
	FString CurveName;//[Offset: 0x10, Size: 0x10] 0x7875ac6580
	int bHideCurve;//[Offset: 0x20, Size: 0x4] 0x7875ac6600
	int bColorCurve;//[Offset: 0x24, Size: 0x4] 0x7875ac6680
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4] 0x7875ac6700
	int bClamp;//[Offset: 0x2c, Size: 0x4] 0x7875ac6780
	float ClampLow;//[Offset: 0x30, Size: 0x4] 0x7875ac6800
	float ClampHigh;//[Offset: 0x34, Size: 0x4] 0x7875ac6880

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10] 0x78759ecfe0

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875ae8c80
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7875ae8d00
--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7875ae9780
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5f0] 0x7875ae9800

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875a83c00
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x7875a83c80
	float FOV;//[Offset: 0x18, Size: 0x4] 0x7875a83d00
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4] 0x7875a83d80
	float OrthoWidth;//[Offset: 0x20, Size: 0x4] 0x7875a83e00
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4] 0x7875a83e80
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4] 0x7875a83f00
	float AspectRatio;//[Offset: 0x2c, Size: 0x4] 0x7875a83f80
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7875a84000
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7875a84080
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1] 0x7875a84100
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4] 0x7875a84180
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x560] 0x7875a68300
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 0x8] 0x7875a68380

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7875ae9880
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5f0] 0x7875ae9900
	PlayerState* PlayerState;//[Offset: 0x600, Size: 0x8] 0x7875ae9980

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10] 0x78e2374ca0
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50] 0x7875b1d9c0
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4] 0x78e23b8000

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8] 0x7875a66700
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8] 0x7875a66780
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875a66800

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10] 0x78759e9840

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 0x1] 0x78e230d180
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 0x8] 0x78e230d200
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8] 0x78e230d280
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78e230d300
	float AspectRatio;//[Offset: 0x244, Size: 0x4] 0x78e230d380
	float FOVAngle;//[Offset: 0x248, Size: 0x4] 0x78e230d400
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 0x4] 0x78e230d480
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 0x560] 0x78e230d500
	int GetAutoActivatePlayerIndex();// 0x94a5068 0x78e2312fc0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f4, Size: 0x4] 0x78e230e480
	float OrthoWidth;//[Offset: 0x1f8, Size: 0x4] 0x78e230e500
	float OrthoNearClipPlane;//[Offset: 0x1fc, Size: 0x4] 0x78e230e580
	float OrthoFarClipPlane;//[Offset: 0x200, Size: 0x4] 0x78e230e600
	float AspectRatio;//[Offset: 0x204, Size: 0x4] 0x78e230e680
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78e230e700
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1] 0x78e230c680
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1] 0x78e230c700
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x208, Size: 0x1] 0x78e230c780
	byte ProjectionMode;//[Offset: 0x209, Size: 0x1] 0x78e230c800
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4] 0x78e230c880
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x560] 0x78e230c900
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x94a698c 0x78e2312380
	void SetProjectionMode(byte InProjectionMode);// 0x94a68e8 0x78e2312460
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x94a6844 0x78e2312540
	void SetOrthoWidth(float InOrthoWidth);// 0x94a6ce8 0x78e2312620
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x94a6c44 0x78e2312700
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x94a6ba0 0x78e23127e0
	void SetFieldOfView(float InFieldOfView);// 0x94a6d8c 0x78e23128c0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x94a6a44 0x78e23129a0
	void SetAspectRatio(float InAspectRatio);// 0x94a6afc 0x78e2312a80
	void RemoveBlendable(interface classNone InBlendableObject);// 0x94a6428 0x78e2312b60
	void OnCameraMeshHiddenChanged();// 0x94a6414 0x78e2312c40
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x94a66d4 0x78e2312d20
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x94a6558 0x78e2312e00

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8] 0x78e24c7080
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1] 0x78e24c7100
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8] 0x78e237ee80
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e24c7180
	int ControllerId;//[Offset: 0xb8, Size: 0x4] 0x78e24c7200

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8] 0x7875c4ec00
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4] 0x7875c4ec80
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4] 0x7875c4ed00
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4] 0x7875c4ed80

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8] 0x78e2427a80
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10] 0x78e2379ca0
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4] 0x78e2427b80
	World* World;//[Offset: 0x70, Size: 0x8] 0x78e2427c00
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8] 0x78e2427c80
	void SSSwapControllers();// 0x952d5f4 0x78e23ef2e0
	void ShowTitleSafeArea();// 0x952d5d8 0x78e23ef3c0
	void SetConsoleTarget(int PlayerIndex);// 0x952d528 0x78e23ef4a0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8] 0x78e23d4e80
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8] 0x78e23d4f00
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8] 0x78e23d4f80
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10] 0x78e23763c0

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8] 0x7875a89a00
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8] 0x78759eb3c0

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8] 0x78e25dce80
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8] 0x78e25dcf00
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8] 0x78e25dcf80
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8] 0x78e25dd000
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8] 0x78e25dd080
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8] 0x78e25dd100
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8] 0x78e25dd180
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10] 0x78e24e8440
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10] 0x78e24e84e0
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10] 0x78e24e8580
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28] 0x78e25dd380
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10] 0x78e25dd400
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8] 0x78e25dd480
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8] 0x78e25dd500
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8] 0x78e25dd580
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8] 0x78e25dd600
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8] 0x78e25dd680
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1] 0x78e25db600
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8] 0x78e25db680
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8] 0x78e25db700
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8] 0x78e25db780
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8] 0x78e25db800
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8] 0x78e25db880
	Level*[] Levels;//[Offset: 0x138, Size: 0x10] 0x78e24e8620
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10] 0x78e24e86c0
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8] 0x78e25dba00
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10] 0x78e24e8760
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8] 0x78e25dbb00
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8] 0x78e25dbb80
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x1f8, Size: 0x8] 0x78e25dbc00
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x200, Size: 0x50] 0x78e24e8800
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x250, Size: 0x10] 0x78e24e88a0
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x260, Size: 0x10] 0x78e24e8940
	WorldComposition* WorldComposition;//[Offset: 0x5e0, Size: 0x8] 0x78e25dbe00
	WorldPSCPool PSCPool;//[Offset: 0x678, Size: 0x58] 0x78e25dbe80
	WorldSettings* K2_GetWorldSettings();// 0x9766760 0x78e25e4f40
	void HandleTimelineScrubbed();// 0x9766794 0x78e25e5020

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8] 0x78e24c3b00
	Model* Model;//[Offset: 0xc0, Size: 0x8] 0x78e24c3b80
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10] 0x78e237f560
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8] 0x78e24c3c80
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4] 0x78e24c3d00
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4] 0x78e24c3d80
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8] 0x78e24c3e00
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8] 0x78e24c3e80
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8] 0x78e24c3f00
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10] 0x78e237f600
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4] 0x78e24c4000
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4] 0x78e24c4080
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10] 0x78e237f6a0
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10] 0x78e237f740
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10] 0x78e24c4200
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8] 0x78e24c2180
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc] 0x78e24c2200
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1] 0x78e24c2280
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1] 0x78e24c2300
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1] 0x78e24c2380
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1] 0x78e24c2400
	WorldSettings* WorldSettings;//[Offset: 0x258, Size: 0x8] 0x78e24c2480
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 0x10] 0x78e237cea0
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x288, Size: 0x10] 0x78e237cf40

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x460, Size: 0x8] 0x78e24dbc00

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10] 0x78e237f4c0

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1] 0x78e24c3480
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x6d94ba8 0x78e24b2000
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x95d7fe4 0x78e24b20e0
	bool RemoteEvent(FName EventName);// 0x95d81cc 0x78e24b21c0
	void LevelReset();// 0x6d94ba8 0x78e24b22a0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4] 0x78c24ecb00
	int Y;//[Offset: 0x4, Size: 0x4] 0x78c24ecb80
	int Z;//[Offset: 0x8, Size: 0x4] 0x78c24ecc00

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 0x8] 0x78e24db880
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 0x8] 0x78e24db900
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 0x8] 0x78e24db980
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78e24dba00

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x448, Size: 0x8] 0x78e236e680
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1] 0x78e236e700
	float ScreenSize;//[Offset: 0x454, Size: 0x4] 0x78e236c680
	float U;//[Offset: 0x458, Size: 0x4] 0x78e236c700
	float UL;//[Offset: 0x45c, Size: 0x4] 0x78e236c780
	float V;//[Offset: 0x460, Size: 0x4] 0x78e236c800
	float VL;//[Offset: 0x464, Size: 0x4] 0x78e236c880
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x9480c08 0x78e234e5c0
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x9480a30 0x78e234e6a0
	void SetSprite(Texture2D* NewSprite);// 0x9480d94 0x78e234adc0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8] 0x78e24dba80

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1] 0x78e24c6680

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 0x4] 0x78e25df680
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 0x1] 0x78e25df700
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1] 0x78e25df780
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1] 0x78e25dd700
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1] 0x78e25dd780
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1] 0x78e25dd800
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1] 0x78e25dd880
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1] 0x78e25dd900
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 0x1] 0x78e25dd980
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 0x1] 0x78e25dda00
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1] 0x78e25dda80
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1] 0x78e25ddb00
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1] 0x78e25ddb80
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1] 0x78e25ddc00
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1] 0x78e25ddc80
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1] 0x78e25ddd00
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1] 0x78e25ddd80
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 0x8] 0x78e25dde00
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 0x8] 0x78e25dde80
	float WorldToMeters;//[Offset: 0x240, Size: 0x4] 0x78e25ddf00
	float KillZ;//[Offset: 0x244, Size: 0x4] 0x78e25ddf80
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 0x8] 0x78e24e7cc0
	float WorldGravityZ;//[Offset: 0x250, Size: 0x4] 0x78e25de000
	float GlobalGravityZ;//[Offset: 0x254, Size: 0x4] 0x78e25de080
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 0x8] 0x78e24e7d60
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 0x8] 0x78e24e7e00
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 0x8] 0x78e24e7ea0
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 0x8] 0x78e24e7f40
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 0x4] 0x78e25de100
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 0xc] 0x78e25de180
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 0x4] 0x78e25de200
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 0x4] 0x78e25de280
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 0x4] 0x78e25de300
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 0x20] 0x78e25de380
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 0x24] 0x78e25de400
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 0x8] 0x78e25de480
	float TimeDilation;//[Offset: 0x2e8, Size: 0x4] 0x78e25de500
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 0x4] 0x78e25de580
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 0x4] 0x78e25de600
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 0x4] 0x78e25de680
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 0x4] 0x78e25de700
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 0x4] 0x78e25dc680
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 0x4] 0x78e25dc700
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 0x40] 0x78e25dc780
	PlayerState* Pauser;//[Offset: 0x348, Size: 0x8] 0x78e25dc800
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 0x10] 0x78e24e7fe0
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10] 0x78e24e8080
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 0x8] 0x78e25dc980
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 0x4] 0x78e25dca00
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 0x8] 0x78e24e8120
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 0x10] 0x78e24e81c0
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 0x8] 0x78e24e8260
	void OnRep_WorldGravityZ();// 0x976830c 0x78e25e4e60

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18] 0x78e24db680
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4] 0x78e24db700
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8] 0x78e24db780
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78e24db800

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ae2400
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ae2480
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ae2500
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ae2580
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875ae2600
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875ae2680
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875ae2700
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875ae2780
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875ae2800
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7875ae2880
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7875ae2900
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7875ae2980
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7875ae2a00
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7875ae2a80
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7875ae2b00
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x7875ae2b80

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4] 0x78e2562d80
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4] 0x78e2562e00
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8] 0x78e2562e80
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4] 0x78e2562f00

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 0x10] 0x7875b90100
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 0x8] 0x7875b37b80
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 0x8] 0x7875b352e0
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 0x8] 0x7875b35380
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 0x8] 0x7875b35420
	class HUD* HUDClass;//[Offset: 0x250, Size: 0x8] 0x7875b354c0
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 0x8] 0x7875b35560
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 0x8] 0x7875b35600
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 0x8] 0x7875b356a0
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 0x8] 0x7875b35740
	GameSession* GameSession;//[Offset: 0x278, Size: 0x8] 0x7875b90180
	GameStateBase* GameState;//[Offset: 0x280, Size: 0x8] 0x7875b90200
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 0x8] 0x7875b90280
	FText DefaultPlayerName;//[Offset: 0x290, Size: 0x18] 0x7875b90300
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x7875b90380
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x7875b90400
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x7875b90480
	void StartPlay();// 0x951562c 0x7875b87b00
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x9514994 0x7875b87be0
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x9514868 0x7875b87cc0
	bool ShouldReset(Actor* ActorToReset);// 0x95154f0 0x7875b87da0
	void ReturnToMainMenuHost();// 0x95154b8 0x7875b87e80
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x9514a94 0x7875b87f60
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x9514bb8 0x7875b88040
	void RestartPlayer(Controller* NewPlayer);// 0x9514cb0 0x7875b88120
	void ResetLevel();// 0x95154d4 0x7875b88200
	bool PlayerCanRestart(PlayerController* Player);// 0x9514d60 0x7875b882e0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x951534c 0x7875b883c0
	void K2_PostLogin(PlayerController* NewPlayer);// 0x6d94ba8 0x7875b884a0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x6d94ba8 0x7875b88580
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x6d94ba8 0x7875b88660
	void K2_OnLogout(Controller* ExitingController);// 0x6d94ba8 0x7875b88740
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x6d94ba8 0x7875b88820
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x9514e1c 0x7875b88900
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x9514770 0x7875b889e0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x95146c0 0x7875b88ac0
	bool HasMatchStarted();// 0x95155ec 0x7875b88ba0
	bool HasMatchEnded();// 0x95155ac 0x7875b88c80
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x9515408 0x7875b88d60
	int GetNumSpectators();// 0x9515648 0x7875b88e40
	int GetNumPlayers();// 0x9515684 0x7875b88f20
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x95156c0 0x7875b89000
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x9514f24 0x7875b85720
	Actor* ChoosePlayerStart(Controller* Player);// 0x9515034 0x7875b85800
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x95150ec 0x7875b858e0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x9515248 0x7875b859c0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 0x4] 0x78e2424c80
	int MaxPlayers;//[Offset: 0x224, Size: 0x4] 0x78e2424d00
	int MaxPartySize;//[Offset: 0x228, Size: 0x4] 0x78e2424d80
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 0x1] 0x78e2424e00
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78e2424e80
	FName SessionName;//[Offset: 0x230, Size: 0x8] 0x78e2424f00

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 0x8] 0x7875c0f420
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 0x8] 0x7875cb9780
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 0x8] 0x7875c0f4c0
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 0x10] 0x7875c0f560
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x7875cb9880
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 0x4] 0x7875cb9900
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 0x4] 0x7875cb9980
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 0x4] 0x7875cb9a00
	void OnRep_SpectatorClass();// 0x95281e0 0x7875d15560
	void OnRep_ReplicatedWorldTimeSeconds();// 0x95281a8 0x7875d15640
	void OnRep_ReplicatedHasBegunPlay();// 0x95281c4 0x7875d11d60
	void OnRep_GameModeClass();// 0x95281fc 0x7875d11e40
	bool HasMatchStarted();// 0x95283c8 0x7875d11f20
	bool HasMatchEnded();// 0x9528388 0x7875d12000
	bool HasBegunPlay();// 0x9528408 0x7875d120e0
	float GetServerWorldTimeSeconds();// 0x9528448 0x7875d121c0
	float GetPlayerStartTime(Controller* Controller);// 0x95282d0 0x7875d122a0
	float GetPlayerRespawnDelay(Controller* Controller);// 0x9528218 0x7875d12380

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x27c, Size: 0x4] 0x78e23de200
	float BaseLookUpRate;//[Offset: 0x280, Size: 0x4] 0x78e23de280
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 0x8] 0x78e23de300
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 0x8] 0x78e23de380
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 0x8] 0x78e23de400
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1] 0x78e23de480
	void TurnAtRate(float Rate);// 0x94dc8f4 0x78e23cfc80
	void MoveUp_World(float Val);// 0x94dc9a4 0x78e23cfd60
	void MoveRight(float Val);// 0x94dca54 0x78e23cfe40
	void MoveForward(float Val);// 0x94dcb04 0x78e23cff20
	void LookUpAtRate(float Rate);// 0x94dc844 0x78e23ccaa0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x460, Size: 0x4] 0x78e23f4300
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x9725a78 0x78e23e3500
	float GetUnscaledSphereRadius();// 0x9725a14 0x78e23e35e0
	float GetShapeScale();// 0x97259d4 0x78e23e36c0
	float GetScaledSphereRadius();// 0x9725a30 0x78e23e37a0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x46c, Size: 0x4] 0x78e22b1a80
	int PreviousLODLevel;//[Offset: 0x470, Size: 0x4] 0x78e22b1b00
	int MinLOD;//[Offset: 0x474, Size: 0x4] 0x78e22b1b80
	int SubDivisionStepSize;//[Offset: 0x478, Size: 0x4] 0x78e22b1c00
	StaticMesh* StaticMesh;//[Offset: 0x480, Size: 0x8] 0x78e22b1c80
	Color WireframeColorOverride;//[Offset: 0x488, Size: 0x4] 0x78e22b1d00
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1] 0x78e22b1d80
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1] 0x78e22b1e00
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1] 0x78e22b1e80
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1] 0x78e22b1f00
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 0x1] 0x78e22b1f80
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 0x1] 0x78e22b2000
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48c, Size: 0x1] 0x78e22b2080
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48c, Size: 0x1] 0x78e22b2100
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48d, Size: 0x1] 0x78e22b0080
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48d, Size: 0x1] 0x78e22b0100
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48d, Size: 0x1] 0x78e22b0180
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48d, Size: 0x1] 0x78e22b0200
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48d, Size: 0x1] 0x78e22b0280
	int OverriddenLightMapRes;//[Offset: 0x490, Size: 0x4] 0x78e22b0300
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x494, Size: 0x4] 0x78e22b0380
	float DistanceFieldSelfShadowBias;//[Offset: 0x498, Size: 0x4] 0x78e22b0400
	float StreamingDistanceMultiplier;//[Offset: 0x49c, Size: 0x4] 0x78e22b0480
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a0, Size: 0x10] 0x7875d401a0
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b0, Size: 0x10] 0x7875d40240
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c0, Size: 0x18] 0x78e22b0600
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x973a26c 0x78e22945a0
	void SetReverseCulling(bool ReverseCulling);// 0x9739ec0 0x78e2294680
	void SetForcedLodModel(int NewForcedLodModel);// 0x973a1c4 0x78e2294760
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x973a06c 0x78e2294840
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x973a11c 0x78e2294920
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x973a328 0x78e2294a00
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x9739f70 0x78e2294ae0

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4] 0x7875b0bd80
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4] 0x7875b0be00
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x7875b0be80

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ac1900
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ac1980
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ac1a00
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ac1a80
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4] 0x7875ac1b00
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4] 0x7875ac1b80
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4] 0x7875ac1c00
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4] 0x7875ac1c80
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4] 0x7875ac1d00

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 0x8] 0x78e23dd400
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78e23dd480
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78e23dd500
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1] 0x78e23dd580
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 0x4] 0x78e23dd600
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78e23dd680
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1] 0x78e23db600
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1] 0x78e23db680
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 0x10] 0x78e2375a60
	FName[] DebugDisplay;//[Offset: 0x250, Size: 0x10] 0x78e2375b00
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 0x10] 0x78e2375ba0
	Canvas* Canvas;//[Offset: 0x270, Size: 0x8] 0x78e23db880
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 0x8] 0x78e23db900
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 0x10] 0x78e2375c40
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 0x8] 0x78e2375ce0
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 0x8] 0x78e23dba00
	void ShowHUD();// 0x9533258 0x78e23cd7c0
	void ShowDebugToggleSubCategory(FName Category);// 0x9533100 0x78e23cd8a0
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x9533058 0x78e23cd980
	void ShowDebug(FName DebugType);// 0x95331a8 0x78e23cda60
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x9532b5c 0x78e23cdb40
	void RemoveAllDebugStrings();// 0x9532c58 0x78e23cdc20
	void ReceiveHitBoxRelease(const FName BoxName);// 0x6d94ba8 0x78e23cdd00
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x6d94ba8 0x78e23cdde0
	void ReceiveHitBoxClick(const FName BoxName);// 0x6d94ba8 0x78e23cdec0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x6d94ba8 0x78e23cdfa0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x6d94ba8 0x78e23ce080
	Vector Project(Vector Location);// 0x95311cc 0x78e23ce160
	void PreviousDebugTarget();// 0x9530b94 0x78e23ce240
	void NextDebugTarget();// 0x9530bb0 0x78e23ce320
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x9532968 0x78e23ce400
	PlayerController* GetOwningPlayerController();// 0x9530c00 0x78e23ce4e0
	Pawn* GetOwningPawn();// 0x9530bcc 0x78e23ce5c0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x9530dfc 0x78e23ce6a0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x9531c58 0x78e23cadc0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x9531e34 0x78e23caea0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x95326ec 0x78e23caf80
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x95322fc 0x78e23cb060
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x9531280 0x78e23cb140
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x95315c0 0x78e23cb220
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x9531830 0x78e23cb300
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x95324cc 0x78e23cb3e0
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x9531040 0x78e23cb4c0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x9530c34 0x78e23cb5a0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x9532c6c 0x78e23cb680

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4] 0x78e23bb080
	float OrgY;//[Offset: 0x2c, Size: 0x4] 0x78e23bb100
	float ClipX;//[Offset: 0x30, Size: 0x4] 0x78e23bb180
	float ClipY;//[Offset: 0x34, Size: 0x4] 0x78e23bb200
	Color DrawColor;//[Offset: 0x38, Size: 0x4] 0x78e23bb280
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e23bb300
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78e23bb380
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78e23bb400
	int SizeX;//[Offset: 0x40, Size: 0x4] 0x78e23bb480
	int SizeY;//[Offset: 0x44, Size: 0x4] 0x78e23bb500
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10] 0x78e23bb580
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8] 0x78e23b9500
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8] 0x78e23b9580
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8] 0x78e23b9600
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x94aad40 0x78e23c4840
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x94aae8c 0x78e23c4920
	Vector K2_Project(Vector WorldLocation);// 0x94ab0d4 0x78e23c4a00
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x94ab4a4 0x78e23c4ae0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x94ac2c4 0x78e23c4bc0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x94abc70 0x78e23c4ca0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x94ab188 0x78e23c4d80
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x94ab34c 0x78e23c4e60
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x94ac074 0x78e23c4f40
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x94ac5b4 0x78e23c5020
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x94ab5fc 0x78e23c5100
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x94ab788 0x78e23c51e0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x94aaf94 0x78e23c52c0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8] 0x7875a8df80
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8] 0x7875a8e000
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10] 0x7875a8e080
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8] 0x7875a8e100
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8] 0x7875a8e180
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10] 0x7875a8e200
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8] 0x7875a8e280
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8] 0x7875a8e300
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10] 0x7875a8e380

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8] 0x7875a8b480
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc] 0x7875a8b500
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc] 0x7875a8b580
	FString DebugText;//[Offset: 0x20, Size: 0x10] 0x7875a89500
	float TimeRemaining;//[Offset: 0x30, Size: 0x4] 0x7875a89580
	float Duration;//[Offset: 0x34, Size: 0x4] 0x7875a89600
	Color TextColor;//[Offset: 0x38, Size: 0x4] 0x7875a89680
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7875a89700
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7875a89780
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x7875a89800
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc] 0x7875a89880
	Font* Font;//[Offset: 0x50, Size: 0x8] 0x7875a89900
	float FontScale;//[Offset: 0x58, Size: 0x4] 0x7875a89980

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78e25aa580
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78e25aa600
	uint32 Channels;//[Offset: 0x224, Size: 0x4] 0x78e25aa680
	uint32 InRate;//[Offset: 0x228, Size: 0x4] 0x78e25aa700
	uint32 OutRate;//[Offset: 0x22c, Size: 0x4] 0x78e25aa780
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 0x4] 0x78e25aa800
	uint32 InRateClientMax;//[Offset: 0x238, Size: 0x4] 0x78e25aa880
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 0x4] 0x78e25aa900
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 0x4] 0x78e25aa980
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 0x4] 0x78e25aaa00
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 0x4] 0x78e25aaa80
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 0x4] 0x78e25aab00
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 0x4] 0x78e25aab80
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 0x4] 0x78e25aac00
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 0x4] 0x78e25aac80
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 0x4] 0x78e25aad00
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 0x4] 0x78e25aad80
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 0x4] 0x78e25aae00
	uint32 NetNumClients;//[Offset: 0x268, Size: 0x4] 0x78e25aae80
	uint32 InPackets;//[Offset: 0x26c, Size: 0x4] 0x78e25aaf00
	uint32 OutPackets;//[Offset: 0x270, Size: 0x4] 0x78e25aaf80
	uint32 InBunches;//[Offset: 0x274, Size: 0x4] 0x78e25ab000
	uint32 OutBunches;//[Offset: 0x278, Size: 0x4] 0x78e25ab080
	uint32 OutLoss;//[Offset: 0x27c, Size: 0x4] 0x78e25ab100
	uint32 InLoss;//[Offset: 0x280, Size: 0x4] 0x78e25ab180
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 0x4] 0x78e25ab200
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 0x4] 0x78e25ab280
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 0x4] 0x78e25ab300
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 0x4] 0x78e25ab380
	uint32 PercentInVoice;//[Offset: 0x294, Size: 0x4] 0x78e25ab400
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 0x4] 0x78e25ab480
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 0x4] 0x78e25ab500
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 0x4] 0x78e25ab580
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 0x4] 0x78e25a9500
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 0x4] 0x78e25a9580
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 0x4] 0x78e25a9600
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 0x4] 0x78e25a9680
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 0x4] 0x78e25a9700
	uint32 NumActors;//[Offset: 0x2b8, Size: 0x4] 0x78e25a9780
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 0x4] 0x78e25a9800
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 0x4] 0x78e25a9880
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 0x4] 0x78e25a9900
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 0x4] 0x78e25a9980
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 0x4] 0x78e25a9a00
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 0x4] 0x78e25a9a80
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 0x4] 0x78e25a9b00
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 0x4] 0x78e25a9b80
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 0x4] 0x78e25a9c00
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 0x4] 0x78e25a9c80

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 0x4] 0x78e2412b00
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 0x4] 0x78e2412b80
	int BadPingThreshold;//[Offset: 0x228, Size: 0x4] 0x78e2412c00
	int SeverePingThreshold;//[Offset: 0x22c, Size: 0x4] 0x78e2412c80
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 0x4] 0x78e2412d00
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 0x4] 0x78e2412d80
	int TotalNetBandwidth;//[Offset: 0x238, Size: 0x4] 0x78e2412e00
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 0x4] 0x78e2412e80
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 0x4] 0x78e2412f00
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78e2412f80
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78e2413000
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 0x4] 0x78e2413080
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 0x4] 0x78e2413100
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 0x4] 0x78e2413180
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 0x4] 0x78e2411100
	float PercentForBadPing;//[Offset: 0x258, Size: 0x4] 0x78e2411180
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 0x4] 0x78e2411200
	float MoveRepSize;//[Offset: 0x260, Size: 0x4] 0x78e2411280
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 0x4] 0x78e2411300
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 0x4] 0x78e2411380
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 0x4] 0x78e2411400
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 0x4] 0x78e2411480
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 0x4] 0x78e2411500
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 0x4] 0x78e2411580
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 0x4] 0x78e2411600
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 0x4] 0x78e2411680
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 0x4] 0x78e2411700
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 0x4] 0x78e2411780
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 0x4] 0x78e2411800
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 0x4] 0x78e2411880
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 0x4] 0x78e2411900
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 0x4] 0x78e2411980
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1] 0x78e2411a00
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 0x4] 0x78e2411a80
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 0x4] 0x78e2411b00
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 0x4] 0x78e2411b80
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1] 0x78e2411c00
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1] 0x78e2411c80
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 0x4] 0x78e2411d00
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 0x4] 0x78e2411d80
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 0x4] 0x78e2411e00
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 0x4] 0x78e2411e80
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78e2411f00
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x78e2411f80

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875aed380
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8] 0x7875aed400
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8] 0x7875aed480
	float Volume;//[Offset: 0x18, Size: 0x4] 0x7875aed500
	float FadeTime;//[Offset: 0x1c, Size: 0x4] 0x7875aed580

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e25a8280
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4] 0x78e25a8300
	float GainHF;//[Offset: 0x30, Size: 0x4] 0x78e25a8380
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4] 0x78e25a8400
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e25a6380
	float LateDelay;//[Offset: 0x3c, Size: 0x4] 0x78e25a6400
	float DecayTime;//[Offset: 0x40, Size: 0x4] 0x78e25a6480
	float Density;//[Offset: 0x44, Size: 0x4] 0x78e25a6500
	float Diffusion;//[Offset: 0x48, Size: 0x4] 0x78e25a6580
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4] 0x78e25a6600
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4] 0x78e25a6680
	float LateGain;//[Offset: 0x54, Size: 0x4] 0x78e25a6700
	float Gain;//[Offset: 0x58, Size: 0x4] 0x78e25a6780
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4] 0x78e25a6800

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a63100
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4] 0x7875a63180
	float ExteriorTime;//[Offset: 0x8, Size: 0x4] 0x7875a61100
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4] 0x7875a61180
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4] 0x7875a61200
	float InteriorVolume;//[Offset: 0x14, Size: 0x4] 0x7875a61280
	float InteriorTime;//[Offset: 0x18, Size: 0x4] 0x7875a61300
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4] 0x7875a61380
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4] 0x7875a61400

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875b41a00
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7875b41a80
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7875b41b00
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c] 0x7875b41b80
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c] 0x7875b41c00
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4] 0x7875b41c80

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8] 0x7875b41180
	Actor* InViewer;//[Offset: 0x8, Size: 0x8] 0x7875b41200
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8] 0x7875b41280
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc] 0x7875b41300
	Vector ViewDir;//[Offset: 0x24, Size: 0xc] 0x7875b41380

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10] 0x7875c072c0
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8] 0x7875c4ff00
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8] 0x7875c07360
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8] 0x7875c4ff80
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10] 0x7875c07400
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10] 0x7875c074a0
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8] 0x7875c4e880
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8] 0x7875c4e900
	int MaxPacket;//[Offset: 0xa0, Size: 0x4] 0x7875c4e980
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1] 0x7875c4ea00
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28] 0x7875c4ea80
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8] 0x7875c4eb00
	Channel*[] ChannelsToTick;//[Offset: 0x1510, Size: 0x10] 0x7875c07540

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1ba8, Size: 0x8] 0x78e23d3880

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10] 0x7875c50880
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10] 0x7875c50900
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4] 0x7875c50980
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x7875c50a00
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4] 0x7875c50a80
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4] 0x7875c50b00
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4] 0x7875c50b80
	int MaxClientRate;//[Offset: 0x64, Size: 0x4] 0x7875c50c00
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4] 0x7875c50c80
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4] 0x7875c50d00
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4] 0x7875c50d80
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4] 0x7875c50e00
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4] 0x7875c50e80
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4] 0x7875c50f00
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4] 0x7875c50f80
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x7875c51000
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x7875c51080
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8] 0x7875c4f800
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10] 0x7875c06fa0
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4] 0x7875c4f900
	World* World;//[Offset: 0x140, Size: 0x8] 0x7875c4f980
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8] 0x7875c4fa00
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8] 0x7875c07040
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8] 0x7875c070e0
	FName NetDriverName;//[Offset: 0x190, Size: 0x8] 0x7875c4fa80
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10] 0x7875c07180
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50] 0x7875b1c280
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10] 0x7875c07220
	float Time;//[Offset: 0x210, Size: 0x4] 0x7875c4fd00
	ReplicationDriver* ReplicationDriver;//[Offset: 0x700, Size: 0x8] 0x7875c4fd80

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8] 0x7875ae4f00
	FName ClassName;//[Offset: 0x8, Size: 0x8] 0x7875ae4f80
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8] 0x78759ed4e0
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4] 0x7875ae5000
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7875ae5080
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7875ae5100
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x7875ae5180
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1] 0x7875ae5200
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875ae5280

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8] 0x78e233fe00

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8] 0x78759ec180

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28] 0x78e24c4280
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8] 0x78e24c4300
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10] 0x78e237f380
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30] 0x78e24c4400
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4] 0x78e24c4480
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4] 0x78e24c4500
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1] 0x78e24c4580
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1] 0x78e24c4600
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1] 0x78e24c4680
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1] 0x78e24c4700
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1] 0x78e24c4780
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1] 0x78e24c4800
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1] 0x78e24c4880
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1] 0x78e24c4900
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10] 0x78e24c4980
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10] 0x78e237f420
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4] 0x78e24c4a80
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10] 0x78e24c4b00
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10] 0x78e24c4b80
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10] 0x78e24c4c00
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10] 0x78e24c4c80
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8] 0x78e24c4d00
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8] 0x78e24c4d80
	bool ShouldBeLoaded();// 0x95d8ee8 0x78e24b4d80
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x95d9234 0x78e24b4e60
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x95d917c 0x78e24b4f40
	void SetPriority(int NewPriority);// 0x95d902c 0x78e24b5020
	void SetLevelLODIndex(int LODIndex);// 0x95d90d4 0x78e24b5100
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x95d8f5c 0x78e24b51e0
	bool IsStreamingStatePending();// 0x95d8e38 0x78e24b52c0
	bool IsLevelVisible();// 0x95d8e94 0x78e24b53a0
	bool IsLevelLoaded();// 0x95d8e70 0x78e24b5480
	FName GetWorldAssetPackageFName();// 0x95d8f28 0x78e24b5560
	Level* GetLoadedLevel();// 0x95d8ecc 0x78e24b5640
	LevelScriptActor* GetLevelScriptActor();// 0x95d8d48 0x78e24b1d60
	bool GetIsRequestingUnloadAndRemoval();// 0x95d900c 0x78e24b1e40
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x95d8d7c 0x78e24b1f20

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 0x10] 0x78e237f2e0
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78e24c5a00
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1] 0x78e24c5a80
	byte StreamingUsage;//[Offset: 0x269, Size: 0x1] 0x78e24c5b00

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10] 0x7875b304c0

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x858, Size: 0x50] 0x7875b1d900
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xa04, Size: 0x4] 0x78e23ddd80
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa28, Size: 0x10] 0x78e2375920
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1] 0x78e23dde80
	PlayerController*[] SpectatorControllers;//[Offset: 0xa40, Size: 0x10] 0x78e23759c0

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8] 0x7875a8b180
	Level* Level;//[Offset: 0x38, Size: 0x8] 0x7875a8b200
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10] 0x78759eb320

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10] 0x7875a8b300
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875a8b380
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1] 0x7875a8b400

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18] 0x78e2360d00
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8] 0x78e2360d80
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78e2360e00

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4] 0x78e236ce80
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4] 0x78e236cf00
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4] 0x78e236cf80
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4] 0x78e236d000
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4] 0x78e236d080
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4] 0x78e236d100
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4] 0x78e236d180
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x947fc90 0x78e234aea0
	int GetObjectCount();// 0x947fdc4 0x78e234af80
	int GetNewAvoidanceUID();// 0x947fd90 0x78e234b060
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x947fbdc 0x78e234b140

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8] 0x7875b42100
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8] 0x7875b40080
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8] 0x7875b40100
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8] 0x7875b40180
	<Level*> Levels;//[Offset: 0x28, Size: 0x50] 0x7875b30420

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10] 0x7878000060
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8] 0x787805ee00
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10] 0x78780027c0
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10] 0x787805ef00
	void ReceiveShutdown();// 0x6d94ba8 0x787eddc1e0
	void ReceiveInit();// 0x6d94ba8 0x787eddc2c0
	void HandleTravelError(byte FailureType);// 0x6d94ba8 0x787eddc3a0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x6d94ba8 0x787eddc480
	void DebugRemovePlayer(int ControllerId);// 0x95101d4 0x787eddc560
	void DebugCreatePlayer(int ControllerId);// 0x9510284 0x787eddc640

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8] 0x78e24db500

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10] 0x78e24e83a0
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8] 0x78e25dcc80
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78e25dcd00
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x78e25dcd80
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4] 0x78e25dce00

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50] 0x7875b15ec0

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7875b30380

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8] 0x7875b41d00

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10] 0x7875b33f80
	bool WasControllerKeyJustReleased(Key Key);// 0x953b14c 0x7875b84920
	bool WasControllerKeyJustPressed(Key Key);// 0x953b2dc 0x7875b84a00
	bool IsControllerKeyDown(Key Key);// 0x953b46c 0x7875b84ae0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x953ac88 0x7875b84bc0
	Vector GetControllerVectorKeyState(Key Key);// 0x953ae30 0x7875b84ca0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x953a9f8 0x7875b84d80
	float GetControllerKeyTimeDown(Key Key);// 0x953aafc 0x7875b84e60
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x953a8a8 0x7875b84f40
	float GetControllerAnalogKeyState(Key Key);// 0x953afc0 0x7875b85020

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8] 0x7875ac7200

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10] 0x7875b36280
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10] 0x7875b36320
	void SetMouseSensitivity(const float Sensitivity);// 0x96af864 0x7875b86fa0
	void SetBind(FName BindName, FString Command);// 0x96af764 0x7875b87080
	void InvertAxisKey(const Key AxisKey);// 0x96af5e0 0x7875b87160
	void InvertAxis(const FName AxisName);// 0x96af538 0x7875b87240
	void ClearSmoothing();// 0x96af524 0x7875b87320

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7875aea800
	FString Command;//[Offset: 0x18, Size: 0x10] 0x7875aea880
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7875aea900
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x7875aea980
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1] 0x7875aeaa00
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1] 0x7875aeaa80
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1] 0x7875aeab00
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1] 0x7875aeab80
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1] 0x7875aeac00
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1] 0x7875aeac80
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7875aead00

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8] 0x7875a13100
	delegate Delegate;//[Offset: 0x8, Size: 0x10] 0x7875a13180
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1] 0x78759e39e0
	FName UserTag;//[Offset: 0x1c, Size: 0x8] 0x7875a11180

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4] 0x7875ae9a00
	byte BlendFunction;//[Offset: 0x4, Size: 0x1] 0x7875ae9a80
	float BlendExp;//[Offset: 0x8, Size: 0x4] 0x7875ae9b00
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875ae9b80

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7875b40a80
	FName Filename;//[Offset: 0x8, Size: 0x8] 0x7875b40b00
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875b40b80

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4] 0x7875f99480
	int UUID;//[Offset: 0x4, Size: 0x4] 0x7875f97400
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8] 0x7875f97480
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8] 0x7875f97500

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10] 0x78e23789e0
	float Duration;//[Offset: 0x38, Size: 0x4] 0x78e2410100

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ac5100
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ac5180
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ac5200
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875ac5280
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88] 0x7875ac3200

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8] 0x7875ae9500
	int LODIndex;//[Offset: 0x8, Size: 0x4] 0x7875ae9580
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7875ae9600
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7875ae9680
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1] 0x7875ae9700

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7875ac3280
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875ac3300
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7875ac3380
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7875ac3400

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10] 0x78e24e8e40
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4] 0x78e25d6a00
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4] 0x78e25d6a80
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4] 0x78e25d6b00
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4] 0x78e25d6b80
	float ActivationDelay;//[Offset: 0x48, Size: 0x4] 0x78e25d6c00
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78e25d6c80
	float StartupDelay;//[Offset: 0x50, Size: 0x4] 0x78e25d6d00

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8] 0x7875b40c00
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8] 0x7875b40c80
	Vector2D Center;//[Offset: 0x10, Size: 0x8] 0x7875b40d00
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8] 0x7875b40d80
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8] 0x7875b40e00
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8] 0x7875b40e80
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8] 0x7875b40f00
	Key MainInputKey;//[Offset: 0x38, Size: 0x18] 0x7875b40f80
	Key AltInputKey;//[Offset: 0x50, Size: 0x18] 0x7875b41000

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8] 0x78e242cb00

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8] 0x78e23d3a80
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8] 0x78e23743e0
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10] 0x78e2374480
	void Walk();// 0x94be984 0x78e23c9460
	void ViewSelf();// 0x94be560 0x78e23c9540
	void ViewPlayer(FString S);// 0x94be4a4 0x78e23c9620
	void ViewClass(class Actor DesiredClass);// 0x94be344 0x78e23c9700
	void ViewActor(FName ActorName);// 0x94be3f4 0x78e23c97e0
	void UpdateSafeArea();// 0x94bd6cc 0x78e23c98c0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x94bd6e0 0x78e23c99a0
	void ToggleServerStatReplicatorClientOverwrite();// 0x94bd6f4 0x78e23c9a80
	void ToggleDebugCamera();// 0x94be118 0x78e23c9b60
	void ToggleAILogging();// 0x94be0fc 0x78e23c9c40
	void TestCollisionDistance();// 0x94bddb4 0x78e23c9d20
	void Teleport();// 0x94bea6c 0x78e23c9e00
	void Summon(FString ClassName);// 0x94be598 0x78e23c9ee0
	void StreamLevelOut(FName PackageName);// 0x94be134 0x78e23c9fc0
	void StreamLevelIn(FName PackageName);// 0x94be294 0x78e23ca0a0
	void SpawnServerStatReplicator();// 0x94bd71c 0x78e23ca180
	void Slomo(float NewTimeDilation);// 0x94be89c 0x78e23ca260
	void SetWorldOrigin();// 0x94bd864 0x78e23ca340
	void SetMouseSensitivityToDefault();// 0x94bd848 0x78e23ca420
	void ServerToggleAILogging();// 0x94be0a0 0x78e23ca500
	void ReceiveInitCheatManager();// 0x6d94ba8 0x78e23ca5e0
	void ReceiveEndPlay();// 0x6d94ba8 0x78e23ca6c0
	void PlayersOnly();// 0x94be57c 0x78e23ca7a0
	void OnlyLoadLevel(FName PackageName);// 0x94be1e4 0x78e23ca880
	void LogLoc();// 0x94bd878 0x78e23ca960
	void InvertMouse();// 0x94bd82c 0x78e23caa40
	void God();// 0x94be94c 0x78e23cab20
	void Ghost();// 0x94be968 0x78e23cac00
	void FreezeFrame(float Delay);// 0x94bea88 0x78e23cace0
	void Fly();// 0x94be9a0 0x78e23c7400
	void FlushLog();// 0x94bd894 0x78e23c74e0
	void EnableDebugCamera();// 0x94bd6b0 0x78e23c75c0
	void DumpVoiceMutingState();// 0x94bdd44 0x78e23c76a0
	void DumpPartyState();// 0x94bdd7c 0x78e23c7780
	void DumpOnlineSessionState();// 0x94bdd98 0x78e23c7860
	void DumpChatState();// 0x94bdd60 0x78e23c7940
	void DisableDebugCamera();// 0x94bd694 0x78e23c7a20
	void DestroyTarget();// 0x94be7d0 0x78e23c7b00
	void DestroyServerStatReplicator();// 0x94bd708 0x78e23c7be0
	void DestroyPawns(class Pawn aClass);// 0x94be654 0x78e23c7cc0
	void DestroyAllPawnsExceptTarget();// 0x94be704 0x78e23c7da0
	void DestroyAll(class Actor aClass);// 0x94be720 0x78e23c7e80
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x94bdf8c 0x78e23c7f60
	void DebugCapsuleSweepPawn();// 0x94bddec 0x78e23c8040
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x94bde24 0x78e23c8120
	void DebugCapsuleSweepClear();// 0x94bddd0 0x78e23c8200
	void DebugCapsuleSweepChannel(byte Channel);// 0x94bdedc 0x78e23c82e0
	void DebugCapsuleSweepCapture();// 0x94bde08 0x78e23c83c0
	void DebugCapsuleSweep();// 0x94be084 0x78e23c84a0
	void DamageTarget(float DamageAmount);// 0x94be7ec 0x78e23c8580
	void CheatScript(FString ScriptName);// 0x94bd730 0x78e23c8660
	void ChangeSize(float F);// 0x94be9bc 0x78e23c8740
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x94bd8b0 0x78e23c8820
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x94bdb24 0x78e23c8900
	void BugIt(FString ScreenShotDescription);// 0x94bda68 0x78e23c89e0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1] 0x78e23d9180
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56d, Size: 0x1] 0x78e23d9200
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56d, Size: 0x1] 0x78e23d9280
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 0x1] 0x78e23d9300
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 0x1] 0x78e23d9380
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56d, Size: 0x1] 0x78e23d9400
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56d, Size: 0x1] 0x78e23d9480
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 0x1] 0x78e23d7400
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x570, Size: 0x8] 0x78e23d7480
	Actor* SelectedActor;//[Offset: 0x578, Size: 0x8] 0x78e23d7500
	PrimitiveComponent* SelectedComponent;//[Offset: 0x580, Size: 0x8] 0x78e23d7580
	HitResult SelectedHitPoint;//[Offset: 0x588, Size: 0x88] 0x78e23d7600
	PlayerController* OriginalControllerRef;//[Offset: 0x610, Size: 0x8] 0x78e23d7680
	Player* OriginalPlayer;//[Offset: 0x618, Size: 0x8] 0x78e23d7700
	float SpeedScale;//[Offset: 0x620, Size: 0x4] 0x78e23d7780
	float InitialMaxSpeed;//[Offset: 0x624, Size: 0x4] 0x78e23d7800
	float InitialAccel;//[Offset: 0x628, Size: 0x4] 0x78e23d7880
	float InitialDecel;//[Offset: 0x62c, Size: 0x4] 0x78e23d7900
	void ToggleDisplay();// 0x94d4680 0x78e23cb760
	void ShowDebugSelectedInfo();// 0x94d4694 0x78e23cb840
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x94d45a4 0x78e23cb920
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x6d94ba8 0x78e23cba00
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x6d94ba8 0x78e23cbae0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x6d94ba8 0x78e23cbbc0
	Actor* GetSelectedActor();// 0x94d464c 0x78e23cbca0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x448, Size: 0x4] 0x78e23f4600
	float FrustumAngle;//[Offset: 0x44c, Size: 0x4] 0x78e23f4680
	float FrustumAspectRatio;//[Offset: 0x450, Size: 0x4] 0x78e23f4700
	float FrustumStartDist;//[Offset: 0x454, Size: 0x4] 0x78e23f4780
	float FrustumEndDist;//[Offset: 0x458, Size: 0x4] 0x78e23f4800
	Texture* Texture;//[Offset: 0x460, Size: 0x8] 0x78e23f4880

--------------------------------
Class: CheatManagerExtension.Object

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8] 0x7875ac3480

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4] 0x7875a66f80
	int Index;//[Offset: 0x4, Size: 0x4] 0x7875a67000
	int SelectionIndex;//[Offset: 0x8, Size: 0x4] 0x7875a67080

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8] 0x7878057d80
	FName MemberName;//[Offset: 0x8, Size: 0x8] 0x7878057e00
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10] 0x7878057e80

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 0x8] 0x78e23742a0
	Actor* ChildActor;//[Offset: 0x200, Size: 0x8] 0x78e23d3900
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 0x8] 0x78e23d3980
	void SetChildActorClass(class Actor InClass);// 0x94c05d0 0x78e23c9380

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 0x8] 0x78e24dc380
	FName MatineeControllerName;//[Offset: 0x228, Size: 0x8] 0x78e24dc400
	float PlayRate;//[Offset: 0x230, Size: 0x4] 0x78e24dc480
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1] 0x78e24dc500
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1] 0x78e24dc580
	float ForceStartPosition;//[Offset: 0x238, Size: 0x4] 0x78e24dc600
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1] 0x78e24da580
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1] 0x78e24da600
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 0x1] 0x78e24da680
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 0x1] 0x78e24da700
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 0x1] 0x78e24da780
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 0x1] 0x78e24da800
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 0x1] 0x78e24da880
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 0x1] 0x78e24da900
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 0x4] 0x78e24da980
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1] 0x78e24daa00
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1] 0x78e24daa80
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1] 0x78e24dab00
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1] 0x78e24dab80
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 0x10] 0x78e237f7e0
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78e24dac80
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 0x10] 0x78e237f880
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 0x10] 0x78e237f920
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78e24dae00
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1] 0x78e24dae80
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1] 0x78e24daf00
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1] 0x78e24daf80
	float InterpPosition;//[Offset: 0x284, Size: 0x4] 0x78e24db000
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 0x1] 0x78e24db080
	delegate OnPlay;//[Offset: 0x290, Size: 0x10] 0x78e24db100
	delegate OnStop;//[Offset: 0x2a0, Size: 0x10] 0x78e24db180
	delegate OnPause;//[Offset: 0x2b0, Size: 0x10] 0x78e24db200
	void Stop();// 0x9637dd8 0x78e24b6b40
	void SetPosition(float NewPosition, bool bJump);// 0x9637ca4 0x78e24b6c20
	void SetLoopingState(bool bNewLooping);// 0x9637bd0 0x78e24b6d00
	void Reverse();// 0x9637dbc 0x78e24b6de0
	void Play();// 0x9637df4 0x78e24b6ec0
	void Pause();// 0x9637da0 0x78e24b6fa0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x9637a78 0x78e24b7080
	void ChangePlaybackDirection();// 0x9637c88 0x78e24b7160

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4] 0x78e242c600
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4] 0x78e242a580
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10] 0x78e237b320
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8] 0x78e242a680
	float EdSectionStart;//[Offset: 0x48, Size: 0x4] 0x78e242a700
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4] 0x78e242a780
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e242a800
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8] 0x78e242a880
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10] 0x78e237b3c0

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7875acf700
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10] 0x78759edbc0

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875acf600
	float Timestamp;//[Offset: 0xc, Size: 0x4] 0x7875acf680

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x68, Size: 0x8] 0x78e233fd00
	Object*[] CreateSubObjects;//[Offset: 0x158, Size: 0x10] 0x7875d4eb60

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78e2360f80
	float AnimLength;//[Offset: 0x8c, Size: 0x4] 0x78e2361000
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8] 0x78e2361080
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4] 0x78e233f800
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1] 0x78e233f880
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10] 0x7875d4e840
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4] 0x78e233f980
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10] 0x7875d4e8e0
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10] 0x7875d4e980
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20] 0x78e233fb00

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4] 0x7875a64900
	byte InterpolationType;//[Offset: 0x4, Size: 0x1] 0x7875a64980

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10] 0x7875a64f80
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4] 0x7875a65000

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8] 0x7875a64c00
	Vector SampleValue;//[Offset: 0x8, Size: 0xc] 0x7875a64c80
	float RateScale;//[Offset: 0x14, Size: 0x4] 0x7875a64d00

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4] 0x7875a64d80
	float Weights;//[Offset: 0xc, Size: 0x4] 0x7875a64e00

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10] 0x7875a64a00
	float Min;//[Offset: 0x10, Size: 0x4] 0x7875a64a80
	float Max;//[Offset: 0x14, Size: 0x4] 0x7875a64b00
	int GridNum;//[Offset: 0x18, Size: 0x4] 0x7875a64b80

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1] 0x78e2360f00

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1] 0x78e2360e80

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x220, Size: 0x8] 0x78e2360900
	void Stop();// 0x9436d04 0x78e234a180
	void Play(float StartTime);// 0x9436d18 0x78e234a260
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x9436eb0 0x78e234a340
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x9436fa0 0x78e234a420
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x9436dc0 0x78e234a500

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 0x8] 0x7875bd2b80
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 0x10] 0x7875b3a380
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 0x8] 0x7875bd2c80
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x7875bd2d00
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1] 0x7875bd2d80
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1] 0x7875bd2e00
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1] 0x7875bd2e80
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1] 0x7875bd2f00
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1] 0x7875bd2f80
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1] 0x7875bd3000
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1] 0x7875bd3080
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1] 0x7875bd3100
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1] 0x7875bd3180
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1] 0x7875bd1100
	FName AudioComponentUserID;//[Offset: 0x220, Size: 0x8] 0x7875bd1180
	float PitchModulationMin;//[Offset: 0x228, Size: 0x4] 0x7875bd1200
	float PitchModulationMax;//[Offset: 0x22c, Size: 0x4] 0x7875bd1280
	float VolumeModulationMin;//[Offset: 0x230, Size: 0x4] 0x7875bd1300
	float VolumeModulationMax;//[Offset: 0x234, Size: 0x4] 0x7875bd1380
	float VolumeMultiplier;//[Offset: 0x238, Size: 0x4] 0x7875bd1400
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 0x4] 0x7875bd1480
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 0x4] 0x7875bd1500
	float Priority;//[Offset: 0x244, Size: 0x4] 0x7875bd1580
	float SubtitlePriority;//[Offset: 0x248, Size: 0x4] 0x7875bd1600
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 0x8] 0x7875bd1680
	float PitchMultiplier;//[Offset: 0x258, Size: 0x4] 0x7875bd1700
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 0x4] 0x7875bd1780
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 0x8] 0x7875bd1800
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 0x3a0] 0x7875bd1880
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 0x8] 0x7875bd1900
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 0x50] 0x7875b3a420
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 0x1] 0x7875b3a4c0
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 0x1] 0x7875b37c20
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 0x1] 0x7875b37cc0
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 0x48] 0x7875bd1b80
	delegate OnAudioPlayStateChanged;//[Offset: 0x6c0, Size: 0x10] 0x7875bd1c00
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6e8, Size: 0x10] 0x7875bd1c80
	delegate OnAudioFinished;//[Offset: 0x710, Size: 0x10] 0x7875bd1d00
	delegate OnAudioPlaybackPercent;//[Offset: 0x738, Size: 0x10] 0x7875bd1d80
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x760, Size: 0x10] 0x7875bd1e00
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x788, Size: 0x10] 0x7875bd1e80
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 0x10] 0x7875bd1f00
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 0x8] 0x7875bd1f80
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 0x8] 0x7875bd2000
	void StopDelayed(float DelayTime);// 0x9478384 0x7875bbbbc0
	void Stop();// 0x947842c 0x7875bbbca0
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x9477f08 0x7875bbbd80
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x9477c70 0x7875bbbe60
	void SetUISound(bool bInUISound);// 0x9477b18 0x7875bbbf40
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x9477964 0x7875bbc020
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x9477870 0x7875bbc100
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x947777c 0x7875bbc1e0
	void SetSound(SoundBase* NewSound);// 0x9478acc 0x7875bbc2c0
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x9477bc8 0x7875bbc3a0
	void SetPaused(bool bPause);// 0x94782d4 0x7875bbc480
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x947738c 0x7875bbc560
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x947743c 0x7875bbc640
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x94774e4 0x7875bbc720
	void SetIntParameter(FName InName, int inInt);// 0x9477d18 0x7875bbc800
	void SetFloatParameter(FName InName, float InFloat);// 0x9477ff8 0x7875bbc8e0
	void SetBoolParameter(FName InName, bool InBool);// 0x9477e0c 0x7875bbc9c0
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x9477688 0x7875bb90e0
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x9477594 0x7875bb91c0
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x9478448 0x7875bb92a0
	void Play(float StartTime);// 0x9478748 0x7875bb9380
	bool IsVirtualized();// 0x947825c 0x7875bb9460
	bool IsPlaying();// 0x9478294 0x7875bb9540
	bool HasCookedFFTData();// 0x9477354 0x7875bb9620
	bool HasCookedAmplitudeEnvelopeData();// 0x947731c 0x7875bb9700
	enum GetPlayState();// 0x9478228 0x7875bb97e0
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x94770ec 0x7875bb98c0
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x94771ec 0x7875bb99a0
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x9476f60 0x7875bb9a80
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x947702c 0x7875bb9b60
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x94787f8 0x7875bb9c40
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x947893c 0x7875bb9d20
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x9476e8c 0x7875bb9e00
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x94780ec 0x7875bb9ee0
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x9477a58 0x7875bb9fc0

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7875a61700
	float FloatParam;//[Offset: 0x8, Size: 0x4] 0x7875a61780
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7875a61800
	int IntParam;//[Offset: 0x10, Size: 0x4] 0x7875a61880
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8] 0x7875a61900

--------------------------------
Class: QuartzClockHandle.Object
	QuartzSubsystem* QuartzSubsystem;//[Offset: 0x168, Size: 0x8] 0x78e2324e00
	World* WorldPtr;//[Offset: 0x188, Size: 0x8] 0x78e2324e80
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x87c09e8 0x78e2315aa0
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x87c08e8 0x78e2315b80
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x87c0c90 0x78e2315c60
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x87c0b34 0x78e2315d40
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x87c1810 0x78e2315e20
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x87c0e38 0x78e2315f00
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x87c1958 0x78e2315fe0
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x87c04d0 0x78e23160c0
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x87c00b8 0x78e23161a0
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x87c02c4 0x78e2316280
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x87c06dc 0x78e2316360
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x87bfeac 0x78e2316440
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x87c1610 0x78e2316520
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x87c1350 0x78e2316600
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x87c1500 0x78e23166e0
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x87c1710 0x78e23167c0
	bool IsClockRunning(const Object* WorldContextObject);// 0x87c129c 0x78e23168a0
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x87bfd4c 0x78e2316980
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x87bfbec 0x78e2316a60
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x87bfc9c 0x78e2316b40
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x87bfdfc 0x78e2316c20
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x87c0fe8 0x78e2316d00
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x87c1148 0x78e2316de0
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x87c1098 0x78e2316ec0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x87bfb3c 0x78e2316fa0

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x87c5cfc 0x78e2317da0
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x87c55e8 0x78e2317e80
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x87c4e30 0x78e2317f60
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x87c4d80 0x78e2318040
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x87c4ee0 0x78e2318120
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x87c57e0 0x78e2318200
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x87c50dc 0x78e23182e0
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x87c502c 0x78e23183c0
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x87c518c 0x78e23184a0
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x87c523c 0x78e2318580
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x87c544c 0x78e2318660
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x87c5344 0x78e2318740
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x87c4fc4 0x78e2318820
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x87c4f90 0x78e2318900
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x87c4ff8 0x78e23189e0
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x87c56e4 0x78e2318ac0
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x87c59d8 0x78e2318ba0
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x87c58d8 0x78e2318c80
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x87c5ac8 0x78e2318d60

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 0x4] 0x7875aeb600
	int Beat;//[Offset: 0x4, Size: 0x4] 0x7875aeb680
	float BeatFraction;//[Offset: 0x8, Size: 0x4] 0x7875aeb700
	float Seconds;//[Offset: 0xc, Size: 0x4] 0x7875aeb780

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18] 0x7875aebc80
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875aebd00

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4] 0x7875aeba00
	enum BeatType;//[Offset: 0x4, Size: 0x1] 0x78759ef060
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10] 0x78759ef1a0

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4] 0x7875aebb00
	enum PulseDuration;//[Offset: 0x4, Size: 0x1] 0x78759ef100

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1] 0x78759eef20
	float Multiplier;//[Offset: 0x4, Size: 0x4] 0x7875aeb880
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1] 0x78759eefc0
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7875aeb980

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10] 0x7875b310a0
	float PlaybackTime;//[Offset: 0x10, Size: 0x4] 0x7875b09e00
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7875b09e80

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7875b09c00
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7875b09c80
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4] 0x7875b09d00

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4] 0x7875b09f00
	float PlaybackTime;//[Offset: 0x4, Size: 0x4] 0x7875b09f80
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8] 0x7875b0a000

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4] 0x78e2360200
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10] 0x7875d4e520
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78e2360300
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78e2360380
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x78e2360400
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78e2360480
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78e2360500
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x78e2360580
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1] 0x78e2360600
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x58, Size: 0x10] 0x7875d4e5c0
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0x68, Size: 0x10] 0x7875d4e660
	<FName,enum> AttributeBlendModes;//[Offset: 0x78, Size: 0x50] 0x7875b1b380
	enum DefaultAttributeBlendMode;//[Offset: 0xc8, Size: 0x1] 0x7875d4e7a0

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7875a8a080
	FString Meaning;//[Offset: 0x10, Size: 0x10] 0x7875a8a100

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8] 0x78e2362100
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10] 0x7875d4e480
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78e2360100
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78e2360180

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a48780
	LinearColor Color;//[Offset: 0x8, Size: 0x10] 0x7875a48800

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x260, Size: 0x4] 0x78e2304380
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78e2304400
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1] 0x78e2304480
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x268, Size: 0x10] 0x7875d48760
	ActorComponent*[] ComponentTemplates;//[Offset: 0x278, Size: 0x10] 0x7875d48800
	TimelineTemplate*[] Timelines;//[Offset: 0x288, Size: 0x10] 0x7875d488a0
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x298, Size: 0x10] 0x7875d48940
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x2a8, Size: 0x8] 0x78e2304700
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x2b0, Size: 0x8] 0x78e2304780
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x2b8, Size: 0x8] 0x78e2304800
	Function* UberGraphFunction;//[Offset: 0x2c8, Size: 0x8] 0x78e2304880
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2d0, Size: 0x50] 0x7875b1b680

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x360, Size: 0x10] 0x7875d4fec0
	Skeleton* TargetSkeleton;//[Offset: 0x370, Size: 0x8] 0x78e2361b80
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x378, Size: 0x10] 0x7875d4ff60
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x388, Size: 0x50] 0x7875b1b140
	FName[] SyncGroupNames;//[Offset: 0x458, Size: 0x10] 0x7875d4e340
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x468, Size: 0x10] 0x7875d4e3e0
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x478, Size: 0x50] 0x7875b1b200
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x4c8, Size: 0x50] 0x7875b1b2c0
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x518, Size: 0xc8] 0x78e2362080

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8] 0x7875a4ff80
	int InitialState;//[Offset: 0x8, Size: 0x4] 0x7875a4e780
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10] 0x78759e8940
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10] 0x78759e8a80

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7875a4e800
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10] 0x78759e8760
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4] 0x7875a4ec00
	int StartNotify;//[Offset: 0x1c, Size: 0x4] 0x7875a4ec80
	int EndNotify;//[Offset: 0x20, Size: 0x4] 0x7875a4ed00
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4] 0x7875a4ed80
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875a4ee00
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4] 0x7875a4ee80
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10] 0x78759e8800
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10] 0x78759e88a0
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875a4f000

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4] 0x7875a4e880
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4] 0x7875a4e900
	int TransitionIndex;//[Offset: 0x8, Size: 0x4] 0x7875a4e980
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7875a4ea00
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7875a4ea80
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10] 0x78759e86c0

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4] 0x7875a4f100
	int NextState;//[Offset: 0xc, Size: 0x4] 0x7875a4f180
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4] 0x7875a4f200
	int StartNotify;//[Offset: 0x14, Size: 0x4] 0x7875a4f280
	int EndNotify;//[Offset: 0x18, Size: 0x4] 0x7875a4f300
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4] 0x7875a4f380
	enum BlendMode;//[Offset: 0x20, Size: 0x1] 0x78759e89e0
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8] 0x7875a4f480
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8] 0x7875a4f500
	byte LogicType;//[Offset: 0x38, Size: 0x1] 0x7875a4f580

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8] 0x7875a4f600

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78759e7860

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8] 0x7875a4e300
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10] 0x78759e6d20
	Function* Function;//[Offset: 0x18, Size: 0x8] 0x7875a4e500
	FieldPathProperty ValueHandlerNodeProperty;//[Size: 0x20] 0x7875a4e580

--------------------------------
Class: ExposedValueCopyRecord
	int CopyIndex;//[Offset: 0x0, Size: 0x4] 0x7875a4e380
	enum PostCopyOperation;//[Offset: 0x4, Size: 0x1] 0x78759e6c80

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10] 0x78759e7900

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x7875a48500
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x7875a48580

--------------------------------
Class: PropertyAccessLibrary
	PropertyAccessSegment[] PathSegments;//[Offset: 0x0, Size: 0x10] 0x78759e4f20
	PropertyAccessPath[] SrcPaths;//[Offset: 0x10, Size: 0x10] 0x78759e4fc0
	PropertyAccessPath[] DestPaths;//[Offset: 0x20, Size: 0x10] 0x78759e5060
	PropertyAccessCopyBatch CopyBatches;//[Offset: 0x30, Size: 0x10] 0x7875a17f00
	PropertyAccessIndirectionChain[] SrcAccesses;//[Offset: 0x70, Size: 0x10] 0x78759e5240
	PropertyAccessIndirectionChain[] DestAccesses;//[Offset: 0x80, Size: 0x10] 0x78759e29a0
	PropertyAccessIndirection[] Indirections;//[Offset: 0x90, Size: 0x10] 0x78759e2b80
	int[] EventAccessIndices;//[Offset: 0xa0, Size: 0x10] 0x78759e2c20

--------------------------------
Class: PropertyAccessSegment
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a17680
	Struct* Struct;//[Offset: 0x8, Size: 0x8] 0x7875a17700
	FieldPathProperty Property;//[Size: 0x20] 0x7875a17780
	Function* Function;//[Offset: 0x30, Size: 0x8] 0x7875a17800
	int ArrayIndex;//[Offset: 0x38, Size: 0x4] 0x7875a17880
	uint16 Flags;//[Offset: 0x3c, Size: 0x2] 0x7875a17900

--------------------------------
Class: PropertyAccessPath
	int PathSegmentStartIndex;//[Offset: 0x0, Size: 0x4] 0x7875a17a80
	int PathSegmentCount;//[Offset: 0x4, Size: 0x4] 0x7875a17b00
	bool bHasEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875a17b80

--------------------------------
Class: PropertyAccessCopyBatch
	PropertyAccessCopy[] Copies;//[Offset: 0x0, Size: 0x10] 0x78759e51a0

--------------------------------
Class: PropertyAccessCopy
	int AccessIndex;//[Offset: 0x0, Size: 0x4] 0x7875a17c80
	int DestAccessStartIndex;//[Offset: 0x4, Size: 0x4] 0x7875a17d00
	int DestAccessEndIndex;//[Offset: 0x8, Size: 0x4] 0x7875a17d80
	enum Type;//[Offset: 0xc, Size: 0x1] 0x78759e5100

--------------------------------
Class: PropertyAccessIndirectionChain
	FieldPathProperty Property;//[Size: 0x20] 0x7875a18000
	int IndirectionStartIndex;//[Offset: 0x20, Size: 0x4] 0x7875a18080
	int IndirectionEndIndex;//[Offset: 0x24, Size: 0x4] 0x7875a18100
	int EventId;//[Offset: 0x28, Size: 0x4] 0x7875a18180

--------------------------------
Class: PropertyAccessIndirection
	FieldPathProperty ArrayProperty;//[Size: 0x20] 0x7875a18280
	Function* Function;//[Offset: 0x20, Size: 0x8] 0x7875a18300
	int ReturnBufferSize;//[Offset: 0x28, Size: 0x4] 0x7875a18380
	int ReturnBufferAlignment;//[Offset: 0x2c, Size: 0x4] 0x7875a18400
	int ArrayIndex;//[Offset: 0x30, Size: 0x4] 0x7875a16380
	uint32 Offset;//[Offset: 0x34, Size: 0x4] 0x7875a16400
	enum ObjectType;//[Offset: 0x38, Size: 0x1] 0x78759e2a40
	enum Type;//[Offset: 0x39, Size: 0x1] 0x78759e2ae0

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10] 0x78e2371320
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8] 0x78e2363100
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10] 0x78e23713c0
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50] 0x7875b1af00
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10] 0x78e2371460
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10] 0x7875d4f7e0
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10] 0x7875d4f880
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10] 0x7875d4f920
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10] 0x7875d4f9c0
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10] 0x7875d4fa60
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10] 0x7875d4fb00
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10] 0x7875d4fba0
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10] 0x7875d4fc40
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50] 0x7875b1afc0
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10] 0x7875d4fce0
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10] 0x7875d4fd80
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50] 0x7875b1b080
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x268, Size: 0xc8] 0x78e2361980

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a4a200
	FName Group;//[Offset: 0x8, Size: 0x8] 0x7875a4a280
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4] 0x7875a4a300
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10] 0x78759e7720
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10] 0x78759e77c0
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875a4a480

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20] 0x7875a48600
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10] 0x78759e79a0
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10] 0x78759e7a40

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10] 0x78e2362d80

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e2362b80
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1] 0x78e2362c00
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1] 0x78e2362c80
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1] 0x78e2362d00

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78e2362700
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78e2362780
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78e2362800
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4] 0x78e2362880
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4] 0x78e2362900
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4] 0x78e2362980
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4] 0x78e2362a00
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78e2362a80
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x78e2362b00

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4] 0x78e2363d80
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4] 0x78e2363e00
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4] 0x78e2363e80
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4] 0x78e2363f00
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10] 0x78e23710a0
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10] 0x78e2371140
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10] 0x78e23711e0
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e2364100
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4] 0x78e2364180
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4] 0x78e2364200
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78e2362180
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78e2362200
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4] 0x78e2362280
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4] 0x78e2362300
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4] 0x78e2362380
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1] 0x78e2362400
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4] 0x78e2362480
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4] 0x78e2362500
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4] 0x78e2362580
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4] 0x78e2362600
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4] 0x78e2362680

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4] 0x78e2363c80
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78e2363d00

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4] 0x78e2363b00
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4] 0x78e2363b80
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4] 0x78e2363c00

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8] 0x78e2364e80
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78e2364f00
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78e2364f80
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x78e2365000
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e2365080
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x78e2365100

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8] 0x78e2364c00
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4] 0x78e2364c80
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4] 0x78e2364d00
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e2364d80
	FName AttachName;//[Offset: 0x4c, Size: 0x8] 0x78e2364e00

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78e2364980
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x78e2364a00
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x78e2364a80
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x78e2364b00
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e2364b80

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8] 0x78e2364500
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8] 0x78e2364580
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8] 0x78e2364600
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1] 0x78e2364680
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8] 0x78e2364700
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78e2364780
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x6d94ba8 0x78e2349ee0

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e2365880
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10] 0x78e23706a0
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10] 0x78e2370740
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10] 0x78e23707e0
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10] 0x78e2370880
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10] 0x78e2370920
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10] 0x78e23709c0
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8] 0x78e2365c00
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8] 0x78e2365c80

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10] 0x78759e8b20

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2b8, Size: 0x8] 0x78e2366e00
	delegate PostEvaluateAnimEvent;//[Offset: 0x2c0, Size: 0x10] 0x78e2366e80
	void StopAnim();// 0x9462604 0x78e2349380
	void SetReverse(bool bInReverse);// 0x9462b24 0x78e2349460
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x9462338 0x78e2349540
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x94628e4 0x78e2349620
	void SetPosition(float InPosition, bool bFireNotifies);// 0x9462a28 0x78e2349700
	void SetPlayRate(float InPlayRate);// 0x9462bd4 0x78e23497e0
	void SetPlaying(bool bIsPlaying);// 0x9462784 0x78e23498c0
	void SetLooping(bool bIsLooping);// 0x9462c7c 0x78e23499a0
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0x9462834 0x78e2349a80
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x94624c0 0x78e2349b60
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x9462618 0x78e2349c40
	float GetLength();// 0x9462750 0x78e2349d20
	AnimationAsset* GetAnimationAsset();// 0x9462484 0x78e2349e00

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4] 0x78e2366980
	enum Interpolation;//[Offset: 0xac, Size: 0x1] 0x78e2370600
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8] 0x78e2366a80
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8] 0x78e2366b00
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8] 0x78e2366b80
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78e2366c00
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1] 0x78e2366c80
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78e2366d00
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1] 0x78e2366d80

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10] 0x7878058e00
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10] 0x7878058e80
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10] 0x7878058f00
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10] 0x7878058f80
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10] 0x7878059000
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10] 0x7878059080
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10] 0x7878059180
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10] 0x7878059280
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10] 0x7878059380

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4] 0x7875c8f280
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4] 0x7875c8f300
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4] 0x7875c8f380
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4] 0x7875c8f400
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4] 0x7875c8f480
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4] 0x7875c8f500
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875c8f580
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7875c8f600
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7875c8f680
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x7875c8f700
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7875c8f780
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7875c8d700
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4] 0x7875c8d780
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1] 0x7875c8d800
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1] 0x7875c8d880
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4] 0x7875c8d900
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4] 0x7875c8d980
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4] 0x7875c8da00
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4] 0x7875c8da80
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4] 0x7875c8db00
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7875c8db80
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1] 0x7875c8dc00
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x68] 0x7875c8dc80

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4] 0x787596bd80
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4] 0x787596be00
	int PushOutIterations;//[Offset: 0x8, Size: 0x4] 0x787596be80
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4] 0x787596bf00
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4] 0x787596bf80
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4] 0x787596c000
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4] 0x787596c080
	int JointPairIterations;//[Offset: 0x1c, Size: 0x4] 0x787596c100
	int JointPushOutPairIterations;//[Offset: 0x20, Size: 0x4] 0x787596c180
	float ClusterConnectionFactor;//[Offset: 0x24, Size: 0x4] 0x787596c200
	enum ClusterUnionConnectionType;//[Offset: 0x28, Size: 0x1] 0x787800a7e0
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x787596c300
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2c, Size: 0x10] 0x787596c580
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x787596c600
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x40, Size: 0x10] 0x787596a780
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x787596a800
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x54, Size: 0x10] 0x787596aa80
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x787596ab00

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596c380
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x787596c400
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x787596c480
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x787596c500

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596a580
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x787596a600
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x787596a680
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x787596a700

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596a880
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x787596a900
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x787596a980
	float MinVolume;//[Offset: 0xc, Size: 0x4] 0x787596aa00

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe0, Size: 0x34] 0x78e2566d00
	byte LockedAxis;//[Offset: 0x114, Size: 0x1] 0x78e2566d80
	byte DefaultDegreesOfFreedom;//[Offset: 0x115, Size: 0x1] 0x78e2566e00
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1] 0x78e2566e80
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1] 0x78e2566f00
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78e2566f80
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e2567000
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78e2567080
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78e2567100
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78e2567180
	float AnimPhysicsMinDeltaTime;//[Offset: 0x120, Size: 0x4] 0x78e2567200
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x78e2567280
	float MaxPhysicsDeltaTime;//[Offset: 0x128, Size: 0x4] 0x78e2567300
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78e2567380
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78e2565300
	float MaxSubstepDeltaTime;//[Offset: 0x130, Size: 0x4] 0x78e2565380
	int MaxSubsteps;//[Offset: 0x134, Size: 0x4] 0x78e2565400
	float SyncSceneSmoothingFactor;//[Offset: 0x138, Size: 0x4] 0x78e2565480
	float InitialAverageFrameRate;//[Offset: 0x13c, Size: 0x4] 0x78e2565500
	int PhysXTreeRebuildRate;//[Offset: 0x140, Size: 0x4] 0x78e2565580
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x148, Size: 0x10] 0x78e24e1be0
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x158, Size: 0x40] 0x78e2565680
	float MinDeltaVelocityForHitEvents;//[Offset: 0x198, Size: 0x4] 0x78e2565700
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x19c, Size: 0x3] 0x78e2565780

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4] 0x7875ac2a00
	float PingLimit;//[Offset: 0x4, Size: 0x4] 0x7875ac2a80
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4] 0x7875ac2b00
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4] 0x7875ac2b80
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4] 0x7875ac2c00
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4] 0x7875ac2c80
	float PositionLerp;//[Offset: 0x18, Size: 0x4] 0x7875ac2d00
	float AngleLerp;//[Offset: 0x1c, Size: 0x4] 0x7875ac2d80
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4] 0x7875ac2e00
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4] 0x7875ac2e80
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4] 0x7875ac2f00
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4] 0x7875ac2f80
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4] 0x7875ac3000

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1] 0x7875ae9c80
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7875ae9d00

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1] 0x78759ef740
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1] 0x78759ecea0
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1] 0x78759ecf40

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10] 0x78e2373e40
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10] 0x78e2373ee0
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10] 0x78e2373f80
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10] 0x78e2374020
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10] 0x78e23740c0

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a85880
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1] 0x7875a85900
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7875a85980
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8] 0x7875a85a00
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10] 0x78759e9160

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1] 0x7875a85b00
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1] 0x7875a85b80
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7875a85c00
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7875a85c80
	FName Name;//[Offset: 0x4, Size: 0x8] 0x7875a85d00

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a85d80
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10] 0x78759e9200

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8] 0x7875a8db00
	FName NewName;//[Offset: 0x8, Size: 0x8] 0x7875a8db80

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x448, Size: 0x4] 0x78e2366600
	float ArrowSize;//[Offset: 0x44c, Size: 0x4] 0x78e2366680
	float ArrowLength;//[Offset: 0x450, Size: 0x4] 0x78e2366700
	float ScreenSize;//[Offset: 0x454, Size: 0x4] 0x78e2366780
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1] 0x78e2366800
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1] 0x78e2366880
	void SetArrowColor(LinearColor NewColor);// 0x9469fb8 0x78e23492a0

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8] 0x78e2368100
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8] 0x78e2368180
	FString Filename;//[Offset: 0x38, Size: 0x10] 0x78e2368200
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e2368280
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78e2368300
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78e2368380
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78e2368400
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x78e2366380
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1] 0x78e2366400
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10] 0x78e23704c0
	Object* Options;//[Offset: 0x60, Size: 0x8] 0x78e2366500
	FString[] Errors;//[Offset: 0x68, Size: 0x10] 0x78e2370560

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8] 0x78e2378ee0
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8] 0x78e23ffe00
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10] 0x78e2378f80
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10] 0x78e2379020
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4] 0x78e23fff80
	int TextIndent;//[Offset: 0x5c, Size: 0x4] 0x78e23fe780
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e23fe800
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78e23fe880
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78e23fe900
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8] 0x78e23fe980
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x6d94ba8 0x78e23e4f40
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x950ca0c 0x78e23e5020
	static bool RunAssetExportTask(AssetExportTask* Task);// 0x950cad0 0x78e23e5100

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2e0, Size: 0x10] 0x78e2370420
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x78e2367a80
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x78e2367b00
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x78e2367b80
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1] 0x78e2367c00
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1] 0x78e2367c80
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1] 0x78e2367d00
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1] 0x78e2367d80
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 0x1] 0x78e2367e00
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x78e2367e80
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1] 0x78e2367f00
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1] 0x78e2367f80
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 0x1] 0x78e2368000
	int NumberOfSpawnedNotifications;//[Offset: 0x2fc, Size: 0x4] 0x78e2368080

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10] 0x78e2372860
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10] 0x78e2372900
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10] 0x78e2370060
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10] 0x78e2370100
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78e2367600
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78e2367680
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78e2367700
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78e2367780
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10] 0x78e23701a0
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10] 0x78e2370240
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10] 0x78e23702e0
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50] 0x78e2370380

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7875a60300
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28] 0x78759e7ea0
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8] 0x78759e7f40
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875a60380
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7875a60400
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10] 0x78759e7fe0
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10] 0x78759e8080
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc] 0x7875a60580
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10] 0x78759e8120
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7875a60680
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4] 0x7875a60700

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10] 0x7875a46980

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4] 0x7875a60e80
	int ChunkId;//[Offset: 0x4, Size: 0x4] 0x7875a60f00
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875a60f80
	enum CookRule;//[Offset: 0x9, Size: 0x1] 0x78759e8440

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10] 0x7875a60c00
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc] 0x7875a60c80

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x78a8150d00
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8] 0x78a8150d80

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78a8150e00

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8] 0x7875a60d00
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10] 0x7875a60d80
	FString FilterString;//[Offset: 0x18, Size: 0x10] 0x7875a60e00
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc] 0x7875a61080

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10] 0x7875a60b00
	FString New;//[Offset: 0x10, Size: 0x10] 0x7875a60b80

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10] 0x78e23727c0

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8] 0x7875a60200
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8] 0x7875a60280

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x9489c24 0x7875facf00

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10] 0x78e2368f00
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8] 0x78e2368f80
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x9471af4 0x78e23490e0
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x94719a8 0x78e23491c0

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78e2368c80
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x94726ec 0x78e234c9c0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78e2368a00
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x9472d14 0x78e234c8e0

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78e2368780
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x947333c 0x78e234c800

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78e2368500
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x9473974 0x78e234c720

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10] 0x78e236a100
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x9473fac 0x78e234c560
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x9474178 0x78e234c640

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x220, Size: 0x8] 0x78e236a080

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x1f4, Size: 0x4] 0x78e236b100
	float FogMultiplier;//[Offset: 0x1f8, Size: 0x4] 0x78e236b180
	float DensityMultiplier;//[Offset: 0x1fc, Size: 0x4] 0x78e236b200
	float DensityOffset;//[Offset: 0x200, Size: 0x4] 0x78e236b280
	float DistanceScale;//[Offset: 0x204, Size: 0x4] 0x78e236b300
	float AltitudeScale;//[Offset: 0x208, Size: 0x4] 0x78e236b380
	float DistanceOffset;//[Offset: 0x20c, Size: 0x4] 0x78e236b400
	float GroundOffset;//[Offset: 0x210, Size: 0x4] 0x78e236b480
	float StartDistance;//[Offset: 0x214, Size: 0x4] 0x78e236b500
	float SunDiscScale;//[Offset: 0x218, Size: 0x4] 0x78e236b580
	float DefaultBrightness;//[Offset: 0x21c, Size: 0x4] 0x78e2369500
	Color DefaultLightColor;//[Offset: 0x220, Size: 0x4] 0x78e2369580
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1] 0x78e2369600
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1] 0x78e2369680
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1] 0x78e2369700
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x228, Size: 0x2c] 0x78e2369780
	Texture2D* TransmittanceTexture;//[Offset: 0x258, Size: 0x8] 0x78e2369800
	Texture2D* IrradianceTexture;//[Offset: 0x260, Size: 0x8] 0x78e2369880
	void StartPrecompute();// 0x9474ee4 0x78e234b920
	void SetSunMultiplier(float NewSunMultiplier);// 0x947562c 0x78e234ba00
	void SetStartDistance(float NewStartDistance);// 0x947523c 0x78e234bae0
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x9474ef8 0x78e234bbc0
	void SetFogMultiplier(float NewFogMultiplier);// 0x9475584 0x78e234bca0
	void SetDistanceScale(float NewDistanceScale);// 0x947538c 0x78e234bd80
	void SetDistanceOffset(float NewDistanceOffset);// 0x9475194 0x78e234be60
	void SetDensityOffset(float NewDensityOffset);// 0x9475434 0x78e234bf40
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x94754dc 0x78e234c020
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x94756d4 0x78e234c100
	void SetDefaultBrightness(float NewBrightness);// 0x947577c 0x78e234c1e0
	void SetAltitudeScale(float NewAltitudeScale);// 0x94752e4 0x78e234c2c0
	void DisableSunDisk(bool NewSunDisk);// 0x94750e4 0x78e234c3a0
	void DisableGroundScattering(bool NewGroundScattering);// 0x9475034 0x78e234c480

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4] 0x7875a61d80
	float DecayHeight;//[Offset: 0x4, Size: 0x4] 0x7875a61e00
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4] 0x7875a61e80
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4] 0x7875a61f00
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4] 0x7875a61f80
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4] 0x7875a62000
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4] 0x7875a62080
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4] 0x7875a62100
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4] 0x7875a60080
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4] 0x7875a60100
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4] 0x7875a60180

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18] 0x78e236c400
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18] 0x78e236c480
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18] 0x78e236c500
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18] 0x78e236c580
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18] 0x78e236c600
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18] 0x78e236a580
	SoftObjectPath BaseDefaultSubmix;//[Offset: 0xc8, Size: 0x18] 0x78e236a600
	SoftObjectPath ReverbSubmix;//[Offset: 0xe0, Size: 0x18] 0x78e236a680
	SoftObjectPath EQSubmix;//[Offset: 0xf8, Size: 0x18] 0x78e236a700
	enum VoiPSampleRate;//[Offset: 0x110, Size: 0x4] 0x78e2371c80
	float DefaultReverbSendLevel;//[Offset: 0x114, Size: 0x4] 0x78e236a800
	int MaximumConcurrentStreams;//[Offset: 0x118, Size: 0x4] 0x78e236a880
	float GlobalMinPitchScale;//[Offset: 0x11c, Size: 0x4] 0x78e236a900
	float GlobalMaxPitchScale;//[Offset: 0x120, Size: 0x4] 0x78e236a980
	AudioQualitySettings[] QualityLevels;//[Offset: 0x128, Size: 0x10] 0x78e2371d20
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1] 0x78e236aa80
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1] 0x78e236ab00
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 0x1] 0x78e236ab80
	uint32 NumStoppingSources;//[Offset: 0x13c, Size: 0x4] 0x78e236ac00
	enum PanningMethod;//[Offset: 0x140, Size: 0x1] 0x78e2371dc0
	enum MonoChannelUpmixMethod;//[Offset: 0x141, Size: 0x1] 0x78e2371e60
	FString DialogueFilenameFormat;//[Offset: 0x148, Size: 0x10] 0x78e236ad80
	SoundDebugEntry[] DebugSounds;//[Offset: 0x158, Size: 0x10] 0x78e2371f00
	DefaultAudioBusSettings[] DefaultAudioBuses;//[Offset: 0x168, Size: 0x10] 0x78e2371fa0
	SoundClass* DefaultSoundClass;//[Offset: 0x178, Size: 0x8] 0x78e236af00
	SoundClass* DefaultMediaSoundClass;//[Offset: 0x180, Size: 0x8] 0x78e236af80
	SoundConcurrency* DefaultSoundConcurrency;//[Offset: 0x188, Size: 0x8] 0x78e236b000

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7875a61480
	int MaxChannels;//[Offset: 0x18, Size: 0x4] 0x7875a61500

--------------------------------
Class: SoundDebugEntry
	FName DebugName;//[Offset: 0x0, Size: 0x8] 0x7875a61580
	SoftObjectPath Sound;//[Offset: 0x8, Size: 0x18] 0x7875a61600

--------------------------------
Class: DefaultAudioBusSettings
	SoftObjectPath AudioBus;//[Offset: 0x0, Size: 0x18] 0x7875a61680

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x258, Size: 0x4] 0x78e236be00
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 0x1] 0x78e236be80
	ReverbSettings Settings;//[Offset: 0x260, Size: 0x20] 0x78e236bf00
	InteriorSettings AmbientZoneSettings;//[Offset: 0x280, Size: 0x24] 0x78e236bf80
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2a8, Size: 0x10] 0x78e2371a00
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x2b8, Size: 0x10] 0x78e2371aa0
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0x947d594 0x78e234b300
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0x947d498 0x78e234b3e0
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x947d7a0 0x78e234b4c0
	void SetPriority(float NewPriority);// 0x947d918 0x78e234b5a0
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x947d6e8 0x78e234b680
	void SetEnabled(bool bNewEnabled);// 0x947d868 0x78e234b760
	void OnRep_bEnabled();// 0x947d47c 0x78e234b840

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1] 0x78759ea2e0
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1] 0x78759ea380
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10] 0x78759e7c20

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8] 0x7875a62f80
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10] 0x78759e7cc0
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4] 0x7875a63080

--------------------------------
Class: AutoDestroySubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x40, Size: 0x10] 0x78e2371960
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x947e0d4 0x78e234b220

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10] 0x78e2373d00
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10] 0x78e2373da0
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18] 0x78e236d680
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10] 0x78e2371500
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10] 0x78e23715a0
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10] 0x78e2371640
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x90, Size: 0x1f0] 0x78e236b780
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x280, Size: 0x30] 0x78e236b800
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b0, Size: 0x10] 0x78e236b880
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c0, Size: 0x30] 0x78e236b900
	FString[] TestLevelFolders;//[Offset: 0x2f0, Size: 0x10] 0x78e23716e0
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x300, Size: 0x10] 0x78e2371780
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x310, Size: 0x10] 0x78e2371820
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x320, Size: 0x10] 0x78e23718c0
	IntPoint DefaultScreenshotResolution;//[Offset: 0x330, Size: 0x8] 0x78e236bb80
	float PIETestDuration;//[Offset: 0x338, Size: 0x4] 0x78e236bc00

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18] 0x7875a62700
	int TestTimer;//[Offset: 0x18, Size: 0x4] 0x7875a62780

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10] 0x7875a63a00
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150] 0x7875a64200
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60] 0x7875a62480
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20] 0x7875a62600
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10] 0x7875a62680

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10] 0x7875a62800

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20] 0x7875a63a80
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20] 0x7875a63b00
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20] 0x7875a63b80
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20] 0x7875a63c00
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20] 0x7875a63c80
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20] 0x7875a63d00
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20] 0x7875a63d80
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20] 0x7875a63e00
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20] 0x7875a63e80
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20] 0x7875a63f00
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10] 0x78759ea240

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7875a63f80
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10] 0x78759ea1a0

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10] 0x7875a64000
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7875a64080

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10] 0x7875a62180
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10] 0x7875a62200
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10] 0x7875a62280
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10] 0x7875a62300
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10] 0x7875a62380
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10] 0x7875a62400

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10] 0x7875a62500
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10] 0x7875a62580

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10] 0x7875a63680
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10] 0x7875a63700
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10] 0x7875a63780

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10] 0x7875a63800

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10] 0x7875a63880
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10] 0x7875a63900
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10] 0x7875a63980

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10] 0x7875a65280
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10] 0x7875a63200
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10] 0x7875a63280
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10] 0x7875a63300
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10] 0x7875a63380
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10] 0x7875a63400

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10] 0x7875a63480
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10] 0x7875a63500
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875a63580
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10] 0x78759ea100

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10] 0x7875a62880
	FString DeviceID;//[Offset: 0x10, Size: 0x10] 0x7875a62900

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x220, Size: 0x20] 0x78e236ce00

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10] 0x78759ea060

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10] 0x78759e9fc0

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x948c480 0x78e234dde0
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x948c378 0x78e234dec0
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x948c1bc 0x78e234dfa0
	static int Map_Length(out const <int,int> TargetMap);// 0x948c118 0x78e234e080
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x948c010 0x78e234e160
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x948bd34 0x78e234e240
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x948bb74 0x78e234e320
	static void Map_Clear(out const <int,int> TargetMap);// 0x948badc 0x78e234e400
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x948b84c 0x78e234e4e0

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	static FString VideoCaptureDir();// 0x9495734 0x78e23c0160
	static void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0x9492f6c 0x78e23c0240
	static void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x9492da4 0x78e23c0320
	static FString SourceConfigDir();// 0x9495b54 0x78e23c0400
	static bool ShouldSaveToUserDir();// 0x9496c0c 0x78e23c04e0
	static FString ShaderWorkingDir();// 0x9495e4c 0x78e23c05c0
	static void SetProjectFilePath(FString NewGameProjectFilePath);// 0x9494b60 0x78e23c06a0
	static FString SetExtension(FString InPath, FString InNewExtension);// 0x9494448 0x78e23c0780
	static FString ScreenShotDir();// 0x9495894 0x78e23c0860
	static FString SandboxesDir();// 0x94959f4 0x78e23c0940
	static FString RootDir();// 0x949631c 0x78e23c0a20
	static void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0x9493c24 0x78e23c0b00
	static FString ProjectUserDir();// 0x94961bc 0x78e23c0be0
	static FString ProjectSavedDir();// 0x9495fac 0x78e23c0cc0
	static FString ProjectPluginsDir();// 0x9495d9c 0x78e23c0da0
	static FString ProjectPersistentDownloadDir();// 0x9495c04 0x78e23c0e80
	static FString ProjectModsDir();// 0x9495cec 0x78e23c0f60
	static FString ProjectLogDir();// 0x9495684 0x78e23c1040
	static FString ProjectIntermediateDir();// 0x9495efc 0x78e23c1120
	static FString ProjectDir();// 0x949626c 0x78e23c1200
	static FString ProjectContentDir();// 0x949610c 0x78e23c12e0
	static FString ProjectConfigDir();// 0x949605c 0x78e23c13c0
	static FString ProfilingDir();// 0x9495944 0x78e23c14a0
	static void NormalizeFilename(FString InPath, out FString OutPath);// 0x9494060 0x78e23c1580
	static void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0x9493e48 0x78e23c1660
	static FString MakeValidFileName(FString inString, FString InReplacementChar);// 0x949311c 0x78e23c1740
	static void MakeStandardFilename(FString InPath, out FString OutPath);// 0x9493b1c 0x78e23c1820
	static void MakePlatformFilename(FString InPath, out FString OutPath);// 0x9493a14 0x78e23c1900
	static bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0x94938a0 0x78e23c19e0
	static FString LaunchDir();// 0x9496b5c 0x78e23c1ac0
	static bool IsSamePath(FString PathA, FString PathB);// 0x9493f50 0x78e23c1ba0
	static bool IsRestrictedPath(FString InPath);// 0x9494fac 0x78e23c1c80
	static bool IsRelative(FString InPath);// 0x9494168 0x78e234e780
	static bool IsProjectFilePathSet();// 0x9494cb4 0x78e234e860
	static bool IsDrive(FString InPath);// 0x9494220 0x78e234e940
	static bool HasProjectPersistentDownloadDir();// 0x9495cb4 0x78e234ea20
	static FString[] GetToolTipLocalizationPaths();// 0x94950d4 0x78e234eb00
	static FString[] GetRestrictedFolderNames();// 0x9495064 0x78e234ebe0
	static FString GetRelativePathToRoot();// 0x9492d20 0x78e234ecc0
	static FString[] GetPropertyNameLocalizationPaths();// 0x949510c 0x78e234eda0
	static FString GetProjectFilePath();// 0x9494c04 0x78e234ee80
	static FString GetPath(FString InPath);// 0x94946e0 0x78e234ef60
	static FString GetInvalidFileSystemChars();// 0x9493268 0x78e234f040
	static FString[] GetGameLocalizationPaths();// 0x949509c 0x78e234f120
	static FString GetExtension(FString InPath, bool bIncludeDot);// 0x9494a14 0x78e234f200
	static FString[] GetEngineLocalizationPaths();// 0x949517c 0x78e234f2e0
	static FString[] GetEditorLocalizationPaths();// 0x9495144 0x78e234f3c0
	static FString GetCleanFilename(FString InPath);// 0x9494920 0x78e234f4a0
	static FString GetBaseFilename(FString InPath, bool bRemovePath);// 0x94947d4 0x78e234f580
	static FString GeneratedConfigDir();// 0x9495aa4 0x78e234f660
	static FString GameUserDeveloperDir();// 0x9495264 0x78e234f740
	static FString GameSourceDir();// 0x9494d9c 0x78e234f820
	static FString GameDevelopersDir();// 0x9495314 0x78e234f900
	static FString GameAgnosticSavedDir();// 0x9494efc 0x78e234f9e0
	static bool FileExists(FString InPath);// 0x9494390 0x78e234fac0
	static FString FeaturePackDir();// 0x9494cec 0x78e234fba0
	static FString EnterprisePluginsDir();// 0x949647c 0x78e234fc80
	static FString EnterpriseFeaturePackDir();// 0x94963cc 0x78e234fd60
	static FString EnterpriseDir();// 0x949652c 0x78e234fe40
	static FString EngineVersionAgnosticUserDir();// 0x949694c 0x78e234ff20
	static FString EngineUserDir();// 0x94969fc 0x78e234caa0
	static FString EngineSourceDir();// 0x9494e4c 0x78e234cb80
	static FString EngineSavedDir();// 0x949668c 0x78e234cc60
	static FString EnginePluginsDir();// 0x94965dc 0x78e234cd40
	static FString EngineIntermediateDir();// 0x949673c 0x78e234ce20
	static FString EngineDir();// 0x9496aac 0x78e234cf00
	static FString EngineContentDir();// 0x949689c 0x78e234cfe0
	static FString EngineConfigDir();// 0x94967ec 0x78e234d0c0
	static bool DirectoryExists(FString InPath);// 0x94942d8 0x78e234d1a0
	static FString DiffDir();// 0x94951b4 0x78e234d280
	static FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x9493318 0x78e234d360
	static FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0x9493608 0x78e234d440
	static FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0x9493754 0x78e234d520
	static FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0x94934bc 0x78e234d600
	static FString Combine(out const FString[] InPaths);// 0x9492be4 0x78e234d6e0
	static bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0x9493d2c 0x78e234d7c0
	static FString CloudDir();// 0x94953c4 0x78e234d8a0
	static FString ChangeExtension(FString InPath, FString InNewExtension);// 0x9494594 0x78e234d980
	static FString BugItDir();// 0x94957e4 0x78e234da60
	static FString AutomationTransientDir();// 0x9495524 0x78e234db40
	static FString AutomationLogDir();// 0x9495474 0x78e234dc20
	static FString AutomationDir();// 0x94955d4 0x78e234dd00

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10] 0x787805fa80
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10] 0x787805fb00
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10] 0x787805fb80
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x787805fc00
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10] 0x787805fc80
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10] 0x787805fd00
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10] 0x787805fe00
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10] 0x787805ff00
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10] 0x787805e780
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10] 0x787805e880
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10] 0x787805ea00
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10] 0x787805ec00
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10] 0x787805ed00

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x94996f0 0x78e23c3340
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x94994b0 0x78e23c3420
	static int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x94995a0 0x78e23c3500
	static int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x94999f0 0x78e23c35e0
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x949921c 0x78e23c36c0
	static byte GetDeviceOrientation();// 0x94991e8 0x78e23c37a0
	static void ClearAllLocalNotifications();// 0x9499d4c 0x78e23c3880
	static void CancelLocalNotificationById(int NotificationId);// 0x9499374 0x78e23c3960
	static void CancelLocalNotification(FString ActivationEvent);// 0x949940c 0x78e23c0080

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x949ba04 0x78e23c28c0
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x949b88c 0x78e23c29a0
	static void Set_ToArray(out const <int> A, out int[] Result);// 0x949b784 0x78e23c2a80
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x949b67c 0x78e23c2b60
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x949b4c0 0x78e23c2c40
	static int Set_Length(out const <int> TargetSet);// 0x949b41c 0x78e23c2d20
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x949b2a4 0x78e23c2e00
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x949b12c 0x78e23c2ee0
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x949af70 0x78e23c2fc0
	static void Set_Clear(out const <int> TargetSet);// 0x949aed8 0x78e23c30a0
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x949add0 0x78e23c3180
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x949ac28 0x78e23c3260

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10] 0x78e2375240

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10] 0x78759e1000

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8] 0x78759d4b00
	int BlendDepth;//[Offset: 0x8, Size: 0x4] 0x78759d4b80

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78e23b4980
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78e23b4a00
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10] 0x78e23751a0

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4] 0x78e23b4880
	IntPoint Location;//[Offset: 0x2c, Size: 0x8] 0x78e23b4900

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28] 0x78e23b4480
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78e23b4500
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78e23b4580
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1] 0x78e23b4600
	Transform PostTransform;//[Offset: 0xe0, Size: 0x30] 0x78e23b4680
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78e23b4700
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1] 0x78e23b4780
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1] 0x78e23b4800

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x460, Size: 0xc] 0x78e23b6000
	float LineThickness;//[Offset: 0x46c, Size: 0x4] 0x78e23b6080
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x949e59c 0x78e23c2620
	Vector GetUnscaledBoxExtent();// 0x949e540 0x78e23c2700
	Vector GetScaledBoxExtent();// 0x949e564 0x78e23c27e0

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x220, Size: 0x8] 0x78e23b5f80

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1f8, Size: 0x8] 0x78e23b5a00
	enum ReflectionSourceType;//[Offset: 0x200, Size: 0x1] 0x78e2374fc0
	enum MobileReflectionCompression;//[Offset: 0x201, Size: 0x1] 0x78e2375060
	TextureCube* Cubemap;//[Offset: 0x208, Size: 0x8] 0x78e23b5b80
	float SourceCubemapAngle;//[Offset: 0x210, Size: 0x4] 0x78e23b5c00
	float Brightness;//[Offset: 0x214, Size: 0x4] 0x78e23b5c80
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x78e23b5d00
	float MaxValueRGBM;//[Offset: 0x21c, Size: 0x4] 0x78e23b5d80
	Vector CaptureOffset;//[Offset: 0x220, Size: 0xc] 0x78e23b5e00
	Guid MapBuildDataId;//[Offset: 0x22c, Size: 0x10] 0x78e23b5e80
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x250, Size: 0x8] 0x78e23b5f00

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x270, Size: 0x4] 0x78e23b5880
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x278, Size: 0x8] 0x78e23b5900
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x78e23b5980

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e23b5600
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8] 0x78e23b5680
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e23b5700
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e23b5780
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78e23b5800

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10] 0x78e2375420
	int NodePosX;//[Offset: 0x48, Size: 0x4] 0x78e23f5900
	int NodePosY;//[Offset: 0x4c, Size: 0x4] 0x78e23f5980
	int NodeWidth;//[Offset: 0x50, Size: 0x4] 0x78e23f5a00
	int NodeHeight;//[Offset: 0x54, Size: 0x4] 0x78e23f5a80
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1] 0x78e23f5b00
	enum EnabledState;//[Offset: 0x59, Size: 0x1] 0x78e23754c0
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1] 0x78e23f5c00
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1] 0x78e23f5c80
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1] 0x78e23f5d00
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1] 0x78e23f5d80
	FString NodeComment;//[Offset: 0x60, Size: 0x10] 0x78e23f5e00
	int ErrorType;//[Offset: 0x70, Size: 0x4] 0x78e23f5e80
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10] 0x78e23f5f00
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10] 0x78e23f5f80

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10] 0x78e23f7280
	FString PinToolTip;//[Offset: 0x38, Size: 0x10] 0x78e23f7300
	byte Direction;//[Offset: 0x48, Size: 0x1] 0x78e23f7380
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58] 0x78e23f5300
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10] 0x78e23f5380
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10] 0x78e23f5400
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8] 0x78e23f5480
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18] 0x78e23f5500
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10] 0x78e23752e0
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10] 0x78e2375380
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8] 0x78e23f5680
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8] 0x78e23f5700

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8] 0x7875a65880
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8] 0x7875a65900
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7875a65980
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20] 0x7875a65a00
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c] 0x7875a65d80
	enum ContainerType;//[Offset: 0x54, Size: 0x1] 0x78759e9d40
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1] 0x7875a65e80
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1] 0x7875a65f00
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1] 0x7875a65f80
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1] 0x7875a66000
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1] 0x7875a66080

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8] 0x7875a65a80
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8] 0x7875a65b00
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8] 0x7875a65b80
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875a65c00
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7875a65c80
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x7875a65d00

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10] 0x78e23b7380
	FString ToolTip;//[Offset: 0x38, Size: 0x10] 0x78e23b5300
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e23b5380
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10] 0x78e2374e80
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10] 0x78e2374f20
	FName Layer;//[Offset: 0x70, Size: 0x8] 0x78e23b5500
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e23b5580

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10] 0x78759e9980
	int Direction;//[Offset: 0x10, Size: 0x4] 0x7875a66e00
	FName ItemName;//[Offset: 0x14, Size: 0x8] 0x7875a66e80
	int PolyFlags;//[Offset: 0x1c, Size: 0x4] 0x7875a66f00

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278] 0x78e23b7200

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88] 0x7875ff0980
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88] 0x7875ff0a00
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88] 0x7875ff0a80
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88] 0x7875ff0b00
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10] 0x7875ff0b80
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10] 0x7875ff0c00
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18] 0x7875ff0c80
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18] 0x7875ff0d00

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8] 0x7875fcf880

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x220, Size: 0x8] 0x78e23b7e80

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10] 0x78e2375740

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10] 0x78e23dd900
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10] 0x78e23dd980
	Object* Parent;//[Offset: 0x58, Size: 0x8] 0x78e23dda00
	FString[] CVars;//[Offset: 0x88, Size: 0x10] 0x78e23757e0

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10] 0x78e2375880

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1] 0x7875b0d780
	int LODBias;//[Offset: 0xc, Size: 0x4] 0x7875b0d800
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4] 0x7875b0d880
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4] 0x7875b0d900
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4] 0x7875b0d980
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1] 0x7875b0da00
	int MinLODSize;//[Offset: 0x24, Size: 0x4] 0x7875b0da80
	int MaxLODSize;//[Offset: 0x28, Size: 0x4] 0x7875b0db00
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4] 0x7875b0db80
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4] 0x7875b0dc00
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4] 0x7875b0dc80
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4] 0x7875b0dd00
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8] 0x7875b0dd80
	FName MipFilter;//[Offset: 0x48, Size: 0x8] 0x7875b0de00
	enum MipLoadOptions;//[Offset: 0x50, Size: 0x1] 0x7875b30920
	bool HighPriorityLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x7875b0df00
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1] 0x7875b0df80
	float Downscale;//[Offset: 0x54, Size: 0x4] 0x7875b0e000
	enum DownscaleOptions;//[Offset: 0x58, Size: 0x1] 0x7875b309c0
	int VirtualTextureTileCountBias;//[Offset: 0x5c, Size: 0x4] 0x7875b0e100
	int VirtualTextureTileSizeBias;//[Offset: 0x60, Size: 0x4] 0x7875b0e180
	byte LossyCompressionAmount;//[Offset: 0x64, Size: 0x1] 0x7875b0e200

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x178, Size: 0x4] 0x78e23bb000

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4] 0x78e23ba900
	int SizeY;//[Offset: 0x184, Size: 0x4] 0x78e23ba980
	LinearColor ClearColor;//[Offset: 0x188, Size: 0x10] 0x78e23baa00
	byte AddressX;//[Offset: 0x198, Size: 0x1] 0x78e23baa80
	byte AddressY;//[Offset: 0x199, Size: 0x1] 0x78e23bab00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19a, Size: 0x1] 0x78e23bab80
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a, Size: 0x1] 0x78e23bac00
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19a, Size: 0x1] 0x78e23bac80
	byte RenderTargetFormat;//[Offset: 0x19b, Size: 0x1] 0x78e23bad00
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1] 0x78e23bad80
	byte MipsSamplerFilter;//[Offset: 0x19d, Size: 0x1] 0x78e23bae00
	byte MipsAddressU;//[Offset: 0x19e, Size: 0x1] 0x78e23bae80
	byte MipsAddressV;//[Offset: 0x19f, Size: 0x1] 0x78e23baf00
	byte OverrideFormat;//[Offset: 0x1a0, Size: 0x1] 0x78e23baf80

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x1a8, Size: 0x10] 0x78e23bc400
	World* World;//[Offset: 0x1b8, Size: 0x8] 0x78e23bc480
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x78e23bc500
	void UpdateResource();// 0x94b0570 0x78e23c44c0
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x6d94ba8 0x78e23c45a0
	void GetSize(out int Width, out int Height);// 0x94b02e8 0x78e23c4680
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x94b03ec 0x78e23c4760

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8] 0x78e23fc680
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18] 0x78e23fc700
	Font* SmallFont;//[Offset: 0x50, Size: 0x8] 0x78e23fc780
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18] 0x78e23fc800
	Font* MediumFont;//[Offset: 0x70, Size: 0x8] 0x78e23fc880
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18] 0x78e23fc900
	Font* LargeFont;//[Offset: 0x90, Size: 0x8] 0x78e23fc980
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18] 0x78e23fca00
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8] 0x78e23fca80
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18] 0x78e23fcb00
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10] 0x78e2376820
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10] 0x78e23768c0
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8] 0x78e2376960
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18] 0x78e23fcc80
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8] 0x78e2376a00
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18] 0x78e23fcd00
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8] 0x78e2376aa0
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18] 0x78e23fcd80
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8] 0x78e2376b40
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18] 0x78e23fce00
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18] 0x78e23fce80
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8] 0x78e2376be0
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18] 0x78e23fcf00
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8] 0x78e2376c80
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18] 0x78e23fcf80
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8] 0x78e2376d20
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18] 0x78e23fd000
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8] 0x78e2376dc0
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18] 0x78e23fd080
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18] 0x78e23fd100
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8] 0x78e2376e60
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8] 0x78e23fd180
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8] 0x78e2376f00
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18] 0x78e23fd200
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18] 0x78e23fd280
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18] 0x78e23fd300
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8] 0x78e23fd380
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18] 0x78e23fd400
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8] 0x78e23fd480
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8] 0x78e23fd500
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18] 0x78e23fd580
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8] 0x78e23fd600
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18] 0x78e23fd680
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8] 0x78e23fb600
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18] 0x78e23fb680
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8] 0x78e23fb700
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18] 0x78e23fb780
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8] 0x78e23fb800
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18] 0x78e23fb880
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8] 0x78e23fb900
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18] 0x78e23fb980
	Material* WireframeMaterial;//[Offset: 0x368, Size: 0x8] 0x78e23fba00
	FString WireframeMaterialName;//[Offset: 0x370, Size: 0x10] 0x78e23fba80
	Material* DebugMeshMaterial;//[Offset: 0x380, Size: 0x8] 0x78e23fbb00
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x388, Size: 0x18] 0x78e23fbb80
	Material* EmissiveMeshMaterial;//[Offset: 0x3a0, Size: 0x8] 0x78e23fbc00
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3a8, Size: 0x18] 0x78e23fbc80
	Material* LevelColorationLitMaterial;//[Offset: 0x3c0, Size: 0x8] 0x78e23fbd00
	FString LevelColorationLitMaterialName;//[Offset: 0x3c8, Size: 0x10] 0x78e23fbd80
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3d8, Size: 0x8] 0x78e23fbe00
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3e0, Size: 0x10] 0x78e23fbe80
	Material* LightingTexelDensityMaterial;//[Offset: 0x3f0, Size: 0x8] 0x78e23fbf00
	FString LightingTexelDensityName;//[Offset: 0x3f8, Size: 0x10] 0x78e23fbf80
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x408, Size: 0x8] 0x78e23fc000
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x410, Size: 0x10] 0x78e23fc080
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x420, Size: 0x8] 0x78e23fc100
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x428, Size: 0x10] 0x78e23fc180
	Material* RemoveSurfaceMaterial;//[Offset: 0x438, Size: 0x8] 0x78e23fc200
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x440, Size: 0x18] 0x78e23fc280
	Material* VertexColorMaterial;//[Offset: 0x458, Size: 0x8] 0x78e23fc300
	FString VertexColorMaterialName;//[Offset: 0x460, Size: 0x10] 0x78e23fc380
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x470, Size: 0x8] 0x78e23fc400
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x478, Size: 0x10] 0x78e23fc480
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x488, Size: 0x8] 0x78e23fc500
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x490, Size: 0x10] 0x78e23fc580
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4a0, Size: 0x8] 0x78e23fc600
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4a8, Size: 0x10] 0x78e23fa580
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4b8, Size: 0x8] 0x78e23fa600
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4c0, Size: 0x10] 0x78e23fa680
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4d0, Size: 0x8] 0x78e23fa700
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4d8, Size: 0x10] 0x78e23fa780
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4e8, Size: 0x18] 0x78e23fa800
	Material* ConstraintLimitMaterial;//[Offset: 0x500, Size: 0x8] 0x78e23fa880
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x508, Size: 0x8] 0x78e23fa900
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x510, Size: 0x8] 0x78e23fa980
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x518, Size: 0x8] 0x78e23faa00
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x520, Size: 0x8] 0x78e23faa80
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x528, Size: 0x8] 0x78e23fab00
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x530, Size: 0x8] 0x78e23fab80
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x538, Size: 0x8] 0x78e23fac00
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x540, Size: 0x8] 0x78e23fac80
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x548, Size: 0x18] 0x78e23fad00
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x560, Size: 0x8] 0x78e23fad80
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x568, Size: 0x18] 0x78e23fae00
	Material* ArrowMaterial;//[Offset: 0x580, Size: 0x8] 0x78e23fae80
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x588, Size: 0x8] 0x78e23faf00
	SoftObjectPath ArrowMaterialName;//[Offset: 0x590, Size: 0x18] 0x78e23faf80
	LinearColor LightingOnlyBrightness;//[Offset: 0x5a8, Size: 0x10] 0x78e23fb000
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5b8, Size: 0x10] 0x78e2376fa0
	LinearColor[] QuadComplexityColors;//[Offset: 0x5c8, Size: 0x10] 0x78e2377040
	LinearColor[] LightComplexityColors;//[Offset: 0x5d8, Size: 0x10] 0x78e23770e0
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5e8, Size: 0x10] 0x78e2377180
	LinearColor[] LODColorationColors;//[Offset: 0x5f8, Size: 0x10] 0x78e2377220
	LinearColor[] HLODColorationColors;//[Offset: 0x608, Size: 0x10] 0x78e23772c0
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x618, Size: 0x10] 0x78e2377360
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x628, Size: 0x4] 0x78e23fb400
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x62c, Size: 0x4] 0x78e23fb480
	float MinLightMapDensity;//[Offset: 0x630, Size: 0x4] 0x78e23fb500
	float IdealLightMapDensity;//[Offset: 0x634, Size: 0x4] 0x78e23fb580
	float MaxLightMapDensity;//[Offset: 0x638, Size: 0x4] 0x78e23f9500
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 0x1] 0x78e23f9580
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x640, Size: 0x4] 0x78e23f9600
	float RenderLightMapDensityColorScale;//[Offset: 0x644, Size: 0x4] 0x78e23f9680
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x648, Size: 0x10] 0x78e23f9700
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x658, Size: 0x10] 0x78e23f9780
	StatColorMapping[] StatColorMappings;//[Offset: 0x668, Size: 0x10] 0x78e2377400
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x678, Size: 0x8] 0x78e23f9880
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x680, Size: 0x18] 0x78e23f9900
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x698, Size: 0x10] 0x78e23774a0
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6a8, Size: 0x10] 0x78e2377540
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6b8, Size: 0x10] 0x78e23775e0
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6c8, Size: 0x10] 0x78e2377680
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6d8, Size: 0x8] 0x78e23f9b80
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6e0, Size: 0x18] 0x78e23f9c00
	Texture2D* BlueNoiseTexture;//[Offset: 0x6f8, Size: 0x8] 0x78e23f9c80
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x700, Size: 0x18] 0x78e23f9d00
	Texture2D* MiniFontTexture;//[Offset: 0x718, Size: 0x8] 0x78e23f9d80
	SoftObjectPath MiniFontTextureName;//[Offset: 0x720, Size: 0x18] 0x78e23f9e00
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x738, Size: 0x8] 0x78e23f9e80
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x740, Size: 0x18] 0x78e23f9f00
	Texture2D* LightMapDensityTexture;//[Offset: 0x758, Size: 0x8] 0x78e23f9f80
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x760, Size: 0x18] 0x78e23fa000
	GameViewportClient* GameViewport;//[Offset: 0x780, Size: 0x8] 0x78e23fa080
	FString[] DeferredCommands;//[Offset: 0x788, Size: 0x10] 0x78e2377720
	float NearClipPlane;//[Offset: 0x798, Size: 0x4] 0x78e23fa180
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 0x1] 0x78e23fa200
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79c, Size: 0x1] 0x78e23fa280
	int MaximumLoopIterationCount;//[Offset: 0x7a0, Size: 0x4] 0x78e23fa300
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 0x1] 0x78e23fa380
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a4, Size: 0x1] 0x78e23fa400
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a4, Size: 0x1] 0x78e23fa480
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a4, Size: 0x1] 0x78e23fa500
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7a4, Size: 0x1] 0x78e23f8480
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7a4, Size: 0x1] 0x78e23f8500
	float FixedFrameRate;//[Offset: 0x7a8, Size: 0x4] 0x78e23f8580
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ac, Size: 0x10] 0x78e23f8600
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7c0, Size: 0x8] 0x78e23f8680
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7e8, Size: 0x18] 0x78e23f8700
	TimecodeProvider* TimecodeProvider;//[Offset: 0x800, Size: 0x8] 0x78e23f8780
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x828, Size: 0x18] 0x78e23f8800
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1] 0x78e23f8880
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x844, Size: 0x8] 0x78e23f8900
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x84c, Size: 0x4] 0x78e23f8980
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 0x1] 0x78e23f8a00
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x854, Size: 0x4] 0x78e23f8a80
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x858, Size: 0x1] 0x78e23f8b00
	Color C_WorldBox;//[Offset: 0x85c, Size: 0x4] 0x78e23f8b80
	Color C_BrushWire;//[Offset: 0x860, Size: 0x4] 0x78e23f8c00
	Color C_AddWire;//[Offset: 0x864, Size: 0x4] 0x78e23f8c80
	Color C_SubtractWire;//[Offset: 0x868, Size: 0x4] 0x78e23f8d00
	Color C_SemiSolidWire;//[Offset: 0x86c, Size: 0x4] 0x78e23f8d80
	Color C_NonSolidWire;//[Offset: 0x870, Size: 0x4] 0x78e23f8e00
	Color C_WireBackground;//[Offset: 0x874, Size: 0x4] 0x78e23f8e80
	Color C_ScaleBoxHi;//[Offset: 0x878, Size: 0x4] 0x78e23f8f00
	Color C_VolumeCollision;//[Offset: 0x87c, Size: 0x4] 0x78e23f8f80
	Color C_BSPCollision;//[Offset: 0x880, Size: 0x4] 0x78e23f9000
	Color C_OrthoBackground;//[Offset: 0x884, Size: 0x4] 0x78e23f9080
	Color C_Volume;//[Offset: 0x888, Size: 0x4] 0x78e23f9100
	Color C_BrushShape;//[Offset: 0x88c, Size: 0x4] 0x78e23f9180
	float StreamingDistanceFactor;//[Offset: 0x890, Size: 0x4] 0x78e23f9200
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x898, Size: 0x10] 0x78e23f9280
	enum TransitionType;//[Offset: 0x8a8, Size: 0x1] 0x78e23777c0
	FString TransitionDescription;//[Offset: 0x8b0, Size: 0x10] 0x78e23f9380
	FString TransitionGameMode;//[Offset: 0x8c0, Size: 0x10] 0x78e23f9400
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1] 0x78e23f9480
	float CameraRotationThreshold;//[Offset: 0x8d4, Size: 0x4] 0x78e23f7400
	float CameraTranslationThreshold;//[Offset: 0x8d8, Size: 0x4] 0x78e23f7480
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8dc, Size: 0x4] 0x78e23f7500
	float MaxOcclusionPixelsFraction;//[Offset: 0x8e0, Size: 0x4] 0x78e23f7580
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1] 0x78e23f7600
	int MaxParticleResize;//[Offset: 0x8e8, Size: 0x4] 0x78e23f7680
	int MaxParticleResizeWarn;//[Offset: 0x8ec, Size: 0x4] 0x78e23f7700
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8f0, Size: 0x10] 0x78e2377860
	float NetClientTicksPerSecond;//[Offset: 0x900, Size: 0x4] 0x78e23f7800
	float DisplayGamma;//[Offset: 0x904, Size: 0x4] 0x78e23f7880
	float MinDesiredFrameRate;//[Offset: 0x908, Size: 0x4] 0x78e23f7900
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x90c, Size: 0x10] 0x78e23f7980
	LinearColor SelectedMaterialColor;//[Offset: 0x91c, Size: 0x10] 0x78e23f7a00
	LinearColor SelectionOutlineColor;//[Offset: 0x92c, Size: 0x10] 0x78e23f7a80
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x93c, Size: 0x10] 0x78e23f7b00
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x94c, Size: 0x10] 0x78e23f7b80
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1] 0x78e23f7c00
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95d, Size: 0x1] 0x78e23f7c80
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95d, Size: 0x1] 0x78e23f7d00
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95d, Size: 0x1] 0x78e23f7d80
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x95d, Size: 0x1] 0x78e23f7e00
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x960, Size: 0x4] 0x78e23f7e80
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x964, Size: 0x4] 0x78e23f7f00
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x968, Size: 0x1] 0x78e23f7f80
	FString ParticleEventManagerClassPath;//[Offset: 0x970, Size: 0x10] 0x78e23f8000
	float SelectionHighlightIntensity;//[Offset: 0x980, Size: 0x4] 0x78e23f8080
	float BSPSelectionHighlightIntensity;//[Offset: 0x984, Size: 0x4] 0x78e23f8100
	float SelectionHighlightIntensityBillboards;//[Offset: 0x988, Size: 0x4] 0x78e23f8180
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xbf8, Size: 0x10] 0x78e2377900
	FString[] ServerActors;//[Offset: 0xc08, Size: 0x10] 0x78e23779a0
	FString[] RuntimeServerActors;//[Offset: 0xc18, Size: 0x10] 0x78e2377a40
	float NetErrorLogInterval;//[Offset: 0xc28, Size: 0x4] 0x78e23f8380
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2c, Size: 0x1] 0x78e23f8400
	int NextWorldContextHandle;//[Offset: 0xc40, Size: 0x4] 0x78e23f6380

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e2427d80
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78e2427e00
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4] 0x78e2427e80
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4] 0x78e2427f00
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4] 0x78e2427f80
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4] 0x78e2428000
	int WindowPosX;//[Offset: 0x90, Size: 0x4] 0x78e2428080
	int WindowPosY;//[Offset: 0x94, Size: 0x4] 0x78e2428100
	int FullscreenMode;//[Offset: 0x98, Size: 0x4] 0x78e2428180
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4] 0x78e2428200
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4] 0x78e2428280
	uint32 Version;//[Offset: 0xa4, Size: 0x4] 0x78e2428300
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4] 0x78e2428380
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4] 0x78e2428400
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4] 0x78e2426380
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4] 0x78e2426400
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1] 0x78e2426480
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4] 0x78e2426500
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4] 0x78e2426580
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4] 0x78e2426600
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4] 0x78e2426680
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4] 0x78e2426700
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4] 0x78e2426780
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4] 0x78e2426800
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10] 0x78e2379d40
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10] 0x78e2379de0
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4] 0x78e2426980
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x78e2426a00
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4] 0x78e2426a80
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10] 0x78e2426b00
	void ValidateSettings();// 0x9529324 0x78e23ef580
	bool SupportsHDRDisplayOutput();// 0x9528ec0 0x78e23ef660
	void SetVSyncEnabled(bool bEnable);// 0x952a4b4 0x78e23ef740
	void SetVisualEffectQuality(int Value);// 0x9529648 0x78e23ef820
	void SetViewDistanceQuality(int Value);// 0x95299b8 0x78e23ef900
	void SetToDefaults();// 0x9529218 0x78e23ef9e0
	void SetTextureQuality(int Value);// 0x9529724 0x78e23efac0
	void SetShadowQuality(int Value);// 0x95298dc 0x78e23efba0
	void SetShadingQuality(int Value);// 0x95293b4 0x78e23efc80
	void SetScreenResolution(IntPoint Resolution);// 0x952a6a8 0x78e23efd60
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x9529b08 0x78e23efe40
	void SetResolutionScaleValue(int NewScaleValue);// 0x9529bb0 0x78e23eff20
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x9529a60 0x78e23ecaa0
	void SetPostProcessingQuality(int Value);// 0x952956c 0x78e23ecb80
	void SetOverallScalabilityLevel(int Value);// 0x952a020 0x78e23ecc60
	void SetFullscreenMode(byte InFullscreenMode);// 0x952a598 0x78e23ecd40
	void SetFrameRateLimit(float NewLimit);// 0x952a104 0x78e23ece20
	void SetFoliageQuality(int Value);// 0x9529490 0x78e23ecf00
	void SetDynamicResolutionEnabled(bool bEnable);// 0x952a3cc 0x78e23ecfe0
	void SetBenchmarkFallbackValues();// 0x952a270 0x78e23ed0c0
	void SetAudioQualityLevel(int QualityLevel);// 0x952a1c8 0x78e23ed1a0
	void SetAntiAliasingQuality(int Value);// 0x9529800 0x78e23ed280
	void SaveSettings();// 0x9529250 0x78e23ed360
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x9528f1c 0x78e23ed440
	void RevertVideoMode();// 0x952a284 0x78e23ed520
	void ResetToCurrentSettings();// 0x9529234 0x78e23ed600
	void LoadSettings(bool bForceReload);// 0x952926c 0x78e23ed6e0
	bool IsVSyncEnabled();// 0x952a47c 0x78e23ed7c0
	bool IsVSyncDirty();// 0x952a2ec 0x78e23ed8a0
	bool IsScreenResolutionDirty();// 0x952a35c 0x78e23ed980
	bool IsHDREnabled();// 0x9528d64 0x78e23eda60
	bool IsFullscreenModeDirty();// 0x952a324 0x78e23edb40
	bool IsDynamicResolutionEnabled();// 0x952a394 0x78e23edc20
	bool IsDynamicResolutionDirty();// 0x952a2b4 0x78e23edd00
	bool IsDirty();// 0x9529340 0x78e23edde0
	int GetVisualEffectQuality();// 0x9529614 0x78e23edec0
	int GetViewDistanceQuality();// 0x9529984 0x78e23edfa0
	int GetTextureQuality();// 0x95296f0 0x78e23ee080
	static int GetSyncInterval();// 0x95290c8 0x78e23ee160
	int GetShadowQuality();// 0x95298a8 0x78e23ee240
	int GetShadingQuality();// 0x9529380 0x78e23ee320
	IntPoint GetScreenResolution();// 0x952a7bc 0x78e23ee400
	float GetResolutionScaleNormalized();// 0x9529c58 0x78e23ee4e0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x9529c8c 0x78e23ee5c0
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x9529e38 0x78e23ee6a0
	float GetRecommendedResolutionScale();// 0x95291a0 0x78e23eadc0
	byte GetPreferredFullscreenMode();// 0x952a564 0x78e23eaea0
	int GetPostProcessingQuality();// 0x9529538 0x78e23eaf80
	int GetOverallScalabilityLevel();// 0x9529fe4 0x78e23eb060
	IntPoint GetLastConfirmedScreenResolution();// 0x952a784 0x78e23eb140
	byte GetLastConfirmedFullscreenMode();// 0x952a640 0x78e23eb220
	static GameUserSettings* GetGameUserSettings();// 0x9529060 0x78e23eb300
	byte GetFullscreenMode();// 0x952a674 0x78e23eb3e0
	float GetFrameRateLimit();// 0x952a0d0 0x78e23eb4c0
	static int GetFramePace();// 0x9529094 0x78e23eb5a0
	int GetFoliageQuality();// 0x952945c 0x78e23eb680
	IntPoint GetDesktopResolution();// 0x952a74c 0x78e23eb760
	static IntPoint GetDefaultWindowPosition();// 0x9529130 0x78e23eb840
	static byte GetDefaultWindowMode();// 0x95290fc 0x78e23eb920
	float GetDefaultResolutionScale();// 0x95291dc 0x78e23eba00
	static IntPoint GetDefaultResolution();// 0x9529168 0x78e23ebae0
	int GetCurrentHDRDisplayNits();// 0x9528d9c 0x78e23ebbc0
	int GetAudioQualityLevel();// 0x952a1ac 0x78e23ebca0
	int GetAntiAliasingQuality();// 0x95297cc 0x78e23ebd80
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x9528dd0 0x78e23ebe60
	void ConfirmVideoMode();// 0x952a298 0x78e23ebf40
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x952a8c0 0x78e23ec020
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x952a7f4 0x78e23ec100
	void ApplyNonResolutionSettings();// 0x952a8a4 0x78e23ec1e0
	void ApplyHardwareBenchmarkResults();// 0x9528f00 0x78e23ec2c0

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10] 0x7875a8d300
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10] 0x78759eace0
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1] 0x7875a8d500

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4] 0x7875a8d380
	Color Out;//[Offset: 0x4, Size: 0x4] 0x7875a8d400

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8] 0x7875a8b900
	FName NewGameName;//[Offset: 0x8, Size: 0x8] 0x7875a8b980

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8] 0x7875a8ba00
	FName OldClassName;//[Offset: 0x8, Size: 0x8] 0x7875a8ba80
	FName NewClassName;//[Offset: 0x10, Size: 0x8] 0x7875a8bb00
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8] 0x7875a8bb80
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8] 0x7875a8bc00
	FName NewClassClass;//[Offset: 0x28, Size: 0x8] 0x7875a8bc80
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8] 0x7875a8bd00
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875a8bd80

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10] 0x7875a8bf00
	FString NewPluginName;//[Offset: 0x10, Size: 0x10] 0x7875a8bf80

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8] 0x7875a8be00
	FName NewStructName;//[Offset: 0x8, Size: 0x8] 0x7875a8be80

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8] 0x78a8150b80
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8] 0x78a8150c00

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1] 0x78a8150c80
	float Value;//[Offset: 0x4, Size: 0x4] 0x78c24ec880

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4] 0x78e22c1980
	Timecode GetTimecode();// 0x974e040 0x78e2298740
	enum GetSynchronizationState();// 0x974df5c 0x78e2298820
	QualifiedFrameTime GetQualifiedFrameTime();// 0x974e0e0 0x78e2298900
	FrameRate GetFrameRate();// 0x974df98 0x78e22989e0
	Timecode GetDelayedTimecode();// 0x974dfd4 0x78e2298ac0
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x974e0ac 0x78e2298ba0
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x974e138 0x78e2298c80
	void FetchAndUpdate();// 0x974e11c 0x78e2298d60

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4] 0x78a8150f80
	int Minutes;//[Offset: 0x4, Size: 0x4] 0x78a8151000
	int Seconds;//[Offset: 0x8, Size: 0x4] 0x78a8151080
	int Frames;//[Offset: 0xc, Size: 0x4] 0x78c24ef800
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24ef880

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8] 0x78c24ef900
	FrameRate Rate;//[Offset: 0x8, Size: 0x8] 0x78c24ef980

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875a8d580
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x7875a8d600
	FString Comment;//[Offset: 0x18, Size: 0x10] 0x7875a8d680

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8] 0x7875a8e500
	FName DriverClassName;//[Offset: 0x8, Size: 0x8] 0x7875a8e580
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8] 0x7875a8e600

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580] 0x78e23d3a00

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1] 0x7875969a00
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88] 0x7875969a80
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88] 0x7875969b00
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88] 0x7875969b80
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88] 0x7875969c00
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88] 0x7875969c80
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88] 0x7875969d00
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88] 0x7875969d80
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88] 0x7875969e00
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88] 0x7875969e80
	Margin Padding;//[Offset: 0x4d8, Size: 0x10] 0x7875969f00
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28] 0x7875969f80
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28] 0x787596a000
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18] 0x787596a080
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18] 0x787596a100
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18] 0x787596a180

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10] 0x7875c8d380
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18] 0x7875c8d400
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875c8d480
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1] 0x7875c8d500
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1] 0x7875c8d580
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1] 0x7875c0b5a0
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7875c8d680
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18] 0x7875c8b600
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18] 0x7875c8b680
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18] 0x7875c8b700
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18] 0x7875c8b780
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18] 0x7875c8b800
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10] 0x7875c0b640
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10] 0x7875c0b6e0
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x73fb6dc 0x7875c975c0
	bool GetSkipAssigningGamepadToPlayer1();// 0x73fb6a4 0x7875c976a0
	static GameMapsSettings* GetGameMapsSettings();// 0x73fb78c 0x7875c97780

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10] 0x787596ab80
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18] 0x787596ac00

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10] 0x78e2374200

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10] 0x78759ef6a0

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10] 0x78e2374160
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e23d3780

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10] 0x7875bce500
	FString HelpUsage;//[Offset: 0x38, Size: 0x10] 0x7875bce580
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10] 0x7875bce600
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10] 0x7875b386c0
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10] 0x7875b38760
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7875bcc680
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7875bcc700
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x7875bcc780
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1] 0x7875bcc800
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1] 0x7875bcc880
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1] 0x7875bcc900

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e23766e0

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8] 0x7875a85700
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8] 0x7875a85780
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7875a85800

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10] 0x78e23765a0
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10] 0x78e2376640

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8] 0x78e23d5180
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e23d5200
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e23d5280
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78e23d3200
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10] 0x78e23d3280

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10] 0x78e2376460
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10] 0x78e2376500

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4] 0x7875c8bb00
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10] 0x7875c0b780
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10] 0x7875c0b820
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4] 0x7875c8bc80
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7875c8bd00
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1] 0x7875c8bd80
	Color InputColor;//[Offset: 0x58, Size: 0x4] 0x7875c8be00
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4] 0x7875c8be80
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4] 0x7875c8bf00
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4] 0x7875c8bf80
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4] 0x7875c8c000

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10] 0x787596ac80
	FString Desc;//[Offset: 0x10, Size: 0x10] 0x787596ad00

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e23d4680
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e23d4700
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4] 0x78e23d4780
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4] 0x78e23d4800
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4] 0x78e23d4880
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e23d4900
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78e23d4980
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4] 0x78e23d4a00
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4] 0x78e23d4a80
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4] 0x78e23d4b00
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4] 0x78e23d4b80
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4] 0x78e23d4c00
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4] 0x78e23d4c80
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4] 0x78e23d4d00
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e23d4d80
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78e23d4e00

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4] 0x78e23d5f80
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e23d6000
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78e23d6080
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78e23d6100
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78e23d6180
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78e23d6200
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78e23d6280
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78e23d6300
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78e23d4280
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78e23d4300
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4] 0x78e23d4380
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4] 0x78e23d4400
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4] 0x78e23d4480
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4] 0x78e23d4500
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4] 0x78e23d4580
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4] 0x78e23d4600

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x258, Size: 0x10] 0x78e2376320
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1] 0x78e23d5f00

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4] 0x7875a87500
	float CullDistance;//[Offset: 0x4, Size: 0x4] 0x7875a87580

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x1a0, Size: 0x4] 0x78e23d6d00
	bool bSquareResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a4, Size: 0x1] 0x78e23d6d80
	uint32 TextureHeight;//[Offset: 0x1a8, Size: 0x4] 0x78e23d6e00
	CurveLinearColor*[] GradientCurves;//[Offset: 0x1b0, Size: 0x10] 0x78e2376280
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x94cf0d4 0x78e23cc560

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x94cf8a0 0x78e23cc2c0
	void GetCurves(out NamedCurveValue[] OutValues);// 0x94cf7d8 0x78e23cc3a0
	FName GetBindingName();// 0x94cf958 0x78e23cc480

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875a88f80
	float Value;//[Offset: 0x8, Size: 0x4] 0x7875a89000

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: DataDrivenCVarEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate OnDataDrivenCVarDelegate;//[Offset: 0x30, Size: 0x10] 0x787805d580

--------------------------------
Class: DataDrivenConsoleVariableSettings.DeveloperSettings.Object
	DataDrivenConsoleVariable[] CVarsArray;//[Offset: 0x50, Size: 0x10] 0x78e2376140

--------------------------------
Class: DataDrivenConsoleVariable
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78759eb460
	FString Name;//[Offset: 0x8, Size: 0x10] 0x7875a89e00
	FString ToolTip;//[Offset: 0x18, Size: 0x10] 0x7875a89e80
	float DefaultValueFloat;//[Offset: 0x28, Size: 0x4] 0x7875a89f00
	int DefaultValueInt;//[Offset: 0x2c, Size: 0x4] 0x7875a89f80
	bool DefaultValueBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875a8a000

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x94d36b8 0x78e23cbd80
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x94d3c48 0x78e23cbe60
	static FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x94d3514 0x78e23cbf40
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x94d38a8 0x78e23cc020
	static bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x94d37b4 0x78e23cc100

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10] 0x78e2375f60

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1] 0x7875a89a80

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x220, Size: 0x8] 0x78e23dd200
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x94db528 0x78e23cd520
	MaterialInterface* GetDecalMaterial();// 0x94db4f4 0x78e23cd600
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x94db4b8 0x78e23cd6e0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 0x8] 0x78e23dc680
	int SortOrder;//[Offset: 0x200, Size: 0x4] 0x78e23dc700
	float FadeScreenSize;//[Offset: 0x204, Size: 0x4] 0x78e23dc780
	float FadeStartDelay;//[Offset: 0x208, Size: 0x4] 0x78e23dc800
	float FadeDuration;//[Offset: 0x20c, Size: 0x4] 0x78e23dc880
	float FadeInDuration;//[Offset: 0x210, Size: 0x4] 0x78e23dc900
	float FadeInStartDelay;//[Offset: 0x214, Size: 0x4] 0x78e23dc980
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78e23dca00
	Vector DecalSize;//[Offset: 0x21c, Size: 0xc] 0x78e23dca80
	void SetSortOrder(int Value);// 0x94dbce8 0x78e23ccb80
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x94dbd90 0x78e23ccc60
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x94dbf28 0x78e23ccd40
	void SetFadeIn(float StartDelay, float Duaration);// 0x94dbe38 0x78e23cce20
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x94dbc40 0x78e23ccf00
	float GetFadeStartDelay();// 0x94dc108 0x78e23ccfe0
	float GetFadeInStartDelay();// 0x94dc0a0 0x78e23cd0c0
	float GetFadeInDuration();// 0x94dc06c 0x78e23cd1a0
	float GetFadeDuration();// 0x94dc0d4 0x78e23cd280
	MaterialInterface* GetDecalMaterial();// 0x94dbc0c 0x78e23cd360
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x94dbbd0 0x78e23cd440

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 0x4] 0x78e23ffb80
	float Acceleration;//[Offset: 0x13c, Size: 0x4] 0x78e23ffc00
	float Deceleration;//[Offset: 0x140, Size: 0x4] 0x78e23ffc80
	float TurningBoost;//[Offset: 0x144, Size: 0x4] 0x78e23ffd00
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78e23ffd80

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8] 0x78e23ddb80
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8] 0x78e23ddc00

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1] 0x78e23dd700
	byte Plurality;//[Offset: 0x29, Size: 0x1] 0x78e23dd780
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10] 0x78e23dd800

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x78e23df500
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1] 0x78e23df580
	FString SpokenText;//[Offset: 0x30, Size: 0x10] 0x78e23df600
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10] 0x78e23df680
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10] 0x78e23756a0
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10] 0x78e23df780

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18] 0x7875a8ad80
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8] 0x7875a8ae00
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10] 0x7875a8ae80
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8] 0x7875a8af00

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8] 0x7875a8b000
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10] 0x78759eb280

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x78e23dee80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78e23def00
	void ToggleEnabled();// 0x95db938 0x78e23cf120
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x95db62c 0x78e23cf200
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x95db6d4 0x78e23cf2e0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x95db584 0x78e23cf3c0
	void SetLightColor(LinearColor NewLightColor);// 0x95db7b4 0x78e23cf4a0
	void SetEnabled(bool bSetEnabled);// 0x95db984 0x78e23cf580
	void SetCastShadows(bool bNewValue);// 0x95db4d4 0x78e23cf660
	void SetBrightness(float NewBrightness);// 0x95db890 0x78e23cf740
	void SetAffectTranslucentLighting(bool bNewValue);// 0x95db424 0x78e23cf820
	void OnRep_bEnabled();// 0x95dba34 0x78e23cf900
	bool IsEnabled();// 0x95db94c 0x78e23cf9e0
	LinearColor GetLightColor();// 0x95db77c 0x78e23cfac0
	float GetBrightness();// 0x95db85c 0x78e23cfba0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x224, Size: 0x4] 0x78e23f1380
	float MaxDrawDistance;//[Offset: 0x228, Size: 0x4] 0x78e23f1400
	float MaxDistanceFadeRange;//[Offset: 0x22c, Size: 0x4] 0x78e23f1480
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1] 0x78e23f1500
	int ShadowMapChannel;//[Offset: 0x234, Size: 0x4] 0x78e23f1580
	float MinRoughness;//[Offset: 0x23c, Size: 0x4] 0x78e23f1600
	float SpecularScale;//[Offset: 0x240, Size: 0x4] 0x78e23f1680
	float ShadowResolutionScale;//[Offset: 0x244, Size: 0x4] 0x78e23f1700
	float ShadowBias;//[Offset: 0x248, Size: 0x4] 0x78e23f1780
	float ShadowSlopeBias;//[Offset: 0x24c, Size: 0x4] 0x78e23f1800
	float ShadowSharpen;//[Offset: 0x250, Size: 0x4] 0x78e23f1880
	float ContactShadowLength;//[Offset: 0x254, Size: 0x4] 0x78e23f1900
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1] 0x78e23f1980
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1] 0x78e23f1a00
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1] 0x78e23f1a80
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1] 0x78e23f1b00
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1] 0x78e23f1b80
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1] 0x78e23f1c00
	LightingChannels LightingChannels;//[Offset: 0x259, Size: 0x1] 0x78e23f1c80
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x260, Size: 0x8] 0x78e23f1d00
	Vector LightFunctionScale;//[Offset: 0x268, Size: 0xc] 0x78e23f1d80
	TextureLightProfile* IESTexture;//[Offset: 0x278, Size: 0x8] 0x78e23f1e00
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1] 0x78e23f1e80
	float IESBrightnessScale;//[Offset: 0x284, Size: 0x4] 0x78e23f1f00
	float LightFunctionFadeDistance;//[Offset: 0x288, Size: 0x4] 0x78e23f1f80
	float DisabledBrightness;//[Offset: 0x28c, Size: 0x4] 0x78e23f2000
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1] 0x78e23f2080
	float BloomScale;//[Offset: 0x294, Size: 0x4] 0x78e23f2100
	float BloomThreshold;//[Offset: 0x298, Size: 0x4] 0x78e23f0080
	float BloomMaxBrightness;//[Offset: 0x29c, Size: 0x4] 0x78e23f0100
	Color BloomTint;//[Offset: 0x2a0, Size: 0x4] 0x78e23f0180
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1] 0x78e23f0200
	float RayStartOffsetDepthScale;//[Offset: 0x2a8, Size: 0x4] 0x78e23f0280
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x95dd4a4 0x78e23e0940
	void SetUseTemperature(bool bNewValue);// 0x95dd250 0x78e23e0a20
	void SetUseIESBrightness(bool bNewValue);// 0x95dc8fc 0x78e23e0b00
	void SetTransmission(bool bNewValue);// 0x95dcda0 0x78e23e0be0
	void SetTemperature(float NewTemperature);// 0x95dd300 0x78e23e0cc0
	void SetSpecularScale(float NewValue);// 0x95dc65c 0x78e23e0da0
	void SetShadowSlopeBias(float NewValue);// 0x95dc704 0x78e23e0e80
	void SetShadowBias(float NewValue);// 0x95dc7ac 0x78e23e0f60
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x95dc464 0x78e23e1040
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x95dd100 0x78e23e1120
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x95dd1a8 0x78e23e1200
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x95dd058 0x78e23e12e0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x95dcfb0 0x78e23e13c0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x95dd3a8 0x78e23e14a0
	void SetIntensity(float NewIntensity);// 0x95dd5f4 0x78e23e1580
	void SetIndirectLightingIntensity(float NewIntensity);// 0x95dd54c 0x78e23e1660
	void SetIESTexture(TextureLightProfile* NewValue);// 0x95dc9ac 0x78e23e1740
	void SetIESBrightnessScale(float NewValue);// 0x95dc854 0x78e23e1820
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x95dc5ac 0x78e23e1900
	void SetEnableLightShaftBloom(bool bNewValue);// 0x95dccf0 0x78e23e19e0
	void SetBloomTint(Color NewValue);// 0x95dca54 0x78e23e1ac0
	void SetBloomThreshold(float NewValue);// 0x95dcba0 0x78e23e1ba0
	void SetBloomScale(float NewValue);// 0x95dcc48 0x78e23e1c80
	void SetBloomMaxBrightness(float NewValue);// 0x95dcaf8 0x78e23ce780
	void SetAffectTranslucentLighting(bool bNewValue);// 0x95dce50 0x78e23ce860
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x95dcf00 0x78e23ce940

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f4, Size: 0x10] 0x78e23df980
	float Brightness;//[Offset: 0x204, Size: 0x4] 0x78e23dfa00
	float Intensity;//[Offset: 0x208, Size: 0x4] 0x78e23dfa80
	Color LightColor;//[Offset: 0x20c, Size: 0x4] 0x78e23dfb00
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1] 0x78e23dfb80
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1] 0x78e23dfc00
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1] 0x78e23dfc80
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1] 0x78e23dfd00
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1] 0x78e23dfd80
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1] 0x78e23dfe00
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1] 0x78e23dfe80
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1] 0x78e23dff00
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1] 0x78e23dff80
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1] 0x78e23de780
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x211, Size: 0x1] 0x78e23de800
	float DeepShadowLayerDistribution;//[Offset: 0x214, Size: 0x4] 0x78e23de880
	float IndirectLightingIntensity;//[Offset: 0x218, Size: 0x4] 0x78e23de900
	float VolumetricScatteringIntensity;//[Offset: 0x21c, Size: 0x4] 0x78e23de980
	int SamplesPerPixel;//[Offset: 0x220, Size: 0x4] 0x78e23dea00
	void SetSamplesPerPixel(int NewValue);// 0x95de420 0x78e23cea20
	void SetCastVolumetricShadow(bool bNewValue);// 0x95de788 0x78e23ceb00
	void SetCastShadows(bool bNewValue);// 0x95de870 0x78e23cebe0
	void SetCastRaytracedShadow(bool bNewValue);// 0x95de4c8 0x78e23cecc0
	void SetCastDeepShadow(bool bNewValue);// 0x95de6d8 0x78e23ceda0
	void SetAffectReflection(bool bNewValue);// 0x95de628 0x78e23cee80
	void SetAffectGlobalIllumination(bool bNewValue);// 0x95de578 0x78e23cef60
	LinearColor GetLightColor();// 0x95de838 0x78e23cf040

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x1a0, Size: 0x4] 0x78e25d4b00
	float TextureMultiplier;//[Offset: 0x1a4, Size: 0x4] 0x78e25d4b80

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x31c, Size: 0x4] 0x78e23f3c00
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1] 0x78e23f3c80
	float OcclusionMaskDarkness;//[Offset: 0x324, Size: 0x4] 0x78e23f3d00
	float OcclusionDepthRange;//[Offset: 0x328, Size: 0x4] 0x78e23f3d80
	Vector LightShaftOverrideDirection;//[Offset: 0x32c, Size: 0xc] 0x78e23f3e00
	float WholeSceneDynamicShadowRadius;//[Offset: 0x338, Size: 0x4] 0x78e23f3e80
	float DynamicShadowDistanceMovableLight;//[Offset: 0x33c, Size: 0x4] 0x78e23f3f00
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x340, Size: 0x4] 0x78e23f3f80
	int DynamicShadowCascades;//[Offset: 0x344, Size: 0x4] 0x78e23f4000
	float CascadeDistributionExponent;//[Offset: 0x348, Size: 0x4] 0x78e23f4080
	float CascadeTransitionFraction;//[Offset: 0x34c, Size: 0x4] 0x78e23f4100
	float ShadowDistanceFadeoutFraction;//[Offset: 0x350, Size: 0x4] 0x78e23f4180
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1] 0x78e23f4200
	int FarShadowCascadeCount;//[Offset: 0x358, Size: 0x4] 0x78e23f2180
	float FarShadowDistance;//[Offset: 0x35c, Size: 0x4] 0x78e23f2200
	float DistanceFieldShadowDistance;//[Offset: 0x360, Size: 0x4] 0x78e23f2280
	float LightSourceAngle;//[Offset: 0x364, Size: 0x4] 0x78e23f2300
	float LightSourceSoftAngle;//[Offset: 0x368, Size: 0x4] 0x78e23f2380
	float ShadowSourceAngleFactor;//[Offset: 0x36c, Size: 0x4] 0x78e23f2400
	float TraceDistance;//[Offset: 0x370, Size: 0x4] 0x78e23f2480
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1] 0x78e23f2500
	int AtmosphereSunLightIndex;//[Offset: 0x378, Size: 0x4] 0x78e23f2580
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x37c, Size: 0x10] 0x78e23f2600
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x78e23f2680
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x78e23f2700
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1] 0x78e23f2780
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1] 0x78e23f2800
	float CloudShadowStrength;//[Offset: 0x390, Size: 0x4] 0x78e23f2880
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x394, Size: 0x4] 0x78e23f2900
	float CloudShadowOnSurfaceStrength;//[Offset: 0x398, Size: 0x4] 0x78e23f2980
	float CloudShadowDepthBias;//[Offset: 0x39c, Size: 0x4] 0x78e23f2a00
	float CloudShadowExtent;//[Offset: 0x3a0, Size: 0x4] 0x78e23f2a80
	float CloudShadowMapResolutionScale;//[Offset: 0x3a4, Size: 0x4] 0x78e23f2b00
	float CloudShadowRaySampleCountScale;//[Offset: 0x3a8, Size: 0x4] 0x78e23f2b80
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3ac, Size: 0x10] 0x78e23f2c00
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3bc, Size: 0x10] 0x78e23f2c80
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1] 0x78e23f2d00
	Color ModulatedShadowColor;//[Offset: 0x3d0, Size: 0x4] 0x78e23f2d80
	float ShadowAmount;//[Offset: 0x3d4, Size: 0x4] 0x78e23f2e00
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x94e09d8 0x78e23e3880
	void SetShadowAmount(float NewValue);// 0x94e0730 0x78e23e3960
	void SetOcclusionMaskDarkness(float NewValue);// 0x94e0880 0x78e23e0080
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x94e07d8 0x78e23e0160
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x94e0928 0x78e23e0240
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x94e0c78 0x78e23e0320
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x94e0d20 0x78e23e0400
	void SetDynamicShadowCascades(int NewValue);// 0x94e0bd0 0x78e23e04e0
	void SetCascadeTransitionFraction(float NewValue);// 0x94e0a80 0x78e23e05c0
	void SetCascadeDistributionExponent(float NewValue);// 0x94e0b28 0x78e23e06a0
	void SetAtmosphereSunLightIndex(int NewValue);// 0x94e05d8 0x78e23e0780
	void SetAtmosphereSunLight(bool bNewValue);// 0x94e0680 0x78e23e0860

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4] 0x7875ac1700

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4] 0x7875ac1780
	float ShadowExponent;//[Offset: 0x4, Size: 0x4] 0x7875ac1800
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875ac1880

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4] 0x78e23f3a80

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78e23f3a00

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc63ee0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24eda00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24eda80

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24edb00
	float OutVal;//[Offset: 0x4, Size: 0x4] 0x78c24edb80
	float ArriveTangent;//[Offset: 0x8, Size: 0x4] 0x78c24edc00
	float LeaveTangent;//[Offset: 0xc, Size: 0x4] 0x78c24edc80
	byte InterpMode;//[Offset: 0x10, Size: 0x1] 0x78c24edd00

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8] 0x78e23f3700
	float MinInput;//[Offset: 0x40, Size: 0x4] 0x78e23f3780
	float MaxInput;//[Offset: 0x44, Size: 0x4] 0x78e23f3800
	float MinOutput;//[Offset: 0x48, Size: 0x4] 0x78e23f3880
	float MaxOutput;//[Offset: 0x4c, Size: 0x4] 0x78e23f3900
	byte ParamMode;//[Offset: 0x50, Size: 0x1] 0x78e23f3980

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x78e23f3600
	float Max;//[Offset: 0x38, Size: 0x4] 0x78e23f3680

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78e23f3580

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc63e40
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24ef700
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24ef780

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24ed700
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8] 0x78c24ed780
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8] 0x78c24ed800
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8] 0x78c24ed880
	byte InterpMode;//[Offset: 0x1c, Size: 0x1] 0x78c24ed900

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x34, Size: 0xc] 0x78e23f3280
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78e23f3300
	byte LockedAxes;//[Offset: 0x41, Size: 0x1] 0x78e23f3380

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78e23f5200
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e23f5280
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78e23f3200

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x44, Size: 0x8] 0x78e23f4f00
	Vector MinInput;//[Offset: 0x4c, Size: 0xc] 0x78e23f4f80
	Vector MaxInput;//[Offset: 0x58, Size: 0xc] 0x78e23f5000
	Vector MinOutput;//[Offset: 0x64, Size: 0xc] 0x78e23f5080
	Vector MaxOutput;//[Offset: 0x70, Size: 0xc] 0x78e23f5100
	byte ParamModes;//[Offset: 0x7c, Size: 0x1] 0x78e23f5180

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x34, Size: 0xc] 0x78e23f4c00
	Vector Min;//[Offset: 0x40, Size: 0xc] 0x78e23f4c80
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x78e23f4d00
	byte LockedAxes;//[Offset: 0x4d, Size: 0x1] 0x78e23f4d80
	byte MirrorFlags;//[Offset: 0x4e, Size: 0x1] 0x78e23f4e00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x78e23f4e80

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18] 0x78e23f4900
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e23f4980
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78e23f4a00
	byte LockedAxes;//[Offset: 0x51, Size: 0x1] 0x78e23f4a80
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1] 0x78e23f4b00
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1] 0x78e23f4b80

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc666e0
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24eeb00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24eeb80

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24eec00
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18] 0x78c24eec80
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18] 0x78c24eed00
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18] 0x78c24eed80
	byte InterpMode;//[Offset: 0x4c, Size: 0x1] 0x78c24eee00

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc] 0x78c24ed500
	Vector v2;//[Offset: 0xc, Size: 0xc] 0x78c24ed580

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8] 0x78e2375560
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10] 0x78e2375600
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x78e23f6280
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x78e23f6300
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1] 0x78e23f4280

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8] 0x78e23f6000
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8] 0x78e23f6080
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8] 0x78e23f6100
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e23f6180

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10] 0x78e23f5780
	FString Excerpt;//[Offset: 0xa8, Size: 0x10] 0x78e23f5800

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10] 0x78e23fe380
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10] 0x78e23fe400
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10] 0x78e23fe480
	FString LeftMessage;//[Offset: 0x58, Size: 0x10] 0x78e23fe500
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10] 0x78e23fe580
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10] 0x78e23fe600
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10] 0x78e23fe680
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10] 0x78e23fe700

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78e23fe280
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78e23fe300
	void OnRep_bEnabled();// 0x950abf8 0x78e23e29a0

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f4, Size: 0x4] 0x78e23fed00
	float FogHeightFalloff;//[Offset: 0x1f8, Size: 0x4] 0x78e23fed80
	ExponentialHeightFogData SecondFogData;//[Offset: 0x1fc, Size: 0xc] 0x78e23fee00
	LinearColor FogInscatteringColor;//[Offset: 0x208, Size: 0x10] 0x78e23fee80
	TextureCube* InscatteringColorCubemap;//[Offset: 0x218, Size: 0x8] 0x78e23fef00
	float InscatteringColorCubemapAngle;//[Offset: 0x220, Size: 0x4] 0x78e23fef80
	LinearColor InscatteringTextureTint;//[Offset: 0x224, Size: 0x10] 0x78e23ff000
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x234, Size: 0x4] 0x78e23ff080
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x238, Size: 0x4] 0x78e23ff100
	float DirectionalInscatteringExponent;//[Offset: 0x23c, Size: 0x4] 0x78e23ff180
	float DirectionalInscatteringStartDistance;//[Offset: 0x240, Size: 0x4] 0x78e23ff200
	LinearColor DirectionalInscatteringColor;//[Offset: 0x244, Size: 0x10] 0x78e23ff280
	float FogMaxOpacity;//[Offset: 0x254, Size: 0x4] 0x78e23ff300
	float StartDistance;//[Offset: 0x258, Size: 0x4] 0x78e23ff380
	float FogCutoffDistance;//[Offset: 0x25c, Size: 0x4] 0x78e23ff400
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78e23ff480
	float VolumetricFogScatteringDistribution;//[Offset: 0x264, Size: 0x4] 0x78e23ff500
	Color VolumetricFogAlbedo;//[Offset: 0x268, Size: 0x4] 0x78e23ff580
	LinearColor VolumetricFogEmissive;//[Offset: 0x26c, Size: 0x10] 0x78e23ff600
	float VolumetricFogExtinctionScale;//[Offset: 0x27c, Size: 0x4] 0x78e23ff680
	float VolumetricFogDistance;//[Offset: 0x280, Size: 0x4] 0x78e23ff700
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x284, Size: 0x4] 0x78e23ff780
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x78e23fd700
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x950b5c4 0x78e23e51e0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x950b51c 0x78e23e52c0
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x950b3d0 0x78e23e53a0
	void SetVolumetricFogDistance(float NewValue);// 0x950b328 0x78e23e5480
	void SetVolumetricFogAlbedo(Color NewValue);// 0x950b478 0x78e23e5560
	void SetVolumetricFog(bool bNewValue);// 0x950b66c 0x78e23e5640
	void SetStartDistance(float Value);// 0x950b7c4 0x78e23e1d60
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x950bc5c 0x78e23e1e40
	void SetInscatteringTextureTint(LinearColor Value);// 0x950bbb4 0x78e23e1f20
	void SetInscatteringColorCubemapAngle(float Value);// 0x950bdac 0x78e23e2000
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x950be54 0x78e23e20e0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x950bd04 0x78e23e21c0
	void SetFogMaxOpacity(float Value);// 0x950b86c 0x78e23e22a0
	void SetFogInscatteringColor(LinearColor Value);// 0x950befc 0x78e23e2380
	void SetFogHeightFalloff(float Value);// 0x950b914 0x78e23e2460
	void SetFogDensity(float Value);// 0x950bfa4 0x78e23e2540
	void SetFogCutoffDistance(float Value);// 0x950b71c 0x78e23e2620
	void SetDirectionalInscatteringStartDistance(float Value);// 0x950ba64 0x78e23e2700
	void SetDirectionalInscatteringExponent(float Value);// 0x950bb0c 0x78e23e27e0
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x950b9bc 0x78e23e28c0

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4] 0x7875ac2580
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4] 0x7875ac2600
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4] 0x7875ac2680

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10] 0x78e2410a80
	enum Hinting;//[Offset: 0x40, Size: 0x1] 0x78e2378a80
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1] 0x78e2378b20
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1] 0x78e2378bc0

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8] 0x78e2410a00

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0] 0x78e2410980

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x1f8, Size: 0x8] 0x78e2410180
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78e2410200
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78e2410280
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1] 0x78e2410300
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1] 0x78e2410380
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1] 0x78e2410400
	float IntensityMultiplier;//[Offset: 0x204, Size: 0x4] 0x78e2410480
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x208, Size: 0x8] 0x78e2410500
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x210, Size: 0xb0] 0x78e2410580
	delegate OnForceFeedbackFinished;//[Offset: 0x2c0, Size: 0x10] 0x78e2410600
	void Stop();// 0x950ee30 0x78e23e4a00
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x950ed88 0x78e23e4ae0
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x950eefc 0x78e23e4bc0
	void Play(float StartTime);// 0x950ee4c 0x78e23e4ca0
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x950eb74 0x78e23e4d80
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x950ec88 0x78e23e4e60

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xd18, Size: 0x4] 0x78e2412000
	float ServerFlushLogInterval;//[Offset: 0xd1c, Size: 0x4] 0x78e2412080
	GameInstance* GameInstance;//[Offset: 0xd20, Size: 0x8] 0x78e2412100

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 0x8] 0x7875b91900
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1] 0x7875b91980
	int NumSpectators;//[Offset: 0x2cc, Size: 0x4] 0x7875b91a00
	int NumPlayers;//[Offset: 0x2d0, Size: 0x4] 0x7875b91a80
	int NumBots;//[Offset: 0x2d4, Size: 0x4] 0x7875b91b00
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 0x4] 0x7875b91b80
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 0x4] 0x7875b91c00
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 0x8] 0x7875b37a40
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x7875b37ae0
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 0x4] 0x7875b91d00
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 0x4] 0x7875b91d80
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x7875b91e00
	void StartMatch();// 0x9513cec 0x7875b8ab20
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x9513aac 0x7875b8ac00
	void Say(FString Msg);// 0x9513b5c 0x7875b8ace0
	void RestartGame();// 0x9513cb4 0x7875b87400
	bool ReadyToStartMatch();// 0x9513c58 0x7875b874e0
	bool ReadyToEndMatch();// 0x9513c18 0x7875b875c0
	void K2_OnSetMatchState(FName NewState);// 0x6d94ba8 0x7875b876a0
	bool IsMatchInProgress();// 0x9513d08 0x7875b87780
	FName GetMatchState();// 0x9513d48 0x7875b87860
	void EndMatch();// 0x9513cd0 0x7875b87940
	void AbortMatch();// 0x9513c98 0x7875b87a20

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnRetainAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x951be50 0x78e23ec3a0
	static void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x9521888 0x78e23ec480
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x9521a9c 0x78e23ec560
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x951831c 0x78e23ec640
	static AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x951d7e0 0x78e23ec720
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x951dc0c 0x78e23ec800
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x951e544 0x78e23ec8e0
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x9523a5c 0x78e23ec9c0
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x951c1d0 0x78e23e90e0
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x951c5b4 0x78e23e91c0
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x951f360 0x78e23e92a0
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x951f6b0 0x78e23e9380
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x951c8b0 0x78e23e9460
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x951ccf0 0x78e23e9540
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x951d34c 0x78e23e9620
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x951ae28 0x78e23e9700
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x951b0e0 0x78e23e97e0
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x951818c 0x78e23e98c0
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x9520788 0x78e23e99a0
	static void SetSubtitlesEnabled(bool bEnabled);// 0x951c130 0x78e23e9a80
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x951bbf0 0x78e23e9b60
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x951ed90 0x78e23e9c40
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x9522064 0x78e23e9d20
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x951b3a8 0x78e23e9e00
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x9520df0 0x78e23e9ee0
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x951ef04 0x78e23e9fc0
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x951eaa8 0x78e23ea0a0
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x9520cf0 0x78e23ea180
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x9520b58 0x78e23ea260
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x95209c0 0x78e23ea340
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x951c018 0x78e23ea420
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x9519e34 0x78e23ea500
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x95221f0 0x78e23ea5e0
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x9517fa4 0x78e23ea6c0
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x9518098 0x78e23ea7a0
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x951b998 0x78e23ea880
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x9517ae8 0x78e23ea960
	static void PrimeSound(SoundBase* InSound);// 0x951bf80 0x78e23eaa40
	static void PrimeAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x951bee8 0x78e23eab20
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x951b8b8 0x78e23eac00
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x951f968 0x78e23eace0
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0x951df58 0x78e23e7400
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor, bool bIsUISound);// 0x951e7fc 0x78e23e74e0
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x951d04c 0x78e23e75c0
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x951d5c4 0x78e23e76a0
	static FString ParseOption(FString Options, FString Key);// 0x9517568 0x78e23e7780
	static void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x95212bc 0x78e23e7860
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x952150c 0x78e23e7940
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x951a264 0x78e23e7a20
	static void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x9521c28 0x78e23e7b00
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x9521e84 0x78e23e7be0
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x9519c30 0x78e23e7cc0
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x9520aac 0x78e23e7da0
	static bool IsGamePaused(const Object* WorldContextObject);// 0x9520c44 0x78e23e7e80
	static bool HasOption(FString Options, FString InKey);// 0x9517410 0x78e23e7f60
	static bool HasLaunchOption(FString OptionToCheck);// 0x9517200 0x78e23e8040
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x9517e20 0x78e23e8120
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x951826c 0x78e23e8200
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x9519a84 0x78e23e82e0
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x951786c 0x78e23e83c0
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x952086c 0x78e23e84a0
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x9519934 0x78e23e8580
	static float GetTimeSeconds(const Object* WorldContextObject);// 0x95199dc 0x78e23e8660
	static byte GetSurfaceType(out const HitResult Hit);// 0x951a194 0x78e23e8740
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x9521798 0x78e23e8820
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0x951988c 0x78e23e8900
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x9522608 0x78e23e89e0
	static int GetPlayerControllerID(PlayerController* Player);// 0x9522148 0x78e23e8ac0
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x95226fc 0x78e23e8ba0
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x95227f0 0x78e23e8c80
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x9522514 0x78e23e8d60
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x9522420 0x78e23e8e40
	static FString GetPlatformName();// 0x9519598 0x78e23e8f20
	static class Object GetObjectClass(const Object* Object);// 0x9520f7c 0x78e23e9000
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x951b300 0x78e23e5720
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x9517700 0x78e23e5800
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x95172b8 0x78e23e58e0
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x9520ed4 0x78e23e59c0
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0x9521024 0x78e23e5aa0
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x95210cc 0x78e23e5b80
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x95228e4 0x78e23e5c60
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x9520914 0x78e23e5d40
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x951b48c 0x78e23e5e20
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x9521174 0x78e23e5f00
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x951f030 0x78e23e5fe0
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x95197e4 0x78e23e60c0
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x9522c78 0x78e23e61a0
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x9522dbc 0x78e23e6280
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x9522ae8 0x78e23e6360
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x9522f00 0x78e23e6440
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x9523044 0x78e23e6520
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x9523134 0x78e23e6600
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x95232e0 0x78e23e66e0
	static void GetAccurateRealTime(out int Seconds, out float PartialSeconds);// 0x95196e8 0x78e23e67c0
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0x9521700 0x78e23e68a0
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x95233a4 0x78e23e6980
	static Actor* FindNearestActor(Vector Origin, out const Actor*[] ActorsToCheck, out float Distance);// 0x952298c 0x78e23e6a60
	static bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x951a02c 0x78e23e6b40
	static void EnableLiveStreaming(bool Enable);// 0x9519648 0x78e23e6c20
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x9519d30 0x78e23e6d00
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x9517c84 0x78e23e6de0
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x9519b2c 0x78e23e6ec0
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x951b534 0x78e23e6fa0
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x951e28c 0x78e23e7080
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x9519f84 0x78e23e7160
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x95222dc 0x78e23e7240
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x951b820 0x78e23e7320
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0x951ba78 0x78e23e3a40
	static void CancelAsyncLoading();// 0x95216ec 0x78e23e3b20
	static void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int ElementIndex, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x951a804 0x78e23e3c00
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x951923c 0x78e23e3ce0
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x951874c 0x78e23e3dc0
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x9518cbc 0x78e23e3ea0
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x9518538 0x78e23e3f80
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0x95236b4 0x78e23e4060
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x95238ac 0x78e23e4140
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x95234c0 0x78e23e4220
	static bool AreSubtitlesEnabled();// 0x951c0f8 0x78e23e4300
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x951f220 0x78e23e43e0
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x952002c 0x78e23e44c0
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x9520424 0x78e23e45a0
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x951fd9c 0x78e23e4680
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x951fbc8 0x78e23e4760
	static void AnnounceAccessibleString(FString AnnouncementString);// 0x951715c 0x78e23e4840
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x951b614 0x78e23e4920

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc] 0x7875ac4700
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc] 0x7875ac4780
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875ac4800
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4] 0x7875ac4880
	float MaxSimTime;//[Offset: 0x20, Size: 0x4] 0x7875ac4900
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1] 0x7875ac4980
	byte TraceChannel;//[Offset: 0x25, Size: 0x1] 0x7875ac4a00
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10] 0x78759ecb80
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10] 0x78759ecc20
	float SimFrequency;//[Offset: 0x48, Size: 0x4] 0x7875ac4b80
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4] 0x7875ac4c00
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1] 0x7875ac4c80
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4] 0x7875ac4d00
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7875ac4d80

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10] 0x78759eccc0
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c] 0x7875ac5000
	HitResult HitResult;//[Offset: 0x2c, Size: 0x88] 0x7875ac5080

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875ac4e80
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x7875ac4f00
	float Time;//[Offset: 0x18, Size: 0x4] 0x7875ac4f80

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x26c, Size: 0x8] 0x7875cb9600
	FName PreviousMatchState;//[Offset: 0x274, Size: 0x8] 0x7875cb9680
	int ElapsedTime;//[Offset: 0x27c, Size: 0x4] 0x7875cb9700
	void OnRep_MatchState();// 0x9527b38 0x7875d153a0
	void OnRep_ElapsedTime();// 0x9527b1c 0x7875d15480

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x230, Size: 0x8] 0x78e2427900
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x9733d34 0x78e23ef120
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x9733ddc 0x78e23ef200

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x344, Size: 0x4] 0x78e25cf000
	float OuterConeAngle;//[Offset: 0x348, Size: 0x4] 0x78e25cf080
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x973436c 0x78e259dfa0
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x9734414 0x78e259e080

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1] 0x78e256cf00
	float LightFalloffExponent;//[Offset: 0x334, Size: 0x4] 0x78e256cf80
	float SourceRadius;//[Offset: 0x338, Size: 0x4] 0x78e256d000
	float SoftSourceRadius;//[Offset: 0x33c, Size: 0x4] 0x78e256d080
	float SourceLength;//[Offset: 0x340, Size: 0x4] 0x78e256d100
	void SetSourceRadius(float bNewValue);// 0x96b224c 0x78e24bce20
	void SetSourceLength(float NewValue);// 0x96b20fc 0x78e24bcf00
	void SetSoftSourceRadius(float bNewValue);// 0x96b21a4 0x78e24bcfe0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x96b22f4 0x78e24bd0c0

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x319, Size: 0x1] 0x78e237ef20
	float Radius;//[Offset: 0x31c, Size: 0x4] 0x78e24c7300
	float AttenuationRadius;//[Offset: 0x320, Size: 0x4] 0x78e24c7380
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x324, Size: 0xc] 0x78e24c5300
	void SetIntensityUnits(enum NewIntensityUnits);// 0x95e2c74 0x78e24b4920
	void SetAttenuationRadius(float NewRadius);// 0x95e2d1c 0x78e24b4a00
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x95e2b34 0x78e24b4ae0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10] 0x78e2379c00
	int SampleRate;//[Offset: 0x38, Size: 0x4] 0x78e2427880

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110] 0x78e2427780

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88] 0x7875ac4580
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88] 0x7875ac4600

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8] 0x78e2427700

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void StopPerformanceSnapshots();// 0x952eff4 0x78e23eee80
	static void StartPerformanceSnapshots();// 0x952f008 0x78e23eef60
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x952eeac 0x78e23ef040

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4d8, Size: 0x10] 0x7875d42540
	int NumCustomDataFloats;//[Offset: 0x4e8, Size: 0x4] 0x78e22b4100
	float[] PerInstanceSMCustomData;//[Offset: 0x4f0, Size: 0x10] 0x7875d425e0
	int InstancingRandomSeed;//[Offset: 0x500, Size: 0x4] 0x78e22b4200
	int InstanceStartCullDistance;//[Offset: 0x504, Size: 0x4] 0x78e22b2180
	int InstanceEndCullDistance;//[Offset: 0x508, Size: 0x4] 0x78e22b2200
	int[] InstanceReorderTable;//[Offset: 0x510, Size: 0x10] 0x7875d42680
	int NumPendingLightmaps;//[Offset: 0x568, Size: 0x4] 0x78e22b2300
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x570, Size: 0x10] 0x7875d42720
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x953f78c 0x78e2297320
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x953fb20 0x78e2293a40
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x953f120 0x78e2293b20
	bool RemoveInstance(int InstanceIndex);// 0x953f260 0x78e2293c00
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x953f9a8 0x78e2293ce0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x953ef74 0x78e2293dc0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x953ee14 0x78e2293ea0
	int GetInstanceCount();// 0x953f210 0x78e2293f80
	void ClearInstances();// 0x953f244 0x78e2294060
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x953f580 0x78e2294140
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x953f31c 0x78e2294220
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x953fcc4 0x78e2294300
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x953fda8 0x78e22943e0
	int AddInstance(out const Transform InstanceTransform);// 0x953ff10 0x78e22944c0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x7875ac6d80

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x590, Size: 0x10] 0x7875d42360
	int NumBuiltInstances;//[Offset: 0x5a0, Size: 0x4] 0x78e22b3b00
	Box BuiltInstanceBounds;//[Offset: 0x5a8, Size: 0x1c] 0x78e22b3b80
	Box UnbuiltInstanceBounds;//[Offset: 0x5c4, Size: 0x1c] 0x78e22b3c00
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5e0, Size: 0x10] 0x7875d42400
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f0, Size: 0x1] 0x78e22b3d00
	int OcclusionLayerNumNodes;//[Offset: 0x5f8, Size: 0x4] 0x78e22b3d80
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x5fc, Size: 0x1c] 0x78e22b3e00
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x78e22b3e80
	int InstanceCountToRender;//[Offset: 0x61c, Size: 0x4] 0x78e22b3f00
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x952f7d0 0x78e2297240

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10] 0x78e2379b60
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50] 0x7875b1d840

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c] 0x7875ac5c80
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8] 0x7875ac5d00
	FName Key;//[Offset: 0x28, Size: 0x8] 0x7875ac5d80

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78e24c6c00
	<HLODInstancingKey,InstancedStaticMeshComponent*> InstancedStaticMeshComponents;//[Offset: 0x228, Size: 0x50] 0x7875b1d780
	HLODProxy* Proxy;//[Offset: 0x278, Size: 0x8] 0x78e24c6d80
	FName Key;//[Offset: 0x280, Size: 0x8] 0x78e24c6e00
	float LODDrawDistance;//[Offset: 0x288, Size: 0x4] 0x78e24c6e80
	int LODLevel;//[Offset: 0x28c, Size: 0x4] 0x78e24c6f00
	Actor*[] SubActors;//[Offset: 0x290, Size: 0x10] 0x78e237ede0
	byte CachedNumHLODLevels;//[Offset: 0x2a0, Size: 0x1] 0x78e24c7000

--------------------------------
Class: HLODInstancingKey
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8] 0x7875acab00
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x7875acab80

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x95353a0 0x78e2431c80
	static Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x9534e34 0x78e23ee780
	static Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x95350ec 0x78e23ee860
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x9535264 0x78e23ee940
	static Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x9534cf8 0x78e23eea20
	static Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x9534fb8 0x78e23eeb00
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x9534b4c 0x78e23eebe0
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x9534694 0x78e23eecc0
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x95349b4 0x78e23eeda0

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8] 0x7875ac5900
	int NumMips;//[Offset: 0x8, Size: 0x4] 0x7875ac5980
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10] 0x78759ec900
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10] 0x78759ec9a0
	Color[] TextureData;//[Offset: 0x30, Size: 0x10] 0x78759eca40
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8] 0x7875ac5b80
	byte Weighting;//[Offset: 0x48, Size: 0x1] 0x7875ac5c00

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e242a100
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10] 0x78e2379a20
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10] 0x78e2379ac0

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e2379840

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8] 0x7875ac5380
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1] 0x7875ac5400
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8] 0x7875ac5480

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ac5500
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ac5580
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ac5600

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e23797a0

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8] 0x7875ac7380
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7875ac5300

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e2379700

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18] 0x7875ac7280
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8] 0x7875ac7300

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e2379660

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20] 0x7875ac7080
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1] 0x7875ac7100
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8] 0x7875ac7180

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18] 0x7875ff5280
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875ff3200
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7875ff3280
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7875ff3300
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7875ff3380

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10] 0x78e237b5a0
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e242ab80
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e242ac00
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78e242ac80
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x78e242ad00
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1] 0x78e242ad80
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1] 0x78e242ae00
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1] 0x78e242ae80
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1] 0x78e242af00
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78e242af80
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78e242b000
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1] 0x78e242b080
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10] 0x78e237b640
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10] 0x78e237b6e0
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10] 0x78e237b780
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1] 0x78e237b820
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1] 0x78e237b8c0
	float FOVScale;//[Offset: 0x74, Size: 0x4] 0x78e242b380
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4] 0x78e242b400
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10] 0x78e237b960
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10] 0x78e23790c0
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10] 0x78e2379160
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28] 0x78e2379200
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28] 0x78e23792a0
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18] 0x78e2429500
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18] 0x78e2429580
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10] 0x78e2379340
	void SaveKeyMappings();// 0x953cca4 0x78e24312e0
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x953ccb8 0x78e24313c0
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x953d244 0x78e24314a0
	static InputSettings* GetInputSettings();// 0x953d7e8 0x78e2431580
	void GetAxisNames(out FName[] AxisNames);// 0x953cb24 0x78e2431660
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x953ceb4 0x78e2431740
	void GetActionNames(out FName[] ActionNames);// 0x953cbe4 0x78e2431820
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x953d44c 0x78e2431900
	void ForceRebuildKeymaps();// 0x953cb10 0x78e24319e0
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x953d048 0x78e2431ac0
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x953d5e0 0x78e2431ba0

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8] 0x7875aead80
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10] 0x7875aeb000

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4] 0x7875aeae00
	float Sensitivity;//[Offset: 0x4, Size: 0x4] 0x7875aeae80
	float Exponent;//[Offset: 0x8, Size: 0x4] 0x7875aeaf00
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875aeaf80

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x7875aeb080
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875aeb100
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875aeb180
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7875aeb200
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7875aeb280
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7875aeb300

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8] 0x7875aeb380
	float Scale;//[Offset: 0x8, Size: 0x4] 0x7875aeb400
	Key Key;//[Offset: 0x10, Size: 0x18] 0x7875aeb480

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8] 0x7875aeb500
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8] 0x7875aeb580

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x78e237b500

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1] 0x7875ac6f80
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8] 0x7875ac7000

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_ActorSubobject.Interface.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10] 0x78e242c580

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8] 0x78e242c080
	float CompressTolerance;//[Offset: 0x58, Size: 0x4] 0x78e242c100

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xec, Size: 0x4] 0x787805b900
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x787805b980
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1] 0x787805ba00
	enum TeleportType;//[Offset: 0xf2, Size: 0x1] 0x7878002900
	enum BehaviourType;//[Offset: 0xf3, Size: 0x1] 0x7878000100
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1] 0x787805bb80
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x787805bc00
	delegate OnInterpToReverse;//[Offset: 0xf8, Size: 0x10] 0x787805bc80
	delegate OnInterpToStop;//[Offset: 0x108, Size: 0x10] 0x787805bd00
	delegate OnWaitBeginDelegate;//[Offset: 0x118, Size: 0x10] 0x787805bd80
	delegate OnWaitEndDelegate;//[Offset: 0x128, Size: 0x10] 0x787805be00
	delegate OnResetDelegate;//[Offset: 0x138, Size: 0x10] 0x787805be80
	float MaxSimulationTimeStep;//[Offset: 0x148, Size: 0x4] 0x787805bf00
	int MaxSimulationIterations;//[Offset: 0x14c, Size: 0x4] 0x787805bf80
	InterpControlPoint[] ControlPoints;//[Offset: 0x150, Size: 0x10] 0x7878000240
	void StopSimulating(out const HitResult HitResult);// 0x9549bd0 0x787eddaa40
	void RestartMovement(float InitialDirection);// 0x9549a24 0x787eddab20
	void ResetControlPoints();// 0x95499fc 0x787eddac00
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x6d94ba8 0x787eddace0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x6d94ba8 0x787edd7400
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x6d94ba8 0x787edd74e0
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x6d94ba8 0x787edd75c0
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x6d94ba8 0x787edd76a0
	void FinaliseControlPoints();// 0x9549a10 0x787edd7780
	void AddControlPointPosition(Vector Pos, bool bPositionIsRelative);// 0x9549acc 0x787edd7860

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc] 0x787805c000
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x787805c080

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18] 0x78e242b880
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78e242b900

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8] 0x78e242b700
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10] 0x78e237b000
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e242b800

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4] 0x7875ac7a80
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8] 0x7875ac7b00
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4] 0x7875ac7b80
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4] 0x7875ac7c00
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4] 0x7875ac7c80
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7875ac7d00
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7875ac7d80

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18] 0x78e242b600
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78e242b680

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10] 0x78e237af60
	FName PropertyName;//[Offset: 0x80, Size: 0x8] 0x78e242d680

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac7980
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1] 0x7875ac7a00

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78e242d580

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10] 0x78e237aec0
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e242d500

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac7780
	float TransitionTime;//[Offset: 0x4, Size: 0x4] 0x7875ac7800
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8] 0x7875ac7880
	int ShotNumber;//[Offset: 0x10, Size: 0x4] 0x7875ac7900

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10] 0x78e237ae20
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e242d280
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e242d300
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78e242d380
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78e242d400

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac7680
	FName EventName;//[Offset: 0x4, Size: 0x8] 0x7875ac7700

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78e242d080
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78e242d100
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10] 0x78e242d180

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8] 0x78e237ace0
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8] 0x78e237ad80
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78e242d000

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78e237ac40
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78e242cf80

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8] 0x78e242ce80

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78e242ce00

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78e242cd80

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20] 0x78e242cc80
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8] 0x78e242cd00

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78e242cc00

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4] 0x78e242cb80

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78e242ca80

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8] 0x78e242c980
	float ResetFloat;//[Offset: 0x30, Size: 0x4] 0x78e242ca00

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78e237aa60
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10] 0x78e237ab00
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78e237aba0
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78e242c900

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8] 0x7875ac0600
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8] 0x7875ac0680
	int ElementIndex;//[Offset: 0x10, Size: 0x4] 0x7875ac0700

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4] 0x78e242c700

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4] 0x78e242c680

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10] 0x78e242e700

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78e242e580

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4] 0x78e242e500

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4] 0x78e242e400
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8] 0x78e242e480

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78e242e280
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78e242e300
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78e242e380

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10] 0x78e237a880
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10] 0x78e237a920
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10] 0x78e237a9c0
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8] 0x78e242e200

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10] 0x78e237a600
	FName ParamName;//[Offset: 0xa0, Size: 0x8] 0x78e242f000

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0xc] 0x78e242e000

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1] 0x78e242df00
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4] 0x78e242df80

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18] 0x78e242de00
	float CurveTension;//[Offset: 0x88, Size: 0x4] 0x78e242de80

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc66280
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24eff80
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24ee780

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24ee800
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10] 0x78c24ee880
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10] 0x78c24ee900
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10] 0x78c24ee980
	byte InterpMode;//[Offset: 0x34, Size: 0x1] 0x78c24eea00

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78e242dd80

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1] 0x78e242f700
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10] 0x78e242f780

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10] 0x78e237a7e0

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac9480
	float Duration;//[Offset: 0x4, Size: 0x4] 0x7875ac7400
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4] 0x7875ac7480

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10] 0x78e237a740
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e242f400
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78e242f480
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1] 0x78e242f500
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1] 0x78e242f580
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1] 0x78e242f600

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac9280
	float Volume;//[Offset: 0x4, Size: 0x4] 0x7875ac9300
	float Pitch;//[Offset: 0x8, Size: 0x4] 0x7875ac9380
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8] 0x7875ac9400

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10] 0x78e237a6a0
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e242f100
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e242f180
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78e242f200
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78e242f280
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1] 0x78e242f300

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac9180
	byte ToggleAction;//[Offset: 0x4, Size: 0x1] 0x7875ac9200

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8] 0x78e242ef00

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10] 0x78e237a560
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e242ed80
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e242ee00
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78e242ee80

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ac9000
	byte Action;//[Offset: 0x4, Size: 0x1] 0x7875ac9080
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1] 0x7875ac9100

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2] 0x78e242e900
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4] 0x78e242e980
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8] 0x78e242ea00
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1] 0x78e242ea80
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2] 0x78e242eb00
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8] 0x78e242eb80
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1] 0x78e242ec00
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4] 0x78e242ec80

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x955d5e8 0x78e2433880
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x955b758 0x78e2433960
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x955d488 0x78e2430080
	static void Array_Shuffle(out const int[] TargetArray);// 0x955d3f0 0x78e2430160
	static void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x955d1ac 0x78e2430240
	static void Array_Reverse(out const int[] TargetArray);// 0x955d114 0x78e2430320
	static void Array_Resize(out const int[] TargetArray, int Size);// 0x955cffc 0x78e2430400
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x955ce34 0x78e24304e0
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x955cd1c 0x78e24305c0
	static void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0x955cb9c 0x78e24306a0
	static void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0x955ca6c 0x78e2430780
	static int Array_Length(out const int[] TargetArray);// 0x955c9c8 0x78e2430860
	static int Array_LastIndex(out const int[] TargetArray);// 0x955c924 0x78e2430940
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x955c7f8 0x78e2430a20
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x955c604 0x78e2430b00
	static bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x955c4ec 0x78e2430be0
	static void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x955c2cc 0x78e2430cc0
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x955c108 0x78e2430da0
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x955bf3c 0x78e2430e80
	static void Array_Clear(out const int[] TargetArray);// 0x955bea4 0x78e2430f60
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x955bd9c 0x78e2431040
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x955bbe4 0x78e2431120
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x955ba2c 0x78e2431200

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4] 0x78c24efc80
	int Seed;//[Offset: 0x4, Size: 0x4] 0x78c24efd00

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x9562d2c 0x78e2433260
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x9563110 0x78e2433340
	static Guid NewGuid();// 0x9562f80 0x78e2433420
	static bool IsValid_Guid(out const Guid InGuid);// 0x9563058 0x78e2433500
	static void Invalidate_Guid(out Guid InGuid);// 0x9562fb4 0x78e24335e0
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x9563218 0x78e24336c0
	static FString Conv_GuidToString(out const Guid InGuid);// 0x9562e80 0x78e24337a0

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x9563d50 0x78e2434140
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x9564660 0x78e2434220
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x95642c4 0x78e2434300
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x9564168 0x78e24343e0
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x9563eb0 0x78e24344c0
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x9564ba8 0x78e24345a0
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x956400c 0x78e2434680
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x9564a4c 0x78e2434760
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x9563bf4 0x78e2434840
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x9563a98 0x78e2434920
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x9564420 0x78e2434a00
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x95648f0 0x78e2434ae0
	static bool Key_IsVectorAxis(out const Key Key);// 0x9566bec 0x78e2434bc0
	static bool Key_IsValid(out const Key Key);// 0x9566460 0x78e2434ca0
	static bool Key_IsMouseButton(out const Key Key);// 0x9566e14 0x78e2434d80
	static bool Key_IsModifierKey(out const Key Key);// 0x956703c 0x78e2434e60
	static bool Key_IsKeyboardKey(out const Key Key);// 0x9566d00 0x78e2434f40
	static bool Key_IsGamepadKey(out const Key Key);// 0x9566f28 0x78e2435020
	static bool Key_IsDigital(out const Key Key);// 0x9566574 0x78e2435100
	static bool Key_IsButtonAxis(out const Key Key);// 0x956679c 0x78e24351e0
	static bool Key_IsAxis3D(out const Key Key);// 0x95668b0 0x78e24352c0
	static bool Key_IsAxis2D(out const Key Key);// 0x95669c4 0x78e24353a0
	static bool Key_IsAxis1D(out const Key Key);// 0x9566ad8 0x78e2435480
	static bool Key_IsAnalog(out const Key Key);// 0x9566688 0x78e2435560
	static enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x95660d8 0x78e2435640
	static enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x9565f94 0x78e2431d60
	static enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x9566214 0x78e2431e40
	static enum Key_GetNavigationAction(out const Key InKey);// 0x9566350 0x78e2431f20
	static FText Key_GetDisplayName(out const Key Key);// 0x9565e18 0x78e2432000
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x9565c70 0x78e24320e0
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x9565ac8 0x78e24321c0
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x956584c 0x78e24322a0
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x9565354 0x78e2432380
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x95655d0 0x78e2432460
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0x9565d44 0x78e2432540
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x9565b9c 0x78e2432620
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x9565920 0x78e2432700
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x9565428 0x78e24327e0
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x95656a4 0x78e24328c0
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0x95659f4 0x78e24329a0
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x95654fc 0x78e2432a80
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0x9565778 0x78e2432b60
	static FText InputChord_GetDisplayName(out const InputChord Key);// 0x95651a4 0x78e2432c40
	static int GetUserIndex(out const KeyEvent Input);// 0x9564e48 0x78e2432d20
	static Key GetKey(out const KeyEvent Input);// 0x9564f84 0x78e2432e00
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0x9564d04 0x78e2432ee0
	static bool EqualEqual_KeyKey(Key A, Key B);// 0x9567474 0x78e2432fc0
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x9567150 0x78e24330a0
	static void CalibrateTilt();// 0x9567718 0x78e2433180

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x95696a4 0x78e2436ec0
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x95694e8 0x78e2436fa0
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x9569860 0x78e2437080
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x9569a1c 0x78e2437160
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x9569390 0x78e2437240
	static FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x9568c9c 0x78e2437320
	static FString GetNativeCulture(const enum TextCategory);// 0x95690bc 0x78e2433a40
	static FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x9568e78 0x78e2433b20
	static FString GetCurrentLocale();// 0x95695f4 0x78e2433c00
	static FString GetCurrentLanguage();// 0x95697b0 0x78e2433ce0
	static FString GetCurrentCulture();// 0x956996c 0x78e2433dc0
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x956929c 0x78e2433ea0
	static FString GetCultureDisplayName(FString Culture, const bool Localized);// 0x9568b50 0x78e2433f80
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x95691b0 0x78e2434060

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x956a974 0x78e2436a60
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x956aaf0 0x78e2436b40
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x956a6f8 0x78e2436c20
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x956a838 0x78e2436d00
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x956a570 0x78e2436de0

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	static int Xor_IntInt(int A, int B);// 0x9595554 0x78e24990e0
	static int64 Xor_Int64Int64(int64 A, int64 B);// 0x9593e10 0x78e24991c0
	static int Wrap(int Value, int Min, int Max);// 0x9594c04 0x78e24992a0
	static Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x956c63c 0x78e2499380
	static Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x956c4fc 0x78e2499460
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x956c77c 0x78e2499540
	static float VSizeXYSquared(Vector A);// 0x9587880 0x78e2499620
	static float VSizeXY(Vector A);// 0x958792c 0x78e2499700
	static float VSizeSquared(Vector A);// 0x95879dc 0x78e24997e0
	static float VSize2DSquared(Vector2D A);// 0x958bbac 0x78e24998c0
	static float VSize2D(Vector2D A);// 0x958bc58 0x78e24999a0
	static float VSize(Vector A);// 0x9587a94 0x78e2499a80
	static Vector VLerp(Vector A, Vector B, float Alpha);// 0x9586ca8 0x78e2499b60
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x9586744 0x78e2499c40
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x95868e4 0x78e2499d20
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x95864c0 0x78e2499e00
	static Vector Vector_Zero();// 0x958bb80 0x78e2499ee0
	static Vector Vector_Up();// 0x958bad0 0x78e2499fc0
	static void Vector_UnwindEuler(out Vector A);// 0x9589714 0x78e249a0a0
	static Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x958852c 0x78e249a180
	static Vector Vector_ToRadians(Vector A);// 0x95886e4 0x78e249a260
	static Vector Vector_ToDegrees(Vector A);// 0x9588624 0x78e249a340
	static Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x9585f5c 0x78e249a420
	static void Vector_Set(out Vector A, float X, float Y, float Z);// 0x958b554 0x78e249a500
	static Vector Vector_Right();// 0x958ba78 0x78e249a5e0
	static Vector Vector_Reciprocal(out const Vector A);// 0x95863d4 0x78e249a6c0
	static Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x9585a3c 0x78e249a7a0
	static Vector Vector_One();// 0x958bb54 0x78e249a880
	static Vector Vector_NormalUnsafe(out const Vector A);// 0x9586f24 0x78e249a960
	static void Vector_Normalize(out Vector A, float Tolerance);// 0x9586dfc 0x78e249aa40
	static Vector Vector_Normal2D(Vector A, float Tolerance);// 0x9587008 0x78e249ab20
	static Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x9586088 0x78e249ac00
	static Vector Vector_Left();// 0x958ba4c 0x78e249ace0
	static bool Vector_IsZero(out const Vector A);// 0x9587684 0x78e2497400
	static bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x9587368 0x78e24974e0
	static bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x9587480 0x78e24975c0
	static bool Vector_IsNormal(out const Vector A);// 0x9587284 0x78e24976a0
	static bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x958775c 0x78e2497780
	static bool Vector_IsNAN(out const Vector A);// 0x95875a0 0x78e2497860
	static float Vector_HeadingAngle(Vector A);// 0x9588924 0x78e2497940
	static Vector Vector_GetSignVector(Vector A);// 0x9588af8 0x78e2497a20
	static Vector Vector_GetProjection(Vector A);// 0x9588a40 0x78e2497b00
	static float Vector_GetAbsMin(Vector A);// 0x9588e70 0x78e2497be0
	static float Vector_GetAbsMax(Vector A);// 0x9588f30 0x78e2497cc0
	static Vector Vector_GetAbs(Vector A);// 0x9588dc0 0x78e2497da0
	static Vector Vector_Forward();// 0x958bb28 0x78e2497e80
	static Vector Vector_Down();// 0x958baa4 0x78e2497f60
	static float Vector_DistanceSquared(Vector v1, Vector v2);// 0x9587d44 0x78e2498040
	static float Vector_Distance2DSquared(Vector v1, Vector v2);// 0x9587b50 0x78e2498120
	static float Vector_Distance2D(Vector v1, Vector v2);// 0x9587c48 0x78e2498200
	static float Vector_Distance(Vector v1, Vector v2);// 0x9587e50 0x78e24982e0
	static float Vector_CosineAngle2D(Vector A, Vector B);// 0x95887a4 0x78e24983c0
	static Vector Vector_ComponentMin(Vector A, Vector B);// 0x9588cc0 0x78e24984a0
	static Vector Vector_ComponentMax(Vector A, Vector B);// 0x9588bc0 0x78e2498580
	static Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0x9589158 0x78e2498660
	static Vector Vector_ClampSizeMax(Vector A, float Max);// 0x9589298 0x78e2498740
	static Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0x95893e8 0x78e2498820
	static Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x9585e38 0x78e2498900
	static Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x9585b4c 0x78e24989e0
	static Vector Vector_Backward();// 0x958bafc 0x78e2498ac0
	static void Vector_Assign(out Vector A, out const Vector InVector);// 0x958b6d4 0x78e2498ba0
	static void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x9585cb4 0x78e2498c80
	static Vector4 Vector4_Zero();// 0x95848c4 0x78e2498d60
	static float Vector4_SizeSquared3(out const Vector4 A);// 0x9582abc 0x78e2498e40
	static float Vector4_SizeSquared(out const Vector4 A);// 0x9582c68 0x78e2498f20
	static float Vector4_Size3(out const Vector4 A);// 0x9582b90 0x78e2499000
	static float Vector4_Size(out const Vector4 A);// 0x9582d44 0x78e2495720
	static void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0x95834f4 0x78e2495800
	static Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x9582664 0x78e24958e0
	static void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x9582518 0x78e24959c0
	static Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x9582758 0x78e2495aa0
	static Vector4 Vector4_Negated(out const Vector4 A);// 0x95837d4 0x78e2495b80
	static Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x95823dc 0x78e2495c60
	static bool Vector4_IsZero(out const Vector4 A);// 0x9582e24 0x78e2495d40
	static bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x9582998 0x78e2495e20
	static bool Vector4_IsNormal3(out const Vector4 A);// 0x95828a8 0x78e2495f00
	static bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x9582f14 0x78e2495fe0
	static bool Vector4_IsNAN(out const Vector4 A);// 0x9583044 0x78e24960c0
	static float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x9583144 0x78e24961a0
	static float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x9583274 0x78e2496280
	static Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x95833ac 0x78e2496360
	static void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x95836c8 0x78e2496440
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x958c3fc 0x78e2496520
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x958c580 0x78e2496600
	static Vector2D Vector2D_Zero();// 0x958e510 0x78e24966e0
	static Vector2D Vector2D_Unit45Deg();// 0x958e534 0x78e24967c0
	static Vector2D Vector2D_One();// 0x958e558 0x78e24968a0
	static Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x9586a84 0x78e2496980
	static DateTime UtcNow();// 0x9575b98 0x78e2496a60
	static Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x95822c0 0x78e2496b40
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x9570080 0x78e2496c20
	static Vector TransformLocation(out const Transform T, Vector Location);// 0x957033c 0x78e2496d00
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0x95701a4 0x78e2496de0
	static float Transform_Determinant(out const Transform Transform);// 0x956efec 0x78e2496ec0
	static Vector2D ToSign2D(Vector2D A);// 0x958bd08 0x78e2496fa0
	static Vector2D ToRounded2D(Vector2D A);// 0x958bdc0 0x78e2497080
	static void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0x958be6c 0x78e2497160
	static DateTime Today();// 0x9575bcc 0x78e2497240
	static Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x956f544 0x78e2497320
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x956f0c8 0x78e2493a40
	static Timespan TimespanZeroValue();// 0x9575878 0x78e2493b20
	static float TimespanRatio(Timespan A, Timespan B);// 0x9573a5c 0x78e2493c00
	static Timespan TimespanMinValue();// 0x9575890 0x78e2493ce0
	static Timespan TimespanMaxValue();// 0x95758ac 0x78e2493dc0
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x9573900 0x78e2493ea0
	static Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x956f2b8 0x78e2493f80
	static float Tan(float A);// 0x9592180 0x78e2494060
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0x958ab28 0x78e2494140
	static Vector Subtract_VectorInt(Vector A, int B);// 0x958a924 0x78e2494220
	static Vector Subtract_VectorFloat(Vector A, float B);// 0x958aa28 0x78e2494300
	static Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x95840c4 0x78e24943e0
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958de84 0x78e24944c0
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0x958dd90 0x78e24945a0
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x9574e98 0x78e2494680
	static Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x957c150 0x78e2494760
	static LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577b4c 0x78e2494840
	static IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958ec78 0x78e2494920
	static IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x958eb84 0x78e2494a00
	static int Subtract_IntInt(int A, int B);// 0x9595ec8 0x78e2494ae0
	static int64 Subtract_Int64Int64(int64 A, int64 B);// 0x9594784 0x78e2494bc0
	static float Subtract_FloatFloat(float A, float B);// 0x959306c 0x78e2494ca0
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x9577090 0x78e2494d80
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x9576ec8 0x78e2494e60
	static byte Subtract_ByteByte(byte A, byte B);// 0x9596b64 0x78e2494f40
	static float Square(float A);// 0x9591c44 0x78e2495020
	static float Sqrt(float A);// 0x9591cec 0x78e2495100
	static Vector Spherical2DToUnitCartesian(Vector2D A);// 0x958c000 0x78e24951e0
	static float Sin(float A);// 0x9592448 0x78e24952c0
	static int64 SignOfInteger64(int64 A);// 0x9593bc8 0x78e24953a0
	static int SignOfInteger(int A);// 0x959530c 0x78e2495480
	static float SignOfFloat(float A);// 0x958fa3c 0x78e2495560
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x956dc00 0x78e2495640
	static void Set2D(out Vector2D A, float X, float Y);// 0x958d31c 0x78e2491d60
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x9572064 0x78e2491e40
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x9571c24 0x78e2491f20
	static FString SelectString(FString A, FString B, bool bPickA);// 0x9572458 0x78e2492000
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x9571f00 0x78e24920e0
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x9571adc 0x78e24921c0
	static int SelectInt(int A, int B, bool bPickA);// 0x9572310 0x78e24922a0
	static float SelectFloat(float A, float B, bool bPickA);// 0x95721c8 0x78e2492380
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x9571dc4 0x78e2492460
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x9571994 0x78e2492540
	static void SeedRandomStream(out RandomStream Stream);// 0x956dcf0 0x78e2492620
	static float SafeDivide(float A, float B);// 0x9590d08 0x78e2492700
	static int64 Round64(float A);// 0x958fe38 0x78e24927e0
	static int Round(float A);// 0x95900e4 0x78e24928c0
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x958afd4 0x78e24929a0
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x95898c0 0x78e2492a80
	static Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x95803c8 0x78e2492b60
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x956e8b8 0x78e2492c40
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x956ea58 0x78e2492d20
	static void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x9578e8c 0x78e2492e00
	static void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x9578f88 0x78e2492ee0
	static LinearColor RGBLinearToHSV(LinearColor RGB);// 0x9578ddc 0x78e2492fc0
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0x956e4ec 0x78e24930a0
	static void ResetRandomStream(out const RandomStream Stream);// 0x956dd94 0x78e2493180
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0x956e5ac 0x78e2493260
	static Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x958015c 0x78e2493340
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x956d7b8 0x78e2493420
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x9584a30 0x78e2493500
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x956d60c 0x78e24935e0
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x95848dc 0x78e24936c0
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x956dab0 0x78e24937a0
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x9584c84 0x78e2493880
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x956d950 0x78e2493960
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x9584b70 0x78e2490080
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x956df38 0x78e2490160
	static Vector RandomUnitVector();// 0x9584eac 0x78e2490240
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x956de38 0x78e2490320
	static Rotator RandomRotator(bool bRoll);// 0x958055c 0x78e2490400
	static Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0x9584d88 0x78e24904e0
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x956e2a4 0x78e24905c0
	static int RandomIntegerInRange(int Min, int Max);// 0x95950f4 0x78e24906a0
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x956e3ec 0x78e2490780
	static int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x95939a8 0x78e2490860
	static int64 RandomInteger64(int64 Max);// 0x9593ae4 0x78e2490940
	static int RandomInteger(int Max);// 0x959522c 0x78e2490a20
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x956dff0 0x78e2490b00
	static float RandomFloatInRange(float Min, float Max);// 0x9591ae4 0x78e2490be0
	static float RandomFloatFromStream(out const RandomStream Stream);// 0x956e138 0x78e2490cc0
	static float RandomFloat();// 0x9591bfc 0x78e2490da0
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x95977b0 0x78e2490e80
	static bool RandomBoolWithWeight(float Weight);// 0x95978b4 0x78e2490f60
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0x956e1ec 0x78e2491040
	static bool RandomBool();// 0x9597960 0x78e2491120
	static float RadiansToDegrees(float A);// 0x959193c 0x78e2491200
	static Vector Quat_VectorUp(out const Quat Q);// 0x957afe8 0x78e24912e0
	static Vector Quat_VectorRight(out const Quat Q);// 0x957b118 0x78e24913c0
	static Vector Quat_VectorForward(out const Quat Q);// 0x957b248 0x78e24914a0
	static Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x957a214 0x78e2491580
	static float Quat_SizeSquared(out const Quat Q);// 0x957a514 0x78e2491660
	static float Quat_Size(out const Quat Q);// 0x957a5e4 0x78e2491740
	static void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x957a820 0x78e2491820
	static void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x957a918 0x78e2491900
	static Rotator Quat_Rotator(out const Quat Q);// 0x957a6b8 0x78e24919e0
	static Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x957a398 0x78e2491ac0
	static Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x957ad60 0x78e2491ba0
	static void Quat_Normalize(out Quat Q, float Tolerance);// 0x957ae90 0x78e2491c80
	static Quat Quat_MakeFromEuler(out const Vector Euler);// 0x957a76c 0x78e246e780
	static Quat Quat_Log(out const Quat Q);// 0x957aae0 0x78e246e860
	static bool Quat_IsNormalized(out const Quat Q);// 0x957bd84 0x78e246e940
	static bool Quat_IsNonFinite(out const Quat Q);// 0x957bb9c 0x78e246ea20
	static bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x957be70 0x78e246eb00
	static bool Quat_IsFinite(out const Quat Q);// 0x957bc90 0x78e246ebe0
	static Quat Quat_Inversed(out const Quat Q);// 0x957ab94 0x78e246ecc0
	static Quat Quat_Identity();// 0x957c738 0x78e246eda0
	static Vector Quat_GetRotationAxis(out const Quat Q);// 0x957ac5c 0x78e246ee80
	static Vector Quat_GetAxisZ(out const Quat Q);// 0x957b374 0x78e246ef60
	static Vector Quat_GetAxisY(out const Quat Q);// 0x957b4a4 0x78e246f040
	static Vector Quat_GetAxisX(out const Quat Q);// 0x957b5d4 0x78e246f120
	static float Quat_GetAngle(out const Quat Q);// 0x957b700 0x78e246f200
	static Quat Quat_Exp(out const Quat Q);// 0x957b7cc 0x78e246f2e0
	static Vector Quat_Euler(out const Quat Q);// 0x957b880 0x78e246f3c0
	static void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x957b934 0x78e246f4a0
	static float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x957ba64 0x78e246f580
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x95858f0 0x78e246f660
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x9585664 0x78e246f740
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x9585780 0x78e246f820
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x956d178 0x78e246f900
	static float PerlinNoise1D(const float Value);// 0x956d564 0x78e246f9e0
	static int Percent_IntInt(int A, int B);// 0x95960a8 0x78e246fac0
	static float Percent_FloatFloat(float A, float B);// 0x9597ca8 0x78e246fba0
	static byte Percent_ByteByte(byte A, byte B);// 0x9596d4c 0x78e246fc80
	static int Or_IntInt(int A, int B);// 0x9595464 0x78e246fd60
	static int64 Or_Int64Int64(int64 A, int64 B);// 0x9593d20 0x78e246fe40
	static DateTime Now();// 0x9575c30 0x78e246ff20
	static bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x9589e84 0x78e246caa0
	static bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x9583a40 0x78e246cb80
	static bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958d654 0x78e246cc60
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x9589d1c 0x78e246cd40
	static bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x9583894 0x78e246ce20
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x958d500 0x78e246cf00
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x9574ad0 0x78e246cfe0
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x9580f00 0x78e246d0c0
	static bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x957c350 0x78e246d1a0
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0x95717ac 0x78e246d280
	static bool NotEqual_NameName(FName A, FName B);// 0x95712e8 0x78e246d360
	static bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x957f68c 0x78e246d440
	static bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577d14 0x78e246d520
	static bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958e57c 0x78e246d600
	static bool NotEqual_IntInt(int A, int B);// 0x9595910 0x78e246d6e0
	static bool NotEqual_Int64Int64(int64 A, int64 B);// 0x95941cc 0x78e246d7c0
	static bool NotEqual_FloatFloat(float A, float B);// 0x9592970 0x78e246d8a0
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x9576cf8 0x78e246d980
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0x95715c4 0x78e246da60
	static bool NotEqual_ByteByte(byte A, byte B);// 0x95963a4 0x78e246db40
	static bool NotEqual_BoolBool(bool A, bool B);// 0x9597514 0x78e246dc20
	static bool Not_PreBool(bool A);// 0x9597704 0x78e246dd00
	static int64 Not_Int64(int64 A);// 0x9593c78 0x78e246dde0
	static int Not_Int(int A);// 0x95953bc 0x78e246dec0
	static Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x958c2e0 0x78e246dfa0
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0x958f900 0x78e246e080
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x9580068 0x78e246e160
	static float NormalizeAxis(float Angle);// 0x957ff18 0x78e246e240
	static void Normalize2D(out Vector2D A, float Tolerance);// 0x958c0e0 0x78e246e320
	static Vector2D Normal2D(Vector2D A);// 0x958c204 0x78e246e400
	static Vector Normal(Vector A, float Tolerance);// 0x9587148 0x78e246e4e0
	static Vector NegateVector(Vector A);// 0x958a20c 0x78e246e5c0
	static Rotator NegateRotator(Rotator A);// 0x9580b58 0x78e246e6a0
	static Vector2D Negated2D(out const Vector2D A);// 0x958d44c 0x78e246adc0
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x9570c14 0x78e246aea0
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0x9592a64 0x78e246af80
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0x95934dc 0x78e246b060
	static float MultiplyByPi(float Value);// 0x958f4ac 0x78e246b140
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0x958a82c 0x78e246b220
	static Vector Multiply_VectorInt(Vector A, int B);// 0x958a630 0x78e246b300
	static Vector Multiply_VectorFloat(Vector A, float B);// 0x958a730 0x78e246b3e0
	static Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x9583fac 0x78e246b4c0
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958dcac 0x78e246b5a0
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0x958dbbc 0x78e246b680
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x9574d9c 0x78e246b760
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0x9580d04 0x78e246b840
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x9580e04 0x78e246b920
	static Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x957c01c 0x78e246ba00
	static Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x957fb48 0x78e246bae0
	static Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0x957f928 0x78e246bbc0
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577a68 0x78e246bca0
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x9577978 0x78e246bd80
	static IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958ea90 0x78e246be60
	static IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x958e99c 0x78e246bf40
	static int Multiply_IntInt(int A, int B);// 0x95962b4 0x78e246c020
	static float Multiply_IntFloat(int A, float B);// 0x95932f8 0x78e246c100
	static int64 Multiply_Int64Int64(int64 A, int64 B);// 0x9594a68 0x78e246c1e0
	static float Multiply_FloatFloat(float A, float B);// 0x95933ec 0x78e246c2c0
	static byte Multiply_ByteByte(byte A, byte B);// 0x9596f58 0x78e246c3a0
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x95861bc 0x78e246c480
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x9590a58 0x78e246c560
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x95907a8 0x78e246c640
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x95904f8 0x78e246c720
	static int64 MinInt64(int64 A, int64 B);// 0x95938b4 0x78e246c800
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x956d280 0x78e246c8e0
	static int Min(int A, int B);// 0x9595000 0x78e246c9c0
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x9590bb0 0x78e24690e0
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x9590900 0x78e24691c0
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x9590650 0x78e24692a0
	static int64 MaxInt64(int64 A, int64 B);// 0x95937c0 0x78e2469380
	static int Max(int A, int B);// 0x9594f0c 0x78e2469460
	static Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x957f580 0x78e2469540
	static Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x957f238 0x78e2469620
	static Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x957f478 0x78e2469700
	static Quat Matrix_ToQuat(out const Matrix M);// 0x957d23c 0x78e24697e0
	static void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x957d5e0 0x78e24698c0
	static void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x957d3a4 0x78e24699a0
	static void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x957d6cc 0x78e2469a80
	static Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x957e1d0 0x78e2469b60
	static Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x957e5b4 0x78e2469c40
	static void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x957e9cc 0x78e2469d20
	static Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x957c75c 0x78e2469e00
	static Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x957f100 0x78e2469ee0
	static Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x957f340 0x78e2469fc0
	static Matrix Matrix_Identity();// 0x957fcc0 0x78e246a0a0
	static Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x957dab8 0x78e246a180
	static void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x957d804 0x78e246a260
	static Matrix Matrix_GetTransposed(out const Matrix M);// 0x957f018 0x78e246a340
	static Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x957eb80 0x78e246a420
	static Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x957e678 0x78e246a500
	static Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x957de30 0x78e246a5e0
	static void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x957dc64 0x78e246a6c0
	static float Matrix_GetRotDeterminant(out const Matrix M);// 0x957ed9c 0x78e246a7a0
	static Rotator Matrix_GetRotator(out const Matrix M);// 0x957d2f0 0x78e246a880
	static Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x957fcec 0x78e246a960
	static float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x957e0bc 0x78e246aa40
	static Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x957e7e4 0x78e246ab20
	static Matrix Matrix_GetInverse(out const Matrix M);// 0x957ecdc 0x78e246ac00
	static bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x957cb0c 0x78e246ace0
	static bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x957cc88 0x78e2467400
	static bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x957d0dc 0x78e24674e0
	static bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x957cdfc 0x78e24675c0
	static bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x957cf70 0x78e24676a0
	static bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x957c990 0x78e2467780
	static float Matrix_GetDeterminant(out const Matrix M);// 0x957ee98 0x78e2467860
	static Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x957d4e0 0x78e2467940
	static bool Matrix_ContainsNaN(out const Matrix M);// 0x957e2e8 0x78e2467a20
	static Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x957e49c 0x78e2467b00
	static Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x957df78 0x78e2467be0
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x958f730 0x78e2467cc0
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x958f560 0x78e2467da0
	static Vector4 MakeVector4(float X, float Y, float Z, float W);// 0x9584740 0x78e2467e80
	static Vector2D MakeVector2D(float X, float Y);// 0x958e424 0x78e2467f60
	static Vector MakeVector(float X, float Y, float Z);// 0x958b910 0x78e2468040
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x9571188 0x78e2468120
	static Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x95754d8 0x78e2468200
	static Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x95756a8 0x78e24682e0
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x95818fc 0x78e24683c0
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x9581a08 0x78e24684a0
	static Rotator MakeRotFromZ(out const Vector Z);// 0x9581f44 0x78e2468580
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x9581b14 0x78e2468660
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x9581c20 0x78e2468740
	static Rotator MakeRotFromY(out const Vector Y);// 0x9582004 0x78e2468820
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x9581d2c 0x78e2468900
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x9581e38 0x78e24689e0
	static Rotator MakeRotFromX(out const Vector X);// 0x95820c4 0x78e2468ac0
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x9582184 0x78e2468ba0
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x95817b8 0x78e2468c80
	static Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x956fa64 0x78e2468d60
	static RandomStream MakeRandomStream(int InitialSeed);// 0x9572734 0x78e2468e40
	static QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x95737c4 0x78e2468f20
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x958f1ec 0x78e2469000
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x95777a0 0x78e2465720
	static FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x957351c 0x78e2465800
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x957753c 0x78e24658e0
	static LinearColor MakeColor(float R, float G, float B, float A);// 0x9579f70 0x78e24659c0
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x95727dc 0x78e2465aa0
	static Box MakeBox(Vector Min, Vector Max);// 0x95728c4 0x78e2465b80
	static float Loge(float A);// 0x9591da8 0x78e2465c60
	static float Log(float A, float Base);// 0x9591e50 0x78e2465d40
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x956c8b8 0x78e2465e20
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x956caf0 0x78e2465f00
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x95780d0 0x78e2465fe0
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x9578210 0x78e24660c0
	static LinearColor LinearColor_Yellow();// 0x957a118 0x78e24661a0
	static LinearColor LinearColor_White();// 0x957a1f0 0x78e2466280
	static LinearColor LinearColor_Transparent();// 0x957a0f4 0x78e2466360
	static Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x9578c88 0x78e2466440
	static LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x9578724 0x78e2466520
	static void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x957961c 0x78e2466600
	static void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x9579ad4 0x78e24666e0
	static void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x957956c 0x78e24667c0
	static void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x9579804 0x78e24668a0
	static void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x957970c 0x78e2466980
	static void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x95798fc 0x78e2466a60
	static void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x9579c9c 0x78e2466b40
	static LinearColor LinearColor_Red();// 0x957a184 0x78e2466c20
	static Color LinearColor_QuantizeRound(LinearColor InColor);// 0x9578a30 0x78e2466d00
	static Color LinearColor_Quantize(LinearColor InColor);// 0x9578adc 0x78e2466de0
	static bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x9577f54 0x78e2466ec0
	static LinearColor LinearColor_Green();// 0x957a160 0x78e2466fa0
	static LinearColor LinearColor_Gray();// 0x957a1cc 0x78e2467080
	static float LinearColor_GetMin(LinearColor InColor);// 0x95784d0 0x78e2467160
	static float LinearColor_GetMax(LinearColor InColor);// 0x957858c 0x78e2467240
	static float LinearColor_GetLuminance(LinearColor InColor);// 0x9578648 0x78e2467320
	static float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x9578818 0x78e2463a40
	static LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x9578934 0x78e2463b20
	static LinearColor LinearColor_Blue();// 0x957a13c 0x78e2463c00
	static LinearColor LinearColor_Black();// 0x957a1a8 0x78e2463ce0
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x95897b4 0x78e2463dc0
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x9574730 0x78e2463ea0
	static bool LessEqual_IntInt(int A, int B);// 0x9595bec 0x78e2463f80
	static bool LessEqual_Int64Int64(int64 A, int64 B);// 0x95944a8 0x78e2464060
	static bool LessEqual_FloatFloat(float A, float B);// 0x9592d90 0x78e2464140
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x9576958 0x78e2464220
	static bool LessEqual_ByteByte(byte A, byte B);// 0x959668c 0x78e2464300
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x9574818 0x78e24643e0
	static bool Less_IntInt(int A, int B);// 0x9595dd4 0x78e24644c0
	static bool Less_Int64Int64(int64 A, int64 B);// 0x9594690 0x78e24645a0
	static bool Less_FloatFloat(float A, float B);// 0x9592f78 0x78e2464680
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x9576a40 0x78e2464760
	static bool Less_ByteByte(byte A, byte B);// 0x959687c 0x78e2464840
	static float Lerp(float A, float B, float Alpha);// 0x95903b4 0x78e2464920
	static bool IsZero2D(out const Vector2D A);// 0x958c704 0x78e2464a00
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x956ced0 0x78e2464ae0
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x956d034 0x78e2464bc0
	static bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x958c7c8 0x78e2464ca0
	static bool IsMorning(DateTime A);// 0x9575f04 0x78e2464d80
	static bool IsLeapYear(int Year);// 0x9575ca4 0x78e2464e60
	static bool IsAfternoon(DateTime A);// 0x9575fec 0x78e2464f40
	static Transform InvertTransform(out const Transform T);// 0x956f738 0x78e2465020
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x956fbc0 0x78e2465100
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x956fe84 0x78e24651e0
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x956fce4 0x78e24652c0
	static IntPoint IntPoint_Zero();// 0x958f088 0x78e24653a0
	static IntPoint IntPoint_Up();// 0x958f050 0x78e2465480
	static IntPoint IntPoint_Right();// 0x958f014 0x78e2465560
	static IntPoint IntPoint_One();// 0x958f06c 0x78e2465640
	static IntPoint IntPoint_Left();// 0x958f034 0x78e2461d60
	static IntPoint IntPoint_Down();// 0x958eff4 0x78e2461e40
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x9595734 0x78e2461f20
	static bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x9593ff0 0x78e2462000
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0x9592794 0x78e24620e0
	static float Hypotenuse(float Width, float Height);// 0x95926a4 0x78e24621c0
	static LinearColor HSVToRGBLinear(LinearColor HSV);// 0x9579180 0x78e24622a0
	static void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x9579230 0x78e2462380
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0x957932c 0x78e2462460
	static float GridSnap_Float(float Location, float GridSize);// 0x9592598 0x78e2462540
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x95899fc 0x78e2462620
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x9574900 0x78e2462700
	static bool GreaterEqual_IntInt(int A, int B);// 0x9595af8 0x78e24627e0
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x95943b4 0x78e24628c0
	static bool GreaterEqual_FloatFloat(float A, float B);// 0x9592c9c 0x78e24629a0
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x9576b28 0x78e2462a80
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0x9596594 0x78e2462b60
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x95749e8 0x78e2462c40
	static bool Greater_IntInt(int A, int B);// 0x9595ce0 0x78e2462d20
	static bool Greater_Int64Int64(int64 A, int64 B);// 0x959459c 0x78e2462e00
	static bool Greater_FloatFloat(float A, float B);// 0x9592e84 0x78e2462ee0
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x9576c10 0x78e2462fc0
	static bool Greater_ByteByte(byte A, byte B);// 0x9596784 0x78e24630a0
	static int GetYear(DateTime A);// 0x95760d4 0x78e2463180
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x9588298 0x78e2463260
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x9588020 0x78e2463340
	static Vector GetUpVector(Rotator InRot);// 0x9580954 0x78e2463420
	static float GetTotalSeconds(Timespan A);// 0x9573ea4 0x78e2463500
	static float GetTotalMinutes(Timespan A);// 0x9573f5c 0x78e24635e0
	static float GetTotalMilliseconds(Timespan A);// 0x9574014 0x78e24636c0
	static float GetTotalHours(Timespan A);// 0x95740cc 0x78e24637a0
	static float GetTotalDays(Timespan A);// 0x9574180 0x78e2463880
	static Timespan GetTimeOfDay(DateTime A);// 0x9576180 0x78e2463960
	static float GetTAU();// 0x9591aa4 0x78e2460080
	static void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x956cce8 0x78e2460160
	static int GetSeconds(Timespan A);// 0x9574234 0x78e2460240
	static int GetSecond(DateTime A);// 0x9576250 0x78e2460320
	static Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x958c8dc 0x78e2460400
	static Vector GetRightVector(Rotator InRot);// 0x9580a00 0x78e24604e0
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x95862c8 0x78e24605c0
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x9585040 0x78e24606a0
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x9584ee4 0x78e2460780
	static float GetPI();// 0x9591ac4 0x78e2460860
	static int GetMonth(DateTime A);// 0x9576334 0x78e2460940
	static int GetMinutes(Timespan A);// 0x9574318 0x78e2460a20
	static int GetMinute(DateTime A);// 0x95763e0 0x78e2460b00
	static float GetMinElement(Vector A);// 0x95890a4 0x78e2460be0
	static float GetMin2D(Vector2D A);// 0x958cb4c 0x78e2460cc0
	static int GetMilliseconds(Timespan A);// 0x95743f8 0x78e2460da0
	static int GetMillisecond(DateTime A);// 0x95764c0 0x78e2460e80
	static float GetMaxElement(Vector A);// 0x9588ff0 0x78e2460f60
	static float GetMax2D(Vector2D A);// 0x958cbf4 0x78e2461040
	static int GetHours(Timespan A);// 0x95744e4 0x78e2461120
	static int GetHour12(DateTime A);// 0x95765a4 0x78e2461200
	static int GetHour(DateTime A);// 0x9576650 0x78e24612e0
	static Vector GetForwardVector(Rotator InRot);// 0x9580aac 0x78e24613c0
	static Timespan GetDuration(Timespan A);// 0x95745c4 0x78e24614a0
	static Vector GetDirectionUnitVector(Vector From, Vector To);// 0x95883e0 0x78e2461580
	static int GetDays(Timespan A);// 0x957466c 0x78e2461660
	static int GetDayOfYear(DateTime A);// 0x9576730 0x78e2461740
	static int GetDay(DateTime A);// 0x95767dc 0x78e2461820
	static DateTime GetDate(DateTime A);// 0x9576888 0x78e2461900
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x95880e4 0x78e24619e0
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x9580610 0x78e2461ac0
	static float GetAbsMax2D(Vector2D A);// 0x958cc9c 0x78e2461ba0
	static Vector2D GetAbs2D(Vector2D A);// 0x958cd4c 0x78e2461c80
	static float FWrap(float Value, float Min, float Max);// 0x9590df8 0x78e243e780
	static IntVector FTruncVector(out const Vector InVector);// 0x9587f60 0x78e243e860
	static int64 FTrunc64(float A);// 0x958fce8 0x78e243e940
	static int FTrunc(float A);// 0x958ff94 0x78e243ea20
	static Timespan FromSeconds(float Seconds);// 0x9573b5c 0x78e243eb00
	static Timespan FromMinutes(float Minutes);// 0x9573c04 0x78e243ebe0
	static Timespan FromMilliseconds(float Milliseconds);// 0x9573cac 0x78e243ecc0
	static Timespan FromHours(float Hours);// 0x9573d54 0x78e243eda0
	static Timespan FromDays(float Days);// 0x9573dfc 0x78e243ee80
	static float Fraction(float A);// 0x959324c 0x78e243ef60
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0x958faf8 0x78e243f040
	static float FMin(float A, float B);// 0x9591194 0x78e243f120
	static float FMax(float A, float B);// 0x95910a0 0x78e243f200
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x956e650 0x78e243f2e0
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x958f0b0 0x78e243f3c0
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x956ebf8 0x78e243f4a0
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x956ed7c 0x78e243f580
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0x958f328 0x78e243f660
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x9585440 0x78e243f740
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x958168c 0x78e243f820
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x95852e0 0x78e243f900
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x958519c 0x78e243f9e0
	static int64 FFloor64(float A);// 0x958fd90 0x78e243fac0
	static int FFloor(float A);// 0x959003c 0x78e243fba0
	static float FClamp(float Value, float Min, float Max);// 0x9590f58 0x78e243fc80
	static int64 FCeil64(float A);// 0x958fc40 0x78e243fd60
	static int FCeil(float A);// 0x958feec 0x78e243fe40
	static float Exp(float A);// 0x9591f40 0x78e243ff20
	static bool EqualExactly_VectorVector(Vector A, Vector B);// 0x958a0fc 0x78e243caa0
	static bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x9583d40 0x78e243cb80
	static bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958d8a0 0x78e243cc60
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x9589f94 0x78e243cd40
	static bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x9583b94 0x78e243ce20
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x958d74c 0x78e243cf00
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x9570e44 0x78e243cfe0
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x9574bb8 0x78e243d0c0
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x9581130 0x78e243d1a0
	static bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x957c544 0x78e243d280
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x95718a0 0x78e243d360
	static bool EqualEqual_NameName(FName A, FName B);// 0x95713dc 0x78e243d440
	static bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x957f7dc 0x78e243d520
	static bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577e34 0x78e243d600
	static bool EqualEqual_IntInt(int A, int B);// 0x9595a04 0x78e243d6e0
	static bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x95942c0 0x78e243d7c0
	static bool EqualEqual_FloatFloat(float A, float B);// 0x9592ba8 0x78e243d8a0
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x9576de0 0x78e243d980
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0x95716b8 0x78e243da60
	static bool EqualEqual_ByteByte(byte A, byte B);// 0x959649c 0x78e243db40
	static bool EqualEqual_BoolBool(bool A, bool B);// 0x959760c 0x78e243dc20
	static bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958e674 0x78e243dd00
	static float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x9590194 0x78e243dde0
	static Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x956c154 0x78e243dec0
	static Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x956bf7c 0x78e243dfa0
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x956c32c 0x78e243e080
	static float DotProduct2D(Vector2D A, Vector2D B);// 0x958cdf0 0x78e243e160
	static float Dot_VectorVector(Vector A, Vector B);// 0x9589c1c 0x78e243e240
	static Vector Divide_VectorVector(Vector A, Vector B);// 0x958a504 0x78e243e320
	static Vector Divide_VectorInt(Vector A, int B);// 0x958a2bc 0x78e243e400
	static Vector Divide_VectorFloat(Vector A, float B);// 0x958a3e0 0x78e243e4e0
	static Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x9583e94 0x78e243e5c0
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958daac 0x78e243e6a0
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0x958d998 0x78e243adc0
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x9574ca0 0x78e243aea0
	static LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577894 0x78e243af80
	static IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958e884 0x78e243b060
	static IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x958e76c 0x78e243b140
	static int Divide_IntInt(int A, int B);// 0x95961b0 0x78e243b220
	static int64 Divide_Int64Int64(int64 A, int64 B);// 0x9594964 0x78e243b300
	static float Divide_FloatFloat(float A, float B);// 0x9597b2c 0x78e243b3e0
	static byte Divide_ByteByte(byte A, byte B);// 0x9596e54 0x78e243b4c0
	static float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x958cee0 0x78e243b5a0
	static float Distance2D(Vector2D v1, Vector2D v2);// 0x958cfd8 0x78e243b680
	static float DegTan(float A);// 0x959157c 0x78e243b760
	static float DegSin(float A);// 0x9591884 0x78e243b840
	static float DegreesToRadians(float A);// 0x95919f0 0x78e243b920
	static float DegCos(float A);// 0x9591700 0x78e243ba00
	static float DegAtan2(float Y, float X);// 0x95913c4 0x78e243bae0
	static float DegAtan(float A);// 0x95914c4 0x78e243bbc0
	static float DegAsin(float A);// 0x95917b8 0x78e243bca0
	static float DegAcos(float A);// 0x9591634 0x78e243bd80
	static int DaysInYear(int Year);// 0x9575d50 0x78e243be60
	static int DaysInMonth(int Year, int Month);// 0x9575df8 0x78e243bf40
	static DateTime DateTimeMinValue();// 0x9575c64 0x78e243c020
	static DateTime DateTimeMaxValue();// 0x9575c7c 0x78e243c100
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x95758c8 0x78e243c1e0
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x9575a24 0x78e243c2c0
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0x958d0d4 0x78e243c3a0
	static Vector Cross_VectorVector(Vector A, Vector B);// 0x9589b08 0x78e243c480
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x958b7d0 0x78e243c560
	static float Cos(float A);// 0x95922e4 0x78e243c640
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x956f908 0x78e243c720
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0x958b184 0x78e243c800
	static Transform Conv_VectorToTransform(Vector InLocation);// 0x958b224 0x78e243c8e0
	static Rotator Conv_VectorToRotator(Vector InVec);// 0x958b0cc 0x78e243c9c0
	static Quat Conv_VectorToQuaternion(Vector InVec);// 0x958af1c 0x78e24390e0
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x958b300 0x78e24391c0
	static Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x9584474 0x78e24392a0
	static Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x95843b4 0x78e2439380
	static Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0x95842f4 0x78e2439460
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x958e1f0 0x78e2439540
	static IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x958e140 0x78e2439620
	static Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x956ef00 0x78e2439700
	static Vector Conv_RotatorToVector(Rotator InRot);// 0x958089c 0x78e24397e0
	static Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x9580798 0x78e24398c0
	static Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x957fe58 0x78e24399a0
	static Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x957fda4 0x78e2439a80
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x9578d34 0x78e2439b60
	static Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x9578b88 0x78e2439c40
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x9572a6c 0x78e2439d20
	static IntVector Conv_IntToIntVector(int inInt);// 0x9572f40 0x78e2439e00
	static int64 Conv_IntToInt64(int inInt);// 0x95731d4 0x78e2439ee0
	static float Conv_IntToFloat(int inInt);// 0x9573278 0x78e2439fc0
	static byte Conv_IntToByte(int inInt);// 0x9573130 0x78e243a0a0
	static bool Conv_IntToBool(int inInt);// 0x9572e94 0x78e243a180
	static Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x958ef4c 0x78e243a260
	static int Conv_Int64ToInt(int64 inInt);// 0x957308c 0x78e243a340
	static byte Conv_Int64ToByte(int64 inInt);// 0x9572fe8 0x78e243a420
	static Vector Conv_FloatToVector(float InFloat);// 0x95729c4 0x78e243a500
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0x95794c0 0x78e243a5e0
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0x9572b30 0x78e243a6c0
	static int Conv_ByteToInt(byte InByte);// 0x9572be4 0x78e243a7a0
	static float Conv_ByteToFloat(byte InByte);// 0x9573320 0x78e243a880
	static int Conv_BoolToInt(bool InBool);// 0x9572de8 0x78e243a960
	static float Conv_BoolToFloat(bool InBool);// 0x9572d34 0x78e243aa40
	static byte Conv_BoolToByte(bool InBool);// 0x9572c88 0x78e243ab20
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x95704fc 0x78e243ac00
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0x9580c10 0x78e243ace0
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x95714d0 0x78e2437400
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0x9589574 0x78e24374e0
	static int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x9593678 0x78e24375c0
	static float ClampAxis(float Angle);// 0x957ffc0 0x78e24376a0
	static Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0x958d1c4 0x78e2437780
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0x9591288 0x78e2437860
	static int Clamp(int Value, int Min, int Max);// 0x9594dc4 0x78e2437940
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x9578348 0x78e2437a20
	static void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0x9584538 0x78e2437b00
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0x958e2e0 0x78e2437be0
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0x958b3bc 0x78e2437cc0
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x9570fa8 0x78e2437da0
	static void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x9575060 0x78e2437e80
	static void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x957529c 0x78e2437f60
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x9581360 0x78e2438040
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x95814f4 0x78e2438120
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x9572638 0x78e2438200
	static void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x957360c 0x78e24382e0
	static void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x95733c8 0x78e24383c0
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x9577258 0x78e24384a0
	static void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x9579d80 0x78e2438580
	static bool BooleanXOR(bool A, bool B);// 0x959713c 0x78e2438660
	static bool BooleanOR(bool A, bool B);// 0x9597234 0x78e2438740
	static bool BooleanNOR(bool A, bool B);// 0x959704c 0x78e2438820
	static bool BooleanNAND(bool A, bool B);// 0x9597324 0x78e2438900
	static bool BooleanAND(bool A, bool B);// 0x959741c 0x78e24389e0
	static byte BMin(byte A, byte B);// 0x9596a6c 0x78e2438ac0
	static byte BMax(byte A, byte B);// 0x9596974 0x78e2438ba0
	static float Atan2(float Y, float X);// 0x9591fe8 0x78e2438c80
	static float Atan(float A);// 0x95920d8 0x78e2438d60
	static float Asin(float A);// 0x959238c 0x78e2438e40
	static int And_IntInt(int A, int B);// 0x9595644 0x78e2438f20
	static int64 And_Int64Int64(int64 A, int64 B);// 0x9593f00 0x78e2439000
	static Vector Add_VectorVector(Vector A, Vector B);// 0x958ae24 0x78e2435720
	static Vector Add_VectorInt(Vector A, int B);// 0x958ac20 0x78e2435800
	static Vector Add_VectorFloat(Vector A, float B);// 0x958ad24 0x78e24358e0
	static Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x95841dc 0x78e24359c0
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x958e05c 0x78e2435aa0
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0x958df68 0x78e2435b80
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x9574f7c 0x78e2435c60
	static Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x957c250 0x78e2435d40
	static Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x957fa30 0x78e2435e20
	static LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x9577c30 0x78e2435f00
	static IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x958ee5c 0x78e2435fe0
	static IntPoint Add_IntPointInt(IntPoint A, int B);// 0x958ed68 0x78e24360c0
	static int Add_IntInt(int A, int B);// 0x9595fb8 0x78e24361a0
	static int64 Add_Int64Int64(int64 A, int64 B);// 0x9594874 0x78e2436280
	static float Add_FloatFloat(float A, float B);// 0x959315c 0x78e2436360
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x9577174 0x78e2436440
	static DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x9576fac 0x78e2436520
	static byte Add_ByteByte(byte A, byte B);// 0x9596c58 0x78e2436600
	static float Acos(float A);// 0x9592228 0x78e24366e0
	static int64 Abs_Int64(int64 A);// 0x95935cc 0x78e24367c0
	static int Abs_Int(int A);// 0x9594b58 0x78e24368a0
	static float Abs(float A);// 0x95924f0 0x78e2436980

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	static void MarkBit(out int Data, int Index);// 0x95a6400 0x78e249bf40
	static bool HasUnmarkedBit(int Data, int NumBits);// 0x95a6178 0x78e249c020
	static bool HasMarkedBit(int Data, int NumBits);// 0x95a6084 0x78e249c100
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x95a5958 0x78e249c1e0
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x95a5ef8 0x78e249c2c0
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x95a5dbc 0x78e249c3a0
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x95a5c80 0x78e249c480
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x95a5864 0x78e249c560
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x95a5a4c 0x78e249c640
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x95a5b8c 0x78e249c720
	static void ClearBit(out int Data, int Index);// 0x95a6310 0x78e249c800
	static void ClearAllBits(out int Data);// 0x95a626c 0x78e249c8e0
	static bool BitIsMarked(int Data, int Index);// 0x95a64f0 0x78e249c9c0

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x95a6f70 0x78e249e6a0
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x95a8634 0x78e249adc0
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x95a894c 0x78e249aea0
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x95a806c 0x78e249af80
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x95a7d5c 0x78e249b060
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x95a7ee4 0x78e249b140
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x95a81f0 0x78e249b220
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x95a7418 0x78e249b300
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x95a7ac8 0x78e249b3e0
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x95a79bc 0x78e249b4c0
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x95a7bc8 0x78e249b5a0
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x95a8374 0x78e249b680
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x95a76f0 0x78e249b760
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x95a8820 0x78e249b840
	static TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x95a89e4 0x78e249b920
	static TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x95a8c54 0x78e249ba00
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x95a8ec4 0x78e249bae0
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x95a8508 0x78e249bbc0
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x95a90e8 0x78e249bca0
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x95a70ac 0x78e249bd80
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x95a77e0 0x78e249be60

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8] 0x7875ac8f80

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4] 0x78e25d6280
	int SizeY;//[Offset: 0x184, Size: 0x4] 0x78e25d6300
	int SizeZ;//[Offset: 0x188, Size: 0x4] 0x78e25d4280
	LinearColor ClearColor;//[Offset: 0x18c, Size: 0x10] 0x78e25d4300
	byte OverrideFormat;//[Offset: 0x19c, Size: 0x1] 0x78e25d4380
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d, Size: 0x1] 0x78e25d4400
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19d, Size: 0x1] 0x78e25d4480

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4] 0x78e25d4780
	int SizeY;//[Offset: 0x184, Size: 0x4] 0x78e25d4800
	int Slices;//[Offset: 0x188, Size: 0x4] 0x78e25d4880
	LinearColor ClearColor;//[Offset: 0x18c, Size: 0x10] 0x78e25d4900
	byte OverrideFormat;//[Offset: 0x19c, Size: 0x1] 0x78e25d4980
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d, Size: 0x1] 0x78e25d4a00
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19d, Size: 0x1] 0x78e25d4a80

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	static FString TrimTrailing(FString SourceString);// 0x95aaca4 0x78e24b1820
	static FString Trim(FString SourceString);// 0x95aad98 0x78e24b1900
	static FString ToUpper(FString SourceString);// 0x95ab6d4 0x78e24b19e0
	static FString ToLower(FString SourceString);// 0x95ab5e0 0x78e24b1ac0
	static FString TimeSecondsToString(float InSeconds);// 0x95a9cc4 0x78e24b1ba0
	static bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x95ab144 0x78e24b1c80
	static bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x95aa454 0x78e249e780
	static FString RightPad(FString SourceString, int ChCount);// 0x95ab358 0x78e249e860
	static FString RightChop(FString SourceString, int Count);// 0x95a9f44 0x78e249e940
	static FString Right(FString SourceString, int Count);// 0x95aa088 0x78e249ea20
	static FString Reverse(FString SourceString);// 0x95aaa64 0x78e249eb00
	static int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x95aa6bc 0x78e249ebe0
	static FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0x95aa870 0x78e249ecc0
	static FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x95abaa8 0x78e249eda0
	static bool NotEqual_StrStr(FString A, FString B);// 0x95ac558 0x78e249ee80
	static bool NotEqual_StriStri(FString A, FString B);// 0x95ac448 0x78e249ef60
	static FString Mid(FString SourceString, int Start, int Count);// 0x95a9db8 0x78e249f040
	static bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x95aae8c 0x78e249f120
	static int Len(FString S);// 0x95ac394 0x78e249f200
	static FString LeftPad(FString SourceString, int ChCount);// 0x95ab49c 0x78e249f2e0
	static FString LeftChop(FString SourceString, int Count);// 0x95aa1cc 0x78e249f3c0
	static FString Left(FString SourceString, int Count);// 0x95aa310 0x78e249f4a0
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x95ab924 0x78e249f580
	static bool IsNumeric(FString SourceString);// 0x95ab2a0 0x78e249f660
	static bool IsEmpty(FString inString);// 0x95ac2dc 0x78e249f740
	static FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x95ac150 0x78e249f820
	static int GetCharacterAsNumber(FString SourceString, int Index);// 0x95abcb4 0x78e249f900
	static FString[] GetCharacterArrayFromString(FString SourceString);// 0x95ab7c8 0x78e249f9e0
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x95abf60 0x78e249fac0
	static bool EqualEqual_StrStr(FString A, FString B);// 0x95ac778 0x78e249fba0
	static bool EqualEqual_StriStri(FString A, FString B);// 0x95ac668 0x78e249fc80
	static bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x95aafe8 0x78e249fd60
	static int CullArray(FString SourceString, out FString[] inArray);// 0x95aab58 0x78e249fe40
	static FString Conv_VectorToString(Vector InVec);// 0x95aed2c 0x78e249ff20
	static FString Conv_Vector2dToString(Vector2D InVec);// 0x95aea58 0x78e249caa0
	static FString Conv_TransformToString(out const Transform InTrans);// 0x95ae83c 0x78e249cb80
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x95adfb0 0x78e249cc60
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0x95ae0fc 0x78e249cd40
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x95ade64 0x78e249ce20
	static FName Conv_StringToName(FString inString);// 0x95ae3b0 0x78e249cf00
	static int Conv_StringToInt(FString inString);// 0x95ae2fc 0x78e249cfe0
	static float Conv_StringToFloat(FString inString);// 0x95ae248 0x78e249d0c0
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x95add18 0x78e249d1a0
	static FString Conv_RotatorToString(Rotator InRot);// 0x95ae964 0x78e249d280
	static FString Conv_ObjectToString(Object* InObj);// 0x95ae748 0x78e249d360
	static FString Conv_NameToString(FName InName);// 0x95ae560 0x78e249d440
	static FString Conv_MatrixToString(out const Matrix InMatrix);// 0x95ae464 0x78e249d520
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0x95aec38 0x78e249d600
	static FString Conv_IntToString(int inInt);// 0x95af010 0x78e249d6e0
	static FString Conv_IntPointToString(IntPoint InIntPoint);// 0x95aeb48 0x78e249d7c0
	static FString Conv_FloatToString(float InFloat);// 0x95af104 0x78e249d8a0
	static FString Conv_ColorToString(LinearColor InColor);// 0x95ae654 0x78e249d980
	static FString Conv_ByteToString(byte InByte);// 0x95aef1c 0x78e249da60
	static FString Conv_BoolToString(bool InBool);// 0x95aee20 0x78e249db40
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x95abdb4 0x78e249dc20
	static FString Concat_StrStr(FString A, FString B);// 0x95ac888 0x78e249dd00
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x95ad18c 0x78e249dde0
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x95ad560 0x78e249dec0
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x95acfa0 0x78e249dfa0
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x95acdb0 0x78e249e080
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x95ac9d4 0x78e249e160
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x95ad374 0x78e249e240
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x95ad938 0x78e249e320
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0x95adb28 0x78e249e400
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x95acbc4 0x78e249e4e0
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x95ad74c 0x78e249e5c0

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsRegisteredTableId(const FName TableId);// 0x95b1aec 0x78e24b1120
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x95b19e8 0x78e24b1200
	static FString GetTableNamespace(const FName TableId);// 0x95b18f4 0x78e24b12e0
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x95b17b4 0x78e24b13c0
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x95b1624 0x78e24b14a0
	static FName[] GetRegisteredStringTables();// 0x95b1574 0x78e24b1580
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x95b12d8 0x78e24b1660
	static FString[] GetKeysFromStringTable(const FName TableId);// 0x95b1418 0x78e24b1740

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0x95b45f8 0x7875faa5e0
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x95b2acc 0x7875faa6c0
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x95b2b7c 0x7875faa7a0
	static void TransactObject(Object* Object);// 0x95b3be8 0x7875faa880
	static void StackTrace();// 0x95c8e54 0x7875faa960
	static bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bc518 0x7875faaa40
	static bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b9ff8 0x7875faab20
	static bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bea1c 0x7875faac00
	static bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bc084 0x7875faace0
	static bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b9b74 0x7875fa7400
	static bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95be598 0x7875fa74e0
	static bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x95c0764 0x7875fa75c0
	static bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x95c0a14 0x7875fa76a0
	static void SnapshotObject(Object* Object);// 0x95b3b50 0x7875fa7780
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x95b51c4 0x7875fa7860
	static void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0x95b512c 0x7875fa7940
	static void ShowInterstitialAd();// 0x95b5268 0x7875fa7a20
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x95b53e0 0x7875fa7b00
	static void SetWindowTitle(out const FText Title);// 0x95c4ca8 0x7875fa7be0
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x95b4f08 0x7875fa7cc0
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x95c12f8 0x7875fa7da0
	static void SetUserActivity(out const UserActivity UserActivity);// 0x95b4544 0x7875fa7e80
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x95c0e14 0x7875fa7f60
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x95c1428 0x7875fa8040
	static void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0x95b49f8 0x7875fa8120
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x95c8d30 0x7875fa8200
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x95c15b8 0x7875fa82e0
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x95c183c 0x7875fa83c0
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x95c16f0 0x7875fa84a0
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x95c11c8 0x7875fa8580
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x95c1d24 0x7875fa8660
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x95c1988 0x7875fa8740
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x95c1098 0x7875fa8820
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x95c2308 0x7875fa8900
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0x95c1ac0 0x7875fa89e0
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0x95c21dc 0x7875fa8ac0
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0x95b4e30 0x7875fa8ba0
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0x95c1f84 0x7875fa8c80
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0x95c0cc4 0x7875fa8d60
	static void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0x95c0f68 0x7875fa8e40
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x95c8c0c 0x7875fa8f20
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x95c1bf8 0x7875fa9000
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x95c20b0 0x7875fa5720
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x95c1e50 0x7875fa5800
	static void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x95c4554 0x7875fa58e0
	static void ResetGamepadAssignmentToController(int ControllerId);// 0x95b4d84 0x7875fa59c0
	static void ResetGamepadAssignments();// 0x95b4e1c 0x7875fa5aa0
	static void RegisterForRemoteNotifications();// 0x95b460c 0x7875fa5b80
	static void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0x95c47cc 0x7875fa5c60
	static void PrintWarning(FString inString);// 0x95c4db0 0x7875fa5d40
	static void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x95c4e54 0x7875fa5e20
	static void PrintString(const Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x95c5144 0x7875fa5f00
	static bool ParseParamValue(FString inString, FString InParam, out FString OutValue);// 0x95b3fa0 0x7875fa5fe0
	static bool ParseParam(FString inString, FString InParam);// 0x95b4114 0x7875fa60c0
	static void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0x95b4224 0x7875fa61a0
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x6d94ba8 0x7875fa3a40
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x6d94ba8 0x7875fa7160
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x95c6864 0x7875fa6280
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x95c62d8 0x7875fa6360
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x95b2c14 0x7875fa6440
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x95b2f9c 0x7875fa6520
	static FString NormalizeFilename(FString InFilename);// 0x95c7d08 0x7875fa6600
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x95c4254 0x7875fa66e0
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x95c7330 0x7875fa67c0
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0x95c6f6c 0x7875fa68a0
	static FText MakeLiteralText(FText Value);// 0x95c5370 0x7875fa6980
	static FString MakeLiteralString(FString Value);// 0x95c5564 0x7875fa6a60
	static FName MakeLiteralName(FName Value);// 0x95c5720 0x7875fa6b40
	static int MakeLiteralInt(int Value);// 0x95c5914 0x7875fa6c20
	static float MakeLiteralFloat(float Value);// 0x95c5870 0x7875fa6d00
	static byte MakeLiteralByte(byte Value);// 0x95c567c 0x7875fa6de0
	static bool MakeLiteralBool(bool Value);// 0x95c57c4 0x7875fa6ec0
	static void LoadInterstitialAd(int AdIdIndex);// 0x95b52ec 0x7875fa6fa0
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0x95c61b4 0x7875fa7080
	static void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x95c59b8 0x7875fa7240
	static Object* LoadAsset_Blocking(Object* Asset);// 0x95c6740 0x7875fa7320
	static void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x95c5bc0 0x7875fa3b20
	static bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bcdf8 0x7875fa3c00
	static bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95ba8b8 0x7875fa3ce0
	static bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bf2d0 0x7875fa3dc0
	static bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bc9b0 0x7875fa3ea0
	static bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95ba480 0x7875fa3f80
	static bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95beea4 0x7875fa4060
	static void LaunchURL(FString URL);// 0x95b5594 0x7875fa4140
	static void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c35e8 0x7875fa4220
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0x95c3e7c 0x7875fa4300
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x95c2ae4 0x7875fa43e0
	static bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c330c 0x7875fa44c0
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0x95c3c48 0x7875fa45a0
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0x95c26dc 0x7875fa4680
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x95c4074 0x7875fa4760
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x95c2eb0 0x7875fa4840
	static void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c36c8 0x7875fa4920
	static void K2_PauseTimerDelegate(delegate Delegate);// 0x95c3f24 0x7875fa4a00
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0x95c2c28 0x7875fa4ae0
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x95c3a2c 0x7875fa4bc0
	static bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c3400 0x7875fa4ca0
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x95c3d04 0x7875fa4d80
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x95c2834 0x7875fa4e60
	static bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c34f4 0x7875fa4f40
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x95c3dc0 0x7875fa5020
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x95c298c 0x7875fa5100
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x95c3978 0x7875fa51e0
	static float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c312c 0x7875fa52c0
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x95c3ad8 0x7875fa53a0
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x95c2434 0x7875fa5480
	static float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c321c 0x7875fa5560
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x95c3b90 0x7875fa5640
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x95c2588 0x7875fa1d60
	static void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x95c3898 0x7875fa1e40
	static void K2_ClearTimerDelegate(delegate Delegate);// 0x95c3fcc 0x7875fa1f20
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0x95c2d6c 0x7875fa2000
	static void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0x95c37a8 0x7875fa20e0
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x95c6bf8 0x7875fa21c0
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x95c666c 0x7875fa22a0
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x95b2ef0 0x7875fa2380
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x95b3280 0x7875fa2460
	static bool IsValidClass(class Object Class);// 0x95c88c0 0x7875fa2540
	static bool IsValid(const Object* Object);// 0x95c89ac 0x7875fa2620
	static bool IsUnattended();// 0x95b3f68 0x7875fa2700
	static bool IsStandalone(const Object* WorldContextObject);// 0x95c7724 0x7875fa27e0
	static bool IsSplitScreen(const Object* WorldContextObject);// 0x95c7678 0x7875fa28c0
	static bool IsServer(const Object* WorldContextObject);// 0x95c787c 0x7875fa29a0
	static bool IsScreensaverEnabled();// 0x95b5048 0x7875fa2a80
	static bool IsPackagedForDistribution();// 0x95c7640 0x7875fa2b60
	static bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0x95b5080 0x7875fa2c40
	static bool IsInterstitialAdRequested();// 0x95b527c 0x7875fa2d20
	static bool IsInterstitialAdAvailable();// 0x95b52b4 0x7875fa2e00
	static bool IsDedicatedServer(const Object* WorldContextObject);// 0x95c77d0 0x7875fa2ee0
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0x95b4cd8 0x7875fa2fc0
	static void HideAdBanner();// 0x95b5398 0x7875fa30a0
	static bool GetVolumeButtonsHandledBySystem();// 0x95b4ed0 0x7875fa3180
	static FString GetUniqueDeviceId();// 0x95c7590 0x7875fa3260
	static FString GetSystemPath(const Object* Object);// 0x95c85e4 0x7875fa3340
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x95b5764 0x7875fa3420
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x95b38e0 0x7875fa3500
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x95b37c0 0x7875fa35e0
	static int GetRenderingMaterialQualityLevel();// 0x95b5828 0x7875fa36c0
	static int GetRenderingDetailMode();// 0x95b585c 0x7875fa37a0
	static FString GetProjectSavedDirectory();// 0x95c7fe4 0x7875fa3880
	static FString GetProjectDirectory();// 0x95c8144 0x7875fa3960
	static FString GetProjectContentDirectory();// 0x95c8094 0x7875fa0080
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x95b2758 0x7875fa0160
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x95b332c 0x7875fa0240
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x95b354c 0x7875fa0320
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x95b3428 0x7875fa0400
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x95b3718 0x7875fa04e0
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x95b3670 0x7875fa05c0
	static FString[] GetPreferredLanguages();// 0x95b48e0 0x7875fa06a0
	static FString GetPlatformUserName();// 0x95c7ba8 0x7875fa0780
	static FString GetPlatformUserDir();// 0x95c7af8 0x7875fa0860
	static FString GetPathName(const Object* Object);// 0x95c86d8 0x7875fa0940
	static Object* GetOuterObject(const Object* Object);// 0x95c8354 0x7875fa0a20
	static FString GetObjectName(const Object* Object);// 0x95c87cc 0x7875fa0b00
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x95b3aa8 0x7875fa0be0
	static int GetMinYResolutionForUI();// 0x95b566c 0x7875fa0cc0
	static int GetMinYResolutionFor3DView();// 0x95b5638 0x7875fa0da0
	static FString GetLocalCurrencySymbol();// 0x95b4620 0x7875fa0e80
	static FString GetLocalCurrencyCode();// 0x95b46d0 0x7875fa0f60
	static float GetGameTimeInSeconds(const Object* WorldContextObject);// 0x95c795c 0x7875fa1040
	static FString GetGamepadControllerName(int ControllerId);// 0x95b4be4 0x7875fa1120
	static Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0x95b4ae4 0x7875fa1200
	static FString GetGameName();// 0x95c81f4 0x7875fa12e0
	static FString GetGameBundleId();// 0x95c7c58 0x7875fa13c0
	static int64 GetFrameCount();// 0x95c7928 0x7875fa14a0
	static FString GetEngineVersion();// 0x95c82a4 0x7875fa1580
	static FString GetDisplayName(const Object* Object);// 0x95c84f0 0x7875fa1660
	static FString GetDeviceId();// 0x95c74e0 0x7875fa1740
	static FString GetDefaultLocale();// 0x95b4780 0x7875fa1820
	static FString GetDefaultLanguage();// 0x95b4830 0x7875fa1900
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x95b2974 0x7875fa19e0
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x95b56a0 0x7875fa1ac0
	static int GetConsoleVariableIntValue(FString VariableName);// 0x95c4a04 0x7875fa1ba0
	static float GetConsoleVariableFloatValue(FString VariableName);// 0x95c4ab8 0x7875fa1c80
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0x95c494c 0x787edde780
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x95b59cc 0x787edde860
	static FString GetCommandLine();// 0x95b4494 0x787edde940
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x95b3a00 0x787eddea20
	static FString GetClassDisplayName(class Object Class);// 0x95c83fc 0x787eddeb00
	static int GetAdIDCount();// 0x95b53ac 0x787eddebe0
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x95b86c8 0x787eddecc0
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x95b5890 0x787eddeda0
	static void ForceCloseAdBanner();// 0x95b5384 0x787eddee80
	static void FlushPersistentDebugLines(const Object* WorldContextObject);// 0x95b6514 0x787eddef60
	static void FlushDebugStrings(const Object* WorldContextObject);// 0x95b67c4 0x787eddf040
	static void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x95c4b6c 0x787eddf120
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x95c69a4 0x787eddf200
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x95c6418 0x787eddf2e0
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x95b2d08 0x787eddf3c0
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x95b3094 0x787eddf4a0
	static int EndTransaction();// 0x95b3d18 0x787eddf580
	static void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x95b685c 0x787eddf660
	static void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x95b7660 0x787eddf740
	static void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x95b7f98 0x787eddf820
	static void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x95b65ac 0x787eddf900
	static void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x95b84b0 0x787eddf9e0
	static void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x95b6328 0x787eddfac0
	static void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x95b5fa0 0x787eddfba0
	static void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x95b5d68 0x787eddfc80
	static void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x95b73b0 0x787eddfd60
	static void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x95b78bc 0x787eddfe40
	static void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x95b6d20 0x787eddff20
	static void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x95b7068 0x787eddcaa0
	static void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x95b815c 0x787eddcb80
	static void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x95b6a74 0x787eddcc60
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x95b61fc 0x787eddcd40
	static void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x95b7ac8 0x787eddce20
	static void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x95b7d34 0x787eddcf00
	static bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0x95c7a04 0x787eddcfe0
	static void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x95c4690 0x787eddd0c0
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x95b5b58 0x787eddd1a0
	static FString ConvertToRelativePath(FString Filename);// 0x95c7ef0 0x787eddd280
	static FString ConvertToAbsolutePath(FString Filename);// 0x95c7dfc 0x787eddd360
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0x95c7090 0x787eddd440
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x95c6ae4 0x787eddd520
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x95c60e4 0x787eddd600
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x95c6558 0x787eddd6e0
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x95c6014 0x787eddd7c0
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0x95c6ccc 0x787eddd8a0
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x95b2dfc 0x787eddd980
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x95b318c 0x787eddda60
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x95c5ef4 0x787edddb40
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0x95c742c 0x787edddc20
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x95c5dc8 0x787edddd00
	static void ControlScreensaver(bool bAllowScreenSaver);// 0x95b4fa8 0x787edddde0
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x95bf70c 0x787edddec0
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x95bf994 0x787edddfa0
	static void CollectGarbage();// 0x95b54c8 0x787edde080
	static bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bb1d0 0x787edde160
	static bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b8cf4 0x787edde240
	static bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bd714 0x787edde320
	static bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bacf4 0x787edde400
	static bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b8828 0x787edde4e0
	static bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bd244 0x787edde5c0
	static bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x95bfc1c 0x787edde6a0
	static bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x95bff14 0x787eddadc0
	static bool CanLaunchURL(FString URL);// 0x95b54dc 0x787eddaea0
	static void CancelTransaction(const int Index);// 0x95b3c80 0x787eddaf80
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x95c71cc 0x787eddb060
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0x95c6e08 0x787eddb140
	static bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bbb98 0x787eddb220
	static bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b969c 0x787eddb300
	static bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95be0bc 0x787eddb3e0
	static bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bb6b0 0x787eddb4c0
	static bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95b91c4 0x787eddb5a0
	static bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x95bdbe4 0x787eddb680
	static bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x95c020c 0x787eddb760
	static bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x95c04b8 0x787eddb840
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0x95b3d4c 0x787eddb920
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x95b5bf0 0x787eddba00

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10] 0x7875fba400

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4] 0x7875fb8900

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875fb7d80

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8] 0x7875f9f800

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10] 0x78780025e0
	float MaxSamples;//[Offset: 0x10, Size: 0x4] 0x787805f800
	float MinValue;//[Offset: 0x14, Size: 0x4] 0x787805f880
	float MaxValue;//[Offset: 0x18, Size: 0x4] 0x787805f900
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787805f980

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	static FText TextTrimTrailing(out const FText InText);// 0x95d20f0 0x78e24b2380
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x95d1f74 0x78e24b2460
	static FText TextTrimPreceding(out const FText InText);// 0x95d226c 0x78e24b2540
	static FText TextToUpper(out const FText InText);// 0x95d23e8 0x78e24b2620
	static FText TextToLower(out const FText InText);// 0x95d2564 0x78e24b2700
	static bool TextIsTransient(out const FText InText);// 0x95d27f4 0x78e24b27e0
	static bool TextIsFromStringTable(out const FText Text);// 0x95cf344 0x78e24b28c0
	static bool TextIsEmpty(out const FText InText);// 0x95d2908 0x78e24b29a0
	static bool TextIsCultureInvariant(out const FText InText);// 0x95d26e0 0x78e24b2a80
	static FText TextFromStringTable(const FName TableId, FString Key);// 0x95cf1d8 0x78e24b2b60
	static bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x95cef9c 0x78e24b2c40
	static FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x95cec34 0x78e24b2d20
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0x95d17ac 0x78e24b2e00
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x95d15ec 0x78e24b2ee0
	static void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x95ceda0 0x78e24b2fc0
	static FText GetEmptyText();// 0x95d1ea4 0x78e24b30a0
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x95cf458 0x78e24b3180
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x95d1cec 0x78e24b3260
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0x95d1b2c 0x78e24b3340
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x95d196c 0x78e24b3420
	static FText Conv_VectorToText(Vector InVec);// 0x95d3338 0x78e24b3500
	static FText Conv_Vector2dToText(Vector2D InVec);// 0x95d3228 0x78e24b35e0
	static FText Conv_TransformToText(out const Transform InTrans);// 0x95d2fcc 0x78e24b36c0
	static FString Conv_TextToString(out const FText InText);// 0x95d2c50 0x78e24b37a0
	static FText Conv_StringToText(FString inString);// 0x95d2b30 0x78e24b3880
	static FText Conv_RotatorToText(Rotator InRot);// 0x95d3114 0x78e24b3960
	static FText Conv_ObjectToText(Object* InObj);// 0x95d2eb8 0x78e24b0080
	static FText Conv_NameToText(FName InName);// 0x95d2a1c 0x78e24b0160
	static FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x95d117c 0x78e24b0240
	static FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x95d0f3c 0x78e24b0320
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x95d0c1c 0x78e24b0400
	static FText Conv_ColorToText(LinearColor InColor);// 0x95d2da4 0x78e24b04e0
	static FText Conv_ByteToText(byte Value);// 0x95d13bc 0x78e24b05c0
	static FText Conv_BoolToText(bool InBool);// 0x95d14d0 0x78e24b06a0
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x95cf904 0x78e24b0780
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x95cfb8c 0x78e24b0860
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x95cfe14 0x78e24b0940
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x95cf7e8 0x78e24b0a20
	static FText AsTime_DateTime(out const DateTime In);// 0x95cfa70 0x78e24b0b00
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x95d009c 0x78e24b0be0
	static FText AsDateTime_DateTime(out const DateTime In);// 0x95cfcf8 0x78e24b0cc0
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0x95cff80 0x78e24b0da0
	static FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x95d0ab0 0x78e24b0e80
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x95d0734 0x78e24b0f60
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x95d03bc 0x78e24b1040

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1] 0x78bfc661e0
	FString NativeCulture;//[Offset: 0x8, Size: 0x10] 0x78a8150180
	FString Namespace;//[Offset: 0x18, Size: 0x10] 0x78a8150200
	FString Key;//[Offset: 0x28, Size: 0x10] 0x78a8150280
	FString NativeString;//[Offset: 0x38, Size: 0x10] 0x78a8150300
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50] 0x78bfc534c0
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78a8150480
	FText CachedText;//[Offset: 0xa0, Size: 0x18] 0x78a8150500

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10] 0x7878052700
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1] 0x7878052780
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18] 0x7878052800
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4] 0x7878052880
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4] 0x7878052900
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1] 0x7878000f60

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78e24c2600
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78e24c2680
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10] 0x78e237cfe0

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8] 0x78759ec220
	int Total;//[Offset: 0x8, Size: 0x4] 0x7875ac8f00

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x220, Size: 0x8] 0x78e24c3980
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78e24c3a00

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78e24c5b80
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78e24c5c00
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x95da168 0x78e24b4bc0
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x95da410 0x78e24b4ca0

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8] 0x78e24c5880
	int[] Surfaces;//[Offset: 0x30, Size: 0x10] 0x78e237f240

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x1a0, Size: 0x10] 0x78e237f1a0

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x220, Size: 0x8] 0x78e24c5780

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x1f8, Size: 0x8] 0x78e24c5700

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18] 0x78e24c5680

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb0, Size: 0x4] 0x78e24c6700
	int ForcedLOD;//[Offset: 0xb4, Size: 0x4] 0x78e24c6780
	ComponentSync[] ComponentsToSync;//[Offset: 0xb8, Size: 0x10] 0x78e237ec00
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xc8, Size: 0x50] 0x7875b1d6c0
	int CurrentLOD;//[Offset: 0x118, Size: 0x4] 0x78e24c6980
	int CurrentNumLODs;//[Offset: 0x11c, Size: 0x4] 0x78e24c6a00
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x120, Size: 0x10] 0x78e237eca0
	PrimitiveComponent*[] SubComponents;//[Offset: 0x130, Size: 0x10] 0x78e237ed40
	FString GetLODSyncDebugText();// 0x95e454c 0x78e24b4840

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875acaa00
	enum SyncOption;//[Offset: 0x8, Size: 0x1] 0x78759ec0e0

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10] 0x78759ebfa0
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10] 0x78759ec040

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10] 0x78e24d8980
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e24d8a00
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78e24d8a80

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50] 0x7875b1c100

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9] 0x7875c8c080

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596ad80
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x787596ae00
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x787596ae80
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x787596af00
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x787596af80
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x787596b000
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x787596b080
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1] 0x787596b100
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1] 0x787800a880

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x448, Size: 0x10] 0x78e237eac0
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x95e968c 0x78e24b4680
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x95e9474 0x78e24b4760

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x7875acc600
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8] 0x7875aca580
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875aca600
	float BaseSizeX;//[Offset: 0x14, Size: 0x4] 0x7875aca680
	float BaseSizeY;//[Offset: 0x18, Size: 0x4] 0x7875aca700
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8] 0x7875aca780

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8] 0x7875b94900
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8] 0x7875b94980
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875b94a00

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cae00

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cac00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cac80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24cad00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24cad80

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8] 0x7875b94880

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0x14] 0x7875b94800

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8] 0x7875b94680
	Guid ExpressionGUID;//[Offset: 0x64, Size: 0x10] 0x7875b94700
	FName Group;//[Offset: 0x74, Size: 0x8] 0x7875b94780

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x7c, Size: 0x4] 0x78e24cab00
	byte Channel;//[Offset: 0x80, Size: 0x1] 0x78e24cab80

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24caa00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24caa80

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ca980

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ca900

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ca880

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ca800

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ca780

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x78e24ca680
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x78e24ca700

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x78e24ca580
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x78e24ca600

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cc600

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x78e24cc580

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cc500

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0x14] 0x78e24cc480

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x18] 0x78e24cc200
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x18] 0x78e24cc280
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0x14] 0x78e24cc300
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1] 0x78e24cc380
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1] 0x78e24cc400

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18] 0x78e24cc180

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x78e24cbe80
	ExpressionInput Height;//[Offset: 0x50, Size: 0x14] 0x78e24cbf00
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0x14] 0x78e24cbf80
	float HeightRatio;//[Offset: 0x78, Size: 0x4] 0x78e24cc000
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4] 0x78e24cc080
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78e24cc100

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cbe00

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78e24cbd00
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78e24cbd80

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10] 0x78e24cbb80
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78e24cbc00
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1] 0x78e24cbc80

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1] 0x78e24cbb00

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cb800
	ExpressionInput Min;//[Offset: 0x50, Size: 0x14] 0x78e24cb880
	ExpressionInput Max;//[Offset: 0x64, Size: 0x14] 0x78e24cb900
	byte ClampMode;//[Offset: 0x78, Size: 0x1] 0x78e24cb980
	float MinDefault;//[Offset: 0x7c, Size: 0x4] 0x78e24cba00
	float MaxDefault;//[Offset: 0x80, Size: 0x4] 0x78e24cba80

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cb780

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8] 0x78e24cb600
	FName ParameterName;//[Offset: 0x48, Size: 0x8] 0x78e24cb680
	Guid ParameterId;//[Offset: 0x50, Size: 0x10] 0x78e24cb700

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4] 0x78e24cd480
	int SizeY;//[Offset: 0x40, Size: 0x4] 0x78e24cd500
	FString Text;//[Offset: 0x48, Size: 0x10] 0x78e24cd580
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10] 0x78e24cd600
	int FontSize;//[Offset: 0x68, Size: 0x4] 0x78e24cd680

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cd200
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e24cd280
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78e24cd300
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78e24cd380
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78e24cd400

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78e24cd180

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4] 0x78e24cd080
	float G;//[Offset: 0x40, Size: 0x4] 0x78e24cd100

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78e24cd000

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10] 0x78e24ccf80

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cce00
	float Bias;//[Offset: 0x50, Size: 0x4] 0x78e24cce80
	float Scale;//[Offset: 0x54, Size: 0x4] 0x78e24ccf00

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24ccd00
	float Period;//[Offset: 0x50, Size: 0x4] 0x78e24ccd80

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24ccc00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24ccc80

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4] 0x78e24cca80
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e24ccb00
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1] 0x78e24ccb80

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8] 0x78e24cc900
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8] 0x78e24cc980
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0x14] 0x78e24cca00

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x40, Size: 0x10] 0x78e24ce680
	byte OutputType;//[Offset: 0x50, Size: 0x1] 0x78e24ce700
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78e24cc680
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10] 0x78e237e840
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10] 0x78e237e8e0
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10] 0x78e237e980
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10] 0x78e237ea20

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8] 0x7875acd200
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14] 0x7875acd280

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8] 0x7875acd300
	byte OutputType;//[Offset: 0x8, Size: 0x1] 0x7875acd380

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10] 0x7875acd400
	FString DefineValue;//[Offset: 0x10, Size: 0x10] 0x7875acd480

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14] 0x78e24ce600

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14] 0x78e24ce580

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0x14] 0x78e24ce400
	float ConstWidth;//[Offset: 0x50, Size: 0x4] 0x78e24ce480
	float ConstHeight;//[Offset: 0x54, Size: 0x4] 0x78e24ce500

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0x14] 0x78e24ce200
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0x14] 0x78e24ce280
	float OpacityDefault;//[Offset: 0x64, Size: 0x4] 0x78e24ce300
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4] 0x78e24ce380

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1] 0x78e24ce100
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0x14] 0x78e24ce180

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0x14] 0x78e24ce080

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cdf00
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0x14] 0x78e24cdf80
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10] 0x78e24ce000

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cde00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cde80

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x78e24cdd80

--------------------------------
Class: MaterialExpressionDistanceFieldsRenderingSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14] 0x78e24cdc80
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14] 0x78e24cdd00

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x78e24cdc00

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cda00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cda80
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24cdb00
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24cdb80

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cd900
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cd980

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10] 0x78e237e7a0
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10] 0x78e24cd800
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4] 0x78e24cd880

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24cd700

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cf780

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cf680
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cf700

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8] 0x78e24cf580
	int FontTexturePage;//[Offset: 0x48, Size: 0x4] 0x78e24cf600

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8] 0x78e24cf400
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10] 0x78e24cf480
	FName Group;//[Offset: 0x64, Size: 0x8] 0x78e24cf500

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24cf380

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0x14] 0x78e24cf100
	float Exponent;//[Offset: 0x50, Size: 0x4] 0x78e24cf180
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0x14] 0x78e24cf200
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4] 0x78e24cf280
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0x14] 0x78e24cf300

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0x14] 0x78e24cec80
	FName InputName;//[Offset: 0x50, Size: 0x8] 0x78e24ced00
	FString Description;//[Offset: 0x58, Size: 0x10] 0x78e24ced80
	Guid ID;//[Offset: 0x68, Size: 0x10] 0x78e24cee00
	byte InputType;//[Offset: 0x78, Size: 0x1] 0x78e24cee80
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x10] 0x78e24cef00
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78e24cef80
	int SortPriority;//[Offset: 0x94, Size: 0x4] 0x78e24cf000
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1] 0x78e24cf080

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8] 0x78e24ce980
	FString Description;//[Offset: 0x48, Size: 0x10] 0x78e24cea00
	int SortPriority;//[Offset: 0x58, Size: 0x4] 0x78e24cea80
	ExpressionInput A;//[Offset: 0x5c, Size: 0x14] 0x78e24ceb00
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78e24ceb80
	Guid ID;//[Offset: 0x74, Size: 0x10] 0x78e24cec00

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18] 0x78e24ce880
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10] 0x78e237e700

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24cff80
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0x14] 0x78e24ce780
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0x14] 0x78e24ce800

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78e24cff00

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0x14] 0x78e24cfd80
	ExpressionInput Redness;//[Offset: 0x50, Size: 0x14] 0x78e24cfe00
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0x14] 0x78e24cfe80

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24cf980
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24cfa00
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0x14] 0x78e24cfa80
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0x14] 0x78e24cfb00
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0x14] 0x78e24cfb80
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4] 0x78e24cfc00
	float ConstB;//[Offset: 0xa4, Size: 0x4] 0x78e24cfc80
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4] 0x78e24cfd00

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d0f00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d0f80
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x78e24d1000
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78e24d1080
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78e24cf800
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78e24cf880
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78e24cf900

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14] 0x78e24d0e00
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0x14] 0x78e24d0e80

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d0b00
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d0b80
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0x14] 0x78e24d0c00
	float ConstA;//[Offset: 0x78, Size: 0x4] 0x78e24d0c80
	float ConstB;//[Offset: 0x7c, Size: 0x4] 0x78e24d0d00
	float ConstAlpha;//[Offset: 0x80, Size: 0x4] 0x78e24d0d80

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14] 0x78e24d0a80

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14] 0x78e24d0a00

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x78e24d2080
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14] 0x78e24d2100
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14] 0x78e24d0080
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14] 0x78e24d0100
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0x14] 0x78e24d0180
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14] 0x78e24d0200
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0x14] 0x78e24d0280
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0x14] 0x78e24d0300
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0x14] 0x78e24d0380
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0x14] 0x78e24d0400
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0x14] 0x78e24d0480
	ExpressionInput WorldDisplacement;//[Offset: 0x118, Size: 0x14] 0x78e24d0500
	ExpressionInput TessellationMultiplier;//[Offset: 0x12c, Size: 0x14] 0x78e24d0580
	ExpressionInput SubsurfaceColor;//[Offset: 0x140, Size: 0x14] 0x78e24d0600
	ExpressionInput ClearCoat;//[Offset: 0x154, Size: 0x14] 0x78e24d0680
	ExpressionInput ClearCoatRoughness;//[Offset: 0x168, Size: 0x14] 0x78e24d0700
	ExpressionInput AmbientOcclusion;//[Offset: 0x17c, Size: 0x14] 0x78e24d0780
	ExpressionInput Refraction;//[Offset: 0x190, Size: 0x14] 0x78e24d0800
	ExpressionInput CustomizedUVs;//[Offset: 0x1a4, Size: 0x14] 0x78e24d0880
	ExpressionInput PixelDepthOffset;//[Offset: 0x244, Size: 0x14] 0x78e24d0900
	ExpressionInput ShadingModel;//[Offset: 0x258, Size: 0x14] 0x78e24d0980

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x78e24d2000

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78e24d1b80
	Guid ExpressionGUID;//[Offset: 0x44, Size: 0x10] 0x78e24d1c00
	MaterialAttributesInput Input;//[Offset: 0x54, Size: 0x18] 0x78e24d1c80
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x70, Size: 0x40] 0x78e24d1d00
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb0, Size: 0x10] 0x78e237e5c0
	int NumActiveLayerCallers;//[Offset: 0xc0, Size: 0x4] 0x78e24d1e00
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xc8, Size: 0x10] 0x78e237e660
	int NumActiveBlendCallers;//[Offset: 0xd8, Size: 0x4] 0x78e24d1f00
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1] 0x78e24d1f80

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8] 0x78e24d1a80
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10] 0x78e24d1b00

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14] 0x78e24d1980
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0x14] 0x78e24d1a00

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d1780
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d1800
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24d1880
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24d1900

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d1580
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d1600
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24d1680
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24d1700

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d1380
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d1400
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24d1480
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24d1500

--------------------------------
Class: MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionNamedRerouteDeclaration.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d1200
	FName Name;//[Offset: 0x50, Size: 0x8] 0x78e24d1280
	Guid VariableGuid;//[Offset: 0x58, Size: 0x10] 0x78e24d1300

--------------------------------
Class: MaterialExpressionNamedRerouteUsage.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	MaterialExpressionNamedRerouteDeclaration* Declaration;//[Offset: 0x40, Size: 0x8] 0x78e24d1100
	Guid DeclarationGuid;//[Offset: 0x48, Size: 0x10] 0x78e24d1180

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x78e24d2c00
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0x14] 0x78e24d2c80
	float Scale;//[Offset: 0x64, Size: 0x4] 0x78e24d2d00
	int Quality;//[Offset: 0x68, Size: 0x4] 0x78e24d2d80
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1] 0x78e24d2e00
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1] 0x78e24d2e80
	int Levels;//[Offset: 0x70, Size: 0x4] 0x78e24d2f00
	float OutputMin;//[Offset: 0x74, Size: 0x4] 0x78e24d2f80
	float OutputMax;//[Offset: 0x78, Size: 0x4] 0x78e24d3000
	float LevelScale;//[Offset: 0x7c, Size: 0x4] 0x78e24d3080
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e24d3100
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4] 0x78e24d3180

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0x14] 0x78e24d2b80

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d2b00

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x78e24d2780
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14] 0x78e24d2800
	ExpressionInput Speed;//[Offset: 0x64, Size: 0x14] 0x78e24d2880
	float SpeedX;//[Offset: 0x78, Size: 0x4] 0x78e24d2900
	float SpeedY;//[Offset: 0x7c, Size: 0x4] 0x78e24d2980
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4] 0x78e24d2a00
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78e24d2a80

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1] 0x78e24d2700

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14] 0x78e24d2580
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4] 0x78e24d2600
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4] 0x78e24d2680

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14] 0x78e24d2400
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0x14] 0x78e24d2480
	float ConstExponent;//[Offset: 0x64, Size: 0x4] 0x78e24d2500

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0x14] 0x78e24d2300
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0x14] 0x78e24d2380

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24d2200
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14] 0x78e24d2280

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0x14] 0x78e24d4200
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0x14] 0x78e24d2180

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24d4100
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0x14] 0x78e24d4180

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0x14] 0x78e24d4000
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e24d4080

--------------------------------
Class: MaterialExpressionReroute.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d3f80

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0x14] 0x78e24d3d00
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0x14] 0x78e24d3d80
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0x14] 0x78e24d3e00
	ExpressionInput Position;//[Offset: 0x78, Size: 0x14] 0x78e24d3e80
	float Period;//[Offset: 0x8c, Size: 0x4] 0x78e24d3f00

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14] 0x78e24d3a00
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14] 0x78e24d3a80
	float CenterX;//[Offset: 0x64, Size: 0x4] 0x78e24d3b00
	float CenterY;//[Offset: 0x68, Size: 0x4] 0x78e24d3b80
	float Speed;//[Offset: 0x6c, Size: 0x4] 0x78e24d3c00
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4] 0x78e24d3c80

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d3980

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14] 0x78e24d3600
	ExpressionInput Specular;//[Offset: 0x50, Size: 0x14] 0x78e24d3680
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0x14] 0x78e24d3700
	ExpressionInput Normal;//[Offset: 0x78, Size: 0x14] 0x78e24d3780
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0x14] 0x78e24d3800
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0x14] 0x78e24d3880
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0x14] 0x78e24d3900

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24d3500
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0x14] 0x78e24d3580

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x78e24d5180
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0x14] 0x78e24d5200
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0x14] 0x78e24d5280
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8] 0x78e24d3200
	enum MaterialType;//[Offset: 0x80, Size: 0x1] 0x78e237e520
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x78e24d3300
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x78e24d3380
	byte MipValueMode;//[Offset: 0x83, Size: 0x1] 0x78e24d3400
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1] 0x78e24d3480

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8] 0x78e24d5000
	Guid ExpressionGUID;//[Offset: 0x90, Size: 0x10] 0x78e24d5080
	FName Group;//[Offset: 0xa0, Size: 0x8] 0x78e24d5100

--------------------------------
Class: MaterialExpressionSamplePhysicsVectorField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x78e24d4f00
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x78e24d4f80

--------------------------------
Class: MaterialExpressionSamplePhysicsScalarField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x78e24d4e00
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x78e24d4e80

--------------------------------
Class: MaterialExpressionSamplePhysicsIntegerField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x78e24d4d00
	byte FieldTarget;//[Offset: 0x50, Size: 0x1] 0x78e24d4d80

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d4c80

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78e24d4a80
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d4b00
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0x14] 0x78e24d4b80
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78e24d4c00

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78e24d4880
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d4900
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0x14] 0x78e24d4980
	Vector2D ConstInput;//[Offset: 0x64, Size: 0x8] 0x78e24d4a00

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1] 0x78e24d4680
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d4700
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x8] 0x78e24d4780
	float FallbackDepth;//[Offset: 0x58, Size: 0x4] 0x78e24d4800

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14] 0x78e24d4500
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1] 0x78e24d4580
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78e24d4600

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x78e237e3e0
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10] 0x78e237e480

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0x14] 0x78e24d4300
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0x14] 0x78e24d4380

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1] 0x78e24d4280

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24d6280
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14] 0x78e24d6300

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14] 0x78e24d6180
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0x14] 0x78e24d6200

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d6100

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d6000
	float Period;//[Offset: 0x50, Size: 0x4] 0x78e24d6080

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0x14] 0x78e24d5e00
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0x14] 0x78e24d5e80
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0x14] 0x78e24d5f00
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0x14] 0x78e24d5f80

--------------------------------
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78e24d5d80

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78e24d5c80
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0x14] 0x78e24d5d00

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4] 0x78e24d5c00

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14] 0x78e24d5b80

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0x14] 0x78e24d5880
	ExpressionInput Max;//[Offset: 0x50, Size: 0x14] 0x78e24d5900
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x78e24d5980
	float ConstMin;//[Offset: 0x78, Size: 0x4] 0x78e24d5a00
	float ConstMax;//[Offset: 0x7c, Size: 0x4] 0x78e24d5a80
	float ConstValue;//[Offset: 0x80, Size: 0x4] 0x78e24d5b00

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0x14] 0x78e24d5600
	ExpressionInput Index;//[Offset: 0x50, Size: 0x14] 0x78e24d5680
	ExpressionInput Seed;//[Offset: 0x64, Size: 0x14] 0x78e24d5700
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4] 0x78e24d5780
	Vector2D ConstSeed;//[Offset: 0x7c, Size: 0x8] 0x78e24d5800

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0x14] 0x78e24d7280
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0x14] 0x78e24d7300
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0x14] 0x78e24d7380
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0x14] 0x78e24d5300
	byte GeometryType;//[Offset: 0x8c, Size: 0x1] 0x78e24d5380
	byte WindType;//[Offset: 0x8d, Size: 0x1] 0x78e24d5400
	byte LODType;//[Offset: 0x8e, Size: 0x1] 0x78e24d5480
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4] 0x78e24d5500
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78e24d5580

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d6f80
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d7000
	ExpressionInput Radius;//[Offset: 0x64, Size: 0x14] 0x78e24d7080
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0x14] 0x78e24d7100
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4] 0x78e24d7180
	float HardnessPercent;//[Offset: 0x90, Size: 0x4] 0x78e24d7200

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0x14] 0x78e24d6e80
	float ConstantDensity;//[Offset: 0x50, Size: 0x4] 0x78e24d6f00

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d6e00

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78e24d6d80

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78e24d6d00

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78e24d6b00
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78e24d6b80
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1] 0x78e24d6c00
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1] 0x78e24d6c80

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78e24d6900
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d6980
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d6a00
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14] 0x78e24d6a80

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14] 0x78e24d6700
	ExpressionInput X;//[Offset: 0x50, Size: 0x14] 0x78e24d6780
	float ConstY;//[Offset: 0x64, Size: 0x4] 0x78e24d6800
	float ConstX;//[Offset: 0x68, Size: 0x4] 0x78e24d6880

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14] 0x78e24d6500
	ExpressionInput B;//[Offset: 0x50, Size: 0x14] 0x78e24d6580
	float ConstA;//[Offset: 0x64, Size: 0x4] 0x78e24d6600
	float ConstB;//[Offset: 0x68, Size: 0x4] 0x78e24d6680

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d6400
	float Period;//[Offset: 0x50, Size: 0x4] 0x78e24d6480

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d6380

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0x14] 0x78e24d8280
	ExpressionInput Seed;//[Offset: 0x50, Size: 0x14] 0x78e24d8300
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4] 0x78e24d8380
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x8] 0x78e24d8400

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4] 0x78e24d8000
	float UTiling;//[Offset: 0x40, Size: 0x4] 0x78e24d8080
	float VTiling;//[Offset: 0x44, Size: 0x4] 0x78e24d8100
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e24d8180
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x78e24d8200

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0x14] 0x78e24d7f00
	byte Property;//[Offset: 0x50, Size: 0x1] 0x78e24d7f80

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1] 0x78e24d7e80

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14] 0x78e24d7e00

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1] 0x78e24d7c80
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1] 0x78e24d7d00
	float Period;//[Offset: 0x3c, Size: 0x4] 0x78e24d7d80

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d7b00
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78e24d7b80
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78e24d7c00

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d7980
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1] 0x78e24d7a00
	byte TransformType;//[Offset: 0x51, Size: 0x1] 0x78e24d7a80

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d7900

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14] 0x78e24d7680
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1] 0x78e24d7700
	int Quality;//[Offset: 0x54, Size: 0x4] 0x78e24d7780
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78e24d7800
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4] 0x78e24d7880

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14] 0x78e24d7600

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1] 0x78e24d7580

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14] 0x78e24d7480
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14] 0x78e24d7500

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0x14] 0x78e24d8c80
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0x14] 0x78e24d8d00
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0x14] 0x78e24d8d80
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0x14] 0x78e24d8e00
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0x14] 0x78e24d8e80
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0x14] 0x78e24d8f00
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0x14] 0x78e24d8f80
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4] 0x78e24d9000
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4] 0x78e24d9080
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4] 0x78e24d9100
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x78e24d9180
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4] 0x78e24d9200
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4] 0x78e24d9280
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4] 0x78e24d9300
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4] 0x78e24d9380
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78e24d9400
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78e24d9480
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1] 0x78e24d7400

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1] 0x78e24d8c00

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8] 0x78e24d8500
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8] 0x78e24d8580
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10] 0x78e237fba0
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10] 0x78e237fc40
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10] 0x78e237fce0
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10] 0x78e237fd80
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10] 0x78e237fe20
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10] 0x78e237fec0
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10] 0x78e237ff60

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x220, Size: 0x10] 0x78e237fb00

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x310, Size: 0x8] 0x78e22beb00
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x9633668 0x78e2298f20
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x963371c 0x78e2299000
	float K2_GetScalarParameterValue(FName ParameterName);// 0x96337cc 0x78e2295720

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x2c8, Size: 0x8] 0x78e24dc300

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78e24dc280

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x963e0f0 0x78e24b68a0
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x963e35c 0x78e24b6980
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x963e188 0x78e24b6a60

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10] 0x78e24e13c0
	FString LastError;//[Offset: 0x48, Size: 0x10] 0x78e24dbd00
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10] 0x78e24dbd80

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10] 0x7875ae0200
	FString DisplayName;//[Offset: 0x10, Size: 0x10] 0x7875ae0280
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10] 0x7875ae0300
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10] 0x7875ae0380

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10] 0x78e24e1280
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10] 0x78e24e1320

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc] 0x7875ae3200
	Vector Right;//[Offset: 0x3c, Size: 0xc] 0x7875ae3280

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4] 0x7875ae3500
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4] 0x7875ae3580
	float SnapRadius;//[Offset: 0xc, Size: 0x4] 0x7875ae3600
	float SnapHeight;//[Offset: 0x10, Size: 0x4] 0x7875ae3680
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4] 0x7875ae3700
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875ae3780
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1] 0x7875ae3800
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1] 0x7875ae3880
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1] 0x7875ae3900
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1] 0x7875ae3980
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1] 0x7875ae3a00
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1] 0x7875ae3a80
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1] 0x7875ae3b00
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1] 0x7875ae3b80
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1] 0x7875ae3c00
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1] 0x7875ae3c80
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1] 0x7875ae3d00
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1] 0x7875ae3d80
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1] 0x7875ae3e00
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1] 0x7875ae3e80
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1] 0x7875ae3f00
	byte Direction;//[Offset: 0x1c, Size: 0x1] 0x7875ae3f80
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1] 0x7875ae4000
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1] 0x7875ae4080
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1] 0x7875ae4100
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1] 0x7875ae4180
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1] 0x7875ae4200
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1] 0x7875ae2180
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1] 0x7875ae2200
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1] 0x7875ae2280
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1] 0x7875ae2300
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1] 0x7875ae2380
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8] 0x78759ed580

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc] 0x7875ae3300
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc] 0x7875ae3380
	Vector RightStart;//[Offset: 0x48, Size: 0xc] 0x7875ae3400
	Vector RightEnd;//[Offset: 0x54, Size: 0xc] 0x7875ae3480

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	static void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x964d710 0x78e24b66e0
	static void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x964d840 0x78e24b67c0

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e24dd180
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e24dd200
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4] 0x78e24dd280
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4] 0x78e24dd300
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10] 0x78e24e11e0

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10] 0x7875ae4500
	FString ToolTip;//[Offset: 0x10, Size: 0x10] 0x7875ae4580

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8] 0x78e24e1000
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78e24dcb00
	Object*[] Objects;//[Offset: 0x38, Size: 0x10] 0x78e24e10a0
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10] 0x78e24e1140
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e24dcc80
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78e24dcd00

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10] 0x78e24e0f60

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1] 0x78e24dc780
	float DamagePerSec;//[Offset: 0x268, Size: 0x4] 0x78e24dc800
	class DamageType* DamageType;//[Offset: 0x270, Size: 0x8] 0x78e24e0ec0
	float PainInterval;//[Offset: 0x278, Size: 0x4] 0x78e24dc880
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1] 0x78e24dc900
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c, Size: 0x1] 0x78e24dc980
	Controller* DamageInstigator;//[Offset: 0x280, Size: 0x8] 0x78e24dca00

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24df400

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x48] 0x78e24df300
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24df380

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x2c, Size: 0xc] 0x78e24df280

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8] 0x78e24df180
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30] 0x78e24df200

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8] 0x78e24df080
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78e24df100

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x48] 0x78e24df000

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x2c, Size: 0xc] 0x78e24dee00
	Vector EndPoint1;//[Offset: 0x38, Size: 0xc] 0x78e24dee80
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30] 0x78e24def00
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30] 0x78e24def80

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78e24de980
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30] 0x78e24dea00
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e24dea80
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30] 0x78e24deb00
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e24deb80
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1] 0x78e24dec00
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78e24dec80
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78e24ded00
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4] 0x78e24ded80

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78e24dfb80
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30] 0x78e24dfc00
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30] 0x78e24dfc80
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1] 0x78e24dfd00
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1] 0x78e24dfd80
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1] 0x78e24dfe00
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1] 0x78e24dfe80
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1] 0x78e24dff00
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1] 0x78e24dff80
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1] 0x78e24de780
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1] 0x78e24de800
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1] 0x78e24de880
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1] 0x78e24de900

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x2c, Size: 0xc] 0x78e24df980
	float Radius;//[Offset: 0x38, Size: 0x4] 0x78e24dfa00
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8] 0x78e24dfa80
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30] 0x78e24dfb00

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1] 0x78e24f0e80
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4] 0x78e24f0f00
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48] 0x78e24f0f80
	BeamModifierOptions TangentOptions;//[Offset: 0x78, Size: 0x4] 0x78e24f1000
	RawDistributionVector Tangent;//[Offset: 0x80, Size: 0x48] 0x78e24f1080
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78e24df800
	BeamModifierOptions StrengthOptions;//[Offset: 0xcc, Size: 0x4] 0x78e24df880
	RawDistributionFloat Strength;//[Offset: 0xd0, Size: 0x30] 0x78e24df900

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ae5e00
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ae5e80
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875ae5f00

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24f0480
	int Frequency;//[Offset: 0x2c, Size: 0x4] 0x78e24f0500
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4] 0x78e24f0580
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x48] 0x78e24f0600
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x80, Size: 0x30] 0x78e24f0680
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e24f0700
	RawDistributionVector NoiseSpeed;//[Offset: 0xb8, Size: 0x48] 0x78e24f0780
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1] 0x78e24f0800
	float NoiseLockRadius;//[Offset: 0x104, Size: 0x4] 0x78e24f0880
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78e24f0900
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x78e24f0980
	float NoiseLockTime;//[Offset: 0x10c, Size: 0x4] 0x78e24f0a00
	float NoiseTension;//[Offset: 0x110, Size: 0x4] 0x78e24f0a80
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1] 0x78e24f0b00
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x118, Size: 0x30] 0x78e24f0b80
	int NoiseTessellation;//[Offset: 0x148, Size: 0x4] 0x78e24f0c00
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78e24f0c80
	float FrequencyDistance;//[Offset: 0x150, Size: 0x4] 0x78e24f0d00
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1] 0x78e24f0d80
	RawDistributionFloat NoiseScale;//[Offset: 0x158, Size: 0x30] 0x78e24f0e00

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78e24f2080
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78e24f2100
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78e24f0080
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x48] 0x78e24f0100
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e24f0180
	byte SourceTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78e24f0200
	RawDistributionVector SourceTangent;//[Offset: 0x88, Size: 0x48] 0x78e24f0280
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78e24f0300
	RawDistributionFloat SourceStrength;//[Offset: 0xd8, Size: 0x30] 0x78e24f0380
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78e24f0400

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1] 0x78e24f1b00
	FName TargetName;//[Offset: 0x2c, Size: 0x8] 0x78e24f1b80
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x48] 0x78e24f1c00
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e24f1c80
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e24f1d00
	byte TargetTangentMethod;//[Offset: 0x81, Size: 0x1] 0x78e24f1d80
	RawDistributionVector TargetTangent;//[Offset: 0x88, Size: 0x48] 0x78e24f1e00
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1] 0x78e24f1e80
	RawDistributionFloat TargetStrength;//[Offset: 0xd8, Size: 0x30] 0x78e24f1f00
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x78e24f1f80
	float LockRadius;//[Offset: 0x10c, Size: 0x4] 0x78e24f2000

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30] 0x78e24f1980
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e24f1a00
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1] 0x78e24f1a80

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48] 0x78e24f1100
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48] 0x78e24f1180
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30] 0x78e24f1200
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1] 0x78e24f1280
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10] 0x78e24e0920
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x78e24f1380
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1] 0x78e24f1400
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30] 0x78e24f1480
	float DirScalar;//[Offset: 0x148, Size: 0x4] 0x78e24f1500
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1] 0x78e24f1580
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1] 0x78e24f1600
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4] 0x78e24f1680
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30] 0x78e24f1700
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1] 0x78e24f1780
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1] 0x78e24f1800
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1] 0x78e24f1880
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4] 0x78e24f1900

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30] 0x78e24f2d80
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30] 0x78e24f2e00
	float Friction;//[Offset: 0x90, Size: 0x4] 0x78e24f2e80
	float RandomSpread;//[Offset: 0x94, Size: 0x4] 0x78e24f2f00
	float RandomDistribution;//[Offset: 0x98, Size: 0x4] 0x78e24f2f80
	float RadiusScale;//[Offset: 0x9c, Size: 0x4] 0x78e24f3000
	float RadiusBias;//[Offset: 0xa0, Size: 0x4] 0x78e24f3080
	byte Response;//[Offset: 0xa4, Size: 0x1] 0x78e24f3100
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1] 0x78e24f3180

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48] 0x78e24f2c00
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30] 0x78e24f2c80
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e24f2d00

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20] 0x78e24f2b80

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875ae6080
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875ae6100
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875ae6180
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7875ae6200
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7875ae6280
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10] 0x78759ed3a0

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48] 0x78e24f2a00
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30] 0x78e24f2a80
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e24f2b00

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48] 0x78e24f2880
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30] 0x78e24f2900
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e24f2980

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x78e24f2680

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30] 0x78e24f2300
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e24f2380
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78e24f2400
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78e24f2480
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x48] 0x78e24f2500
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xb8, Size: 0x10] 0x78e24e07e0
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1] 0x78e24f2600

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48] 0x78e24f4180
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48] 0x78e24f4200
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x78e24f2180
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78e24f2200
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78e24f2280

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30] 0x78e24f3f80
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e24f4000
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78e24f4080
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78e24f4100

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30] 0x78e24f3f00

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78e24f3e80

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1] 0x78e24f3880
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78e24f3900
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1] 0x78e24f3980
	float SpawnFraction;//[Offset: 0x30, Size: 0x4] 0x78e24f3a00
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48] 0x78e24f3a80
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30] 0x78e24f3b00
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30] 0x78e24f3b80
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30] 0x78e24f3c00
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1] 0x78e24f3c80
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4] 0x78e24f3d00
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78e24f3d80
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e24f3e00

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20] 0x78e24f3800

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x48] 0x78e24f3680
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4] 0x78e24f3700
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4] 0x78e24f3780

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78e24f3600

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78e24f5200
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78e24f5280
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x38, Size: 0x10] 0x78e24e0740
	byte SelectionMethod;//[Offset: 0x48, Size: 0x1] 0x78e24f3280
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1] 0x78e24f3300
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1] 0x78e24f3380
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x49, Size: 0x1] 0x78e24f3400
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4] 0x78e24f3480
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8] 0x78e24f3500
	int NumPreSelectedIndices;//[Offset: 0x58, Size: 0x4] 0x78e24f3580

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8] 0x7875ae5880
	Vector Offset;//[Offset: 0x8, Size: 0xc] 0x7875ae5900

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48] 0x78e24f5000
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48] 0x78e24f5080
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48] 0x78e24f5100
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48] 0x78e24f5180

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78e24f4d00
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1] 0x78e24f4d80
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1] 0x78e24f4e00
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4] 0x78e24f4e80
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e24f4f00
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4] 0x78e24f4f80

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8] 0x78e24f4c80

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24f4780
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78e24f4800
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78e24f4880
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x78e24f4900
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x78e24f4980
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x78e24f4a00
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x78e24f4a80
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x78e24f4b00
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30] 0x78e24f4b80
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x48] 0x78e24f4c00

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e24f4580
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30] 0x78e24f4600
	RawDistributionFloat StartHeight;//[Offset: 0xe0, Size: 0x30] 0x78e24f4680
	byte HeightAxis;//[Offset: 0x110, Size: 0x1] 0x78e24f4700

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x118, Size: 0x20] 0x78e24f4500

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xa8, Size: 0x30] 0x78e24f4480

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xd8, Size: 0x20] 0x78e24f4400

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48] 0x78e24f6300
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30] 0x78e24f4280
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30] 0x78e24f4300
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30] 0x78e24f4380

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1] 0x78e24f5b00
	Vector UniversalOffset;//[Offset: 0x2c, Size: 0xc] 0x78e24f5b80
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e24f5c00
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e24f5c80
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x78e24f5d00
	float InheritVelocityScale;//[Offset: 0x3c, Size: 0x4] 0x78e24f5d80
	FName SkelMeshActorParamName;//[Offset: 0x40, Size: 0x8] 0x78e24f5e00
	FName[] ValidAssociatedBones;//[Offset: 0x48, Size: 0x10] 0x78e24e0600
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78e24f5f00
	Vector NormalToCompare;//[Offset: 0x5c, Size: 0xc] 0x78e24f5f80
	float NormalCheckToleranceDegrees;//[Offset: 0x68, Size: 0x4] 0x78e24f6000
	float NormalCheckTolerance;//[Offset: 0x6c, Size: 0x4] 0x78e24f6080
	int[] ValidMaterialIndices;//[Offset: 0x70, Size: 0x10] 0x78e24e06a0
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e24f6180
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e24f6200
	uint32 InheritUVChannel;//[Offset: 0x84, Size: 0x4] 0x78e24f6280

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78e24f5a80

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10] 0x78e24e0560

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48] 0x78e24f5900
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24f5980

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20] 0x78e24f5880

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48] 0x78e24f5800

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78e24f5780

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78e24f5700

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48] 0x78e24f5600
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24f5680

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1] 0x78e24f7280

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10] 0x78e24e04c0
	int UpdateFlags;//[Offset: 0x40, Size: 0x4] 0x78e24f7180
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78e24f7200

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7875ae5400
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875ae5480
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875ae5500
	byte ValueMethod;//[Offset: 0x9, Size: 0x1] 0x7875ae5580
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1] 0x7875ae5600
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30] 0x7875ae5680

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20] 0x78e24f7080

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x2c, Size: 0x8] 0x78e24f7000

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30] 0x78e24f7a00

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78e24f7980

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30] 0x78e24f7880
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e24f7900

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30] 0x78e24f7800

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20] 0x78e24f7780

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30] 0x78e24f7700

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48] 0x78e24f7680

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20] 0x78e24f7600

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48] 0x78e24f7400
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24f7480
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78e24f7500
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78e24f7580

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48] 0x78e24f9300
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24f9380
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78e24f9400
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x78e24f9480

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x2c, Size: 0x8] 0x78e24f9200
	Vector2D MaxScale;//[Offset: 0x34, Size: 0x8] 0x78e24f9280

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48] 0x78e24f9180

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4] 0x78e24f8980
	float MovementTolerance;//[Offset: 0x30, Size: 0x4] 0x78e24f8a00
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30] 0x78e24f8a80
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4] 0x78e24f8b00
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78e24f8b80
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x78e24f8c00
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x78e24f8c80
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x78e24f8d00

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8] 0x78e24f8800
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30] 0x78e24f8880
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e24f8900

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8] 0x78e25d3f00
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4] 0x78e25d3f80
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4] 0x78e25d4000
	byte BoundingMode;//[Offset: 0x38, Size: 0x1] 0x78e25d4080
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1] 0x78e25d4100
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4] 0x78e25d4180

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78e24f8680
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30] 0x78e24f8700
	int StartingFrame;//[Offset: 0xa0, Size: 0x4] 0x78e24f8780

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1] 0x78e24fa380
	FName SourceName;//[Offset: 0x2c, Size: 0x8] 0x78e24fa400
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30] 0x78e24fa480
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e24fa500
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4] 0x78e24f8480
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10] 0x78e24e01a0
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1] 0x78e24f8580
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1] 0x78e24f8600

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24fa000
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78e24fa080
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x78e24fa100
	float TilingDistance;//[Offset: 0x2c, Size: 0x4] 0x78e24fa180
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4] 0x78e24fa200
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4] 0x78e24fa280
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4] 0x78e24fa300

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1] 0x78e24f9700
	int TextureTile;//[Offset: 0x2c, Size: 0x4] 0x78e24f9780
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4] 0x78e24f9800
	int Sheets;//[Offset: 0x34, Size: 0x4] 0x78e24f9880
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4] 0x78e24f9900
	float Speed;//[Offset: 0x3c, Size: 0x4] 0x78e24f9980
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4] 0x78e24f9a00
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78e24f9a80
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4] 0x78e24f9b00
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8] 0x78e24f9b80
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30] 0x78e24f9c00
	byte TaperMethod;//[Offset: 0x88, Size: 0x1] 0x78e24f9c80
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30] 0x78e24f9d00
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30] 0x78e24f9d80
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78e24f9e00
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x78e24f9e80
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1] 0x78e24f9f00
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1] 0x78e24f9f80

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x270] 0x78e24f9500
	GPUSpriteResourceData ResourceData;//[Offset: 0x2a0, Size: 0x160] 0x78e24f9580
	float CameraMotionBlurAmount;//[Offset: 0x400, Size: 0x4] 0x78e24f9600
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1] 0x78e24f9680

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8] 0x7875ae8d80
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8] 0x7875ae8e00
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8] 0x7875ae8e80
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10] 0x78759ed080
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70] 0x7875ae7480
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20] 0x7875ae7500
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20] 0x7875ae7580
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20] 0x7875ae7600
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20] 0x7875ae7680
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc] 0x7875ae7700
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc] 0x7875ae7780
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4] 0x7875ae7800
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc] 0x7875ae7880
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc] 0x7875ae7900
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8] 0x7875ae7980
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4] 0x7875ae7a00
	float MaxLifetime;//[Offset: 0x160, Size: 0x4] 0x7875ae7a80
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4] 0x7875ae7b00
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1] 0x7875ae7b80
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1] 0x7875ae7c00
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16a, Size: 0x1] 0x7875ae7c80
	byte CollisionMode;//[Offset: 0x16b, Size: 0x1] 0x7875ae7d00
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1] 0x7875ae7d80
	float MinFacingCameraBlendDistance;//[Offset: 0x170, Size: 0x4] 0x7875ae7e00
	float MaxFacingCameraBlendDistance;//[Offset: 0x174, Size: 0x4] 0x7875ae7e80
	RawDistributionVector DynamicColor;//[Offset: 0x178, Size: 0x48] 0x7875ae7f00
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c0, Size: 0x30] 0x7875ae7f80
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f0, Size: 0x48] 0x7875ae8000
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x238, Size: 0x30] 0x7875ae8080

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8] 0x7875ae8f80
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7875ae9000
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc] 0x7875ae9080
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc] 0x7875ae9100
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc] 0x7875ae9180
	float Intensity;//[Offset: 0x64, Size: 0x4] 0x7875ae9200
	float Tightness;//[Offset: 0x68, Size: 0x4] 0x7875ae9280
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x7875ae9300
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1] 0x7875ae9380
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1] 0x7875ae9400
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1] 0x7875ae9480
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1] 0x7875ae7400

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c] 0x78e25d7580
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x78e25d7600

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20] 0x7878052d00

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10] 0x78759ed120
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10] 0x78759ed1c0
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10] 0x78759ed260
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10] 0x7875ae8280
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10] 0x7875ae8300
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10] 0x7875ae8380
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10] 0x7875ae8400
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10] 0x7875ae6380
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10] 0x7875ae6400
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10] 0x7875ae6480
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10] 0x7875ae6500
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc] 0x7875ae6580
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc] 0x7875ae6600
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc] 0x7875ae6680
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc] 0x7875ae6700
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc] 0x7875ae6780
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc] 0x7875ae6800
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc] 0x7875ae6880
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4] 0x7875ae6900
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4] 0x7875ae6980
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4] 0x7875ae6a00
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4] 0x7875ae6a80
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4] 0x7875ae6b00
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4] 0x7875ae6b80
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4] 0x7875ae6c00
	float ResilienceBias;//[Offset: 0x120, Size: 0x4] 0x7875ae6c80
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4] 0x7875ae6d00
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4] 0x7875ae6d80
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4] 0x7875ae6e00
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4] 0x7875ae6e80
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4] 0x7875ae6f00
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4] 0x7875ae6f80
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4] 0x7875ae7000
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4] 0x7875ae7080
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1] 0x7875ae7100
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1] 0x7875ae7180
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8] 0x7875ae7200
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x7875ae7280
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4] 0x7875ae7300
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4] 0x7875ae7380

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8] 0x78e24fad80
	float LODSizeScale;//[Offset: 0x40, Size: 0x4] 0x78e24fae00
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78e24fae80
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78e24faf00
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78e24faf80
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1] 0x78e24fb000
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1] 0x78e24fb080
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1] 0x78e24fb100
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1] 0x78e24fb180
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48] 0x78e24fb200
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1] 0x78e24fb280
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1] 0x78e24fb300
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1] 0x78e24fb380
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1] 0x78e24fb400
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78e24fb480
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78e24fb500
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78e24fb580

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4] 0x78e24fc480
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4] 0x78e24fc500
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4] 0x78e24fc580
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4] 0x78e24fc600
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e24fa580
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78e24fa600
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78e24fa680
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78e24fa700
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78e24fa780
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78e24fa800
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1] 0x78e24fa880
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4] 0x78e24fa900
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78e24fa980
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1] 0x78e24faa00
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1] 0x78e24faa80
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1] 0x78e24fab00
	float TilingDistance;//[Offset: 0x48, Size: 0x4] 0x78e24fab80
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4] 0x78e24fac00
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e24fac80
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4] 0x78e24fad00

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24fc300
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4] 0x78e24fc380
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4] 0x78e24fc400

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8] 0x78e24fbd80
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc] 0x78e24fbe00
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc] 0x78e24fbe80
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc] 0x78e24fbf00
	float Intensity;//[Offset: 0x5c, Size: 0x4] 0x78e24fbf80
	float Tightness;//[Offset: 0x60, Size: 0x4] 0x78e24fc000
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1] 0x78e24fc080
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1] 0x78e24fc100
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1] 0x78e24fc180
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1] 0x78e24fc200
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1] 0x78e24fc280

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x2c, Size: 0xc] 0x78e24fbc80
	Vector MaxInitialRotation;//[Offset: 0x38, Size: 0xc] 0x78e24fbd00

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x2c, Size: 0xc] 0x78e24fbc00

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8] 0x78e24fbb00
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30] 0x78e24fbb80

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8] 0x78e24fba00
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30] 0x78e24fba80

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x78e24fb900
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x78e24fb980

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x48] 0x78e24fb800
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x78, Size: 0x30] 0x78e24fb880

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xa8, Size: 0x20] 0x78e24fb780

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30] 0x78e24fb600
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30] 0x78e24fb680
	Vector Direction;//[Offset: 0x90, Size: 0xc] 0x78e24fb700

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x48] 0x78e24fd680

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x48] 0x78e24fd580
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e24fd600

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e2561c80
	Vector LastRemoteNoisePosition;//[Offset: 0xb4, Size: 0xc] 0x78e2561d00
	float NoiseLifetime;//[Offset: 0xc0, Size: 0x4] 0x78e2561d80
	float LastRemoteNoiseVolume;//[Offset: 0xc4, Size: 0x4] 0x78e2561e00
	float LastRemoteNoiseTime;//[Offset: 0xc8, Size: 0x4] 0x78e2561e80
	float LastLocalNoiseVolume;//[Offset: 0xcc, Size: 0x4] 0x78e2561f00
	float LastLocalNoiseTime;//[Offset: 0xd0, Size: 0x4] 0x78e2561f80
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x968ac54 0x78e24b89e0

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4] 0x78e2561500
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8] 0x78e2561580
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x968bde8 0x78e24b84a0
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x968c0f4 0x78e24b8580
	Transform GetBodyTargetTransform(FName BodyName);// 0x968bb9c 0x78e24b8660
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x968be90 0x78e24b8740
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x968bfe8 0x78e24b8820
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x968bc5c 0x78e24b8900

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x220, Size: 0x8] 0x78e2562b80
	Actor* ConstraintActor1;//[Offset: 0x228, Size: 0x8] 0x78e2562c00
	Actor* ConstraintActor2;//[Offset: 0x230, Size: 0x8] 0x78e2562c80
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1] 0x78e2562d00

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x1f8, Size: 0x8] 0x78e2564880
	ConstrainComponentPropName ComponentName1;//[Offset: 0x200, Size: 0x8] 0x78e2564900
	Actor* ConstraintActor2;//[Offset: 0x208, Size: 0x8] 0x78e2564980
	ConstrainComponentPropName ComponentName2;//[Offset: 0x210, Size: 0x8] 0x78e2564a00
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x228, Size: 0x8] 0x78e2564a80
	delegate OnConstraintBroken;//[Offset: 0x230, Size: 0x10] 0x78e2564b00
	ConstraintInstance ConstraintInstance;//[Offset: 0x240, Size: 0x1c8] 0x78e2564b80
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x968f698 0x78e24b9ee0
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x968f5e8 0x78e24b9fc0
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x968ea8c 0x78e24ba0a0
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x968eb80 0x78e24ba180
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x968ec74 0x78e24ba260
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x968f140 0x78e24ba340
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x968f888 0x78e24ba420
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x968f1f0 0x78e24ba500
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x968f9d0 0x78e24ba5e0
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold);// 0x968e5d0 0x78e24ba6c0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x968f004 0x78e24ba7a0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x968e6c0 0x78e24ba880
	void SetDisableCollision(bool bDisableCollision);// 0x968df4c 0x78e24ba960
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x968e140 0x78e24baa40
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x968dffc 0x78e24bab20
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x968e238 0x78e24bac00
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x968fb2c 0x78e24bace0
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x968eea4 0x78e24b7400
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x968f3f8 0x78e24b74e0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x968f348 0x78e24b75c0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x968f4f0 0x78e24b76a0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x968e7b0 0x78e24b7780
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x968e8a4 0x78e24b7860
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x968e998 0x78e24b7940
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x968e3f0 0x78e24b7a20
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x968ef54 0x78e24b7b00
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x968f790 0x78e24b7be0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x968ed68 0x78e24b7cc0
	void SetAngularDriveMode(byte DriveMode);// 0x968f2a0 0x78e24b7da0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x968e4e0 0x78e24b7e80
	bool IsBroken();// 0x968de18 0x78e24b7f60
	float GetCurrentTwist();// 0x968e3bc 0x78e24b8040
	float GetCurrentSwing2();// 0x968e354 0x78e24b8120
	float GetCurrentSwing1();// 0x968e388 0x78e24b8200
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x968de50 0x78e24b82e0
	void BreakConstraint();// 0x968fb18 0x78e24b83c0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x7875a8d880

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8] 0x78e2565800
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x78e2565880
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x78e2565900
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x78e2565980
	float LinearDamping;//[Offset: 0xc4, Size: 0x4] 0x78e2565a00
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4] 0x78e2565a80
	float AngularDamping;//[Offset: 0xcc, Size: 0x4] 0x78e2565b00
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4] 0x78e2565b80
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4] 0x78e2565c00
	void SetTargetRotation(Rotator NewRotation);// 0x9694c0c 0x78e24b92a0
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x9694b1c 0x78e24b9380
	void SetTargetLocation(Vector NewLocation);// 0x9694cb4 0x78e24b9460
	void SetLinearStiffness(float NewLinearStiffness);// 0x96948d0 0x78e24b9540
	void SetLinearDamping(float NewLinearDamping);// 0x9694978 0x78e24b9620
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x96946d8 0x78e24b9700
	void SetAngularStiffness(float NewAngularStiffness);// 0x9694780 0x78e24b97e0
	void SetAngularDamping(float NewAngularDamping);// 0x9694828 0x78e24b98c0
	void ReleaseComponent();// 0x9694d90 0x78e24b99a0
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x9694dac 0x78e24b9a80
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x9694f2c 0x78e24b9b60
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x9695064 0x78e24b9c40
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x9694a20 0x78e24b9d20
	PrimitiveComponent* GetGrabbedComponent();// 0x9694d5c 0x78e24b9e00

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x1f4, Size: 0x4] 0x78e2566780
	float SpringDamping;//[Offset: 0x1f8, Size: 0x4] 0x78e2566800
	float SpringLengthAtRest;//[Offset: 0x1fc, Size: 0x4] 0x78e2566880
	float SpringRadius;//[Offset: 0x200, Size: 0x4] 0x78e2566900
	byte SpringChannel;//[Offset: 0x204, Size: 0x1] 0x78e2566980
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1] 0x78e2566a00
	float SpringCompression;//[Offset: 0x208, Size: 0x4] 0x78e2566a80
	Vector GetSpringRestingPoint();// 0x9696498 0x78e24bc8e0
	Vector GetSpringDirection();// 0x9696428 0x78e24bc9c0
	Vector GetSpringCurrentEndPoint();// 0x9696460 0x78e24b90e0
	float GetNormalizedCompressionScalar();// 0x96964d0 0x78e24b91c0

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x220, Size: 0x8] 0x78e2566700

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x1f4, Size: 0x4] 0x78e2566680

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x220, Size: 0x8] 0x78e2566580
	SceneComponent* SceneComponent;//[Offset: 0x228, Size: 0x8] 0x78e2566600

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x230, Size: 0x8] 0x78e2566400
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78e2566480
	void OnInterpToggle(bool bEnable);// 0x96974c8 0x78e24bc800

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2a8, Size: 0x8] 0x78e2569280
	float NormalDistortionStrength;//[Offset: 0x2b0, Size: 0x4] 0x78e2569300
	float PrefilterRoughness;//[Offset: 0x2b4, Size: 0x4] 0x78e2569380
	float PrefilterRoughnessDistance;//[Offset: 0x2b8, Size: 0x4] 0x78e2569400
	int ScreenPercentage;//[Offset: 0x2bc, Size: 0x4] 0x78e2569480
	float ExtraFOV;//[Offset: 0x2c0, Size: 0x4] 0x78e2567400
	float DistanceFromPlaneFadeStart;//[Offset: 0x2c4, Size: 0x4] 0x78e2567480
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2c8, Size: 0x4] 0x78e2567500
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2cc, Size: 0x4] 0x78e2567580
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2d0, Size: 0x4] 0x78e2567600
	float AngleFromPlaneFadeStart;//[Offset: 0x2d4, Size: 0x4] 0x78e2567680
	float AngleFromPlaneFadeEnd;//[Offset: 0x2d8, Size: 0x4] 0x78e2567700
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78e2567780
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78e2567800

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f1, Size: 0x1] 0x78e24e1820
	byte CaptureSource;//[Offset: 0x1f2, Size: 0x1] 0x78e2567900
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1] 0x78e2567980
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1] 0x78e2567a00
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x78e2567a80
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x1f8, Size: 0x10] 0x78e24e18c0
	Actor*[] HiddenActors;//[Offset: 0x208, Size: 0x10] 0x78e24e1960
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x218, Size: 0x10] 0x78e24e1a00
	Actor*[] ShowOnlyActors;//[Offset: 0x228, Size: 0x10] 0x78e24e1aa0
	float LODDistanceFactor;//[Offset: 0x238, Size: 0x4] 0x78e2567d00
	float MaxViewDistanceOverride;//[Offset: 0x23c, Size: 0x4] 0x78e2567d80
	int CaptureSortPriority;//[Offset: 0x240, Size: 0x4] 0x78e2567e00
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x78e2567e80
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x248, Size: 0x10] 0x78e24e1b40
	FString ProfilingEventName;//[Offset: 0x288, Size: 0x10] 0x78e2567f80
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x96df854 0x78e24bc020
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x96df758 0x78e24bc100
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x96df4e4 0x78e24bc1e0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x96df6b0 0x78e24bc2c0
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x96df5b4 0x78e24bc3a0
	void HideComponent(PrimitiveComponent* InComponent);// 0x96df9f8 0x78e24bc480
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x96df8fc 0x78e24bc560
	void ClearShowOnlyComponents();// 0x96df5a0 0x78e24bc640
	void ClearHiddenComponents();// 0x96df58c 0x78e24bc720

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10] 0x7875b00b80
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875b00c00

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x270, Size: 0x4] 0x78e2569100
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x78e2569180
	BoxComponent* PreviewCaptureBox;//[Offset: 0x280, Size: 0x8] 0x78e2569200

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10] 0x787805b680
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10] 0x787805b700
	bool SupportsConvertibleLaptops();// 0x96985cc 0x787edda6c0
	void PlatformEventDelegate__DelegateSignature();// 0x6d94ba8 0x787edda7a0
	bool IsInTabletMode();// 0x9698604 0x787edda880
	bool IsInLaptopMode();// 0x969863c 0x787edda960

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10] 0x78e2568b80
	int ResponseCode;//[Offset: 0x38, Size: 0x4] 0x78e2568c00
	int Tag;//[Offset: 0x3c, Size: 0x4] 0x78e2568c80
	FString StringResponse;//[Offset: 0x40, Size: 0x10] 0x78e2568d00
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10] 0x78e24e1780
	int GetNumHeaders();// 0x96995e4 0x78e24bbd80
	FString GetHeaderValue(FString HeaderName);// 0x9699370 0x78e24bbe60
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x9699474 0x78e24bbf40

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x244, Size: 0x8] 0x78e256bd00

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 0x8] 0x78e256d380
	void SetRadius(float NewRadius);// 0x96b1aac 0x78e24bd1a0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x96b1a04 0x78e24bd280

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x96b3504 0x78e2590be0
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x96b3150 0x78e2590cc0
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x96b328c 0x78e2590da0
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x96b33c8 0x78e2590e80
	void ResetBoneTransformByName(FName BoneName);// 0x96b2c9c 0x78e2590f60
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x96b3044 0x78e2591040
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x96b2d44 0x78e2591120
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x96b2e44 0x78e2591200
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x96b2f44 0x78e25912e0
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x96b2bf4 0x78e25913c0

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90] 0x78e25a1900
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78e25a1980
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4] 0x78e25a1a00
	FName RetargetSource;//[Offset: 0x118, Size: 0x8] 0x78e25a1a80
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x120, Size: 0x10] 0x78e24e2f40

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10] 0x78759ef2e0
	FName[] Tracks;//[Offset: 0x10, Size: 0x10] 0x78759ef380
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50] 0x7875a7cdc0
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10] 0x78759ef560
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10] 0x78759ef600

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10] 0x78759ef420
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50] 0x7875a7ce80
	float[] CurveData;//[Offset: 0x60, Size: 0x10] 0x78759ef4c0

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8] 0x78e25a1800
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4] 0x78e25a1880

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x560] 0x78e25a1400
	float Priority;//[Offset: 0x760, Size: 0x4] 0x78e25a1480
	float BlendRadius;//[Offset: 0x764, Size: 0x4] 0x78e25a1500
	float BlendWeight;//[Offset: 0x768, Size: 0x4] 0x78e25a1580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 0x1] 0x78e25a1600
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 0x1] 0x78e25a1680
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x96b4908 0x78e2590b00

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x260, Size: 0x560] 0x78e25a3100
	float Priority;//[Offset: 0x7c0, Size: 0x4] 0x78e25a3180
	float BlendRadius;//[Offset: 0x7c4, Size: 0x4] 0x78e25a1100
	float BlendWeight;//[Offset: 0x7c8, Size: 0x4] 0x78e25a1180
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1] 0x78e25a1200
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1] 0x78e25a1280
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x96b4f60 0x78e2590a20

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x258, Size: 0x10] 0x78e24e2d60
	Actor*[] OverrideInvisibleActors;//[Offset: 0x268, Size: 0x10] 0x78e24e2e00
	FName[] OverrideInvisibleLevels;//[Offset: 0x278, Size: 0x10] 0x78e24e2ea0

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8] 0x78e25a2e80
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10] 0x78e24e2cc0

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28] 0x7875aec080

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc] 0x78e25a2c00
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e25a2c80
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78e25a2d00
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10] 0x78e24e2ae0
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10] 0x78e24e2c20
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8] 0x78e25a2e00

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8] 0x7875a8da80

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4] 0x787805f200
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4] 0x787805f280
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x787805f300
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1] 0x787805f380
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1] 0x787805f400
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1] 0x787805f480
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1] 0x787805f500
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1] 0x787805f580
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1] 0x787805f600
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1] 0x787805f680
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1] 0x787805f700
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1] 0x787805f780
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1] 0x787805d700
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1] 0x787805d780
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4] 0x787805d800
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc] 0x787805d880
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4] 0x787805d900
	float Buoyancy;//[Offset: 0x10c, Size: 0x4] 0x787805d980
	float Bounciness;//[Offset: 0x110, Size: 0x4] 0x787805da00
	float Friction;//[Offset: 0x114, Size: 0x4] 0x787805da80
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4] 0x787805db00
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4] 0x787805db80
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10] 0x787805dc00
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10] 0x787805dc80
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4] 0x787805dd00
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8] 0x787805dd80
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4] 0x787805de00
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4] 0x787805de80
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4] 0x787805df00
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4] 0x787805df80
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4] 0x787805e000
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4] 0x787805e080
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4] 0x787805e100
	void StopSimulating(out const HitResult HitResult);// 0x96c7ad8 0x787eddc720
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x96c7bb0 0x787eddc800
	void SetInterpolatedComponent(SceneComponent* Component);// 0x96c7a28 0x787eddc8e0
	void ResetInterpolation();// 0x96c7908 0x787eddc9c0
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x6d94ba8 0x787edd90e0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x6d94ba8 0x787edd91c0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x96c7924 0x787edd92a0
	Vector LimitVelocity(Vector NewVelocity);// 0x96c7828 0x787edd9380
	bool IsVelocityUnderSimulationThreshold();// 0x96c7c60 0x787edd9460
	bool IsInterpolationComplete();// 0x96c78dc 0x787edd9540

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78e25a2b80

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x220, Size: 0x8] 0x78e25a2b00
	void ToggleForce();// 0x96c9414 0x78e25906a0
	void FireImpulse();// 0x96c9468 0x78e2590780
	void EnableForce();// 0x96c944c 0x78e2590860
	void DisableForce();// 0x96c9430 0x78e2590940

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x1f4, Size: 0x4] 0x78e25a2600
	byte Falloff;//[Offset: 0x1f8, Size: 0x1] 0x78e25a2680
	float ImpulseStrength;//[Offset: 0x1fc, Size: 0x4] 0x78e25a2700
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1] 0x78e25a2780
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1] 0x78e25a2800
	float ForceStrength;//[Offset: 0x204, Size: 0x4] 0x78e25a2880
	float DestructibleDamage;//[Offset: 0x208, Size: 0x4] 0x78e25a2900
	byte[] ObjectTypesToAffect;//[Offset: 0x210, Size: 0x10] 0x78e24e2a40
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x96c9ac4 0x78e2590400
	void FireImpulse();// 0x96c9c24 0x78e25904e0
	void AddObjectTypeToAffect(byte ObjectType);// 0x96c9b74 0x78e25905c0

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x230, Size: 0x8] 0x78e25a2580

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x330, Size: 0x4] 0x78e25a4180
	float SourceHeight;//[Offset: 0x334, Size: 0x4] 0x78e25a4200
	float BarnDoorAngle;//[Offset: 0x338, Size: 0x4] 0x78e25a2180
	float BarnDoorLength;//[Offset: 0x33c, Size: 0x4] 0x78e25a2200
	Texture* SourceTexture;//[Offset: 0x340, Size: 0x8] 0x78e25a2280
	void SetSourceWidth(float bNewValue);// 0x96caa74 0x78e2593960
	void SetSourceTexture(Texture* bNewValue);// 0x96cab1c 0x78e2590080
	void SetSourceHeight(float NewValue);// 0x96ca9cc 0x78e2590160
	void SetBarnDoorLength(float NewValue);// 0x96ca87c 0x78e2590240
	void SetBarnDoorAngle(float NewValue);// 0x96ca924 0x78e2590320

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e25a6a00
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4] 0x78e25a6a80
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1] 0x78e25a6b00
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78e25a6b80
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78e25a6c00
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1] 0x78e25a6c80
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1] 0x78e25a6d00
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1] 0x78e25a6d80
	float MinScreenRadiusForLights;//[Offset: 0x44, Size: 0x4] 0x78e25a6e00
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x48, Size: 0x4] 0x78e25a6e80
	float MinScreenRadiusForCSMdepth;//[Offset: 0x4c, Size: 0x4] 0x78e25a6f00
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1] 0x78e25a6f80
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1] 0x78e25a7000
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1] 0x78e25a7080
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1] 0x78e25a7100
	bool bVirtualTextureEnableAutoImport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50, Size: 0x1] 0x78e25a7180
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x50, Size: 0x1] 0x78e25a7200
	uint32 VirtualTextureTileSize;//[Offset: 0x54, Size: 0x4] 0x78e25a7280
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x58, Size: 0x4] 0x78e25a7300
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x5c, Size: 0x4] 0x78e25a7380
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e25a5300
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78e25a5380
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1] 0x78e25a5400
	int ReflectionCaptureResolution;//[Offset: 0x64, Size: 0x4] 0x78e25a5480
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e25a5500
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78e25a5580
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78e25a5600
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78e25a5680
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78e25a5700
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78e25a5780
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78e25a5800
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1] 0x78e25a5880
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78e25a5900
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78e25a5980
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x6c, Size: 0x4] 0x78e25a5a00
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78e25a5a80
	byte TranslucentSortPolicy;//[Offset: 0x71, Size: 0x1] 0x78e25a5b00
	Vector TranslucentSortAxis;//[Offset: 0x74, Size: 0xc] 0x78e25a5b80
	byte HMDFixedFoveationLevel;//[Offset: 0x80, Size: 0x1] 0x78e25a5c00
	byte CustomDepthStencil;//[Offset: 0x81, Size: 0x1] 0x78e25a5c80
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82, Size: 0x1] 0x78e25a5d00
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x83, Size: 0x1] 0x78e25a5d80
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1] 0x78e25a5e00
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1] 0x78e25a5e80
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1] 0x78e25a5f00
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1] 0x78e25a5f80
	byte DefaultFeatureAutoExposure;//[Offset: 0x85, Size: 0x1] 0x78e25a6000
	float DefaultFeatureAutoExposureBias;//[Offset: 0x88, Size: 0x4] 0x78e25a6080
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x78e25a6100
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x78e25a6180
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c, Size: 0x1] 0x78e25a6200
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c, Size: 0x1] 0x78e25a6280
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c, Size: 0x1] 0x78e25a6300
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c, Size: 0x1] 0x78e25a4280
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c, Size: 0x1] 0x78e25a4300
	byte DefaultFeatureAntiAliasing;//[Offset: 0x8d, Size: 0x1] 0x78e25a4380
	enum DefaultLightUnits;//[Offset: 0x8e, Size: 0x1] 0x78e24e5240
	byte DefaultBackBufferPixelFormat;//[Offset: 0x8f, Size: 0x1] 0x78e25a4480
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78e25a4500
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78e25a4580
	byte EarlyZPass;//[Offset: 0x91, Size: 0x1] 0x78e25a4600
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92, Size: 0x1] 0x78e25a4680
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x92, Size: 0x1] 0x78e25a4700
	byte ClearSceneMethod;//[Offset: 0x93, Size: 0x1] 0x78e25a4780
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1] 0x78e25a4800
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1] 0x78e25a4880
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1] 0x78e25a4900
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94, Size: 0x1] 0x78e25a4980
	int GPUSimulationTextureSizeX;//[Offset: 0x98, Size: 0x4] 0x78e25a4a00
	int GPUSimulationTextureSizeY;//[Offset: 0x9c, Size: 0x4] 0x78e25a4a80
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e25a4b00
	byte GBufferFormat;//[Offset: 0xa1, Size: 0x1] 0x78e25a4b80
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1] 0x78e25a4c00
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1] 0x78e25a4c80
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa2, Size: 0x1] 0x78e25a4d00
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa2, Size: 0x1] 0x78e25a4d80
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa2, Size: 0x1] 0x78e25a4e00
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa2, Size: 0x1] 0x78e25a4e80
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa2, Size: 0x1] 0x78e25a4f00
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa2, Size: 0x1] 0x78e25a4f80
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa3, Size: 0x1] 0x78e25a5000
	float WireframeCullThreshold;//[Offset: 0xa4, Size: 0x4] 0x78e25a5080
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e25a5100
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78e25a5180
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1] 0x78e25a5200
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1] 0x78e25a5280
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1] 0x78e25a3200
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1] 0x78e25a3280
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1] 0x78e25a3300
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1] 0x78e25a3380
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x78e25a3400
	enum DefaultSkinCacheBehavior;//[Offset: 0xaa, Size: 0x1] 0x78e24e29a0
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xac, Size: 0x4] 0x78e25a3500
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e25a3580
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78e25a3600
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78e25a3680
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78e25a3700
	uint32 MobileNumDynamicPointLights;//[Offset: 0xb4, Size: 0x4] 0x78e25a3780
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1] 0x78e25a3800
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1] 0x78e25a3880
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 0x1] 0x78e25a3900
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 0x1] 0x78e25a3980
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 0x1] 0x78e25a3a00
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 0x1] 0x78e25a3a80
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 0x1] 0x78e25a3b00
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 0x1] 0x78e25a3b80
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 0x1] 0x78e25a3c00
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 0x1] 0x78e25a3c80
	int UnlimitedBonInfluencesThreshold;//[Offset: 0xbc, Size: 0x4] 0x78e25a3d00
	PerPlatformInt MaxSkinBones;//[Offset: 0xc0, Size: 0x4] 0x78e25a3d80
	byte MobilePlanarReflectionMode;//[Offset: 0xc4, Size: 0x1] 0x78e25a3e00
	bool bMobileSupportsGen4TAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc5, Size: 0x1] 0x78e25a3e80
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0xc6, Size: 0x1] 0x78e25a3f00
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0xc7, Size: 0x1] 0x78e25a3f80
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0xc8, Size: 0x18] 0x78e25a4000
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0xe0, Size: 0x18] 0x78e25a4080
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0xf8, Size: 0x18] 0x78e25a4100

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x78e25a6900
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x78e25a6980

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bLoadDefaultMapOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78e25a6880

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10] 0x78e24e5100
	Node[] Nodes;//[Offset: 0x40, Size: 0x10] 0x78e24e51a0

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8] 0x7875aed080
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10] 0x7875aed300

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10] 0x78759eee80

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1] 0x7875aed100
	FName ParentSpace;//[Offset: 0x4, Size: 0x8] 0x7875aed180
	float Weight;//[Offset: 0xc, Size: 0x4] 0x7875aed200

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875aece00
	FName ParentName;//[Offset: 0x8, Size: 0x8] 0x7875aece80
	Transform Transform;//[Offset: 0x10, Size: 0x30] 0x7875aecf00
	FString DisplayName;//[Offset: 0x40, Size: 0x10] 0x7875aecf80
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875aed000

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xec, Size: 0xc] 0x78e25a8000
	Vector PivotTranslation;//[Offset: 0xf8, Size: 0xc] 0x78e25a8080
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x78e25a8100

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x1f8, Size: 0x28] 0x78e25a9080
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78e25a9100
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x78e25a9180
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x228, Size: 0x8] 0x78e25a9200
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78e25a9280
	uint32 ScalabilityGroup;//[Offset: 0x234, Size: 0x4] 0x78e25a9300
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78e25a9380
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x240, Size: 0x8] 0x78e25a9400
	int StreamLowMips;//[Offset: 0x248, Size: 0x4] 0x78e25a9480
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78e25a7400
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78e25a7480
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1] 0x78e25a7500
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1] 0x78e25a7580
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x96d42dc 0x78e2593420

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8] 0x78e25d8580
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8] 0x78e25d8600

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x1a0, Size: 0xc] 0x78e25d8680
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1] 0x78e25d8700
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 0x1] 0x78e25d8780

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4] 0x7875b40780
	int TileBorderSize;//[Offset: 0x4, Size: 0x4] 0x7875b40800
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875b40880
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7875b40900

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x220, Size: 0x8] 0x78e25a9000

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x230, Size: 0x8] 0x78e25a8f00
	void OnInterpToggle(bool bEnable);// 0x96dec84 0x78e2593340

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a8, Size: 0x1] 0x78e25a8500
	float FOVAngle;//[Offset: 0x2ac, Size: 0x4] 0x78e25a8580
	float OrthoWidth;//[Offset: 0x2b0, Size: 0x4] 0x78e25a8600
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b8, Size: 0x8] 0x78e25a8680
	byte CompositeMode;//[Offset: 0x2c0, Size: 0x1] 0x78e25a8700
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x560] 0x78e25a8780
	float PostProcessBlendWeight;//[Offset: 0x830, Size: 0x4] 0x78e25a8800
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 0x1] 0x78e25a8880
	float CustomNearClippingPlane;//[Offset: 0x838, Size: 0x4] 0x78e25a8900
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1] 0x78e25a8980
	Matrix CustomProjectionMatrix;//[Offset: 0x840, Size: 0x40] 0x78e25a8a00
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1] 0x78e25a8a80
	Vector ClipPlaneBase;//[Offset: 0x884, Size: 0xc] 0x78e25a8b00
	Vector ClipPlaneNormal;//[Offset: 0x890, Size: 0xc] 0x78e25a8b80
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 0x1] 0x78e25a8c00
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 0x1] 0x78e25a8c80
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d, Size: 0x1] 0x78e25a8d00
	void RemoveBlendable(interface classNone InBlendableObject);// 0x96e03d8 0x78e25930a0
	void CaptureScene();// 0x96e03c4 0x78e2593180
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x96e0504 0x78e2593260

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2a8, Size: 0x8] 0x78e25aa300
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78e25aa380
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2b8, Size: 0x8] 0x78e25aa400
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2c0, Size: 0x8] 0x78e25aa480
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2c8, Size: 0x8] 0x78e25aa500
	float IPD;//[Offset: 0x2d0, Size: 0x4] 0x78e25a8480
	void CaptureScene();// 0x96e0b70 0x78e2592fc0

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x180, Size: 0x4] 0x78e25d4500
	LinearColor ClearColor;//[Offset: 0x184, Size: 0x10] 0x78e25d4580
	byte OverrideFormat;//[Offset: 0x194, Size: 0x1] 0x78e25d4600
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x195, Size: 0x1] 0x78e25d4680
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x195, Size: 0x1] 0x78e25d4700

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x230, Size: 0x8] 0x78e25aa200
	void OnInterpToggle(bool bEnable);// 0x96e1034 0x78e2592ee0

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x1a0, Size: 0x1] 0x78e25ac600

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x78e25ae280
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1] 0x78e25ae300
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x230, Size: 0x8] 0x78e25ae380
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x238, Size: 0x8] 0x78e25ae400
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x240, Size: 0x8] 0x78e25ae480
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x248, Size: 0x8] 0x78e25ae500
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x250, Size: 0x8] 0x78e25ae580
	void OnRep_ReplicatedPhysAsset();// 0x96f1d2c 0x78e2595020
	void OnRep_ReplicatedMesh();// 0x96f1d48 0x78e2595100
	void OnRep_ReplicatedMaterial1();// 0x96f1cf4 0x78e25951e0
	void OnRep_ReplicatedMaterial0();// 0x96f1d10 0x78e25952c0

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8] 0x78e25c4680

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x1f1, Size: 0x1] 0x78e24e57e0
	float BottomRadius;//[Offset: 0x1f4, Size: 0x4] 0x78e25c6800
	Color GroundAlbedo;//[Offset: 0x1f8, Size: 0x4] 0x78e25c6880
	float AtmosphereHeight;//[Offset: 0x1fc, Size: 0x4] 0x78e25c6900
	float MultiScatteringFactor;//[Offset: 0x200, Size: 0x4] 0x78e25c6980
	float TraceSampleCountScale;//[Offset: 0x204, Size: 0x4] 0x78e25c6a00
	float RayleighScatteringScale;//[Offset: 0x208, Size: 0x4] 0x78e25c6a80
	LinearColor RayleighScattering;//[Offset: 0x20c, Size: 0x10] 0x78e25c6b00
	float RayleighExponentialDistribution;//[Offset: 0x21c, Size: 0x4] 0x78e25c6b80
	float MieScatteringScale;//[Offset: 0x220, Size: 0x4] 0x78e25c6c00
	LinearColor MieScattering;//[Offset: 0x224, Size: 0x10] 0x78e25c6c80
	float MieAbsorptionScale;//[Offset: 0x234, Size: 0x4] 0x78e25c6d00
	LinearColor MieAbsorption;//[Offset: 0x238, Size: 0x10] 0x78e25c6d80
	float MieAnisotropy;//[Offset: 0x248, Size: 0x4] 0x78e25c6e00
	float MieExponentialDistribution;//[Offset: 0x24c, Size: 0x4] 0x78e25c6e80
	float OtherAbsorptionScale;//[Offset: 0x250, Size: 0x4] 0x78e25c6f00
	LinearColor OtherAbsorption;//[Offset: 0x254, Size: 0x10] 0x78e25c6f80
	TentDistribution OtherTentDistribution;//[Offset: 0x264, Size: 0xc] 0x78e25c7000
	LinearColor SkyLuminanceFactor;//[Offset: 0x270, Size: 0x10] 0x78e25c7080
	float AerialPespectiveViewDistanceScale;//[Offset: 0x280, Size: 0x4] 0x78e25c7100
	float HeightFogContribution;//[Offset: 0x284, Size: 0x4] 0x78e25c7180
	float TransmittanceMinLightElevationAngle;//[Offset: 0x288, Size: 0x4] 0x78e25c7200
	float AerialPerspectiveStartDepth;//[Offset: 0x28c, Size: 0x4] 0x78e25c7280
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2b4, Size: 0x10] 0x78e25c7300
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x970760c 0x78e2599b60
	void SetRayleighScatteringScale(float NewValue);// 0x9707d44 0x78e2599c40
	void SetRayleighScattering(LinearColor NewValue);// 0x9707c9c 0x78e2599d20
	void SetRayleighExponentialDistribution(float NewValue);// 0x9707bf4 0x78e2599e00
	void SetOtherAbsorptionScale(float NewValue);// 0x970775c 0x78e2599ee0
	void SetOtherAbsorption(LinearColor NewValue);// 0x97076b4 0x78e2599fc0
	void SetMultiScatteringFactor(float NewValue);// 0x9707dec 0x78e259a0a0
	void SetMieScatteringScale(float NewValue);// 0x9707b4c 0x78e259a180
	void SetMieScattering(LinearColor NewValue);// 0x9707aa4 0x78e259a260
	void SetMieExponentialDistribution(float NewValue);// 0x9707804 0x78e259a340
	void SetMieAnisotropy(float NewValue);// 0x97078ac 0x78e259a420
	void SetMieAbsorptionScale(float NewValue);// 0x97079fc 0x78e259a500
	void SetMieAbsorption(LinearColor NewValue);// 0x9707954 0x78e259a5e0
	void SetHeightFogContribution(float NewValue);// 0x97074bc 0x78e259a6c0
	void SetAtmosphereHeight(float NewValue);// 0x9707e94 0x78e259a7a0
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x9707564 0x78e259a880
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x9707f3c 0x78e259a960
	LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLightComponent* DirectionalLight);// 0x9707408 0x78e259aa40

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4] 0x7875b04d80
	float TipValue;//[Offset: 0x4, Size: 0x4] 0x7875b04e00
	float Width;//[Offset: 0x8, Size: 0x4] 0x7875b04e80

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x220, Size: 0x8] 0x78e25c6700

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x220, Size: 0x8] 0x7875d24580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x7875d24600
	void OnRep_bEnabled();// 0x9708da4 0x7875d1e080

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x78e25c7700
	byte SourceType;//[Offset: 0x225, Size: 0x1] 0x78e25c7780
	TextureCube* Cubemap;//[Offset: 0x228, Size: 0x8] 0x78e25c7800
	float SourceCubemapAngle;//[Offset: 0x230, Size: 0x4] 0x78e25c7880
	int CubemapResolution;//[Offset: 0x234, Size: 0x4] 0x78e25c7900
	float SkyDistanceThreshold;//[Offset: 0x238, Size: 0x4] 0x78e25c7980
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78e25c7a00
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1] 0x78e25c7a80
	LinearColor LowerHemisphereColor;//[Offset: 0x240, Size: 0x10] 0x78e25c7b00
	float OcclusionMaxDistance;//[Offset: 0x250, Size: 0x4] 0x78e25c7b80
	float Contrast;//[Offset: 0x254, Size: 0x4] 0x78e25c7c00
	float OcclusionExponent;//[Offset: 0x258, Size: 0x4] 0x78e25c7c80
	float MinOcclusion;//[Offset: 0x25c, Size: 0x4] 0x78e25c7d00
	Color OcclusionTint;//[Offset: 0x260, Size: 0x4] 0x78e25c7d80
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1] 0x78e25c7e00
	float CloudAmbientOcclusionStrength;//[Offset: 0x268, Size: 0x4] 0x78e25c7e80
	float CloudAmbientOcclusionExtent;//[Offset: 0x26c, Size: 0x4] 0x78e25c7f00
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x270, Size: 0x4] 0x78e25c7f80
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x274, Size: 0x4] 0x78e25c8000
	byte OcclusionCombineMode;//[Offset: 0x278, Size: 0x1] 0x78e25c8080
	TextureCube* BlendDestinationCubemap;//[Offset: 0x328, Size: 0x8] 0x78e25c8100
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x9709b04 0x78e25990e0
	void SetOcclusionTint(out const Color InTint);// 0x9709718 0x78e25991c0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x97095c8 0x78e25992a0
	void SetOcclusionContrast(float InOcclusionContrast);// 0x9709670 0x78e2599380
	void SetMinOcclusion(float InMinOcclusion);// 0x9709520 0x78e2599460
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x97097c8 0x78e2599540
	void SetLightColor(LinearColor NewLightColor);// 0x9709a5c 0x78e2599620
	void SetIntensity(float NewIntensity);// 0x9709c54 0x78e2599700
	void SetIndirectLightingIntensity(float NewIntensity);// 0x9709bac 0x78e25997e0
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x9709878 0x78e25998c0
	void SetCubemap(TextureCube* NewCubemap);// 0x97099b4 0x78e25999a0
	void RecaptureSky();// 0x970950c 0x78e2599a80

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88] 0x78e25c7680

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1] 0x78e25c8f80
	SoundNode* FirstNode;//[Offset: 0x178, Size: 0x8] 0x78e25c9000
	float VolumeMultiplier;//[Offset: 0x180, Size: 0x4] 0x78e25c9080
	float PitchMultiplier;//[Offset: 0x184, Size: 0x4] 0x78e25c9100
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 0x3a0] 0x78e25c9180
	float SubtitlePriority;//[Offset: 0x528, Size: 0x4] 0x78e25c9200
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x530, Size: 0x1] 0x78e25c9280
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1] 0x78e25c9300
	int CookedQualityIndex;//[Offset: 0x534, Size: 0x4] 0x78e25c9380
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 0x1] 0x78e25c9400

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10] 0x78e24e5420

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10] 0x78e24e5560

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1] 0x7875b07900
	FString DisplayName;//[Offset: 0x8, Size: 0x10] 0x7875b07980
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875b07a00
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4] 0x7875b07a80

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8] 0x78e25c8800
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0] 0x78e25c8880
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1] 0x78e25c8900

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8] 0x78e25c8780

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78e24e5380

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4] 0x78e25c8600
	float DelayMax;//[Offset: 0x48, Size: 0x4] 0x78e25c8680

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20] 0x78e25c8500
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e25c8580

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8] 0x7875a8af80
	DialogueContext Context;//[Offset: 0x8, Size: 0x18] 0x7875a8b100

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10] 0x78e24e52e0

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4] 0x7875b08c80
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4] 0x7875b08d00
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4] 0x7875b08d80
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4] 0x7875b08e00
	float Volume;//[Offset: 0x10, Size: 0x4] 0x7875b08e80

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4] 0x78e25ca400
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e25ca480
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x78e25ca500

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4] 0x78e25c9d00
	float LoopEnd;//[Offset: 0x48, Size: 0x4] 0x78e25c9d80
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4] 0x78e25c9e00
	int LoopCount;//[Offset: 0x50, Size: 0x4] 0x78e25c9e80
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1] 0x78e25c9f00
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1] 0x78e25c9f80
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8] 0x78e25ca000
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8] 0x78e25ca080
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88] 0x78e25ca100
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88] 0x78e25ca180
	float PitchMin;//[Offset: 0x178, Size: 0x4] 0x78e25ca200
	float PitchMax;//[Offset: 0x17c, Size: 0x4] 0x78e25ca280
	float VolumeMin;//[Offset: 0x180, Size: 0x4] 0x78e25ca300
	float VolumeMax;//[Offset: 0x184, Size: 0x4] 0x78e25ca380

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10] 0x78e24e7b80

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4] 0x78e25c9b80
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e25c9c00

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10] 0x78e24e7ae0

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4] 0x78e25c9900
	float PitchMax;//[Offset: 0x48, Size: 0x4] 0x78e25c9980
	float VolumeMin;//[Offset: 0x4c, Size: 0x4] 0x78e25c9a00
	float VolumeMax;//[Offset: 0x50, Size: 0x4] 0x78e25c9a80

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20] 0x78e25c9800
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20] 0x78e25c9880

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875b08900
	float Default;//[Offset: 0x8, Size: 0x4] 0x7875b08980
	float MinInput;//[Offset: 0xc, Size: 0x4] 0x7875b08a00
	float MaxInput;//[Offset: 0x10, Size: 0x4] 0x7875b08a80
	float MinOutput;//[Offset: 0x14, Size: 0x4] 0x7875b08b00
	float MaxOutput;//[Offset: 0x18, Size: 0x4] 0x7875b08b80
	byte ParamMode;//[Offset: 0x1c, Size: 0x1] 0x7875b08c00

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x78e25cb400
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1] 0x78e25cb480
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4] 0x78e25cb500
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4] 0x78e25cb580
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4] 0x78e25c9500
	float FrequencyMax;//[Offset: 0x50, Size: 0x4] 0x78e25c9580
	float OffsetMin;//[Offset: 0x54, Size: 0x4] 0x78e25c9600
	float OffsetMax;//[Offset: 0x58, Size: 0x4] 0x78e25c9680
	float CenterMin;//[Offset: 0x5c, Size: 0x4] 0x78e25c9700
	float CenterMax;//[Offset: 0x60, Size: 0x4] 0x78e25c9780

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8] 0x78e25cb380

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4] 0x78e25cb300

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10] 0x78e24e79a0
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10] 0x78e24e7a40
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4] 0x78e25cb080
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4] 0x78e25cb100
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78e25cb180
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x78e25cb200
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1] 0x78e25cb280

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8] 0x78e25caf00

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8] 0x78e25cae80

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8] 0x78e25cae00

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28] 0x78e25cac80
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8] 0x78e25cad00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e25cad80

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8] 0x78e25cd400
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8] 0x78e25cd480
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10] 0x78e24e7220
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8] 0x78e24e72c0

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8] 0x78e230d800

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x38, Size: 0x8] 0x78e25cd300
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78e24e7180
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78e25cd380

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8] 0x78e25cd100
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8] 0x78e24e6fa0
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8] 0x78e25cd180
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8] 0x78e24e7040
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8] 0x78e25cd200
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10] 0x78e24e70e0

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x78e25cd080

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x228, Size: 0x8] 0x78e25cd000

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x270, Size: 0x4] 0x78e25cce80
	float CaptureDistanceScale;//[Offset: 0x274, Size: 0x4] 0x78e25ccf00
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x278, Size: 0x8] 0x78e25ccf80

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x448, Size: 0x70] 0x7875bc1680
	InterpCurveVector SplineInfo;//[Offset: 0x4b8, Size: 0x18] 0x7875bc1700
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d0, Size: 0x18] 0x7875bc1780
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4e8, Size: 0x18] 0x7875bc1800
	InterpCurveFloat SplineReparamTable;//[Offset: 0x500, Size: 0x18] 0x7875bc1880
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1] 0x7875bc1900
	int ReparamStepsPerSegment;//[Offset: 0x51c, Size: 0x4] 0x7875bc1980
	float Duration;//[Offset: 0x520, Size: 0x4] 0x7875bc1a00
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1] 0x7875bc1a80
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1] 0x7875bc1b00
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1] 0x7875bc1b80
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x527, Size: 0x1] 0x7875bc1c00
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1] 0x7875bc1c80
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 0x1] 0x7875bc1d00
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52a, Size: 0x1] 0x7875bc1d80
	float LoopPosition;//[Offset: 0x52c, Size: 0x4] 0x7875bc1e00
	Vector DefaultUpVector;//[Offset: 0x530, Size: 0xc] 0x7875bc1e80
	void UpdateSpline();// 0x972d514 0x7875bb5100
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x972b688 0x7875bb51e0
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x972b184 0x7875bb52c0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x972c8a8 0x7875bb53a0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x972b314 0x7875bb5480
	void SetTangentColor(out const LinearColor TangentColor);// 0x972c748 0x7875bb5560
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x972b4f8 0x7875bb5640
	void SetSplineWorldPoints(out const Vector[] Points);// 0x972b9e0 0x7875bb1d60
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x972acb8 0x7875bb1e40
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x972baa8 0x7875bb1f20
	void SetSplineLocalPoints(out const Vector[] Points);// 0x972b918 0x7875bb2000
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x972c7f8 0x7875bb20e0
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x972aeb0 0x7875bb21c0
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x972aff4 0x7875bb22a0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x972b788 0x7875bb2380
	void SetDrawDebug(bool bShow);// 0x972c698 0x7875bb2460
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x97299dc 0x7875bb2540
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x972c45c 0x7875bb2620
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x972c5a0 0x7875bb2700
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x972bd70 0x7875bb27e0
	bool IsClosedLoop();// 0x972c424 0x7875bb28c0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x9729350 0x7875bb29a0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x9728414 0x7875bb2a80
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x9729198 0x7875bb2b60
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x9728a28 0x7875bb2c40
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x972aa98 0x7875bb2d20
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x97296c0 0x7875bb2e00
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x97287c8 0x7875bb2ee0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x9729508 0x7875bb2fc0
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x9729b04 0x7875bb30a0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x972c958 0x7875bb3180
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x97282c0 0x7875bb3260
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a498 0x7875bb3340
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972d014 0x7875bb3420
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9729098 0x7875bb3500
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x9727fbc 0x7875bb35e0
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x972a088 0x7875bb36c0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x972cdb4 0x7875bb37a0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x9728c88 0x7875bb3880
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x9728674 0x7875bb3960
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a898 0x7875bb0080
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972d314 0x7875bb0160
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9729408 0x7875bb0240
	byte GetSplinePointType(int PointIndex);// 0x972ae00 0x7875bb0320
	float GetSplineLength();// 0x9729ad0 0x7875bb0400
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x9727d64 0x7875bb04e0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x972a1e8 0x7875bb05c0
	Vector GetScaleAtSplineInputKey(float InKey);// 0x972cc04 0x7875bb06a0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x9728de8 0x7875bb0780
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x9728520 0x7875bb0860
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a598 0x7875bb0940
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972d114 0x7875bb0a20
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9729250 0x7875bb0b00
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x9727e6c 0x7875bb0be0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a29c 0x7875bb0cc0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972ccb8 0x7875bb0da0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9728e9c 0x7875bb0e80
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x972816c 0x7875bb0f60
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a398 0x7875bb1040
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972cf14 0x7875bb1120
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9728f98 0x7875bb1200
	int GetNumberOfSplineSegments();// 0x972ac50 0x7875bb12e0
	int GetNumberOfSplinePoints();// 0x972ac84 0x7875bb13c0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x9728b34 0x7875bb14a0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972ab50 0x7875bb1580
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972d414 0x7875bb1660
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x9729778 0x7875bb1740
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x9729ef8 0x7875bb1820
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x9729db0 0x7875bb1900
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a698 0x7875bb19e0
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x9729878 0x7875bb1ac0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x9729c04 0x7875bb1ba0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x972ca58 0x7875bb1c80
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x9729d00 0x7875b8e780
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x972cb54 0x7875b8e860
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x97288d4 0x7875b8e940
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a998 0x7875b8ea20
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x972d214 0x7875b8eb00
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x97295c0 0x7875b8ebe0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x9729928 0x7875b8ecc0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x972a798 0x7875b8eda0
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x9727784 0x7875b8ee80
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x9727354 0x7875b8ef60
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x9727994 0x7875b8f040
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x97274bc 0x7875b8f120
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x972788c 0x7875b8f200
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x9727578 0x7875b8f2e0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x972767c 0x7875b8f3c0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x9727ba4 0x7875b8f4a0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x9727cac 0x7875b8f580
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x9727a9c 0x7875b8f660
	void ClearSplinePoints(bool bUpdateSpline);// 0x972c374 0x7875b8f740
	void AddSplineWorldPoint(out const Vector Position);// 0x972bcb8 0x7875b8f820
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x972be68 0x7875b8f900
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x972bffc 0x7875b8f9e0
	void AddSplineLocalPoint(out const Vector Position);// 0x972bc00 0x7875b8fac0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x972c144 0x7875b8fba0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x972c250 0x7875b8fc80

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18] 0x7875b09880
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18] 0x7875b09900
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18] 0x7875b09980
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18] 0x7875b09a00
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8] 0x7875b09a80
	uint32 Version;//[Offset: 0x68, Size: 0x4] 0x7875b09b00

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10] 0x78bfc66460
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78c24eef00
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4] 0x78c24eef80

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4] 0x78c24ef000
	Quat OutVal;//[Offset: 0x10, Size: 0x10] 0x78c24ef080
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10] 0x78c24ef100
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10] 0x78c24ef180
	byte InterpMode;//[Offset: 0x40, Size: 0x1] 0x78c24ef200

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4] 0x7875b0b500
	Vector Position;//[Offset: 0x4, Size: 0xc] 0x7875b0b580
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc] 0x7875b09500
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc] 0x7875b09580
	Rotator Rotation;//[Offset: 0x28, Size: 0xc] 0x7875b09600
	Vector Scale;//[Offset: 0x34, Size: 0xc] 0x7875b09680
	byte Type;//[Offset: 0x40, Size: 0x1] 0x7875b09700

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78e25cce00

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4e0, Size: 0x58] 0x78e25cf200
	Vector SplineUpDir;//[Offset: 0x538, Size: 0xc] 0x78e25cf280
	float SplineBoundaryMin;//[Offset: 0x544, Size: 0x4] 0x78e25cf300
	Guid CachedMeshBodySetupGuid;//[Offset: 0x548, Size: 0x10] 0x78e25cf380
	BodySetup* BodySetup;//[Offset: 0x558, Size: 0x8] 0x78e25cf400
	float SplineBoundaryMax;//[Offset: 0x560, Size: 0x4] 0x78e25cf480
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x564, Size: 0x1] 0x78e25cf500
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x564, Size: 0x1] 0x78e25cf580
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x564, Size: 0x1] 0x78e25cf600
	byte ForwardAxis;//[Offset: 0x565, Size: 0x1] 0x78e25cf680
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x568, Size: 0x4] 0x78e25cf700
	void UpdateMesh();// 0x9732f78 0x78e259e160
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x9732d10 0x78e259e240
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x9732798 0x78e259e320
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x9732668 0x78e259e400
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x9732e44 0x78e259e4e0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x973253c 0x78e259e5c0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x97328c4 0x78e259e6a0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x9731f50 0x78e259adc0
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x9732084 0x78e259aea0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x9732aa8 0x78e259af80
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x9732410 0x78e259b060
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x97322e0 0x78e259b140
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x9732bdc 0x78e259b220
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x97321b4 0x78e259b300
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x9731e20 0x78e259b3e0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x9731cf0 0x78e259b4c0
	Vector GetStartTangent();// 0x9732e0c 0x78e259b5a0
	Vector2D GetStartScale();// 0x9732890 0x78e259b680
	float GetStartRoll();// 0x9732764 0x78e259b760
	Vector GetStartPosition();// 0x9732f40 0x78e259b840
	Vector2D GetStartOffset();// 0x9732634 0x78e259b920
	Vector GetSplineUpDir();// 0x973204c 0x78e259ba00
	byte GetForwardAxis();// 0x9732180 0x78e259bae0
	Vector GetEndTangent();// 0x9732ba4 0x78e259bbc0
	Vector2D GetEndScale();// 0x9732508 0x78e259bca0
	float GetEndRoll();// 0x97323dc 0x78e259bd80
	Vector GetEndPosition();// 0x9732cd8 0x78e259be60
	Vector2D GetEndOffset();// 0x97322ac 0x78e259bf40
	float GetBoundaryMin();// 0x9731f1c 0x78e259c020
	float GetBoundaryMax();// 0x9731dec 0x78e259c100

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc] 0x7875b0ae00
	Vector StartTangent;//[Offset: 0xc, Size: 0xc] 0x7875b0ae80
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8] 0x7875b0af00
	float StartRoll;//[Offset: 0x20, Size: 0x4] 0x7875b0af80
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8] 0x7875b0b000
	Vector EndPos;//[Offset: 0x2c, Size: 0xc] 0x7875b0b080
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8] 0x7875b0b100
	Vector EndTangent;//[Offset: 0x40, Size: 0xc] 0x7875b0b180
	float EndRoll;//[Offset: 0x4c, Size: 0x4] 0x7875b0b200
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8] 0x7875b0b280

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f4, Size: 0x4] 0x78e25cfe00
	Vector SocketOffset;//[Offset: 0x1f8, Size: 0xc] 0x78e25cfe80
	Vector TargetOffset;//[Offset: 0x204, Size: 0xc] 0x78e25cff00
	float ProbeSize;//[Offset: 0x210, Size: 0x4] 0x78e25cff80
	byte ProbeChannel;//[Offset: 0x214, Size: 0x1] 0x78e25ce780
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1] 0x78e25ce800
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1] 0x78e25ce880
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1] 0x78e25ce900
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1] 0x78e25ce980
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x215, Size: 0x1] 0x78e25cea00
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x215, Size: 0x1] 0x78e25cea80
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x215, Size: 0x1] 0x78e25ceb00
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x215, Size: 0x1] 0x78e25ceb80
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 0x1] 0x78e25cec00
	float CameraLagSpeed;//[Offset: 0x218, Size: 0x4] 0x78e25cec80
	float CameraRotationLagSpeed;//[Offset: 0x21c, Size: 0x4] 0x78e25ced00
	float CameraLagMaxTimeStep;//[Offset: 0x220, Size: 0x4] 0x78e25ced80
	float CameraLagMaxDistance;//[Offset: 0x224, Size: 0x4] 0x78e25cee00
	bool IsCollisionFixApplied();// 0x97348ec 0x78e259dd00
	Vector GetUnfixedCameraPosition();// 0x9734924 0x78e259dde0
	Rotator GetTargetRotation();// 0x973495c 0x78e259dec0

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78e22b6700
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x78e22b6780
	enum NavigationGeometryGatheringMode;//[Offset: 0x229, Size: 0x1] 0x7875d41c80
	void SetMobility(byte InMobility);// 0x9739454 0x78e2296fa0

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4] 0x78e25d1900
	float OverlayArc;//[Offset: 0x2c, Size: 0x4] 0x78e25d1980
	int Height;//[Offset: 0x30, Size: 0x4] 0x78e25d1a00
	void SetRadius(float InRadius);// 0x973c198 0x78e259cc60
	void SetOverlayArc(float InOverlayArc);// 0x973c0f0 0x78e259cd40
	void SetHeight(int InHeight);// 0x973c048 0x78e259ce20

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14] 0x78e25d1580
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14] 0x78e25d1600
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8] 0x78e25d1680
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8] 0x78e25d1700
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8] 0x78e25d1780
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8] 0x78e25d1800
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x973cb50 0x78e259cb80

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14] 0x7875b0cf80
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14] 0x7875b0d000
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8] 0x7875b0d080
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8] 0x7875b0d100
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8] 0x7875b0d180
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8] 0x7875b0d200

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78e25d2900
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78e25d2980
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78e25d2a00
	Texture* Texture;//[Offset: 0x1f8, Size: 0x8] 0x78e25d2a80
	Texture* LeftTexture;//[Offset: 0x200, Size: 0x8] 0x78e25d2b00
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78e25d2b80
	Vector2D QuadSize;//[Offset: 0x20c, Size: 0x8] 0x78e25d2c00
	Box2D UVRect;//[Offset: 0x214, Size: 0x14] 0x78e25d2c80
	float CylinderRadius;//[Offset: 0x228, Size: 0x4] 0x78e25d2d00
	float CylinderOverlayArc;//[Offset: 0x22c, Size: 0x4] 0x78e25d2d80
	int CylinderHeight;//[Offset: 0x230, Size: 0x4] 0x78e25d2e00
	EquirectProps EquirectProps;//[Offset: 0x234, Size: 0x48] 0x78e25d2e80
	byte StereoLayerType;//[Offset: 0x27c, Size: 0x1] 0x78e25d2f00
	byte StereoLayerShape;//[Offset: 0x27d, Size: 0x1] 0x78e25d2f80
	StereoLayerShape* Shape;//[Offset: 0x280, Size: 0x8] 0x78e25d3000
	int Priority;//[Offset: 0x288, Size: 0x4] 0x78e25d3080
	void SetUVRect(Box2D InUVRect);// 0x973d2f4 0x78e259f660
	void SetTexture(Texture* InTexture);// 0x973d54c 0x78e259f740
	void SetQuadSize(Vector2D InQuadSize);// 0x973d3c8 0x78e259f820
	void SetPriority(int InPriority);// 0x973d140 0x78e259f900
	void SetLeftTexture(Texture* InTexture);// 0x973d4a4 0x78e259f9e0
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x973d1e8 0x78e259fac0
	void MarkTextureForUpdate();// 0x973d110 0x78e259fba0
	Box2D GetUVRect();// 0x973d2cc 0x78e259fc80
	Texture* GetTexture();// 0x973d488 0x78e259fd60
	Vector2D GetQuadSize();// 0x973d3a8 0x78e259fe40
	int GetPriority();// 0x973d124 0x78e259ff20
	Texture* GetLeftTexture();// 0x973d46c 0x78e259caa0

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowSplashScreen();// 0x973df38 0x78e259f2e0
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x973df4c 0x78e259f3c0
	static void HideSplashScreen();// 0x973df24 0x78e259f4a0
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x973de84 0x78e259f580

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	static WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x97437b8 0x78e259ee80
	static LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x97436c8 0x78e259ef60
	static LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x97438a8 0x78e259f040
	static GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x9743998 0x78e259f120
	static EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x9743a88 0x78e259f200

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8] 0x78e25d3d80
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x78e25d3e00
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x78e25d3e80

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18] 0x78e25d3c00
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18] 0x78e25d3c80
	FText TransientText;//[Offset: 0x58, Size: 0x18] 0x78e25d3d00

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x220, Size: 0x8] 0x78e25d3b80

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x448, Size: 0x18] 0x78e25d4e00
	MaterialInterface* TextMaterial;//[Offset: 0x460, Size: 0x8] 0x78e25d4e80
	Font* Font;//[Offset: 0x468, Size: 0x8] 0x78e25d4f00
	byte HorizontalAlignment;//[Offset: 0x470, Size: 0x1] 0x78e25d4f80
	byte VerticalAlignment;//[Offset: 0x471, Size: 0x1] 0x78e25d5000
	Color TextRenderColor;//[Offset: 0x474, Size: 0x4] 0x78e25d5080
	float XScale;//[Offset: 0x478, Size: 0x4] 0x78e25d5100
	float YScale;//[Offset: 0x47c, Size: 0x4] 0x78e25d5180
	float WorldSize;//[Offset: 0x480, Size: 0x4] 0x78e25d5200
	float InvDefaultSize;//[Offset: 0x484, Size: 0x4] 0x78e25d5280
	float HorizSpacingAdjust;//[Offset: 0x488, Size: 0x4] 0x78e25d3200
	float VertSpacingAdjust;//[Offset: 0x48c, Size: 0x4] 0x78e25d3280
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1] 0x78e25d3300
	void SetYScale(float Value);// 0x9745c58 0x78e25e1820
	void SetXScale(float Value);// 0x9745d00 0x78e25e1900
	void SetWorldSize(float Value);// 0x9745a60 0x78e25e19e0
	void SetVertSpacingAdjust(float Value);// 0x9745b08 0x78e25e1ac0
	void SetVerticalAlignment(byte Value);// 0x9745e4c 0x78e25e1ba0
	void SetTextRenderColor(Color Value);// 0x9745da8 0x78e25e1c80
	void SetTextMaterial(MaterialInterface* Material);// 0x9746044 0x78e259e780
	void SetText(FString Value);// 0x97461fc 0x78e259e860
	void SetHorizSpacingAdjust(float Value);// 0x9745bb0 0x78e259e940
	void SetHorizontalAlignment(byte Value);// 0x9745ef4 0x78e259ea20
	void SetFont(Font* Value);// 0x9745f9c 0x78e259eb00
	void K2_SetText(out const FText Value);// 0x97460ec 0x78e259ebe0
	Vector GetTextWorldSize();// 0x97459f0 0x78e259ecc0
	Vector GetTextLocalSize();// 0x9745a28 0x78e259eda0

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x1d0, Size: 0x1] 0x78e25d4c80
	byte AddressY;//[Offset: 0x1d1, Size: 0x1] 0x78e25d4d00
	byte AddressZ;//[Offset: 0x1d2, Size: 0x1] 0x78e25d4d80

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x180, Size: 0x1] 0x78e25d4c00

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98] 0x78e25d5580
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78e25d5600
	void Stop();// 0x974fb64 0x78e25e0400
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x974f2c4 0x78e25e04e0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x974f58c 0x78e25e05c0
	void SetTimelineLength(float NewLength);// 0x974f634 0x78e25e06a0
	void SetPlayRate(float NewRate);// 0x974f7ec 0x78e25e0780
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x974f9b0 0x78e25e0860
	void SetNewTime(float NewTime);// 0x974f710 0x78e25e0940
	void SetLooping(bool bNewLooping);// 0x974f8cc 0x78e25e0a20
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x974f1d4 0x78e25e0b00
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x974f4dc 0x78e25e0be0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x974f3b4 0x78e25e0cc0
	void ReverseFromEnd();// 0x974fb78 0x78e25e0da0
	void Reverse();// 0x974fb8c 0x78e25e0e80
	void PlayFromStart();// 0x974fba0 0x78e25e0f60
	void Play();// 0x974fbb4 0x78e25e1040
	void OnRep_Timeline();// 0x974f1c0 0x78e25e1120
	bool IsReversing();// 0x974faf4 0x78e25e1200
	bool IsPlaying();// 0x974fb2c 0x78e25e12e0
	bool IsLooping();// 0x974f894 0x78e25e13c0
	float GetTimelineLength();// 0x974f6dc 0x78e25e14a0
	float GetPlayRate();// 0x974f7b8 0x78e25e1580
	float GetPlaybackPosition();// 0x974f97c 0x78e25e1660
	bool GetIgnoreTimeDilation();// 0x974f4a4 0x78e25e1740

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1] 0x7875b0e780
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875b0e800
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7875b0e880
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7875b0e900
	float Length;//[Offset: 0x4, Size: 0x4] 0x7875b0e980
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x7875b0ea00
	float Position;//[Offset: 0xc, Size: 0x4] 0x7875b0ea80
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10] 0x7875b306a0
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10] 0x7875b30740
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10] 0x7875b307e0
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10] 0x7875b30880
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10] 0x7875b0f400
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10] 0x7875b0f480
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8] 0x7875b0f500
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8] 0x7875b0f580

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875b0eb00
	delegate EventFunc;//[Offset: 0x4, Size: 0x10] 0x7875b0eb80

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8] 0x7875b0ec80
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7875b0ed00
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7875b0ed80
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7875b0ee00

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8] 0x7875b0ef00
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7875b0ef80
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7875b0f000
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8] 0x7875b0f080

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8] 0x7875b0f180
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10] 0x7875b0f200
	FName TrackName;//[Offset: 0x18, Size: 0x8] 0x7875b0f280
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8] 0x7875b0f300

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x78e25d6d80

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x220, Size: 0x8] 0x78e25d6900

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x97576b8 0x78e25e37a0
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x9757a30 0x78e25e3880
	void Init();// 0x9757be8 0x78e25e3960
	int GetNumAccounts();// 0x97579b4 0x78e25e0080
	FString GetAccountName(int AccountIndex);// 0x97578b0 0x78e25e0160
	bool CanShowTweetUI();// 0x9757ba8 0x78e25e0240
	bool AuthorizeAccounts();// 0x97579f0 0x78e25e0320

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50] 0x7875b1d300

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1] 0x78e25d8100
	Guid Guid;//[Offset: 0xc4, Size: 0x10] 0x78e25d8180

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1] 0x78e24e8b20
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50] 0x7875b1d180
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50] 0x7875b1d240
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18] 0x78e25d7900
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18] 0x78e25d7980
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18] 0x78e25d7a00
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18] 0x78e25d7a80
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18] 0x78e25d7b00
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18] 0x78e25d7b80
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18] 0x78e25d7c00
	float ApplicationScale;//[Offset: 0x188, Size: 0x4] 0x78e25d7c80
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1] 0x78e24e8bc0
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18] 0x78e25d7d80
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88] 0x78e25d7e00
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78e25d7e80
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8] 0x78e25d7f00
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1] 0x78e25d7f80
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10] 0x78e24e8c60
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x250, Size: 0x8] 0x78e24e8d00
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8] 0x78e25d8080

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8] 0x7875b40980
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8] 0x7875b40a00

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8] 0x78e25d9000
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1] 0x78e25d9080
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4] 0x78e25d9100
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4] 0x78e25d9180
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4] 0x78e25d9200
	int SubImagesX;//[Offset: 0x60, Size: 0x4] 0x78e25d9280
	int SubImagesY;//[Offset: 0x64, Size: 0x4] 0x78e25d9300
	int FrameCount;//[Offset: 0x68, Size: 0x4] 0x78e25d9380
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4] 0x78e25d9400
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x78e25d9480
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8] 0x78e25d7400
	float NoiseScale;//[Offset: 0x80, Size: 0x4] 0x78e25d7480
	float NoiseMax;//[Offset: 0x84, Size: 0x4] 0x78e25d7500

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4] 0x78e25d8b80
	int SizeY;//[Offset: 0x4c, Size: 0x4] 0x78e25d8c00
	int SizeZ;//[Offset: 0x50, Size: 0x4] 0x78e25d8c80
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x78e25d8d00

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x448, Size: 0x8] 0x78e25d8d80
	float Intensity;//[Offset: 0x450, Size: 0x4] 0x78e25d8e00
	float Tightness;//[Offset: 0x454, Size: 0x4] 0x78e25d8e80
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1] 0x78e25d8f00
	void SetIntensity(float NewIntensity);// 0x9759cfc 0x78e25e36c0

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x220, Size: 0x8] 0x78e25d8b00

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0x975a954 0x78e25e3420
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration);// 0x975aad4 0x78e25e3500
	int AddDisplayDelegate(out const delegate Delegate);// 0x975a9fc 0x78e25e35e0

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4] 0x78e25d8480
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10] 0x78e24e8a80

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4] 0x7875b40480
	int MaxTileSize;//[Offset: 0x4, Size: 0x4] 0x7875b40500
	byte[] Formats;//[Offset: 0x8, Size: 0x10] 0x7875b30560
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4] 0x7875b40600
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7875b40680
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4] 0x7875b40700

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x975dbc8 0x78e25e2ee0
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x975d9dc 0x78e25e2fc0
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x975d124 0x78e25e30a0
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x975d6f8 0x78e25e3180
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x975d470 0x78e25e3260
	static void EnableRecording(bool bEnabled);// 0x975dca8 0x78e25e3340

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18] 0x78e25db580
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x9762484 0x78e25e2a80
	float GetVoiceLevel();// 0x9762450 0x78e25e2b60
	static VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x976252c 0x78e25e2c40
	void BPOnTalkingEnd();// 0x9762384 0x78e25e2d20
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x97623a0 0x78e25e2e00

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8] 0x7875b40300
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8] 0x7875b40380
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8] 0x7875b40400

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	static void SetMicThreshold(float InThreshold);// 0x9762c68 0x78e25e29a0

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x1f4, Size: 0x4] 0x78e25da600
	float LayerHeight;//[Offset: 0x1f8, Size: 0x4] 0x78e25da680
	float TracingStartMaxDistance;//[Offset: 0x1fc, Size: 0x4] 0x78e25da700
	float TracingMaxDistance;//[Offset: 0x200, Size: 0x4] 0x78e25da780
	float PlanetRadius;//[Offset: 0x204, Size: 0x4] 0x78e25da800
	Color GroundAlbedo;//[Offset: 0x208, Size: 0x4] 0x78e25da880
	MaterialInterface* Material;//[Offset: 0x210, Size: 0x8] 0x78e25da900
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1] 0x78e25da980
	float SkyLightCloudBottomOcclusion;//[Offset: 0x21c, Size: 0x4] 0x78e25daa00
	float ViewSampleCountScale;//[Offset: 0x220, Size: 0x4] 0x78e25daa80
	float ReflectionSampleCountScale;//[Offset: 0x224, Size: 0x4] 0x78e25dab00
	float ShadowViewSampleCountScale;//[Offset: 0x228, Size: 0x4] 0x78e25dab80
	float ShadowReflectionSampleCountScale;//[Offset: 0x22c, Size: 0x4] 0x78e25dac00
	float ShadowTracingDistance;//[Offset: 0x230, Size: 0x4] 0x78e25dac80
	float StopTracingTransmittanceThreshold;//[Offset: 0x234, Size: 0x4] 0x78e25dad00
	void SetViewSampleCountScale(float NewValue);// 0x9763c38 0x78e25e5640
	void SetTracingStartMaxDistance(float NewValue);// 0x976402c 0x78e25e1d60
	void SetTracingMaxDistance(float NewValue);// 0x9763f84 0x78e25e1e40
	void SetStopTracingTransmittanceThreshold(float NewValue);// 0x97638f0 0x78e25e1f20
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0x9763ce0 0x78e25e2000
	void SetShadowViewSampleCountScale(float NewValue);// 0x9763ae8 0x78e25e20e0
	void SetShadowTracingDistance(float NewValue);// 0x9763998 0x78e25e21c0
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x9763a40 0x78e25e22a0
	void SetReflectionSampleCountScale(float NewValue);// 0x9763b90 0x78e25e2380
	void SetPlanetRadius(float NewValue);// 0x9763edc 0x78e25e2460
	void SetMaterial(MaterialInterface* NewValue);// 0x9763848 0x78e25e2540
	void SetLayerHeight(float NewValue);// 0x97640d4 0x78e25e2620
	void SetLayerBottomAltitude(float NewValue);// 0x976417c 0x78e25e2700
	void SetGroundAlbedo(Color NewValue);// 0x9763e38 0x78e25e27e0
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x9763d88 0x78e25e28c0

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x220, Size: 0x8] 0x78e25da580

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x258, Size: 0x8] 0x78e25dc600

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4] 0x78a8150580
	int Max;//[Offset: 0x4, Size: 0x4] 0x78a8150600

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x220, Size: 0x8] 0x78e25dc580

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x1f4, Size: 0x4] 0x78e25dbf80
	float Speed;//[Offset: 0x1f8, Size: 0x4] 0x78e25dc000
	float MinGustAmount;//[Offset: 0x1fc, Size: 0x4] 0x78e25dc080
	float MaxGustAmount;//[Offset: 0x200, Size: 0x4] 0x78e25dc100
	float Radius;//[Offset: 0x204, Size: 0x4] 0x78e25dc180
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78e25dc200
	void SetWindType(enum InNewType);// 0x97657a0 0x78e25e5100
	void SetStrength(float InNewStrength);// 0x9765ae8 0x78e25e51e0
	void SetSpeed(float InNewSpeed);// 0x9765a40 0x78e25e52c0
	void SetRadius(float InNewRadius);// 0x9765848 0x78e25e53a0
	void SetMinimumGustAmount(float InNewMinGust);// 0x9765998 0x78e25e5480
	void SetMaximumGustAmount(float InNewMaxGust);// 0x97658f0 0x78e25e5560

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10] 0x78e24e8300
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28] 0x78e25dcb80

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4] 0x7875b41400
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4] 0x7875b41480
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875b41500
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1] 0x7875b41580
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1] 0x7875b41600
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1] 0x7875b41680
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1] 0x7875b41700
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xa8] 0x7875b41780
	MeshMergingSettings MergeSetting;//[Offset: 0xb4, Size: 0xa0] 0x7875b41800
	float DesiredBoundRadius;//[Offset: 0x154, Size: 0x4] 0x7875b41880
	float DesiredFillingPercentage;//[Offset: 0x158, Size: 0x4] 0x7875b41900
	int MinNumberOfActorsToBuild;//[Offset: 0x15c, Size: 0x4] 0x7875b41980

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4] 0x7875ae0d00
	float VoxelSize;//[Offset: 0x4, Size: 0x4] 0x7875ae0d80
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x88] 0x7875ae0e00
	float MergeDistance;//[Offset: 0x90, Size: 0x4] 0x7875ae0e80
	Color UnresolvedGeometryColor;//[Offset: 0x94, Size: 0x4] 0x7875ae0f00
	float MaxRayCastDist;//[Offset: 0x98, Size: 0x4] 0x7875ae0f80
	float HardAngleThreshold;//[Offset: 0x9c, Size: 0x4] 0x7875ae1000
	int LightMapResolution;//[Offset: 0xa0, Size: 0x4] 0x7875ae1080
	byte NormalCalculationMethod;//[Offset: 0xa4, Size: 0x1] 0x7875acf800
	byte LandscapeCullingPrecision;//[Offset: 0xa5, Size: 0x1] 0x7875acf880
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1] 0x7875acf900
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1] 0x7875acf980
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1] 0x7875acfa00
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1] 0x7875acfa80
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1] 0x7875acfb00
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1] 0x7875acfb80
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1] 0x7875acfc00
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1] 0x7875acfc80
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1] 0x7875acfd00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1] 0x7875acfd80
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1] 0x7875acfe00
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1] 0x7875acfe80
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1] 0x7875acff00

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8] 0x7875ac9980
	float GutterSpace;//[Offset: 0x8, Size: 0x4] 0x7875ac9a00
	float MetallicConstant;//[Offset: 0xc, Size: 0x4] 0x7875ac9a80
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4] 0x7875ac9b00
	float AnisotropyConstant;//[Offset: 0x14, Size: 0x4] 0x7875ac9b80
	float SpecularConstant;//[Offset: 0x18, Size: 0x4] 0x7875ac9c00
	float OpacityConstant;//[Offset: 0x1c, Size: 0x4] 0x7875ac9c80
	float OpacityMaskConstant;//[Offset: 0x20, Size: 0x4] 0x7875ac9d00
	float AmbientOcclusionConstant;//[Offset: 0x24, Size: 0x4] 0x7875ac9d80
	byte TextureSizingType;//[Offset: 0x28, Size: 0x1] 0x7875ac9e00
	byte MaterialMergeType;//[Offset: 0x29, Size: 0x1] 0x7875ac9e80
	byte BlendMode;//[Offset: 0x2a, Size: 0x1] 0x7875ac9f00
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1] 0x7875ac9f80
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1] 0x7875aca000
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1] 0x7875aca080
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1] 0x7875aca100
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1] 0x7875aca180
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1] 0x7875aca200
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1] 0x7875aca280
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1] 0x7875aca300
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7875aca380
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x7875aca400
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x7875aca480
	IntPoint DiffuseTextureSize;//[Offset: 0x30, Size: 0x8] 0x7875aca500
	IntPoint NormalTextureSize;//[Offset: 0x38, Size: 0x8] 0x7875ac8480
	IntPoint TangentTextureSize;//[Offset: 0x40, Size: 0x8] 0x7875ac8500
	IntPoint MetallicTextureSize;//[Offset: 0x48, Size: 0x8] 0x7875ac8580
	IntPoint RoughnessTextureSize;//[Offset: 0x50, Size: 0x8] 0x7875ac8600
	IntPoint AnisotropyTextureSize;//[Offset: 0x58, Size: 0x8] 0x7875ac8680
	IntPoint SpecularTextureSize;//[Offset: 0x60, Size: 0x8] 0x7875ac8700
	IntPoint EmissiveTextureSize;//[Offset: 0x68, Size: 0x8] 0x7875ac8780
	IntPoint OpacityTextureSize;//[Offset: 0x70, Size: 0x8] 0x7875ac8800
	IntPoint OpacityMaskTextureSize;//[Offset: 0x78, Size: 0x8] 0x7875ac8880
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x80, Size: 0x8] 0x7875ac8900

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4] 0x7875acff80
	enum OutputUVs;//[Offset: 0x4, Size: 0x1] 0x78759ed8a0
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x88] 0x7875ace800
	int GutterSize;//[Offset: 0x94, Size: 0x4] 0x7875ace880
	int SpecificLOD;//[Offset: 0x98, Size: 0x4] 0x7875ace900
	enum LODSelectionType;//[Offset: 0x9c, Size: 0x1] 0x78759ed940
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1] 0x7875acea00
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1] 0x7875acea80
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1] 0x7875aceb00
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1] 0x7875aceb80
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1] 0x7875acec00
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1] 0x7875acec80
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d, Size: 0x1] 0x7875aced00
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d, Size: 0x1] 0x7875aced80
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1] 0x7875acee00
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1] 0x7875acee80
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e, Size: 0x1] 0x7875acef00
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e, Size: 0x1] 0x7875acef80
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e, Size: 0x1] 0x7875acf000
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e, Size: 0x1] 0x7875acf080

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: LPSPRepresentation.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x7875b4f480
	bool bTicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1] 0x7875b4f500
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1] 0x7875b4f580
	void TrySetEnabled(const bool bValue);// 0x5d54148 0x7875a51200
	void SetEnabled(const bool bValue);// 0x5d5407c 0x7875a512e0
	void OnEnable();// 0x5d54060 0x7875a513c0
	void OnDisable();// 0x5d54044 0x7875a514a0
	bool IsEnabled();// 0x5d5412c 0x78bfbf3a40

--------------------------------
Class: LPSPAttachment.LPSPRepresentation.Actor.Object
	StaticMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8] 0x7875b4ef00
	bool bAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x7875b4ef80
	<FName,MaterialInterface*> Materials;//[Offset: 0x238, Size: 0x50] 0x7875b1a600
	LPSPOffset Offset;//[Offset: 0x288, Size: 0x24] 0x7875b4f100
	LinearColor TextureTint;//[Offset: 0x2ac, Size: 0x10] 0x7875b4f180
	Texture* Texture;//[Offset: 0x2c0, Size: 0x8] 0x7875b4f200
	bool IsAlwaysVisible();// 0x5d4ace0 0x7875a50e80
	LinearColor GetTextureTint();// 0x5d4aca4 0x7875a50f60
	Texture* GetTexture();// 0x5d4acc4 0x7875a51040
	LPSPOffset GetOffset();// 0x5d4ac74 0x7875a51120

--------------------------------
Class: LPSPOffset
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x78760eee80
	Rotator Rotation;//[Offset: 0xc, Size: 0xc] 0x78760eef00
	Vector Scale;//[Offset: 0x18, Size: 0xc] 0x78760eef80

--------------------------------
Class: LPSPCasing.Actor.Object
	SceneComponent* Pivot;//[Offset: 0x220, Size: 0x8] 0x7875b4ea00
	StaticMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8] 0x7875b4ea80
	bool bUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x7875b4eb00
	float RotationSpeed;//[Offset: 0x234, Size: 0x4] 0x7875b4eb80
	Vector2D DestroyDelayRange;//[Offset: 0x238, Size: 0x8] 0x7875b4ec00
	SoundBase* Sound;//[Offset: 0x240, Size: 0x8] 0x7875b4ec80
	bool ShouldUpdateScale();// 0x5d4b5f4 0x7875a50b00
	void OnSpawn();// 0x6d94ba8 0x7875a50be0
	float GetDestroyDelay();// 0x5d4b5d8 0x7875a50cc0
	void ApplyImpulse(Vector Direction, const Vector Strength);// 0x6d94ba8 0x7875a50da0

--------------------------------
Class: LPSPCharacter.Character.Pawn.Actor.Object
	bool bThirdPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1] 0x7875b67680
	Vector FirstPersonOffset;//[Offset: 0x4bc, Size: 0xc] 0x7875b67700
	float ViewInterpSpeed;//[Offset: 0x4c8, Size: 0x4] 0x7875b67780
	float ViewScaleFactor;//[Offset: 0x4cc, Size: 0x4] 0x7875b67800
	AnimMontage* GrenadeThrowMontage;//[Offset: 0x4d0, Size: 0x8] 0x7875b67880
	AnimMontage* GrenadeThrowAdditiveMontage;//[Offset: 0x4d8, Size: 0x8] 0x7875b67900
	AnimMontage* MeleeMontage;//[Offset: 0x4e0, Size: 0x8] 0x7875b67980
	AnimMontage* MeleeAdditiveMontage;//[Offset: 0x4e8, Size: 0x8] 0x7875b67a00
	float HorizontalSpeedMultiplier;//[Offset: 0x4f0, Size: 0x4] 0x7875b67a80
	float BackwardsSpeedMultiplier;//[Offset: 0x4f4, Size: 0x4] 0x7875b67b00
	float MappedSpeed;//[Offset: 0x4f8, Size: 0x4] 0x7875b67b80
	bool bAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 0x1] 0x7875b67c00
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1] 0x7875b67c80
	bool bCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fe, Size: 0x1] 0x7875b67d00
	LPSPScope* Scope;//[Offset: 0x500, Size: 0x8] 0x7875b67d80
	LPSPMagazine* Magazine;//[Offset: 0x508, Size: 0x8] 0x7875b67e00
	LPSPLaser* Laser;//[Offset: 0x510, Size: 0x8] 0x7875b67e80
	LPSPMuzzle* Muzzle;//[Offset: 0x518, Size: 0x8] 0x7875b67f00
	GameplayTagContainer AbilityTags;//[Offset: 0x520, Size: 0x20] 0x7875b67f80
	Vector2D Movement;//[Offset: 0x540, Size: 0x8] 0x7875b68000
	Vector2D Look;//[Offset: 0x548, Size: 0x8] 0x7875b68080
	SpringArmComponent* Spring;//[Offset: 0x550, Size: 0x8] 0x7875b68100
	CameraComponent* Camera;//[Offset: 0x558, Size: 0x8] 0x7875b68180
	SkeletalMeshComponent* Arms;//[Offset: 0x560, Size: 0x8] 0x7875b68200
	float UpdateInterval;//[Offset: 0x568, Size: 0x4] 0x7875b68280
	class LPSPWeapon* WeaponClass;//[Offset: 0x570, Size: 0x8] 0x7875b32fe0
	FName WeaponSocket;//[Offset: 0x578, Size: 0x8] 0x7875b68300
	bool bUseWeaponCameraAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1] 0x7875b68380
	void Update();// 0x5d4be5c 0x7875a55e20
	bool TryGetWeapon(out LPSPWeapon* Value);// 0x5d4c12c 0x7875a55f00
	void StopGameAbility(LPSPGameAbility Ability);// 0x5d4bc6c 0x7875a55fe0
	void SetWeaponHolsterState(const byte Value);// 0x5d4c050 0x7875a560c0
	void PlayWeaponMontage(AnimMontage* Montage);// 0x5d4bfa8 0x7875a561a0
	bool IsThirdPerson();// 0x5d4bf8c 0x7875a56280
	bool IsRunning();// 0x5d4c208 0x7875a56360
	bool IsCrosshairVisible();// 0x5d4be70 0x7875a56440
	bool IsAiming();// 0x5d4c224 0x7875a56520
	byte GetWeaponHolsterState();// 0x5d4c1ec 0x7875a56600
	LPSPWeapon* GetWeapon();// 0x5d4c0f4 0x7875a566e0
	Vector GetViewLocation();// 0x5d4be18 0x7875a567c0
	SpringArmComponent* GetSpring();// 0x5d4c300 0x7875a568a0
	LPSPScope* GetScope();// 0x5d4bf70 0x7875a56980
	float GetPitchAcceleration();// 0x5d4c278 0x7875a56a60
	LPSPMuzzle* GetMuzzle();// 0x5d4bf1c 0x7875a56b40
	Vector2D GetMovement();// 0x5d4c240 0x7875a56c20
	float GetMappedSpeed();// 0x5d4c2ac 0x7875a56d00
	LPSPMagazine* GetMagazine();// 0x5d4bf54 0x7875a56de0
	Vector2D GetLook();// 0x5d4c25c 0x7875a56ec0
	LPSPLaser* GetLaser();// 0x5d4bf38 0x7875a56fa0
	CameraComponent* GetCamera();// 0x5d4c2e4 0x7875a57080
	SkeletalMeshComponent* GetArms();// 0x5d4c2c8 0x7875a57160
	float GetAimSpeedMultiplier();// 0x5d4bee8 0x7875a57240
	float GetAimDuration();// 0x5d4bea4 0x7875a57320
	void BlueprintUpdate();// 0x6d94ba8 0x7875a53a40

--------------------------------
Class: LPSPWeapon.LPSPRepresentation.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8] 0x7875b78500
	SceneComponent* Muzzles;//[Offset: 0x230, Size: 0x8] 0x7875b78580
	SceneComponent* Scopes;//[Offset: 0x238, Size: 0x8] 0x7875b78600
	SceneComponent* Lasers;//[Offset: 0x240, Size: 0x8] 0x7875b78680
	SceneComponent* Magazines;//[Offset: 0x248, Size: 0x8] 0x7875b78700
	SceneComponent* Grips;//[Offset: 0x250, Size: 0x8] 0x7875b78780
	SceneComponent* Defaults;//[Offset: 0x258, Size: 0x8] 0x7875b78800
	ArrowComponent* Eject;//[Offset: 0x260, Size: 0x8] 0x7875b78880
	LPSPChildActorRef EquippedMuzzle;//[Offset: 0x268, Size: 0x8] 0x7875b78900
	LPSPChildActorRef EquippedScope;//[Offset: 0x270, Size: 0x8] 0x7875b78980
	LPSPChildActorRef EquippedLaser;//[Offset: 0x278, Size: 0x8] 0x7875b78a00
	LPSPChildActorRef EquippedMagazine;//[Offset: 0x280, Size: 0x8] 0x7875b78a80
	LPSPChildActorRef EquippedGrip;//[Offset: 0x288, Size: 0x8] 0x7875b78b00
	Texture* Texture;//[Offset: 0x290, Size: 0x8] 0x7875b78b80
	LinearColor TextureTint;//[Offset: 0x298, Size: 0x10] 0x7875b78c00
	class AnimInstance* Instance;//[Offset: 0x2a8, Size: 0x8] 0x7875b34160
	AnimMontage* MeleeAdditiveMontage;//[Offset: 0x2b0, Size: 0x8] 0x7875b78c80
	float LandingOffset;//[Offset: 0x2b8, Size: 0x4] 0x7875b78d00
	LPSPAttachment*[] Attachments;//[Offset: 0x2c0, Size: 0x10] 0x7875b34200
	bool TryGetScope(out LPSPScope* Scope);// 0x5d56654 0x7875b851e0
	bool TryGetMuzzle(out LPSPMuzzle* Muzzle);// 0x5d56714 0x7875b852c0
	bool TryGetMag(out LPSPMagazine* Mag);// 0x5d564d4 0x7875b853a0
	bool TryGetLaser(out LPSPLaser* Laser);// 0x5d56594 0x7875b85480
	bool TryGetGrip(out LPSPGrip* Grip);// 0x5d56414 0x7875b85560
	bool TryGetAttachment(class LPSPAttachment Class, out LPSPAttachment* OutAttachment);// 0x5d567d4 0x7875b85640
	LinearColor GetTextureTint();// 0x5d569cc 0x7875b81d60
	Texture* GetTexture();// 0x5d569ec 0x7875b81e40
	SkeletalMeshComponent* GetMesh();// 0x5d56a24 0x7875b81f20
	float GetLandingOffset();// 0x5d56a08 0x7875b82000
	class AnimInstance GetInstance();// 0x5d563f8 0x7875b820e0
	LPSPAttachment*[] GetAttachments();// 0x5d568e0 0x7875b821c0

--------------------------------
Class: LPSPChildActorRef
	FName ComponentName;//[Offset: 0x0, Size: 0x8] 0x78760ef780

--------------------------------
Class: LPSPScope.LPSPAttachment.LPSPRepresentation.Actor.Object
	LPSPOffset AimOffset;//[Offset: 0x2c8, Size: 0x24] 0x7875b76600
	float FieldOfViewMultiplier;//[Offset: 0x2ec, Size: 0x4] 0x7875b76680
	float YawSensitivityMultiplier;//[Offset: 0x2f0, Size: 0x4] 0x7875b76700
	float PitchSensitivityMultiplier;//[Offset: 0x2f4, Size: 0x4] 0x7875b76780
	float SpreadMultiplier;//[Offset: 0x2f8, Size: 0x4] 0x7875b76800
	float AimSpeedMultiplier;//[Offset: 0x2fc, Size: 0x4] 0x7875b76880
	LPSPLagValues LagMultiplier;//[Offset: 0x300, Size: 0x68] 0x7875b76900
	bool bOverrideSightMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1] 0x7875b76980
	Texture* SightTexture;//[Offset: 0x370, Size: 0x8] 0x7875b76a00
	LinearColor SightTint;//[Offset: 0x378, Size: 0x10] 0x7875b76a80
	float SightScale;//[Offset: 0x388, Size: 0x4] 0x7875b76b00
	float SightDepth;//[Offset: 0x38c, Size: 0x4] 0x7875b76b80
	float SightEmission;//[Offset: 0x390, Size: 0x4] 0x7875b76c00
	float GetYawSensitivityMultiplier();// 0x5d547cc 0x7875b828c0
	float GetSpreadMultiplier();// 0x5d54794 0x7875b829a0
	float GetPitchSensitivityMultiplier();// 0x5d547b0 0x7875b82a80
	LPSPLagValues GetLagMultiplier();// 0x5d54760 0x7875b82b60
	float GetFieldOfViewMultiplier();// 0x5d547e8 0x7875b82c40
	float GetAimSpeedMultiplier();// 0x5d54744 0x7875b82d20
	LPSPOffset GetAimOffset();// 0x5d54804 0x7875b82e00

--------------------------------
Class: LPSPLagValues
	LPSPDirectionTransform Movement;//[Offset: 0x0, Size: 0x30] 0x78760ef000
	LPSPDirectionTransform Look;//[Offset: 0x30, Size: 0x30] 0x78760ef080
	float Stiffness;//[Offset: 0x60, Size: 0x4] 0x78760ef100
	float Damping;//[Offset: 0x64, Size: 0x4] 0x78760ef180

--------------------------------
Class: LPSPDirectionTransform
	LPSPDirectionVectors Location;//[Offset: 0x0, Size: 0x18] 0x78760ef580
	LPSPDirectionVectors Rotation;//[Offset: 0x18, Size: 0x18] 0x78760ef700

--------------------------------
Class: LPSPDirectionVectors
	Vector Horizontal;//[Offset: 0x0, Size: 0xc] 0x78760ef600
	Vector Vertical;//[Offset: 0xc, Size: 0xc] 0x78760ef680

--------------------------------
Class: LPSPMuzzle.LPSPAttachment.LPSPRepresentation.Actor.Object
	FName SocketName;//[Offset: 0x2c8, Size: 0x8] 0x7875b77080
	SoundCue* FiringCue;//[Offset: 0x2d0, Size: 0x8] 0x7875b77100
	ParticleSystem* FlashParticles;//[Offset: 0x2d8, Size: 0x8] 0x7875b77180
	bool bOverheats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x7875b77200
	int ShotsToOverheat;//[Offset: 0x2e4, Size: 0x4] 0x7875b77280
	ParticleSystem* OverheatParticles;//[Offset: 0x2e8, Size: 0x8] 0x7875b77300
	bool ShouldOverheat();// 0x5d531ac 0x7875b82ee0
	FName GetSocketName();// 0x5d53200 0x7875b82fc0
	int GetShotsToOverheat();// 0x5d53190 0x7875b830a0
	ParticleSystem* GetOverheatParticles();// 0x5d53174 0x7875b83180
	ParticleSystem* GetFlashParticles();// 0x5d531c8 0x7875b83260
	SoundCue* GetFiringCue();// 0x5d531e4 0x7875b83340

--------------------------------
Class: LPSPMagazine.LPSPAttachment.LPSPRepresentation.Actor.Object
	int TotalAmmo;//[Offset: 0x2c8, Size: 0x4] 0x7875b75580
	class LPSPCasing* CasingType;//[Offset: 0x2d0, Size: 0x8] 0x7875b345c0
	Vector2D CasingImpulseRange;//[Offset: 0x2d8, Size: 0x8] 0x7875b75600
	float CasingOffset;//[Offset: 0x2e0, Size: 0x4] 0x7875b75680
	class LPSPProjectile* ProjectileType;//[Offset: 0x2e8, Size: 0x8] 0x7875b34660
	Vector2D ProjectileVelocityRange;//[Offset: 0x2f0, Size: 0x8] 0x7875b75700
	Vector2D ProjectilePelletRange;//[Offset: 0x2f8, Size: 0x8] 0x7875b75780
	bool TryGetProjectileType(out class LPSPProjectile Type);// 0x5d521ac 0x7875b83420
	bool TryGetCasingType(out class LPSPCasing Type);// 0x5d522a4 0x7875b83500
	void OnFill();// 0x6d94ba8 0x7875b835e0
	void OnChangeAmmoCount();// 0x6d94ba8 0x7875b836c0
	bool IsFull();// 0x5d52364 0x7875b837a0
	bool IsEmpty();// 0x5d5238c 0x7875b83880
	int GetTotalAmmo();// 0x5d5246c 0x7875b83960
	Vector2D GetProjectileVelocityRange();// 0x5d52190 0x7875b80080
	Vector2D GetProjectilePelletRange();// 0x5d52174 0x7875b80160
	float GetCasingOffset();// 0x5d5226c 0x7875b80240
	Vector2D GetCasingImpulseRange();// 0x5d52288 0x7875b80320
	int GetAmmo();// 0x5d52488 0x7875b80400
	void Fill();// 0x5d523b0 0x7875b804e0
	void AddAmmo(const int Amount);// 0x5d523c4 0x7875b805c0

--------------------------------
Class: LPSPProjectile.Actor.Object

--------------------------------
Class: LPSPLaser.LPSPAttachment.LPSPRepresentation.Actor.Object
	bool OffWhileSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7875b75d80
	bool OffWhileAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1] 0x7875b75e00

--------------------------------
Class: LPSPGrip.LPSPAttachment.LPSPRepresentation.Actor.Object

--------------------------------
Class: LPSPGameAbility
	GameplayTagContainer RequiredTags;//[Offset: 0x0, Size: 0x20] 0x78760ef200
	GameplayTagContainer BlockedTags;//[Offset: 0x20, Size: 0x20] 0x78760ef280
	GameplayTagContainer AddedTags;//[Offset: 0x40, Size: 0x20] 0x78760ef300
	GameplayTagContainer RemovedTags;//[Offset: 0x60, Size: 0x20] 0x78760ef500

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10] 0x7895c1f100
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10] 0x7895c1f060

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8] 0x78760ef400

--------------------------------
Class: LPSPCharacterAnimInstance.AnimInstance.Object
	LPSPCharacter* Character;//[Offset: 0x2b8, Size: 0x8] 0x7875b6e600
	bool bAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7875b6e680
	bool bFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x7875b6e700
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1] 0x7875b6c680
	bool IsRunning();// 0x5d4d51c 0x7875a5c720

--------------------------------
Class: LPSPCrosshair.UserWidget.Widget.Visual.Object
	LPSPCharacter* Character;//[Offset: 0x260, Size: 0x8] 0x7875b73c00
	enum GetSlateVisibility();// 0x5d4dc24 0x7875b81ba0

--------------------------------
Class: LPSPDamageable.Actor.Object
	bool bGroundChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x7875b73580
	float GroundCheckDelay;//[Offset: 0x224, Size: 0x4] 0x7875b73600
	byte[] GroundCheckTypes;//[Offset: 0x228, Size: 0x10] 0x7875b34ac0
	void SetGroundCheckTypes(const byte[] Value);// 0x5d4e144 0x7875b814a0
	void SetGroundChecks(const bool Value);// 0x5d4e44c 0x7875b81580
	void SetGroundCheckDelay(const float Value);// 0x5d4e38c 0x7875b81660
	void RadialDamage(float Damage, Actor* DamageCauser);// 0x6d94ba8 0x7875b81740
	void PointDamage(float Damage, Actor* DamageCauser);// 0x6d94ba8 0x7875b81820
	byte[] GetGroundCheckTypes();// 0x5d4e2a0 0x7875b81900
	bool GetGroundChecks();// 0x5d4e4f8 0x7875b819e0
	float GetGroundCheckDelay();// 0x5d4e430 0x7875b81ac0

--------------------------------
Class: LPSPEjectCasingNotify.AnimNotify.Object
	float Offset;//[Offset: 0x38, Size: 0x4] 0x7875b75280
	float Impulse;//[Offset: 0x3c, Size: 0x4] 0x7875b73200
	bool bRandomizeInitialRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875b73280
	FName EjectSocketName;//[Offset: 0x44, Size: 0x8] 0x7875b73300

--------------------------------
Class: LPSPExplosionComponent.SceneComponent.ActorComponent.Object
	Vector2D Radius;//[Offset: 0x1f4, Size: 0x8] 0x7875b74380
	bool bImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1] 0x7875b74400
	byte ImpulseMethod;//[Offset: 0x1fd, Size: 0x1] 0x7875b74480
	byte ImpulseFalloff;//[Offset: 0x1fe, Size: 0x1] 0x7875b74500
	Vector2D ImpulseForce;//[Offset: 0x200, Size: 0x8] 0x7875b74580
	byte[] ImpulseObjectTypes;//[Offset: 0x208, Size: 0x10] 0x7875b34840
	bool bUseImpulsePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x7875b74680
	byte ImpulsePreventionChannel;//[Offset: 0x219, Size: 0x1] 0x7875b74700
	bool bDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1] 0x7875b74780
	byte DamageMethod;//[Offset: 0x21b, Size: 0x1] 0x7875b74800
	Vector2D DamageAmount;//[Offset: 0x21c, Size: 0x8] 0x7875b74880
	byte[] DamageObjectTypes;//[Offset: 0x228, Size: 0x10] 0x7875b348e0
	bool bUseDamagePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x7875b74980
	byte DamagePreventionChannel;//[Offset: 0x239, Size: 0x1] 0x7875b74a00
	bool bShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1] 0x7875b74a80
	class CameraShakeBase[] Shakes;//[Offset: 0x240, Size: 0x10] 0x7875b34a20
	float ShakeFalloff;//[Offset: 0x250, Size: 0x4] 0x7875b74b00
	float ShakeInnerRadius;//[Offset: 0x254, Size: 0x4] 0x7875b74b80
	float ShakeOuterRadius;//[Offset: 0x258, Size: 0x4] 0x7875b74c00
	bool bDebugRadialImpulsePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x7875b74c80
	bool bDebugRadialDamagePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1] 0x7875b74d00
	void TryApplyImpulse(const HitResult Result, const float Multiplier);// 0x5d4f638 0x7875b80b00
	void TryApplyDamage(const HitResult Result);// 0x5d4f7c0 0x7875b80be0
	void StartShake(const int Index);// 0x5d4fb90 0x7875b80cc0
	float GetRadiusValue();// 0x5d4f61c 0x7875b80da0
	void DrawDebugRadius(const LinearColor Color, const float Duration);// 0x5d4f528 0x7875b80e80
	void ApplyRadialImpulse(float Multiplier);// 0x5d4f910 0x7875b80f60
	void ApplyRadialDamage();// 0x5d4f8fc 0x7875b81040
	void ApplyPointImpulse(const HitResult Result);// 0x5d4faa4 0x7875b81120
	void ApplyPointDamage(const HitResult Result);// 0x5d4f9b8 0x7875b81200

--------------------------------
Class: LPSPGameAbilityLibrary.BlueprintFunctionLibrary.Object
	static bool TryStartGameAbility(const LPSPGameAbility Ability, out GameplayTagContainer Container);// 0x5d50ca4 0x7875b806a0
	static void StopGameAbility(const LPSPGameAbility Ability, out GameplayTagContainer Container, const bool AddRemoved);// 0x5d50774 0x7875b80780
	static void StartGameAbility(const LPSPGameAbility Ability, out GameplayTagContainer Container);// 0x5d5094c 0x7875b80860
	static void DebugContainer(const GameplayTagContainer Container);// 0x5d50538 0x7875b80940
	static bool CanStartGameAbility(const LPSPGameAbility Ability, out GameplayTagContainer Container);// 0x5d50ad8 0x7875b80a20

--------------------------------
Class: LPSPGameInstance.GameInstance.Object

--------------------------------
Class: LPSPPlayWeaponMontageNotify.AnimNotify.Object
	AnimMontage* Montage;//[Offset: 0x38, Size: 0x8] 0x7875b77000

--------------------------------
Class: LPSPSGSettings.SaveGame.Object
	int FieldOfView;//[Offset: 0x28, Size: 0x4] 0x7875b78400
	float Sensitivity;//[Offset: 0x2c, Size: 0x4] 0x7875b76380
	void SetSensitivity(const float Value);// 0x5d54f98 0x7875b82540
	void SetFieldOfView(const int Value);// 0x5d55058 0x7875b82620
	float GetSensitivity();// 0x5d5503c 0x7875b82700
	int GetFieldOfView();// 0x5d550fc 0x7875b827e0

--------------------------------
Class: LPSPUWMenu.UserWidget.Widget.Visual.Object
	Key[] CloseMenuKeys;//[Offset: 0x260, Size: 0x10] 0x7875b34520
	void OnCloseMenu();// 0x6d94ba8 0x7875b82460

--------------------------------
Class: LPSPViewmodelAnimInstance.LPSPCharacterAnimInstance.AnimInstance.Object
	LPSPOffset OffsetStanding;//[Offset: 0x2c4, Size: 0x24] 0x7875b77580
	LPSPOffset OffsetCrouching;//[Offset: 0x2e8, Size: 0x24] 0x7875b77600
	LPSPOffset OffsetRunning;//[Offset: 0x30c, Size: 0x24] 0x7875b77680
	LPSPLagValues LagStanding;//[Offset: 0x330, Size: 0x68] 0x7875b77700
	LPSPLagValues LagAiming;//[Offset: 0x398, Size: 0x68] 0x7875b77780
	float LagMovementInterpSpeed;//[Offset: 0x400, Size: 0x4] 0x7875b77800
	float Movement;//[Offset: 0x404, Size: 0x4] 0x7875b77880
	float TurnRate;//[Offset: 0x408, Size: 0x4] 0x7875b77900
	float PitchAcceleration;//[Offset: 0x40c, Size: 0x4] 0x7875b77980
	Vector AimingLocationLag;//[Offset: 0x410, Size: 0xc] 0x7875b77a00
	Vector AimingRotationLag;//[Offset: 0x41c, Size: 0xc] 0x7875b77a80
	Vector AimingMovementLocationLag;//[Offset: 0x428, Size: 0xc] 0x7875b77b00
	Vector AimingMovementRotationLag;//[Offset: 0x434, Size: 0xc] 0x7875b77b80
	Vector StandingLocationLag;//[Offset: 0x440, Size: 0xc] 0x7875b77c00
	Vector StandingRotationLag;//[Offset: 0x44c, Size: 0xc] 0x7875b77c80
	Vector StandingMovementLocationLag;//[Offset: 0x458, Size: 0xc] 0x7875b77d00
	Vector StandingMovementRotationLag;//[Offset: 0x464, Size: 0xc] 0x7875b77d80
	Vector FinalStandingOffset;//[Offset: 0x470, Size: 0xc] 0x7875b77e00
	Vector FinalRotationStandingOffset;//[Offset: 0x47c, Size: 0xc] 0x7875b77e80
	LPSPOffset AttachmentsOffset;//[Offset: 0x488, Size: 0x24] 0x7875b77f00
	LPSPOffset ScopeAimOffset;//[Offset: 0x4ac, Size: 0x24] 0x7875b77f80
	float AimFieldOfViewMultiplier;//[Offset: 0x4d0, Size: 0x4] 0x7875b78000
	bool bCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1] 0x7875b78080
	byte WeaponHolsterState;//[Offset: 0x4d5, Size: 0x1] 0x7875b78100
	Vector LookOffsetMultiplierLocation;//[Offset: 0x4d8, Size: 0xc] 0x7875b78180
	Vector LookOffsetMultiplierRotation;//[Offset: 0x4e4, Size: 0xc] 0x7875b78200
	float GetAimPlayRate();// 0x5d55c3c 0x7875b822a0
	float[] GetAimBlendTime();// 0x5d55b30 0x7875b82380

--------------------------------
Class: SUData.Object
	<byte,SUDetails> Details;//[Offset: 0x28, Size: 0x50] 0x7875b1a480
	void SpawnDetails(const Object* WorldContextObject, const HitResult HitResult);// 0x5d5badc 0x7875b85100

--------------------------------
Class: SUDetails
	SUDecal Decal;//[Offset: 0x0, Size: 0x48] 0x78760efe00
	SUParticle[] Particles;//[Offset: 0x48, Size: 0x10] 0x7895c1f1a0
	SoundBase* Sound;//[Offset: 0x58, Size: 0x8] 0x78760ee780

--------------------------------
Class: SUDecal
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x78760ee800
	SUSettings Settings;//[Offset: 0x8, Size: 0x18] 0x78760eea80
	float FadeScreenSize;//[Offset: 0x20, Size: 0x4] 0x78760eeb00
	SUFade FadeIn;//[Offset: 0x24, Size: 0x10] 0x78760eeb80
	SUFade FadeOut;//[Offset: 0x34, Size: 0x10] 0x78760eee00

--------------------------------
Class: SUSettings
	bool bRandomizeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78760ee880
	Rotator Offset;//[Offset: 0x4, Size: 0xc] 0x78760ee900
	float MinScale;//[Offset: 0x10, Size: 0x4] 0x78760ee980
	float MaxScale;//[Offset: 0x14, Size: 0x4] 0x78760eea00

--------------------------------
Class: SUFade
	float MinDelay;//[Offset: 0x0, Size: 0x4] 0x78760eec00
	float MaxDelay;//[Offset: 0x4, Size: 0x4] 0x78760eec80
	float MinDuration;//[Offset: 0x8, Size: 0x4] 0x78760eed00
	float MaxDuration;//[Offset: 0xc, Size: 0x4] 0x78760eed80

--------------------------------
Class: SUParticle
	ParticleSystem* Template;//[Offset: 0x0, Size: 0x8] 0x78760efe80
	SUSettings Settings;//[Offset: 0x8, Size: 0x18] 0x78760eff00

--------------------------------
Class: SUPhysicalMaterial.PhysicalMaterial.Object
	bool bReceiveCustomDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1] 0x7875b79b00
	bool bReceiveParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1] 0x7875b79b80
	bool bProduceSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1] 0x7875b79c00

--------------------------------
Class: EnhancedInputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintEnhancedInputActionBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7875b340c0

--------------------------------
Class: BlueprintEnhancedInputActionBinding
	InputAction* InputAction;//[Offset: 0x0, Size: 0x8] 0x78760efa80
	enum TriggerEvent;//[Offset: 0x8, Size: 0x1] 0x7895c1f420
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x78760efb80

--------------------------------
Class: InputAction.DataAsset.Object
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875b7d200
	bool bTriggerWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875b7d280
	bool bReserveAllMappings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x7875b7d300
	enum ValueType;//[Offset: 0x33, Size: 0x1] 0x7875b35f60
	InputTrigger*[] Triggers;//[Offset: 0x38, Size: 0x10] 0x7875b36000
	InputModifier*[] Modifiers;//[Offset: 0x48, Size: 0x10] 0x7875b360a0

--------------------------------
Class: InputTrigger.Object
	float ActuationThreshold;//[Offset: 0x28, Size: 0x4] 0x7875b7de00
	InputActionValue LastValue;//[Offset: 0x2c, Size: 0x10] 0x7875b7de80
	enum UpdateState(const EnhancedPlayerInput* PlayerInput, InputActionValue ModifiedValue, float DeltaTime);// 0x5d86d54 0x7875b866e0
	bool IsActuated(out const InputActionValue ForValue);// 0x5d86eec 0x7875b867c0
	enum GetTriggerType();// 0x5d86eb0 0x7875b868a0

--------------------------------
Class: InputActionValue

--------------------------------
Class: EnhancedPlayerInput.PlayerInput.Object
	<InputMappingContext*,int> AppliedInputContexts;//[Offset: 0x3a8, Size: 0x50] 0x7875b1a3c0
	EnhancedActionKeyMapping[] EnhancedActionMappings;//[Offset: 0x3f8, Size: 0x10] 0x7875b361e0
	<InputAction*,InputActionInstance> ActionInstanceData;//[Offset: 0x458, Size: 0x50] 0x7875b1a540

--------------------------------
Class: InputMappingContext.DataAsset.Object
	EnhancedActionKeyMapping[] Mappings;//[Offset: 0x30, Size: 0x10] 0x7875b35e20
	FText ContextDescription;//[Offset: 0x40, Size: 0x18] 0x7875b7ce00
	void UnmapKey(const InputAction* Action, Key Key);// 0x5d82818 0x7875b86c20
	void UnmapAll();// 0x5d8275c 0x7875b86d00
	void UnmapAction(const InputAction* Action);// 0x5d82770 0x7875b86de0
	EnhancedActionKeyMapping MapKey(const InputAction* Action, Key ToKey);// 0x5d829dc 0x7875b86ec0

--------------------------------
Class: EnhancedActionKeyMapping
	InputAction* Action;//[Offset: 0x0, Size: 0x8] 0x78760efc00
	Key Key;//[Offset: 0x8, Size: 0x18] 0x78760efc80
	InputTrigger*[] Triggers;//[Offset: 0x20, Size: 0x10] 0x7895c1f380
	InputModifier*[] Modifiers;//[Offset: 0x30, Size: 0x10] 0x7895c1f240

--------------------------------
Class: InputModifier.Object
	InputActionValue ModifyRaw(const EnhancedPlayerInput* PlayerInput, InputActionValue CurrentValue, float DeltaTime);// 0x5d83b8c 0x7875b86980
	LinearColor GetVisualizationColor(InputActionValue SampleValue, InputActionValue FinalValue);// 0x5d83a24 0x7875b86a60
	enum GetExecutionPhase();// 0x5d83b50 0x7875b86b40

--------------------------------
Class: InputActionInstance
	InputAction* SourceAction;//[Offset: 0x0, Size: 0x8] 0x7876120f80
	InputTrigger*[] Triggers;//[Offset: 0x10, Size: 0x10] 0x7895c1cf40
	InputModifier*[] Modifiers;//[Offset: 0x20, Size: 0x10] 0x7895c1f6a0
	InputModifier*[] PerInputModifiers;//[Offset: 0x30, Size: 0x10] 0x7895c1f560
	InputModifier*[] FinalValueModifiers;//[Offset: 0x40, Size: 0x10] 0x7895c1f4c0
	float ElapsedProcessedTime;//[Offset: 0x60, Size: 0x4] 0x78760ef900
	float ElapsedTriggeredTime;//[Offset: 0x64, Size: 0x4] 0x78760ef980
	enum TriggerEvent;//[Offset: 0x68, Size: 0x1] 0x7895c1f600

--------------------------------
Class: EnhancedInputActionValueBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintEnhancedInputActionBinding[] InputActionValueBindings;//[Offset: 0x28, Size: 0x10] 0x7875b34020

--------------------------------
Class: EnhancedInputComponent.InputComponent.ActorComponent.Object
	InputActionValue GetBoundActionValue(const InputAction* Action);// 0x5d7e4b8 0x7875b84840

--------------------------------
Class: EnhancedInputLibrary.BlueprintFunctionLibrary.Object
	static void RequestRebuildControlMappingsUsingContext(const InputMappingContext* Context, bool bForceImmediately);// 0x5d7f18c 0x7875b84140
	static InputActionValue MakeInputActionValue(float X, float Y, float Z, out const InputActionValue MatchValueType);// 0x5d7ee30 0x7875b84220
	static InputActionValue GetBoundActionValue(Actor* Actor, const InputAction* Action);// 0x5d7ed34 0x7875b84300
	static bool Conv_InputActionValueToBool(InputActionValue InValue);// 0x5d7ec70 0x7875b843e0
	static Vector Conv_InputActionValueToAxis3D(InputActionValue ActionValue);// 0x5d7ea2c 0x7875b844c0
	static Vector2D Conv_InputActionValueToAxis2D(InputActionValue InValue);// 0x5d7eaf0 0x7875b845a0
	static float Conv_InputActionValueToAxis1D(InputActionValue InValue);// 0x5d7ebb0 0x7875b84680
	static void BreakInputActionValue(InputActionValue InActionValue, out float X, out float Y, out float Z);// 0x5d7efdc 0x7875b84760

--------------------------------
Class: EnhancedInputSubsystemInterface.Interface.Object
	void RequestRebuildControlMappings(bool bForceImmediately);// 0x5d802d4 0x7875b83a40
	void RemoveMappingContext(const InputMappingContext* MappingContext);// 0x5d8038c 0x7875b83b20
	enum QueryMapKeyInContextSet(out const InputMappingContext*[] PrioritizedActiveContexts, const InputMappingContext* InputContext, const InputAction* Action, Key Key, out MappingQueryIssue[] OutIssues, enum BlockingIssues);// 0x5d7fce0 0x7875b83c00
	enum QueryMapKeyInActiveContextSet(const InputMappingContext* InputContext, const InputAction* Action, Key Key, out MappingQueryIssue[] OutIssues, enum BlockingIssues);// 0x5d80008 0x7875b83ce0
	Key[] QueryKeysMappedToAction(const InputAction* Action);// 0x5d7fa18 0x7875b83dc0
	bool HasMappingContext(const InputMappingContext* MappingContext);// 0x5d7fc24 0x7875b83ea0
	void ClearAllMappings();// 0x5d80538 0x7875b83f80
	void AddMappingContext(const InputMappingContext* MappingContext, int Priority);// 0x5d8043c 0x7875b84060

--------------------------------
Class: MappingQueryIssue
	enum Issue;//[Offset: 0x0, Size: 0x1] 0x7895c1cea0
	InputMappingContext* BlockingContext;//[Offset: 0x8, Size: 0x8] 0x7876120d00
	InputAction* BlockingAction;//[Offset: 0x10, Size: 0x8] 0x7876120d80

--------------------------------
Class: EnhancedInputLocalPlayerSubsystem.LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: EnhancedInputEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	EnhancedPlayerInput* PlayerInput;//[Offset: 0xe0, Size: 0x8] 0x7875b7ba00

--------------------------------
Class: InputDebugKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputDebugKeyDelegateBinding[] InputDebugKeyDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7875b35ec0

--------------------------------
Class: BlueprintInputDebugKeyDelegateBinding
	InputChord InputChord;//[Offset: 0x0, Size: 0x20] 0x7876120e00
	byte InputKeyEvent;//[Offset: 0x20, Size: 0x1] 0x7876120e80
	FName FunctionNameToBind;//[Offset: 0x24, Size: 0x8] 0x7876120f00
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78c24eb300

--------------------------------
Class: InputModifierDeadZone.InputModifier.Object
	float LowerThreshold;//[Offset: 0x28, Size: 0x4] 0x7875b7c800
	float UpperThreshold;//[Offset: 0x2c, Size: 0x4] 0x7875b7c880
	enum Type;//[Offset: 0x30, Size: 0x1] 0x7875b35ce0

--------------------------------
Class: InputModifierScalar.InputModifier.Object
	Vector Scalar;//[Offset: 0x28, Size: 0xc] 0x7875b7c780

--------------------------------
Class: InputModifierNegate.InputModifier.Object
	bool bX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875b7e700
	bool bY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875b7c680
	bool bZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7875b7c700

--------------------------------
Class: InputModifierSmooth.InputModifier.Object

--------------------------------
Class: InputModifierResponseCurveExponential.InputModifier.Object
	Vector CurveExponent;//[Offset: 0x28, Size: 0xc] 0x7875b7e680

--------------------------------
Class: InputModifierResponseCurveUser.InputModifier.Object
	CurveFloat* ResponseX;//[Offset: 0x28, Size: 0x8] 0x7875b7e500
	CurveFloat* ResponseY;//[Offset: 0x30, Size: 0x8] 0x7875b7e580
	CurveFloat* ResponseZ;//[Offset: 0x38, Size: 0x8] 0x7875b7e600

--------------------------------
Class: InputModifierFOVScaling.InputModifier.Object
	float FOVScale;//[Offset: 0x28, Size: 0x4] 0x7875b7e400
	enum FOVScalingType;//[Offset: 0x2c, Size: 0x1] 0x7875b35c40

--------------------------------
Class: InputModifierToWorldSpace.InputModifier.Object

--------------------------------
Class: InputModifierSwizzleAxis.InputModifier.Object
	enum Order;//[Offset: 0x28, Size: 0x1] 0x7875b35ba0

--------------------------------
Class: InputModifierCollection.InputModifier.Object
	InputModifier*[] Modifiers;//[Offset: 0x28, Size: 0x10] 0x7875b35b00
	bool bPermitValueTypeModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875b7e300

--------------------------------
Class: InputTriggerTimedBase.InputTrigger.Object
	float HeldDuration;//[Offset: 0x3c, Size: 0x4] 0x7875b7dd00
	bool bAffectedByTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875b7dd80

--------------------------------
Class: InputTriggerDown.InputTrigger.Object

--------------------------------
Class: InputTriggerPressed.InputTrigger.Object

--------------------------------
Class: InputTriggerReleased.InputTrigger.Object

--------------------------------
Class: InputTriggerHold.InputTriggerTimedBase.InputTrigger.Object
	float HoldTimeThreshold;//[Offset: 0x44, Size: 0x4] 0x7875b7dc00
	bool bIsOneShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7875b7dc80

--------------------------------
Class: InputTriggerHoldAndRelease.InputTriggerTimedBase.InputTrigger.Object
	float HoldTimeThreshold;//[Offset: 0x44, Size: 0x4] 0x7875b7db80

--------------------------------
Class: InputTriggerTap.InputTriggerTimedBase.InputTrigger.Object
	float TapReleaseTimeThreshold;//[Offset: 0x44, Size: 0x4] 0x7875b7db00

--------------------------------
Class: InputTriggerPulse.InputTriggerTimedBase.InputTrigger.Object
	bool bTriggerOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7875b7d980
	float Interval;//[Offset: 0x4c, Size: 0x4] 0x7875b7da00
	int TriggerLimit;//[Offset: 0x50, Size: 0x4] 0x7875b7da80

--------------------------------
Class: InputTriggerChordAction.InputTrigger.Object
	InputAction* ChordAction;//[Offset: 0x40, Size: 0x8] 0x7875b7d900

--------------------------------
Class: InputTriggerChordBlocker.InputTriggerChordAction.InputTrigger.Object

--------------------------------
Class: SaveGameFunctionBPLibrary.BlueprintFunctionLibrary.Object
	static bool SaveGame(Object* SaveData, FString SlotName);// 0x5d8fc84 0x7875b86520
	static bool LoadGame(out Object* SaveData, FString SlotName, Object* inOuter);// 0x5d8fae0 0x7875b86600

--------------------------------
Class: VehicleSubsystemInterface.Interface.Object
	void SaveSubsystem();// 0x5d902c8 0x7875b86360
	void LoadSubsystemData();// 0x5d902e4 0x7875b86440

--------------------------------
Class: ExtraLevelBPLibrary.BlueprintFunctionLibrary.Object
	static void SetSecondaryLightingScenario(Object* WorldContext, FName LightingScenario);// 0x5d9e944 0x7875b85aa0
	static void SetPrimaryLightingScenario(Object* WorldContext, FName LightingScenario);// 0x5d9ea24 0x7875b85b80
	static void SetLightingScenarioBlendWeight(Object* WorldContext, float BlendWeight);// 0x5d9e860 0x7875b85c60
	static void SetLevelVisible(Level* inLevel, bool Visable);// 0x5d9ebf0 0x7875b85d40
	static void SetLevelOffset(LevelStreaming* StreamingLevel, out const Vector InWorldOffset);// 0x5d9f064 0x7875b85e20
	static void GetLevelStreamings(World* World, out LevelStreaming*[] LevelArray);// 0x5d9ee80 0x7875b85f00
	static FName GetLevelStreamingName(LevelStreaming* StreamingLevel);// 0x5d9edd8 0x7875b85fe0
	static void GetLevels(World* World, out Level*[] LevelArray);// 0x5d9ecdc 0x7875b860c0
	static void GetLevelBounds(LevelStreaming* StreamingLevel, out Box Box);// 0x5d9ef7c 0x7875b861a0
	static void EnableLevelRendering(World* World, bool Visable);// 0x5d9eb04 0x7875b86280

--------------------------------
Class: SeamlessTravelGameMode.GameMode.GameModeBase.Info.Actor.Object
	void SeamlessTravel(FString InURL);// 0x5d9f930 0x7875b8a880
	void OnSeamlessTravelFinlish();// 0x5d9f8e4 0x7875b8a960
	bool IsInSeamlessTravel();// 0x5d9f8f8 0x7875b8aa40

--------------------------------
Class: SolarToLunarConvert.BlueprintFunctionLibrary.Object
	static DateTime SolarToLunar(DateTime inSolar);// 0x5d9ff60 0x7875b8a7a0

--------------------------------
Class: UtilityFunctionBPLibrary.BlueprintFunctionLibrary.Object
	static Object* SyncLoadSoftObjectReferecen(Object* inSoftObject);// 0x5da0550 0x7875b89e00
	static class Object SyncLoadSoftClassReferecen(class Actor inSoftClass);// 0x5da0674 0x7875b89ee0
	static void ResetDataTableFromJson(DataTable* DataTable, FString JSONData);// 0x5da0798 0x7875b89fc0
	static int ReadCVar(FString VarName);// 0x5da098c 0x7875b8a0a0
	static World* GetWorldFromComponent(ActorComponent* Component);// 0x5da0c60 0x7875b8a180
	static World* GetWorldFromActor(Actor* Actor);// 0x5da0d08 0x7875b8a260
	static class Object GetParentClass(class Object _Class);// 0x5da0abc 0x7875b8a340
	static Texture2D* GetLocalTexture(out FString inTexPath);// 0x5da0490 0x7875b8a420
	static Object* GetGameSingleton();// 0x5da0a88 0x7875b8a500
	static void GetBuildConfiguration(out FString Configuration);// 0x5da08dc 0x7875b8a5e0
	static void GetAllSubClass(class Object BaseClass, out class Object[] Result);// 0x5da0b64 0x7875b8a6c0

--------------------------------
Class: WorldObject.Object

--------------------------------
Class: Advertisement.Object
	delegate InterstitialCloseEvent;//[Offset: 0x28, Size: 0x10] 0x7875b92800
	delegate RewardLoadedEvent;//[Offset: 0x38, Size: 0x10] 0x7875b92880
	delegate RewardCloseEvent;//[Offset: 0x48, Size: 0x10] 0x7875b92900
	void ShowReward(FString inPage);// 0x5da4264 0x7875b892a0
	void ShowNative(Vector2D inLeftTop, Vector2D InSize, FString inPage);// 0x5da3f88 0x7875b89380
	void ShowInterstitial(FString inPage);// 0x5da4398 0x7875b89460
	void showFullscreenVideoAD(FString inPage);// 0x5da4168 0x7875b89540
	void ShowBanner(Vector2D inLeftTop, Vector2D InSize, FString inPage);// 0x5da44cc 0x7875b89620
	bool IsRewardAvailable();// 0x5da4360 0x7875b89700
	bool IsNativeAvailable();// 0x5da4130 0x7875b897e0
	bool IsInterstitialAvailable();// 0x5da4494 0x7875b898c0
	static Advertisement* GetAdvertisement();// 0x5da4724 0x7875b899a0
	FString GetAdSDKName();// 0x5da4674 0x7875b89a80

--------------------------------
Class: DailyRecordSaveData.Object
	float TimeRecord;//[Offset: 0x30, Size: 0x4] 0x7875b92580
	DateTime LastRecord;//[Offset: 0x38, Size: 0x8] 0x7875b92600
	TimeRecord Data;//[Offset: 0x40, Size: 0x10] 0x7875b92680
	bool IsNewDay();// 0x5daaea4 0x7875b890e0
	float GetCurRecord();// 0x5daae70 0x7875b891c0

--------------------------------
Class: TimeRecord.TableRowBase
	float Value;//[Offset: 0x8, Size: 0x4] 0x7876120c00

--------------------------------
Class: ITimeRecorder.Interface.Object
	void Init();// 0x5dab508 0x7875b8c560
	void Happen();// 0x5dab674 0x7875b8c640
	float GetRemainSec();// 0x5dab560 0x7875b8c720
	FText GetProgressText();// 0x5dab59c 0x7875b8c800
	float GetPassSec();// 0x5dab524 0x7875b8c8e0
	bool CanHappen();// 0x5dab690 0x7875b8c9c0

--------------------------------
Class: RecordSubsystem.GameInstanceSubsystem.Subsystem.Object
	RecordSystemData* SaveData;//[Offset: 0x38, Size: 0x8] 0x7875b93700
	void RemoveTempString(out const FName Name);// 0x5dac5e8 0x7875b8bae0
	void RemoveTempNumber(out const FName Name);// 0x5dac69c 0x7875b8bbc0
	void RemoveNumber(out const FName Name);// 0x5dac750 0x7875b8bca0
	void RecordTempString(out const FName Key, FString Value);// 0x5dacf64 0x7875b8bd80
	void Init(const DataTable* pDataTable);// 0x5dad21c 0x7875b8be60
	void GetTimeRecord(byte Type, out const FName Name, out bool Have, out interface classNone Record);// 0x5daccac 0x7875b8bf40
	void GetTempString(out const FName Key, out FString Value);// 0x5dace54 0x7875b8c020
	void GetTempNumberRecord(out const FName Name, out int Number, out bool isFind);// 0x5dac804 0x7875b8c100
	void GetNumberRecord(out const FName Name, out int Number, out bool isFind);// 0x5daca58 0x7875b8c1e0
	void AddTimeRecord(byte Type, out const FName Key, out const TimeRecord RecordData, out interface classNone Record);// 0x5dad068 0x7875b8c2c0
	void AddTempNumberRecord(out const FName Name, int Number);// 0x5dac960 0x7875b8c3a0
	void AddNumberRecord(out const FName Name, int Number);// 0x5dacbb4 0x7875b8c480

--------------------------------
Class: RecordSystemData.Object
	<FName,FString> tempStringRecord;//[Offset: 0x28, Size: 0x50] 0x7875b19e80
	<FName,int> numberRecord;//[Offset: 0x78, Size: 0x50] 0x7875b19f40
	<FName,int> tempNumberRecord;//[Offset: 0xc8, Size: 0x50] 0x7875b1a000
	<FName,DailyRecordSaveData*> dailyRecord;//[Offset: 0x118, Size: 0x50] 0x7875b1a0c0
	<FName,TimeRecordSaveData*> TimeRecord;//[Offset: 0x168, Size: 0x50] 0x7875b1a180
	<FName,TimeRecordSaveData*> tempTimeRecord;//[Offset: 0x1b8, Size: 0x50] 0x7875b1a240
	<FName,TimeLimitSaveData*> limitRecord;//[Offset: 0x208, Size: 0x50] 0x7875b1a300

--------------------------------
Class: TimeRecordSaveData.WorldObject.Object
	DateTime LastRecord;//[Offset: 0x30, Size: 0x8] 0x7875b94f00
	TimeRecord Data;//[Offset: 0x38, Size: 0x10] 0x7875b94f80

--------------------------------
Class: TimeLimitSaveData.WorldObject.Object
	DateTime LastRecord;//[Offset: 0x30, Size: 0x8] 0x7875b95000
	TimeRecord Data;//[Offset: 0x38, Size: 0x10] 0x7875b95080

--------------------------------
Class: TapSDK.Object
	delegate InterstitialCloseEvent;//[Offset: 0x28, Size: 0x10] 0x7875b94a80
	delegate AntiAddictionEvent;//[Offset: 0x38, Size: 0x10] 0x7875b94b00
	delegate SignSuccessEvent;//[Offset: 0x48, Size: 0x10] 0x7875b94b80
	void Sign(FString inPage);// 0x5db0550 0x7875b8b4c0
	static TapSDK* GetTapSDK();// 0x5db06fc 0x7875b8b5a0
	FString GetAdSDKName();// 0x5db064c 0x7875b8b680
	void AntiAddiction(FString inPage);// 0x5db0454 0x7875b8b760

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7875b94500
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4] 0x7875b94580
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18] 0x7875b94600

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x4b8, Size: 0x8] 0x7875b94480

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x470, Size: 0x8] 0x7875b96c00
	MaterialInterface* Material;//[Offset: 0x478, Size: 0x8] 0x7875b96c80
	float PlayRate;//[Offset: 0x480, Size: 0x4] 0x7875b96d00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 0x1] 0x7875b96d80
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 0x1] 0x7875b96e00
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 0x1] 0x7875b96e80
	float AccumulatedTime;//[Offset: 0x488, Size: 0x4] 0x7875b96f00
	int CachedFrameIndex;//[Offset: 0x48c, Size: 0x4] 0x7875b96f80
	LinearColor SpriteColor;//[Offset: 0x490, Size: 0x10] 0x7875b97000
	BodySetup* CachedBodySetup;//[Offset: 0x4a0, Size: 0x8] 0x7875b97080
	delegate OnFinishedPlaying;//[Offset: 0x4a8, Size: 0x10] 0x7875b97100
	void Stop();// 0x5dd7404 0x7875b8d360
	void SetSpriteColor(LinearColor NewColor);// 0x5dd7468 0x7875b8d440
	void SetPlayRate(float NewRate);// 0x5dd6fa8 0x7875b8d520
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x5dd729c 0x7875b8d600
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x5dd716c 0x7875b8d6e0
	void SetNewTime(float NewTime);// 0x5dd6ecc 0x7875b8d7c0
	void SetLooping(bool bNewLooping);// 0x5dd7088 0x7875b8d8a0
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x5dd7568 0x7875b8d980
	void ReverseFromEnd();// 0x5dd7418 0x7875b8da60
	void Reverse();// 0x5dd742c 0x7875b8db40
	void PlayFromStart();// 0x5dd7440 0x7875b8dc20
	void Play();// 0x5dd7454 0x7875b8dd00
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x5dd6d88 0x7875b8dde0
	bool IsReversing();// 0x5dd7394 0x7875b8dec0
	bool IsPlaying();// 0x5dd73cc 0x7875b8dfa0
	bool IsLooping();// 0x5dd7050 0x7875b8e080
	LinearColor GetSpriteColor();// 0x5dd7510 0x7875b8e160
	float GetPlayRate();// 0x5dd6f74 0x7875b8e240
	int GetPlaybackPositionInFrames();// 0x5dd7268 0x7875b8e320
	float GetPlaybackPosition();// 0x5dd7138 0x7875b8e400
	int GetFlipbookLengthInFrames();// 0x5dd6e64 0x7875b8e4e0
	float GetFlipbookLength();// 0x5dd6e98 0x7875b8e5c0
	float GetFlipbookFramerate();// 0x5dd6e30 0x7875b8e6a0
	PaperFlipbook* GetFlipbook();// 0x5dd752c 0x7875b8adc0

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4] 0x7875b95d00
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10] 0x7875b37540
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8] 0x7875b95e00
	byte CollisionSource;//[Offset: 0x48, Size: 0x1] 0x7875b95e80
	bool IsValidKeyFrameIndex(int Index);// 0x5dd5f98 0x7875b8aea0
	float GetTotalDuration();// 0x5dd632c 0x7875b8af80
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x5dd6124 0x7875b8b060
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x5dd6074 0x7875b8b140
	int GetNumKeyFrames();// 0x5dd6058 0x7875b8b220
	int GetNumFrames();// 0x5dd6360 0x7875b8b300
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x5dd6228 0x7875b8b3e0

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8] 0x7876120900
	int FrameRun;//[Offset: 0x8, Size: 0x4] 0x7876120980

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x7875b37220
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8] 0x7875b97900
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8] 0x7875b97980
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8] 0x7875b97a00
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8] 0x7875b97a80
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8] 0x7875b97b00
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10] 0x7875b372c0
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1] 0x7875b97c00
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4] 0x7875b97c80
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8] 0x7875b97d00
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4] 0x7875b97d80
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10] 0x7875b37360

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30] 0x7876120600
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x7876120680

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x7875b95c80

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x7875b96b80

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x470, Size: 0x10] 0x7875b37400
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x480, Size: 0x10] 0x7875b374a0
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5dd8ad0 0x7875b8cc60
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x5dd8978 0x7875b8cd40
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x5dd87c4 0x7875b8ce20
	bool RemoveInstance(int InstanceIndex);// 0x5dd88bc 0x7875b8cf00
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x5dd8cec 0x7875b8cfe0
	int GetInstanceCount();// 0x5dd886c 0x7875b8d0c0
	void ClearInstances();// 0x5dd88a0 0x7875b8d1a0
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x5dd8e64 0x7875b8d280

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40] 0x7876120700
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8] 0x7876120780
	Color VertexColor;//[Offset: 0x48, Size: 0x4] 0x7876120800
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4] 0x7876120880

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875b97e80
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875b97f00
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7875b97f80

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x7875b97800

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x470, Size: 0x8] 0x7875b99380
	MaterialInterface* MaterialOverride;//[Offset: 0x478, Size: 0x8] 0x7875b99400
	LinearColor SpriteColor;//[Offset: 0x480, Size: 0x10] 0x7875b99480
	void SetSpriteColor(LinearColor NewColor);// 0x5ddb1e4 0x7875b8fe40
	bool SetSprite(PaperSprite* NewSprite);// 0x5ddb2c8 0x7875b8ff20
	PaperSprite* GetSprite();// 0x5ddb28c 0x7875b8caa0

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x5dda984 0x7875b8cb80

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x220, Size: 0x8] 0x7875b99200
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x228, Size: 0x8] 0x7875b99280
	PaperTerrainComponent* RenderComponent;//[Offset: 0x230, Size: 0x8] 0x7875b99300

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x448, Size: 0x8] 0x7875b98c00
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1] 0x7875b98c80
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1] 0x7875b98d00
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x458, Size: 0x8] 0x7875b98d80
	int RandomSeed;//[Offset: 0x460, Size: 0x4] 0x7875b98e00
	float SegmentOverlapAmount;//[Offset: 0x464, Size: 0x4] 0x7875b98e80
	LinearColor TerrainColor;//[Offset: 0x468, Size: 0x10] 0x7875b98f00
	int ReparamStepsPerSegment;//[Offset: 0x478, Size: 0x4] 0x7875b98f80
	byte SpriteCollisionDomain;//[Offset: 0x47c, Size: 0x1] 0x7875b99000
	float CollisionThickness;//[Offset: 0x480, Size: 0x4] 0x7875b99080
	BodySetup* CachedBodySetup;//[Offset: 0x488, Size: 0x8] 0x7875b99100
	void SetTerrainColor(LinearColor NewColor);// 0x5ddbd38 0x7875b8fd60

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10] 0x7875b37180
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8] 0x7875b98b80

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8] 0x7876122000
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10] 0x7895c1f740
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8] 0x7876122100
	float MinimumAngle;//[Offset: 0x20, Size: 0x4] 0x7876120080
	float MaximumAngle;//[Offset: 0x24, Size: 0x4] 0x7876120100
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7876120180
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4] 0x7876120200
	int DrawOrder;//[Offset: 0x30, Size: 0x4] 0x7876120280

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18] 0x7875bc3000
	int LayerWidth;//[Offset: 0x40, Size: 0x4] 0x7875bc3080
	int LayerHeight;//[Offset: 0x44, Size: 0x4] 0x7875bc3100
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7875bc3180
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7875bc1100
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7875bc1180
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x7875bc1200
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4] 0x7875bc1280
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4] 0x7875bc1300
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10] 0x7875bc1380
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4] 0x7875bc1400
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4] 0x7875bc1480
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10] 0x7875b36dc0
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8] 0x7875bc1580
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10] 0x7875b36e60

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8] 0x7876121f00
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4] 0x7876121f80

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8] 0x7875bc6100
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8] 0x7875bc6180
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10] 0x7875b36a00
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10] 0x7875bc6280
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8] 0x7875bc6300
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8] 0x7875bc4280
	int WidthInTiles;//[Offset: 0x68, Size: 0x4] 0x7875bc4300
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4] 0x7875bc4380
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4] 0x7875bc4400
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4] 0x7875bc4480
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10] 0x7875b36aa0
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10] 0x7875b36b40
	int TileWidth;//[Offset: 0x98, Size: 0x4] 0x7875bc4600
	int TileHeight;//[Offset: 0x9c, Size: 0x4] 0x7875bc4680
	int Margin;//[Offset: 0xa0, Size: 0x4] 0x7875bc4700
	int Spacing;//[Offset: 0xa4, Size: 0x4] 0x7875bc4780

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4] 0x7876120a00
	int Top;//[Offset: 0x4, Size: 0x4] 0x7876120a80
	int Right;//[Offset: 0x8, Size: 0x4] 0x7876120b00
	int Bottom;//[Offset: 0xc, Size: 0x4] 0x7876120b80

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8] 0x7876121580
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30] 0x7876121d00
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1] 0x7876121d80

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10] 0x7895c1cfe0
	byte GeometryType;//[Offset: 0x10, Size: 0x1] 0x7876121980
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4] 0x7876121a00
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4] 0x7876121a80
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7876121b00
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4] 0x7876121b80
	float DetailAmount;//[Offset: 0x24, Size: 0x4] 0x7876121c00
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4] 0x7876121c80

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1] 0x7895c1d080
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10] 0x7895c1d260
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8] 0x7876121700
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8] 0x7876121780
	float Rotation;//[Offset: 0x28, Size: 0x4] 0x7876121800
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7876121880

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10] 0x7876121e00
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4] 0x7876121e80

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4] 0x7875bc2780
	int MapHeight;//[Offset: 0x2c, Size: 0x4] 0x7875bc2800
	int TileWidth;//[Offset: 0x30, Size: 0x4] 0x7875bc2880
	int TileHeight;//[Offset: 0x34, Size: 0x4] 0x7875bc2900
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4] 0x7875bc2980
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4] 0x7875bc2a00
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4] 0x7875bc2a80
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4] 0x7875bc2b00
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28] 0x7875bc2b80
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8] 0x7875bc2c00
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10] 0x7875b36d20
	float CollisionThickness;//[Offset: 0x88, Size: 0x4] 0x7875bc2d00
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1] 0x7875bc2d80
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1] 0x7875bc2e00
	int HexSideLength;//[Offset: 0x90, Size: 0x4] 0x7875bc2e80
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8] 0x7875bc2f00
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4] 0x7875bc2f80

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x220, Size: 0x8] 0x7875bc2700

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x46c, Size: 0x4] 0x7875bc4800
	int MapHeight;//[Offset: 0x470, Size: 0x4] 0x7875bc4880
	int TileWidth;//[Offset: 0x474, Size: 0x4] 0x7875bc4900
	int TileHeight;//[Offset: 0x478, Size: 0x4] 0x7875bc4980
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x480, Size: 0x8] 0x7875bc4a00
	MaterialInterface* Material;//[Offset: 0x488, Size: 0x8] 0x7875bc4a80
	PaperTileLayer*[] TileLayers;//[Offset: 0x490, Size: 0x10] 0x7875b36be0
	LinearColor TileMapColor;//[Offset: 0x4a0, Size: 0x10] 0x7875bc4b80
	int UseSingleLayerIndex;//[Offset: 0x4b0, Size: 0x4] 0x7875bc4c00
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1] 0x7875bc4c80
	PaperTileMap* TileMap;//[Offset: 0x4b8, Size: 0x8] 0x7875bc4d00
	void SetTileMapColor(LinearColor NewColor);// 0x5dde370 0x7875bb4060
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x5dde99c 0x7875bb4140
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x5dde574 0x7875bb4220
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x5dde1c8 0x7875bb4300
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x5ddd92c 0x7875bb43e0
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x5dddba0 0x7875bb44c0
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x5dde484 0x7875bb45a0
	void RebuildCollision();// 0x5ddd918 0x7875bb4680
	bool OwnsTileMap();// 0x5ddea58 0x7875bb4760
	void MakeTileMapEditable();// 0x5dde1b4 0x7875bb4840
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x5dddc9c 0x7875bb4920
	LinearColor GetTileMapColor();// 0x5dde418 0x7875bb4a00
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x5dde01c 0x7875bb4ae0
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x5ddde84 0x7875bb4bc0
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x5dde6f8 0x7875bb4ca0
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x5dde840 0x7875bb4d80
	LinearColor GetLayerColor(int Layer);// 0x5dde2bc 0x7875bb4e60
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x5ddea90 0x7875bb4f40
	PaperTileLayer* AddNewLayer();// 0x5dde450 0x7875bb5020

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x5de073c 0x7875bb3ce0
	static FName GetTileUserData(PaperTileInfo Tile);// 0x5de0c28 0x7875bb3dc0
	static Transform GetTileTransform(PaperTileInfo Tile);// 0x5de0b68 0x7875bb3ea0
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x5de0920 0x7875bb3f80

--------------------------------
Class: LightPropagationVolumeBlendable.Object
	LightPropagationVolumeSettings Settings;//[Offset: 0x30, Size: 0x40] 0x7875bc5800
	float BlendWeight;//[Offset: 0x70, Size: 0x4] 0x7875bc5880

--------------------------------
Class: LightPropagationVolumeSettings
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78759c0100
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x78759c0180
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x78759c0200
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x78759c0280
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x78759c0300
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x78759c0380
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x78759c0400
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x78759c0480
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x78759c0500
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x78759c0580
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x78759c0600
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x78759c0680
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x78759c0700
	float LPVIntensity;//[Offset: 0x4, Size: 0x4] 0x78759c0780
	float LPVVplInjectionBias;//[Offset: 0x8, Size: 0x4] 0x78759c0800
	float LPVSize;//[Offset: 0xc, Size: 0x4] 0x78759c0880
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x10, Size: 0x4] 0x78759c0900
	float LPVSecondaryBounceIntensity;//[Offset: 0x14, Size: 0x4] 0x78759c0980
	float LPVGeometryVolumeBias;//[Offset: 0x18, Size: 0x4] 0x78759c0a00
	float LPVEmissiveInjectionIntensity;//[Offset: 0x1c, Size: 0x4] 0x78759c0a80
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x20, Size: 0x4] 0x78759c0b00
	float LPVDirectionalOcclusionRadius;//[Offset: 0x24, Size: 0x4] 0x78759c0b80
	float LPVDiffuseOcclusionExponent;//[Offset: 0x28, Size: 0x4] 0x78759c0c00
	float LPVSpecularOcclusionExponent;//[Offset: 0x2c, Size: 0x4] 0x78759c0c80
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x30, Size: 0x4] 0x78759c0d00
	float LPVSpecularOcclusionIntensity;//[Offset: 0x34, Size: 0x4] 0x78759c0d80
	float LPVFadeRange;//[Offset: 0x38, Size: 0x4] 0x78759c0e00
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x3c, Size: 0x4] 0x78759c0e80

--------------------------------
Class: TestCameraShake.CameraShakeBase.Object

--------------------------------
Class: SimpleCameraShakePattern.CameraShakePattern.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7875bc5380
	float BlendInTime;//[Offset: 0x2c, Size: 0x4] 0x7875bc5400
	float BlendOutTime;//[Offset: 0x30, Size: 0x4] 0x7875bc5480

--------------------------------
Class: ConstantCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	Vector LocationOffset;//[Offset: 0x34, Size: 0xc] 0x7875bc7380
	Rotator RotationOffset;//[Offset: 0x40, Size: 0xc] 0x7875bc5300

--------------------------------
Class: CompositeCameraShakePattern.CameraShakePattern.Object
	CameraShakePattern*[] ChildPatterns;//[Offset: 0x28, Size: 0x10] 0x7875b36960

--------------------------------
Class: DefaultCameraShakeBase.CameraShakeBase.Object

--------------------------------
Class: PerlinNoiseCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4] 0x7875bc7c00
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4] 0x7875bc7c80
	PerlinNoiseShaker X;//[Offset: 0x3c, Size: 0x8] 0x7875bc7d00
	PerlinNoiseShaker Y;//[Offset: 0x44, Size: 0x8] 0x7875bc7d80
	PerlinNoiseShaker Z;//[Offset: 0x4c, Size: 0x8] 0x7875bc7e00
	float RotationAmplitudeMultiplier;//[Offset: 0x54, Size: 0x4] 0x7875bc7e80
	float RotationFrequencyMultiplier;//[Offset: 0x58, Size: 0x4] 0x7875bc7f00
	PerlinNoiseShaker Pitch;//[Offset: 0x5c, Size: 0x8] 0x7875bc7f80
	PerlinNoiseShaker Yaw;//[Offset: 0x64, Size: 0x8] 0x7875bc8000
	PerlinNoiseShaker Roll;//[Offset: 0x6c, Size: 0x8] 0x7875bc8080
	PerlinNoiseShaker FOV;//[Offset: 0x74, Size: 0x8] 0x7875bc8100

--------------------------------
Class: PerlinNoiseShaker
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7876122e80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7876122f00

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xa8, Size: 0x4] 0x7875bc8280
	float OscillationBlendInTime;//[Offset: 0xac, Size: 0x4] 0x7875bc8300
	float OscillationBlendOutTime;//[Offset: 0xb0, Size: 0x4] 0x7875bc8380
	ROscillator RotOscillation;//[Offset: 0xb4, Size: 0x24] 0x7875bc8400
	VOscillator LocOscillation;//[Offset: 0xd8, Size: 0x24] 0x7875bc6380
	FOscillator FOVOscillation;//[Offset: 0xfc, Size: 0xc] 0x7875bc6400
	float AnimPlayRate;//[Offset: 0x108, Size: 0x4] 0x7875bc6480
	float AnimScale;//[Offset: 0x10c, Size: 0x4] 0x7875bc6500
	float AnimBlendInTime;//[Offset: 0x110, Size: 0x4] 0x7875bc6580
	float AnimBlendOutTime;//[Offset: 0x114, Size: 0x4] 0x7875bc6600
	float RandomAnimSegmentDuration;//[Offset: 0x118, Size: 0x4] 0x7875bc6680
	CameraAnim* Anim;//[Offset: 0x120, Size: 0x8] 0x7875bc6700
	CameraAnimationSequence* AnimSequence;//[Offset: 0x128, Size: 0x8] 0x7875bc6780
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1] 0x7875bc6800
	float OscillatorTimeRemaining;//[Offset: 0x134, Size: 0x4] 0x7875bc6880
	CameraAnimInst* AnimInst;//[Offset: 0x138, Size: 0x8] 0x7875bc6900
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x180, Size: 0x8] 0x7875bc6980
	static MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x5df61b4 0x7875bb6fa0
	static MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x5df63d0 0x7875bb7080
	void ReceiveStopShake(bool bImmediately);// 0x6d94ba8 0x7875bb7160
	void ReceivePlayShake(float Scale);// 0x6d94ba8 0x7875bb7240
	bool ReceiveIsFinished();// 0x5df65a0 0x7875bb7320
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x6d94ba8 0x7875bb3a40

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc] 0x7876123000
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc] 0x7876123080
	FOscillator Roll;//[Offset: 0x18, Size: 0xc] 0x7876123100

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7876121180
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7876121200
	byte InitialOffset;//[Offset: 0x8, Size: 0x1] 0x7876121280
	enum Waveform;//[Offset: 0x9, Size: 0x1] 0x7895c1d120

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc] 0x7876123180
	FOscillator Y;//[Offset: 0xc, Size: 0xc] 0x7876121100
	FOscillator Z;//[Offset: 0x18, Size: 0xc] 0x7876121380

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7875bc9080
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28] 0x7875b38da0
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28] 0x7875bc9100
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50] 0x7875b19dc0

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8] 0x7875bc8680
	float PlayRate;//[Offset: 0x30, Size: 0x4] 0x7875bc8700
	float Scale;//[Offset: 0x34, Size: 0x4] 0x7875bc8780
	float BlendInTime;//[Offset: 0x38, Size: 0x4] 0x7875bc8800
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4] 0x7875bc8880
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4] 0x7875bc8900
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875bc8980
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0x48, Size: 0x8] 0x7875bc8a00
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8] 0x7875bc8a80

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2d0, Size: 0x8] 0x7875bc8500
	MovieSceneSequence* Sequence;//[Offset: 0x2d8, Size: 0x8] 0x7875bc8580
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e0, Size: 0xe8] 0x7875bc8600

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4] 0x7875bc8b00
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7875bc8b80
	float AspectRatio;//[Offset: 0x38, Size: 0x4] 0x7875bc8c00
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x560] 0x7875bc8c80
	float PostProcessBlendWeight;//[Offset: 0x5a0, Size: 0x4] 0x7875bc8d00
	CameraFilmbackSettings Filmback;//[Offset: 0x5a4, Size: 0xc] 0x7875bc8d80
	CameraLensSettings LensSettings;//[Offset: 0x5b0, Size: 0x18] 0x7875bc8e00
	CameraFocusSettings FocusSettings;//[Offset: 0x5c8, Size: 0x58] 0x7875bc8e80
	float CurrentFocalLength;//[Offset: 0x620, Size: 0x4] 0x7875bc8f00
	float CurrentAperture;//[Offset: 0x624, Size: 0x4] 0x7875bc8f80
	float CurrentFocusDistance;//[Offset: 0x628, Size: 0x4] 0x7875bc9000

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x7875a13500
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x7875a13580
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4] 0x7875a13600

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4] 0x7875a13780
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4] 0x7875a13800
	float MinFStop;//[Offset: 0x8, Size: 0x4] 0x7875a13880
	float MaxFStop;//[Offset: 0xc, Size: 0x4] 0x7875a13900
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4] 0x7875a13980
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4] 0x7875a13a00

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x78759e3300
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x7875a13b80
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38] 0x7875a13d80
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7875a13e00
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4] 0x7875a13e80
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7875a13f00
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4] 0x7875a13f80
	float FocusOffset;//[Offset: 0x50, Size: 0x4] 0x7875a14000

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28] 0x7875a13c00
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc] 0x7875a13c80
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7875a13d00

--------------------------------
Class: MatineeCameraShakePattern.CameraShakePattern.Object

--------------------------------
Class: MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MovieSceneMatineeCameraShakeEvaluator.MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MatineeCameraShakeFunctionLibrary.BlueprintFunctionLibrary.Object
	static MatineeCameraShake* Conv_MatineeCameraShake(CameraShakeBase* CameraShake);// 0x5df78d8 0x7875bb6ec0

--------------------------------
Class: WaveOscillatorCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4] 0x7875bc7680
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4] 0x7875bc7700
	WaveOscillator X;//[Offset: 0x3c, Size: 0xc] 0x7875bc7780
	WaveOscillator Y;//[Offset: 0x48, Size: 0xc] 0x7875bc7800
	WaveOscillator Z;//[Offset: 0x54, Size: 0xc] 0x7875bc7880
	float RotationAmplitudeMultiplier;//[Offset: 0x60, Size: 0x4] 0x7875bc7900
	float RotationFrequencyMultiplier;//[Offset: 0x64, Size: 0x4] 0x7875bc7980
	WaveOscillator Pitch;//[Offset: 0x68, Size: 0xc] 0x7875bc7a00
	WaveOscillator Yaw;//[Offset: 0x74, Size: 0xc] 0x7875bc7a80
	WaveOscillator Roll;//[Offset: 0x80, Size: 0xc] 0x7875bc7b00
	WaveOscillator FOV;//[Offset: 0x8c, Size: 0xc] 0x7875bc7b80

--------------------------------
Class: WaveOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4] 0x7876122d00
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7876122d80
	enum InitialOffsetType;//[Offset: 0x8, Size: 0x1] 0x7895c1d1c0

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 0x14] 0x7875bca100
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 0x8] 0x7875bca180
	SoftObjectPath TemplateSequence;//[Offset: 0x250, Size: 0x18] 0x7875bca200
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x268, Size: 0xc] 0x7875bca280
	void SetSequence(TemplateSequence* InSequence);// 0x5e0f28c 0x7875bb68a0
	void SetBinding(Actor* Actor, bool bOverridesDefault);// 0x5e0f15c 0x7875bb6980
	TemplateSequence* LoadSequence();// 0x5e0f334 0x7875bb6a60
	TemplateSequencePlayer* GetSequencePlayer();// 0x5e0f258 0x7875bb6b40
	TemplateSequence* GetSequence();// 0x5e0f368 0x7875bb6c20

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78759cac80
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4] 0x78759cad80
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78759cae00
	float StartTime;//[Offset: 0xc, Size: 0x4] 0x78759cae80
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x78759caf00
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x78759caf80
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x78759cb000
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1] 0x78759cb080
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1] 0x78759cb100
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1] 0x78759cb180
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1] 0x78759cb200
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1] 0x78759cb280

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4] 0x78759cad00

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x5e0fae4 0x7875bb7cc0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x260, Size: 0x10] 0x7875bcc480
	delegate OnPlayReverse;//[Offset: 0x270, Size: 0x10] 0x7875bcc500
	delegate OnStop;//[Offset: 0x280, Size: 0x10] 0x7875bcc580
	delegate OnPause;//[Offset: 0x290, Size: 0x10] 0x7875bcc600
	delegate OnFinished;//[Offset: 0x2a0, Size: 0x10] 0x7875bca580
	byte Status;//[Offset: 0x2b0, Size: 0x1] 0x7875bca600
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b1, Size: 0x1] 0x7875bca680
	MovieSceneSequence* Sequence;//[Offset: 0x2b8, Size: 0x8] 0x7875bca700
	FrameNumber StartTime;//[Offset: 0x2c0, Size: 0x4] 0x7875bca780
	int DurationFrames;//[Offset: 0x2c4, Size: 0x4] 0x7875bca800
	float DurationSubFrames;//[Offset: 0x2c8, Size: 0x4] 0x7875bca880
	int CurrentNumLoops;//[Offset: 0x2cc, Size: 0x4] 0x7875bca900
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2d0, Size: 0x14] 0x7875bca980
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2e8, Size: 0xe8] 0x7875bcaa00
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x438, Size: 0x10] 0x7875bcaa80
	interface class None* PlaybackClient;//[Offset: 0x448, Size: 0x10] 0x7875bcab00
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x458, Size: 0x8] 0x7875bcab80
	void StopAtCurrentTime();// 0x8370eb4 0x7875bb7da0
	void Stop();// 0x8370ec8 0x7875bb7e80
	void SetTimeRange(float StartTime, float Duration);// 0x8370ac4 0x7875bb7f60
	void SetPlayRate(float PlayRate);// 0x836feb4 0x7875bb8040
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x837087c 0x7875bb8120
	void SetFrameRate(FrameRate FrameRate);// 0x8370d38 0x7875bb8200
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x8370bb4 0x7875bb82e0
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x836fdfc 0x7875bb83c0
	void ScrubToSeconds(float TimeInSeconds);// 0x8370470 0x7875bb84a0
	bool ScrubToMarkedFrame(FString InLabel);// 0x837015c 0x7875bb8580
	void ScrubToFrame(FrameTime NewPosition);// 0x83706d4 0x7875bb8660
	void Scrub();// 0x8370edc 0x7875bb8740
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x836f9fc 0x7875bb8820
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x836faac 0x7875bb8900
	void RestoreState();// 0x8370868 0x7875bb89e0
	void PlayToSeconds(float TimeInSeconds);// 0x837053c 0x7875bb8ac0
	bool PlayToMarkedFrame(FString InLabel);// 0x8370280 0x7875bb8ba0
	void PlayToFrame(FrameTime NewPosition);// 0x83707a0 0x7875bb8c80
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x83709a0 0x7875bb8d60
	void PlayReverse();// 0x8370fc0 0x7875bb8e40
	void PlayLooping(int NumLoops);// 0x8370f04 0x7875bb8f20
	void Play();// 0x8370fd4 0x7875bb9000
	void Pause();// 0x8370ef0 0x7875bb5720
	void JumpToSeconds(float TimeInSeconds);// 0x83703a4 0x7875bb5800
	bool JumpToMarkedFrame(FString InLabel);// 0x8370038 0x7875bb58e0
	void JumpToFrame(FrameTime NewPosition);// 0x8370608 0x7875bb59c0
	bool IsReversed();// 0x836ff90 0x7875bb5aa0
	bool IsPlaying();// 0x8370000 0x7875bb5b80
	bool IsPaused();// 0x836ffc8 0x7875bb5c60
	void GoToEndAndStop();// 0x8370ea0 0x7875bb5d40
	QualifiedFrameTime GetStartTime();// 0x8370d18 0x7875bb5e20
	MovieSceneSequence* GetSequence();// 0x836fba8 0x7875bb5f00
	float GetPlayRate();// 0x836ff5c 0x7875bb5fe0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x836fbc4 0x7875bb60c0
	FrameRate GetFrameRate();// 0x8370de8 0x7875bb61a0
	int GetFrameDuration();// 0x8370e04 0x7875bb6280
	QualifiedFrameTime GetEndTime();// 0x8370cf0 0x7875bb6360
	QualifiedFrameTime GetDuration();// 0x8370e38 0x7875bb6440
	bool GetDisableCameraCuts();// 0x836fddc 0x7875bb6520
	QualifiedFrameTime GetCurrentTime();// 0x8370e6c 0x7875bb6600
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x836fcc0 0x7875bb66e0
	void ChangePlaybackDirection();// 0x8370fac 0x7875bb67c0

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8] 0x78759cb300
	float Time;//[Offset: 0x8, Size: 0x4] 0x78759cb380
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10] 0x78759cb400
	enum PositionType;//[Offset: 0x20, Size: 0x1] 0x787800f380
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1] 0x787800f420

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8] 0x78759cab00
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1] 0x78759cab80
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4] 0x78759cac00

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 0x10] 0x7875d44700
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78e22c4800

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 0x8] 0x78759caa00
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 0x10] 0x78759caa80

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8] 0x7876122c00
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7876122c80

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1] 0x7875d44980

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24] 0x7875bccd80
	float StartOffset;//[Offset: 0x100, Size: 0x4] 0x7875bcce00
	float TimeScale;//[Offset: 0x104, Size: 0x4] 0x7875bcce80
	float PrerollTime;//[Offset: 0x108, Size: 0x4] 0x7875bccf00
	byte NetworkMask;//[Offset: 0x10c, Size: 0x1] 0x7875bccf80
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8] 0x7875bcd000
	Actor* ActorToRecord;//[Offset: 0x118, Size: 0x1c] 0x7875bcd080
	FString TargetSequenceName;//[Offset: 0x138, Size: 0x10] 0x7875bcd100
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x148, Size: 0x10] 0x7875bcd180
	void SetSequence(MovieSceneSequence* Sequence);// 0x837a6a4 0x7875bba6c0
	MovieSceneSequence* GetSequence();// 0x837a74c 0x7875bba7a0

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4] 0x78759c8680
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x78759c8700
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4] 0x78759c8780
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x78759c8800
	float TimeScale;//[Offset: 0x10, Size: 0x4] 0x78759c8880
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4] 0x78759c8900
	float StartOffset;//[Offset: 0x18, Size: 0x4] 0x78759c8980
	float PrerollTime;//[Offset: 0x1c, Size: 0x4] 0x78759c8a00
	float PostrollTime;//[Offset: 0x20, Size: 0x4] 0x78759c8a80

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	TemplateSectionPropertyScale[] PropertyScales;//[Offset: 0x160, Size: 0x10] 0x7875b38940

--------------------------------
Class: TemplateSectionPropertyScale
	Guid ObjectBinding;//[Offset: 0x0, Size: 0x10] 0x7876124080
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x10, Size: 0x14] 0x7876122180
	enum PropertyScaleType;//[Offset: 0x24, Size: 0x4] 0x7895c1d3a0
	MovieSceneFloatChannel FloatChannel;//[Offset: 0x28, Size: 0xa0] 0x7876122b80

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8] 0x7876124100
	FName PropertyPath;//[Offset: 0x8, Size: 0x8] 0x7876124180
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7876124200

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1] 0x7876122280
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1] 0x7876122300
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x7895c1d300
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10] 0x7895c1d800
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7876122980
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7876122a00
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60] 0x7876122a80
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8] 0x7876122b00

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4] 0x7876122400
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14] 0x7876122700
	byte InterpMode;//[Offset: 0x18, Size: 0x1] 0x7876122780
	byte TangentMode;//[Offset: 0x19, Size: 0x1] 0x7876122800
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1] 0x7876122880

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4] 0x7876122480
	float LeaveTangent;//[Offset: 0x4, Size: 0x4] 0x7876122500
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4] 0x7876122580
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4] 0x7876122600
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1] 0x7876122680

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8] 0x7875bccc80

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7875b38800

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: OodleNetworkTrainerCommandlet.Commandlet.Object
	bool bCompressionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x7875bce180
	int HashTableSize;//[Offset: 0x7c, Size: 0x4] 0x7875bce200
	int DictionarySize;//[Offset: 0x80, Size: 0x4] 0x7875bce280
	int DictionaryTrials;//[Offset: 0x84, Size: 0x4] 0x7875bce300
	int TrialRandomness;//[Offset: 0x88, Size: 0x4] 0x7875bce380
	int TrialGenerations;//[Offset: 0x8c, Size: 0x4] 0x7875bce400
	bool bNoTrials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7875bce480

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x2b8, Size: 0x8] 0x7875bcde80
	float PermutationTimeOffset;//[Offset: 0x2c0, Size: 0x4] 0x7875bcdf00
	float PlayRate;//[Offset: 0x2c4, Size: 0x4] 0x7875bcdf80
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7875bce000
	AnimSharingInstance* Instance;//[Offset: 0x2d0, Size: 0x8] 0x7875bce080
	void GetInstancedActors(out Actor*[] Actors);// 0x5e2ce00 0x7875bba5e0

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10] 0x7875b384e0
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8] 0x7875bcd880
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10] 0x7875b38580
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8] 0x7875bcd980
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8] 0x7875bcda00

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28] 0x7875bcef80
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x5e2f3d0 0x7875bba0a0
	Enum* GetAnimationStateEnum();// 0x5e2f394 0x7875bba180

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x2b8, Size: 0x8] 0x7875bcdc80
	SkeletalMeshComponent* ToComponent;//[Offset: 0x2c0, Size: 0x8] 0x7875bcdd00
	float BlendTime;//[Offset: 0x2c8, Size: 0x4] 0x7875bcdd80
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x7875bcde00

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x2b8, Size: 0x8] 0x7875bcda80
	AnimSequence* AdditiveAnimation;//[Offset: 0x2c0, Size: 0x8] 0x7875bcdb00
	float Alpha;//[Offset: 0x2c8, Size: 0x4] 0x7875bcdb80
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1] 0x7875bcdc00

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10] 0x7875b383a0
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10] 0x7875b38440
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x5e2e118 0x7875bba260
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x5e2e2fc 0x7875bba340
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x5e2e208 0x7875bba420
	static bool AnimationSharingEnabled();// 0x5e2e0e0 0x7875bba500

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10] 0x7875b38300
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x7875bcf380

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8] 0x7876123480
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8] 0x7876123500
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8] 0x7895c1d760
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8] 0x7895c1d6c0
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8] 0x7895c1d620
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10] 0x7895c1d440

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1] 0x7876123580
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10] 0x7895c1d4e0
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7876123800
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7876123880
	float BlendTime;//[Offset: 0x1c, Size: 0x4] 0x7876123900
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7876123980
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7876123a00
	byte NextState;//[Offset: 0x22, Size: 0x1] 0x7876123a80
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4] 0x7876123b00
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4] 0x7876123b80
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x7876123c00

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8] 0x7876123600
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8] 0x7895c1d580
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4] 0x7876123680
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1] 0x7876123700

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1] 0x7876123d80
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4] 0x7876123e00
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4] 0x7876123f00
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4] 0x7876124000

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18] 0x7875bcef00

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10] 0x7875bcee80

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10] 0x7876123400

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0x868, Size: 0x8] 0x7875bd2a80
	float CurveSyncOffset;//[Offset: 0x870, Size: 0x4] 0x7875bd2b00

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50] 0x7875b3a240
	<FName> Tags;//[Offset: 0x80, Size: 0x50] 0x7875b3a2e0

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	byte Mobility;//[Offset: 0x220, Size: 0x1] 0x7875bd4200
	enum LightType;//[Offset: 0x221, Size: 0x1] 0x7875b3a060
	enum LightShape;//[Offset: 0x222, Size: 0x1] 0x7875b3a100
	Vector2D Dimensions;//[Offset: 0x224, Size: 0x8] 0x7875bd2280
	float Intensity;//[Offset: 0x22c, Size: 0x4] 0x7875bd2300
	enum IntensityUnits;//[Offset: 0x230, Size: 0x1] 0x7875b3a1a0
	LinearColor Color;//[Offset: 0x234, Size: 0x10] 0x7875bd2400
	float Temperature;//[Offset: 0x244, Size: 0x4] 0x7875bd2480
	TextureLightProfile* IESTexture;//[Offset: 0x248, Size: 0x8] 0x7875bd2500
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x7875bd2580
	float IESBrightnessScale;//[Offset: 0x254, Size: 0x4] 0x7875bd2600
	Rotator Rotation;//[Offset: 0x258, Size: 0xc] 0x7875bd2680
	float SourceRadius;//[Offset: 0x264, Size: 0x4] 0x7875bd2700
	float SourceLength;//[Offset: 0x268, Size: 0x4] 0x7875bd2780
	float AttenuationRadius;//[Offset: 0x26c, Size: 0x4] 0x7875bd2800
	float SpotlightInnerAngle;//[Offset: 0x270, Size: 0x4] 0x7875bd2880
	float SpotlightOuterAngle;//[Offset: 0x274, Size: 0x4] 0x7875bd2900

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x29, Size: 0x1] 0x7875b39e80
	enum LightShape;//[Offset: 0x2a, Size: 0x1] 0x7875b39f20
	Vector2D Dimensions;//[Offset: 0x2c, Size: 0x8] 0x7875bd3c00
	LinearColor Color;//[Offset: 0x34, Size: 0x10] 0x7875bd3c80
	float Intensity;//[Offset: 0x44, Size: 0x4] 0x7875bd3d00
	enum IntensityUnits;//[Offset: 0x48, Size: 0x1] 0x7875b39fc0
	float Temperature;//[Offset: 0x4c, Size: 0x4] 0x7875bd3e00
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x28] 0x7875bd3e80
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7875bd3f00
	float IESBrightnessScale;//[Offset: 0x7c, Size: 0x4] 0x7875bd3f80
	Rotator Rotation;//[Offset: 0x80, Size: 0xc] 0x7875bd4000
	float SourceRadius;//[Offset: 0x8c, Size: 0x4] 0x7875bd4080
	float SourceLength;//[Offset: 0x90, Size: 0x4] 0x7875bd4100
	float AttenuationRadius;//[Offset: 0x94, Size: 0x4] 0x7875bd4180

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10] 0x7875bd3880
	float Version;//[Offset: 0x38, Size: 0x4] 0x7875bd3900
	FString Author;//[Offset: 0x40, Size: 0x10] 0x7875bd3980
	FString License;//[Offset: 0x50, Size: 0x10] 0x7875bd3a00
	FString Source;//[Offset: 0x60, Size: 0x10] 0x7875bd3a80

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10] 0x7875bd3800

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875bd3600
	FString TexturesDir;//[Offset: 0x30, Size: 0x10] 0x7875bd3680
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1] 0x7875bd3700
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7875bd3780

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7875bd5200
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7875bd5280
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875bd3200
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x7875bd3280
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1] 0x7875bd3300
	FString VarPath;//[Offset: 0x48, Size: 0x10] 0x7875bd3380
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7875bd3400
	FString PosPath;//[Offset: 0x60, Size: 0x10] 0x7875bd3480
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7875bd3500
	FString TmlPath;//[Offset: 0x78, Size: 0x10] 0x7875bd3580

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7875bd4c80
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7875bd4d00
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875bd4d80
	FString MatsPath;//[Offset: 0x48, Size: 0x10] 0x7875bd4e00
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7875bd4e80
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x7875bd4f00
	FString VarPath;//[Offset: 0x60, Size: 0x10] 0x7875bd4f80
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7875bd5000
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10] 0x7875bd5080
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7875bd5100
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10] 0x7875bd5180

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10] 0x7875bd4c00

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50] 0x7875b19d00

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30] 0x7875bd4a80

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7876123280
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7876123300
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28] 0x7876123380

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8] 0x7875bd4780
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4] 0x7875bd4800
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8] 0x7875bd4880
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4] 0x7875bd4900
	float CurrentAperture;//[Offset: 0x44, Size: 0x4] 0x7875bd4980
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40] 0x7875bd4a00

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4] 0x7876124900
	float SensorHeight;//[Offset: 0x4, Size: 0x4] 0x7876124980

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4] 0x7876124a00

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1] 0x7895c1da80
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4] 0x7876124b00

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7876124b80
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7876124c00
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7876124c80
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7876124d00
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7876124d80
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7876124e00
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7876124e80
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7876124f00
	float WhiteTemp;//[Offset: 0x4, Size: 0x4] 0x7876124f80
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4] 0x7876125000
	LinearColor FilmWhitePoint;//[Offset: 0xc, Size: 0x10] 0x7876125080
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10] 0x7876125100
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1] 0x7876125180
	float CameraISO;//[Offset: 0x34, Size: 0x4] 0x7876125200
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4] 0x7876125280
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4] 0x7876123200

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x5e4d980 0x7875bbb920
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x5e4d794 0x7875bbba00
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x5e4dabc 0x7875bbbae0

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x2c, Size: 0x4] 0x7875bd6280
	Vector DecalSize;//[Offset: 0x30, Size: 0xc] 0x7875bd6300
	MaterialInterface* Material;//[Offset: 0x40, Size: 0x8] 0x7875bd4280

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x220, Size: 0x10] 0x7875b39ca0
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x5e4e7ec 0x7875bbb840

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8] 0x78e233b980
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50] 0x78e233ba00
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0] 0x78e233ba80
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50] 0x7875b1b500
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 0x8] 0x7875d4f6a0
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10] 0x7875d4f740
	void RemoveMetaDataByClass(class Object InClass);// 0x896795c 0x78e2345aa0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x8967a8c 0x78e2345b80
	Object* FindMetaDataByClass(class Object InClass);// 0x8967b2c 0x78e2345c60
	Object* CopyMetaData(Object* InMetaData);// 0x89679ec 0x78e2345d40

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50] 0x7875a06e80
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50] 0x78759e5b00

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10] 0x78759e5a60

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10] 0x7875a45e80
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18] 0x7875a45f00
	FString ObjectPath;//[Offset: 0x28, Size: 0x10] 0x7875a45f80

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c] 0x7875a45d00
	FString ComponentName;//[Offset: 0x20, Size: 0x10] 0x7875a45d80
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8] 0x7875a45e00

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10] 0x7875bd6100

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4] 0x7876124700
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4] 0x7876124780
	float NormalTolerance;//[Offset: 0x8, Size: 0x4] 0x7876124800
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1] 0x7895c1d8a0

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1] 0x7875b397a0
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1] 0x7875b39840
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1] 0x7875b398e0
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1] 0x7875b39980
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1] 0x7875b39a20
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1] 0x7875b39ac0
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1] 0x7875b39b60
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1] 0x7875b39c00
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x30, Size: 0x14] 0x7875bd5f00
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x44, Size: 0x2] 0x7875bd5f80
	FString Filename;//[Offset: 0x48, Size: 0x10] 0x7875bd6000
	FString FilePath;//[Offset: 0x58, Size: 0x10] 0x7875bd6080

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1] 0x7895c1dc60
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7876126180
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7876126200
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7876126280
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7876126300
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7876124280
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8] 0x7876124380
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4] 0x7876124600

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8] 0x7876124300

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1] 0x7895c1db20
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1] 0x7895c1d9e0
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7876124500
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7876124580

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7876126000
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7876126080

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8] 0x7875bd5a00
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4] 0x7875bd5a80

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1] 0x7875bd5500
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1] 0x7875bd5580
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1] 0x7875bd5600
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1] 0x7875bd5680
	float Intensity;//[Offset: 0x2c, Size: 0x4] 0x7875bd5700
	float Temperature;//[Offset: 0x30, Size: 0x4] 0x7875bd5780
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4] 0x7875bd5800
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10] 0x7875bd5880
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8] 0x7875bd5900
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8] 0x7875bd5980

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28] 0x7875bd7200
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50] 0x7875b19ac0
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50] 0x7875b19b80
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50] 0x7875b19c40
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50] 0x7875bd5480

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50] 0x78761322c0

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1] 0x7875b39700
	float SourceRadius;//[Offset: 0x2c, Size: 0x4] 0x7875bd7080
	float SourceLength;//[Offset: 0x30, Size: 0x4] 0x7875bd7100
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4] 0x7875bd7180

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40] 0x7875bd6e80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1] 0x7875bd6f00
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1] 0x7875bd6f80

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x220, Size: 0x8] 0x7875bd6d00
	<FName,Actor*> RelatedActors;//[Offset: 0x228, Size: 0x50] 0x7875b19a00

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30] 0x7875bd6a80
	byte Mobility;//[Offset: 0x60, Size: 0x1] 0x7875bd6b00
	SceneComponent* AttachParent;//[Offset: 0x68, Size: 0x28] 0x7875bd6b80
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x7875bd6c00
	<FName> Tags;//[Offset: 0x98, Size: 0x50] 0x7875b39660

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x29, Size: 0x1] 0x7875bd6900
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4] 0x7875bd6980
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8] 0x7875bd6a00

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4] 0x7875bd6800
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4] 0x7875bd6880

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8] 0x7875bd6700
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10] 0x7875b395c0

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50] 0x7875bd6480
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4] 0x7875bd6500
	int LightMapResolution;//[Offset: 0x84, Size: 0x4] 0x7875bd6580
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10] 0x7875b39480
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10] 0x7875b39520

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50] 0x7876132140

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4] 0x7876125d80

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7876125700
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7876125780
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7876125800
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7876125880
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7876125900
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7876125980
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7876125a00
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7876125a80
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4] 0x7876125b00
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4] 0x7876125b80
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4] 0x7876125c00

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8] 0x7876125c80
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8] 0x7876125d00

--------------------------------
Class: LevelVariantSets.Object
	class Object* DirectorClass;//[Offset: 0x28, Size: 0x8] 0x7875b39340
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10] 0x7875b393e0
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x5e6fb94 0x7875bbb5a0
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x5e6fca0 0x7875bbb680
	int GetNumVariantSets();// 0x5e6fd50 0x7875bbb760

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18] 0x7875bd9980
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7875bd9a00
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10] 0x7875b3b3c0
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8] 0x7875bd9b00
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x5e758f0 0x7875bbcd40
	void SetThumbnailFromFile(FString FilePath);// 0x5e757f4 0x7875bbce20
	void SetThumbnailFromEditorViewport();// 0x5e755ec 0x7875bbcf00
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x5e75600 0x7875bbcfe0
	void SetDisplayText(out const FText NewDisplayText);// 0x5e75c58 0x7875bbd0c0
	Variant* GetVariantByName(FString VariantName);// 0x5e75998 0x7875bbd1a0
	Variant* GetVariant(int VariantIndex);// 0x5e75aa4 0x7875bbd280
	Texture2D* GetThumbnail();// 0x5e755b8 0x7875bbd360
	LevelVariantSets* GetParent();// 0x5e75d68 0x7875bbd440
	int GetNumVariants();// 0x5e75b54 0x7875bbd520
	FText GetDisplayText();// 0x5e75b88 0x7875bbd600

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10] 0x7875b3b5a0
	FText DisplayText;//[Offset: 0x38, Size: 0x18] 0x7875bd8580
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10] 0x7875b3b640
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8] 0x7875bd8680
	void SwitchOn();// 0x5e74618 0x7875bbd6e0
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x5e74538 0x7875bbd7c0
	void SetThumbnailFromFile(FString FilePath);// 0x5e7443c 0x7875bbd8a0
	void SetThumbnailFromEditorViewport();// 0x5e74234 0x7875bbd980
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x5e74248 0x7875bbda60
	void SetDisplayText(out const FText NewDisplayText);// 0x5e747e0 0x7875bbdb40
	void SetDependency(int Index, out VariantDependency Dependency);// 0x5e73dc0 0x7875bbdc20
	bool IsActive();// 0x5e745e0 0x7875bbdd00
	Texture2D* GetThumbnail();// 0x5e74200 0x7875bbdde0
	VariantSet* GetParent();// 0x5e748f0 0x7875bbdec0
	int GetNumDependencies();// 0x5e73ce4 0x7875bbdfa0
	int GetNumActors();// 0x5e746dc 0x7875bbe080
	FText GetDisplayText();// 0x5e74710 0x7875bbe160
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x5e740b0 0x7875bbe240
	VariantDependency GetDependency(int Index);// 0x5e73ef8 0x7875bbe320
	Actor* GetActor(int ActorIndex);// 0x5e7462c 0x7875bbe400
	void DeleteDependency(int Index);// 0x5e73d18 0x7875bbe4e0
	int AddDependency(out VariantDependency Dependency);// 0x5e73fb0 0x7875bbe5c0

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28] 0x7876125300
	Variant* Variant;//[Offset: 0x28, Size: 0x28] 0x7876125380
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7876125400

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10] 0x7875bda380
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18] 0x7875bda400
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c] 0x7875bda480
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10] 0x7875b3b460
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10] 0x7875b3b500

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10] 0x7875b3b820
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10] 0x7875b3b8c0
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10] 0x7875b3b960
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10] 0x7875bd7800
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8] 0x7875bd7880
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50] 0x7875b19880
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x7875bd7a00
	class Object* LeafPropertyClass;//[Offset: 0x128, Size: 0x8] 0x7875b390c0
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10] 0x7875b39160
	enum PropCategory;//[Offset: 0x148, Size: 0x1] 0x7875b39200
	bool HasRecordedData();// 0x5e713b4 0x7875bbaf80
	FText GetPropertyTooltip();// 0x5e71470 0x7875bbb060
	FString GetFullDisplayString();// 0x5e713ec 0x7875bbb140

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10] 0x7876125500
	int PropertyIndex;//[Offset: 0x10, Size: 0x4] 0x7876125580
	FString ComponentName;//[Offset: 0x18, Size: 0x10] 0x7876125600

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8] 0x7876125680

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x220, Size: 0x18] 0x7875bd7d00
	<class Object,LevelVariantSetsFunctionDirector*> DirectorInstances;//[Offset: 0x238, Size: 0x50] 0x7875b19940
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x5e70460 0x7875bbb220
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x5e70364 0x7875bbb300
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x5e70610 0x7875bbb3e0
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x5e706b8 0x7875bbb4c0

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8] 0x7875bd7400
	int LastSelectedOption;//[Offset: 0x240, Size: 0x4] 0x7875bd7480
	void SelectOption(int OptionIndex);// 0x5e733cc 0x7875bbe6a0
	int GetSelectedOption();// 0x5e73474 0x7875bbadc0
	Actor*[] GetOptions();// 0x5e734a8 0x7875bbaea0

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10] 0x7875b3b280
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10] 0x7875b3b320
	int StartFrame;//[Offset: 0x60, Size: 0x4] 0x7875bd9800
	int EndFrame;//[Offset: 0x64, Size: 0x4] 0x7875bd9880
	uint64 Hash;//[Offset: 0x68, Size: 0x8] 0x7875bd9900

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4] 0x7875bdc500

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x220, Size: 0x8] 0x7875bd9600
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x5e94494 0x7875bbcc60

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x470, Size: 0x8] 0x7875bdc580
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x7875bdc600
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1] 0x7875bda580
	bool bExtrapolateFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 0x1] 0x7875bda600
	float StartTimeOffset;//[Offset: 0x47c, Size: 0x4] 0x7875bda680
	float PlaybackSpeed;//[Offset: 0x480, Size: 0x4] 0x7875bda700
	float MotionVectorScale;//[Offset: 0x484, Size: 0x4] 0x7875bda780
	int NumTracks;//[Offset: 0x488, Size: 0x4] 0x7875bda800
	float ElapsedTime;//[Offset: 0x48c, Size: 0x4] 0x7875bda880
	float Duration;//[Offset: 0x4c4, Size: 0x4] 0x7875bda900
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1] 0x7875bda980
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x5e9562c 0x7875bbecc0
	void Stop();// 0x5e95e18 0x7875bbeda0
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x5e95890 0x7875bbee80
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x5e95afc 0x7875bbef60
	void SetMotionVectorScale(const float NewMotionVectorScale);// 0x5e95a20 0x7875bbf040
	void SetLooping(const bool bNewLooping);// 0x5e95cc0 0x7875bbf120
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x5e9596c 0x7875bbf200
	void SetExtrapolateFrames(const bool bNewExtrapolating);// 0x5e95bd8 0x7875bbf2e0
	void PlayReversedFromEnd();// 0x5e95e40 0x7875bbf3c0
	void PlayReversed();// 0x5e95e54 0x7875bbf4a0
	void PlayFromStart();// 0x5e95e68 0x7875bbf580
	void Play();// 0x5e95e7c 0x7875bbf660
	void Pause();// 0x5e95e2c 0x7875bbf740
	bool IsPlayingReversed();// 0x5e95da8 0x7875bbf820
	bool IsPlaying();// 0x5e95de0 0x7875bbf900
	bool IsLooping();// 0x5e95d70 0x7875bbf9e0
	bool IsExtrapolatingFrames();// 0x5e95c88 0x7875bbfac0
	float GetStartTimeOffset();// 0x5e95938 0x7875bbfba0
	float GetPlaybackSpeed();// 0x5e95ba4 0x7875bbfc80
	float GetPlaybackDirection();// 0x5e95828 0x7875bbfd60
	int GetNumberOfFrames();// 0x5e957c0 0x7875bbfe40
	float GetMotionVectorScale();// 0x5e95ac8 0x7875bbff20
	float GetDuration();// 0x5e957f4 0x7875bbcaa0
	float GetAnimationTime();// 0x5e9585c 0x7875bbcb80

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10] 0x7875b3b1e0

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4] 0x7875bd9500

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4] 0x7875bdc380
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x5e97158 0x7875bbebe0

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8] 0x7875bdc280
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4] 0x7875bdc300

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x5e97abc 0x7875bbeb00

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x5e98040 0x7875bbea20

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe0, Size: 0x40] 0x7875bdc100

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8] 0x7876126f80
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7876127000
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7876127080
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x7876127100
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x7876127180
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7876127200
	float StartOffset;//[Offset: 0x1c, Size: 0x4] 0x7876127280
	float EndOffset;//[Offset: 0x20, Size: 0x4] 0x7876127300
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18] 0x7876127380

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7875b3b140

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x5ea62ac 0x7875bbe940

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1] 0x7875b3b0a0
	float UniformMass;//[Offset: 0x2c, Size: 0x4] 0x7875bdce80
	float TotalMass;//[Offset: 0x30, Size: 0x4] 0x7875bdcf00
	float Density;//[Offset: 0x34, Size: 0x4] 0x7875bdcf80
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4] 0x7875bdd000
	float EdgeStiffness;//[Offset: 0x3c, Size: 0x4] 0x7875bdd080
	float BendingStiffness;//[Offset: 0x40, Size: 0x4] 0x7875bdd100
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875bdd180
	float AreaStiffness;//[Offset: 0x48, Size: 0x4] 0x7875bdd200
	float VolumeStiffness;//[Offset: 0x4c, Size: 0x4] 0x7875bdd280
	ChaosClothWeightedValue TetherStiffness;//[Offset: 0x50, Size: 0x8] 0x7875bdd300
	float LimitScale;//[Offset: 0x58, Size: 0x4] 0x7875bdd380
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1] 0x7875bdd400
	float ShapeTargetStiffness;//[Offset: 0x60, Size: 0x4] 0x7875bdd480
	float CollisionThickness;//[Offset: 0x64, Size: 0x4] 0x7875bdd500
	float FrictionCoefficient;//[Offset: 0x68, Size: 0x4] 0x7875bdd580
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1] 0x7875bdd600
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1] 0x7875bdd680
	float SelfCollisionThickness;//[Offset: 0x70, Size: 0x4] 0x7875bdb600
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x7875bdb680
	float DampingCoefficient;//[Offset: 0x78, Size: 0x4] 0x7875bdb700
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7875bdb780
	float DragCoefficient;//[Offset: 0x80, Size: 0x4] 0x7875bdb800
	float LiftCoefficient;//[Offset: 0x84, Size: 0x4] 0x7875bdb880
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7875bdb900
	float GravityScale;//[Offset: 0x8c, Size: 0x4] 0x7875bdb980
	Vector Gravity;//[Offset: 0x90, Size: 0xc] 0x7875bdba00
	ChaosClothWeightedValue AnimDriveStiffness;//[Offset: 0x9c, Size: 0x8] 0x7875bdba80
	ChaosClothWeightedValue AnimDriveDamping;//[Offset: 0xa4, Size: 0x8] 0x7875bdbb00
	Vector LinearVelocityScale;//[Offset: 0xac, Size: 0xc] 0x7875bdbb80
	float AngularVelocityScale;//[Offset: 0xb8, Size: 0x4] 0x7875bdbc00
	float FictitiousAngularScale;//[Offset: 0xbc, Size: 0x4] 0x7875bdbc80
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x7875bdbd00
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x7875bdbd80
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1] 0x7875bdbe00

--------------------------------
Class: ChaosClothWeightedValue
	float Low;//[Offset: 0x0, Size: 0x4] 0x7876126c00
	float High;//[Offset: 0x4, Size: 0x4] 0x7876126c80

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object
	int IterationCount;//[Offset: 0x28, Size: 0x4] 0x7875bdcc00
	int SubdivisionCount;//[Offset: 0x2c, Size: 0x4] 0x7875bdcc80
	bool bUseLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875bdcd00
	bool bUseXPBDConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875bdcd80

--------------------------------
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object

--------------------------------
Class: ChaosClothingInteractor.ClothingInteractor.Object
	void SetVelocityScale(Vector LinearVelocityScale, float AngularVelocityScale, float FictitiousAngularScale);// 0x5ee17e0 0x7875be1580
	void SetMaterialLinear(float EdgeStiffness, float BendingStiffness, float AreaStiffness);// 0x5ee20a4 0x7875be1660
	void SetLongRangeAttachmentLinear(float TetherStiffness);// 0x5ee1ffc 0x7875be1740
	void SetLongRangeAttachment(Vector2D TetherStiffness);// 0x5ee1f58 0x7875be1820
	void SetGravity(float GravityScale, bool bIsGravityOverridden, Vector GravityOverride);// 0x5ee1aac 0x7875be1900
	void SetDamping(float DampingCoefficient);// 0x5ee1d2c 0x7875be19e0
	void SetCollision(float CollisionThickness, float FrictionCoefficient, bool bUseCCD, float SelfCollisionThickness);// 0x5ee1dd4 0x7875be1ac0
	void SetAnimDriveLinear(float AnimDriveStiffness);// 0x5ee1a04 0x7875be1ba0
	void SetAnimDrive(Vector2D AnimDriveStiffness, Vector2D AnimDriveDamping);// 0x5ee191c 0x7875be1c80
	void SetAerodynamics(float DragCoefficient, float LiftCoefficient, Vector WindVelocity);// 0x5ee1bf4 0x7875bbe780
	void ResetAndTeleport(bool bReset, bool bTeleport);// 0x5ee16e8 0x7875bbe860

--------------------------------
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object

--------------------------------
Class: EditableMeshAdapter.Object

--------------------------------
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object
	GeometryCollection* GeometryCollection;//[Offset: 0x28, Size: 0x8] 0x7875bdd880
	GeometryCollection* OriginalGeometryCollection;//[Offset: 0x30, Size: 0x8] 0x7875bdd900
	int GeometryCollectionLODIndex;//[Offset: 0x38, Size: 0x4] 0x7875bdd980

--------------------------------
Class: GeometryCollection.Object
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78e2642e80
	int ClusterGroupIndex;//[Offset: 0x34, Size: 0x4] 0x78e2642f00
	int MaxClusterLevel;//[Offset: 0x38, Size: 0x4] 0x78e2642f80
	float[] DamageThreshold;//[Offset: 0x40, Size: 0x10] 0x78e26320e0
	enum ClusterConnectionType;//[Offset: 0x50, Size: 0x1] 0x78e2632180
	GeometryCollectionSource[] GeometrySource;//[Offset: 0x58, Size: 0x10] 0x78e2632220
	MaterialInterface*[] Materials;//[Offset: 0x68, Size: 0x10] 0x78e26322c0
	enum CollisionType;//[Offset: 0x78, Size: 0x1] 0x78e2632360
	enum ImplicitType;//[Offset: 0x79, Size: 0x1] 0x78e2632400
	int MinLevelSetResolution;//[Offset: 0x7c, Size: 0x4] 0x78e2641200
	int MaxLevelSetResolution;//[Offset: 0x80, Size: 0x4] 0x78e2641280
	int MinClusterLevelSetResolution;//[Offset: 0x84, Size: 0x4] 0x78e2641300
	int MaxClusterLevelSetResolution;//[Offset: 0x88, Size: 0x4] 0x78e2641380
	float CollisionObjectReductionPercentage;//[Offset: 0x8c, Size: 0x4] 0x78e2641400
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78e2641480
	float Mass;//[Offset: 0x94, Size: 0x4] 0x78e2641500
	float MinimumMassClamp;//[Offset: 0x98, Size: 0x4] 0x78e2641580
	float CollisionParticlesFraction;//[Offset: 0x9c, Size: 0x4] 0x78e2641600
	int MaximumCollisionParticles;//[Offset: 0xa0, Size: 0x4] 0x78e2641680
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0xa8, Size: 0x10] 0x78e26324a0
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x78e2641780
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0xc0, Size: 0x10] 0x78e2632540
	Guid PersistentGuid;//[Offset: 0xd0, Size: 0x10] 0x78e2641880
	Guid StateGuid;//[Offset: 0xe0, Size: 0x10] 0x78e2641900
	int BoneSelectedMaterialIndex;//[Offset: 0xf0, Size: 0x4] 0x78e2641980

--------------------------------
Class: GeometryCollectionSource
	SoftObjectPath SourceGeometryObject;//[Offset: 0x0, Size: 0x18] 0x7875b4d900
	Transform LocalTransform;//[Offset: 0x20, Size: 0x30] 0x7875b4d980
	MaterialInterface*[] SourceMaterial;//[Offset: 0x50, Size: 0x10] 0x7875b33260

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4] 0x7875b4da80
	enum CollisionType;//[Offset: 0x4, Size: 0x1] 0x7875b33300
	enum ImplicitType;//[Offset: 0x5, Size: 0x1] 0x7875b333a0
	int MinLevelSetResolution;//[Offset: 0x8, Size: 0x4] 0x7875b4dc00
	int MaxLevelSetResolution;//[Offset: 0xc, Size: 0x4] 0x7875b4dc80
	int MinClusterLevelSetResolution;//[Offset: 0x10, Size: 0x4] 0x7875b4dd00
	int MaxClusterLevelSetResolution;//[Offset: 0x14, Size: 0x4] 0x7875b4dd80
	int CollisionObjectReductionPercentage;//[Offset: 0x18, Size: 0x4] 0x7875b4de00
	float CollisionParticlesFraction;//[Offset: 0x1c, Size: 0x4] 0x7875b4de80
	int MaximumCollisionParticles;//[Offset: 0x20, Size: 0x4] 0x7875b4df00

--------------------------------
Class: EditableMesh.Object
	EditableMeshAdapter*[] Adapters;//[Offset: 0x3b8, Size: 0x10] 0x7875b3f6a0
	int TextureCoordinateCount;//[Offset: 0x3d0, Size: 0x4] 0x7875bf6f00
	int PendingCompactCounter;//[Offset: 0x51c, Size: 0x4] 0x7875bf6f80
	int SubdivisionCount;//[Offset: 0x520, Size: 0x4] 0x7875bf7000
	void WeldVertices(out const VertexID[] VertexIDs, out VertexID OutNewVertexID);// 0x61bcbb8 0x7875be8040
	void TryToRemoveVertex(const VertexID VertexID, out bool bOutWasVertexRemoved, out EdgeID OutNewEdgeID);// 0x61bdf80 0x7875be8120
	void TryToRemovePolygonEdge(const EdgeID EdgeID, out bool bOutWasEdgeRemoved, out PolygonID OutNewPolygonID);// 0x61be0e0 0x7875be8200
	void TriangulatePolygons(out const PolygonID[] PolygonIDs, out PolygonID[] OutNewTrianglePolygons);// 0x61bcff0 0x7875be82e0
	void TessellatePolygons(out const PolygonID[] PolygonIDs, const enum TriangleTessellationMode, out PolygonID[] OutNewPolygonIDs);// 0x61bca50 0x7875be83c0
	void StartModification(const enum MeshModificationType, const enum MeshTopologyChange);// 0x61c3824 0x7875be84a0
	void SplitPolygons(out const PolygonToSplit[] PolygonsToSplit, out EdgeID[] OutNewEdgeIDs);// 0x61bf6c4 0x7875be8580
	void SplitPolygonalMesh(out const Plane InPlane, out PolygonID[] PolygonIDs1, out PolygonID[] PolygonIDs2, out EdgeID[] BoundaryIDs);// 0x61bc65c 0x7875be8660
	void SplitEdge(const EdgeID EdgeID, out const float[] Splits, out VertexID[] OutNewVertexIDs);// 0x61bf990 0x7875be8740
	void SetVerticesCornerSharpness(out const VertexID[] VertexIDs, out const float[] VerticesNewCornerSharpness);// 0x61bd508 0x7875be8820
	void SetVerticesAttributes(out const AttributesForVertex[] AttributesForVertices);// 0x61be630 0x7875be8900
	void SetVertexInstancesAttributes(out const AttributesForVertexInstance[] AttributesForVertexInstances);// 0x61be534 0x7875be89e0
	void SetTextureCoordinateCount(const int NumTexCoords);// 0x61bc9a8 0x7875be8ac0
	void SetSubdivisionCount(const int NewSubdivisionCount);// 0x61bfcdc 0x7875be8ba0
	void SetPolygonsVertexAttributes(out const VertexAttributesForPolygon[] VertexAttributesForPolygons);// 0x61be37c 0x7875be8c80
	void SetEdgesHardnessAutomatically(out const EdgeID[] EdgeIDs, const float MaxDotProductForSoftEdge);// 0x61bd1cc 0x7875be8d60
	void SetEdgesHardness(out const EdgeID[] EdgeIDs, out const bool[] EdgesNewIsHard);// 0x61bd2d0 0x7875be8e40
	void SetEdgesCreaseSharpness(out const EdgeID[] EdgeIDs, out const float[] EdgesNewCreaseSharpness);// 0x61bd3ec 0x7875be8f20
	void SetEdgesAttributes(out const AttributesForEdge[] AttributesForEdges);// 0x61be438 0x7875be9000
	void SetAllowUndo(const bool bInAllowUndo);// 0x61c2218 0x7875be5720
	void SetAllowSpatialDatabase(const bool bInAllowSpatialDatabase);// 0x61c214c 0x7875be5800
	void SetAllowCompact(const bool bInAllowCompact);// 0x61c204c 0x7875be58e0
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(out const Plane InPlane, out PolygonID[] OutPolygons);// 0x61bfd84 0x7875be59c0
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(const Vector LineSegmentStart, const Vector LineSegmentEnd, out PolygonID[] OutPolygons);// 0x61bffac 0x7875be5aa0
	void SearchSpatialDatabaseForPolygonsInVolume(out const Plane[] Planes, out PolygonID[] OutPolygons);// 0x61bfe90 0x7875be5b80
	EditableMesh* RevertInstance();// 0x61c35f8 0x7875be5c60
	void Revert();// 0x61c362c 0x7875be5d40
	void RebuildRenderMesh();// 0x61c3918 0x7875be5e20
	void QuadrangulateMesh(out PolygonID[] OutNewPolygonIDs);// 0x61bc8e8 0x7875be5f00
	void PropagateInstanceChanges();// 0x61c35e4 0x7875be5fe0
	void MoveVertices(out const VertexToMove[] VerticesToMove);// 0x61bfc1c 0x7875be60c0
	static VertexID MakeVertexID(const int VertexIndex);// 0x61c1f18 0x7875be61a0
	static PolygonID MakePolygonID(const int PolygonIndex);// 0x61c1d2c 0x7875be6280
	static PolygonGroupID MakePolygonGroupID(const int PolygonGroupIndex);// 0x61c1dd0 0x7875be6360
	static EdgeID MakeEdgeID(const int EdgeIndex);// 0x61c1e74 0x7875be6440
	bool IsValidVertex(const VertexID VertexID);// 0x61c34f0 0x7875be6520
	bool IsValidPolygonGroup(const PolygonGroupID PolygonGroupID);// 0x61c2b14 0x7875be6600
	bool IsValidPolygon(const PolygonID PolygonID);// 0x61c2860 0x7875be66e0
	bool IsValidEdge(const EdgeID EdgeID);// 0x61c2ecc 0x7875be67c0
	bool IsUndoAllowed();// 0x61c22c4 0x7875be68a0
	bool IsSpatialDatabaseAllowed();// 0x61c21fc 0x7875be6980
	bool IsPreviewingSubdivisions();// 0x61c1c58 0x7875be6a60
	bool IsOrphanedVertex(const VertexID VertexID);// 0x61c3430 0x7875be6b40
	bool IsCompactAllowed();// 0x61c20f8 0x7875be6c20
	bool IsCommittedAsInstance();// 0x61c3704 0x7875be6d00
	bool IsCommitted();// 0x61c373c 0x7875be6de0
	bool IsBeingModified();// 0x61c22e0 0x7875be6ec0
	static VertexID InvalidVertexID();// 0x61c2028 0x7875be6fa0
	static PolygonID InvalidPolygonID();// 0x61c1fbc 0x7875be7080
	static PolygonGroupID InvalidPolygonGroupID();// 0x61c1fe0 0x7875be7160
	static EdgeID InvalidEdgeID();// 0x61c2004 0x7875be7240
	void InsetPolygons(out const PolygonID[] PolygonIDs, const float InsetFixedDistance, const float InsetProgressTowardCenter, const enum Mode, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x61bd838 0x7875be7320
	void InsertEdgeLoop(const EdgeID EdgeID, out const float[] Splits, out EdgeID[] OutNewEdgeIDs);// 0x61bf81c 0x7875be3a40
	void InitializeAdapters();// 0x61c392c 0x7875be3b20
	EdgeID GetVertexPairEdge(const VertexID VertexID, const VertexID NextVertexID, out bool bOutEdgeWindingIsReversed);// 0x61c1698 0x7875be3c00
	VertexID GetVertexInstanceVertex(const VertexInstanceID VertexInstanceID);// 0x61c3180 0x7875be3ce0
	int GetVertexInstanceCount();// 0x61c323c 0x7875be3dc0
	void GetVertexInstanceConnectedPolygons(const VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x61c1910 0x7875be3ea0
	int GetVertexInstanceConnectedPolygonCount(const VertexInstanceID VertexInstanceID);// 0x61c30c4 0x7875be3f80
	PolygonID GetVertexInstanceConnectedPolygon(const VertexInstanceID VertexInstanceID, const int ConnectedPolygonNumber);// 0x61c2fc0 0x7875be4060
	int GetVertexCount();// 0x61c35b0 0x7875be4140
	void GetVertexConnectedPolygons(const VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x61c1a28 0x7875be4220
	void GetVertexConnectedEdges(const VertexID VertexID, out EdgeID[] OutConnectedEdgeIDs);// 0x61c1b40 0x7875be4300
	int GetVertexConnectedEdgeCount(const VertexID VertexID);// 0x61c3374 0x7875be43e0
	EdgeID GetVertexConnectedEdge(const VertexID VertexID, const int ConnectedEdgeNumber);// 0x61c3270 0x7875be44c0
	void GetVertexAdjacentVertices(const VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x61c17f8 0x7875be45a0
	int GetTextureCoordinateCount();// 0x61c1cc4 0x7875be4680
	SubdivisionLimitData GetSubdivisionLimitData();// 0x61c0450 0x7875be4760
	int GetSubdivisionCount();// 0x61c1c90 0x7875be4840
	int GetPolygonTriangulatedTriangleCount(const PolygonID PolygonID);// 0x61c2424 0x7875be4920
	TriangleID GetPolygonTriangulatedTriangle(const PolygonID PolygonID, int PolygonTriangleNumber);// 0x61c2320 0x7875be4a00
	void GetPolygonPerimeterVertices(const PolygonID PolygonID, out VertexID[] OutPolygonPerimeterVertexIDs);// 0x61c1034 0x7875be4ae0
	void GetPolygonPerimeterVertexInstances(const PolygonID PolygonID, out VertexInstanceID[] OutPolygonPerimeterVertexInstanceIDs);// 0x61c0f1c 0x7875be4bc0
	VertexInstanceID GetPolygonPerimeterVertexInstance(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x61c24e0 0x7875be4ca0
	int GetPolygonPerimeterVertexCount(const PolygonID PolygonID);// 0x61c26e8 0x7875be4d80
	VertexID GetPolygonPerimeterVertex(const PolygonID PolygonID, const int PolygonVertexNumber);// 0x61c25e4 0x7875be4e60
	void GetPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutPolygonPerimeterEdgeIDs);// 0x61c0ca8 0x7875be4f40
	int GetPolygonPerimeterEdgeCount(const PolygonID PolygonID);// 0x61c114c 0x7875be5020
	EdgeID GetPolygonPerimeterEdge(const PolygonID PolygonID, const int PerimeterEdgeNumber, out bool bOutEdgeWindingIsReversedForPolygon);// 0x61c0dc0 0x7875be5100
	PolygonID GetPolygonInGroup(const PolygonGroupID PolygonGroupID, const int PolygonNumber);// 0x61c2954 0x7875be51e0
	int GetPolygonGroupCount();// 0x61c2bd4 0x7875be52c0
	int GetPolygonCountInGroup(const PolygonGroupID PolygonGroupID);// 0x61c2a58 0x7875be53a0
	int GetPolygonCount();// 0x61c2920 0x7875be5480
	void GetPolygonAdjacentPolygons(const PolygonID PolygonID, out PolygonID[] OutAdjacentPolygons);// 0x61c0b90 0x7875be5560
	PolygonGroupID GetGroupForPolygon(const PolygonID PolygonID);// 0x61c27a4 0x7875be5640
	PolygonGroupID GetFirstValidPolygonGroup();// 0x61c1cf8 0x7875be1d60
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID OutEdgeVertexID0, out VertexID OutEdgeVertexID1);// 0x61c1540 0x7875be1e40
	VertexID GetEdgeVertex(const EdgeID EdgeID, const int EdgeVertexNumber);// 0x61c2dc8 0x7875be1f20
	EdgeID GetEdgeThatConnectsVertices(const VertexID VertexID0, const VertexID VertexID1);// 0x61c1208 0x7875be2000
	void GetEdgeLoopElements(const EdgeID EdgeID, out EdgeID[] EdgeLoopIDs);// 0x61c1310 0x7875be20e0
	int GetEdgeCount();// 0x61c2f8c 0x7875be21c0
	void GetEdgeConnectedPolygons(const EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x61c1428 0x7875be22a0
	int GetEdgeConnectedPolygonCount(const EdgeID EdgeID);// 0x61c2d0c 0x7875be2380
	PolygonID GetEdgeConnectedPolygon(const EdgeID EdgeID, const int ConnectedPolygonNumber);// 0x61c2c08 0x7875be2460
	void GeneratePolygonTangentsAndNormals(out const PolygonID[] PolygonIDs);// 0x61bc828 0x7875be2540
	void FlipPolygons(out const PolygonID[] PolygonIDs);// 0x61bd10c 0x7875be2620
	int FindPolygonPerimeterVertexNumberForVertex(const PolygonID PolygonID, const VertexID VertexID);// 0x61c0a88 0x7875be2700
	int FindPolygonPerimeterEdgeNumberForVertices(const PolygonID PolygonID, const VertexID EdgeVertexID0, const VertexID EdgeVertexID1);// 0x61c093c 0x7875be27e0
	void FindPolygonLoop(const EdgeID EdgeID, out EdgeID[] OutEdgeLoopEdgeIDs, out EdgeID[] OutFlippedEdgeIDs, out EdgeID[] OutReversedEdgeIDPathToTake, out PolygonID[] OutPolygonIDsToSplit);// 0x61c0100 0x7875be28c0
	void ExtrudePolygons(out const PolygonID[] Polygons, const float ExtrudeDistance, const bool bKeepNeighborsTogether, out PolygonID[] OutNewExtrudedFrontPolygons);// 0x61bddc8 0x7875be29a0
	void ExtendVertices(out const VertexID[] VertexIDs, const bool bOnlyExtendClosestEdge, const Vector ReferencePosition, out VertexID[] OutNewExtendedVertexIDs);// 0x61bda98 0x7875be2a80
	void ExtendEdges(out const EdgeID[] EdgeIDs, const bool bWeldNeighbors, out EdgeID[] OutNewExtendedEdgeIDs);// 0x61bdc5c 0x7875be2b60
	void EndModification(const bool bFromUndo);// 0x61c3774 0x7875be2c40
	void DeleteVertexInstances(out const VertexInstanceID[] VertexInstanceIDsToDelete, const bool bDeleteOrphanedVertices);// 0x61bf128 0x7875be2d20
	void DeleteVertexAndConnectedEdgesAndPolygons(const VertexID VertexID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x61bf2f4 0x7875be2e00
	void DeletePolygons(out const PolygonID[] PolygonIDsToDelete, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x61be72c 0x7875be2ee0
	void DeletePolygonGroups(out const PolygonGroupID[] PolygonGroupIDs);// 0x61bcde0 0x7875be2fc0
	void DeleteOrphanVertices(out const VertexID[] VertexIDsToDelete);// 0x61bf234 0x7875be30a0
	void DeleteEdges(out const EdgeID[] EdgeIDsToDelete, const bool bDeleteOrphanedVertices);// 0x61bf01c 0x7875be3180
	void DeleteEdgeAndConnectedPolygons(const EdgeID EdgeID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0x61bf4dc 0x78760ba0a0
	void CreateVertices(out const VertexToCreate[] VerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x61bedc0 0x7875be3260
	void CreateVertexInstances(out const VertexInstanceToCreate[] VertexInstancesToCreate, out VertexInstanceID[] OutNewVertexInstanceIDs);// 0x61bec68 0x7875be3340
	void CreatePolygons(out const PolygonToCreate[] PolygonsToCreate, out PolygonID[] OutNewPolygonIDs, out EdgeID[] OutNewEdgeIDs);// 0x61be920 0x7875be3420
	void CreatePolygonGroups(out const PolygonGroupToCreate[] PolygonGroupsToCreate, out PolygonGroupID[] OutNewPolygonGroupIDs);// 0x61bcea0 0x7875be3500
	void CreateMissingPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutNewEdgeIDs);// 0x61bfb04 0x7875be35e0
	void CreateEmptyVertexRange(const int NumVerticesToCreate, out VertexID[] OutNewVertexIDs);// 0x61bef10 0x7875be36c0
	void CreateEdges(out const EdgeToCreate[] EdgesToCreate, out EdgeID[] OutNewEdgeIDs);// 0x61beb10 0x7875be37a0
	void ComputePolygonsSharedEdges(out const PolygonID[] PolygonIDs, out EdgeID[] OutSharedEdgeIDs);// 0x61c0334 0x7875be3880
	Plane ComputePolygonPlane(const PolygonID PolygonID);// 0x61c06e4 0x7875be3960
	Vector ComputePolygonNormal(const PolygonID PolygonID);// 0x61c0624 0x7875be0080
	Vector ComputePolygonCenter(const PolygonID PolygonID);// 0x61c07a4 0x7875be0160
	BoxSphereBounds ComputeBoundingBoxAndSphere();// 0x61c0864 0x7875be0240
	Box ComputeBoundingBox();// 0x61c08d0 0x7875be0320
	EditableMesh* CommitInstance(PrimitiveComponent* ComponentToInstanceTo);// 0x61c3640 0x7875be0400
	void Commit();// 0x61c36f0 0x7875be04e0
	void ChangePolygonsVertexInstances(out const ChangeVertexInstancesForPolygon[] VertexInstancesForPolygons);// 0x61be240 0x7875be05c0
	void BevelPolygons(out const PolygonID[] PolygonIDs, const float BevelFixedDistance, const float BevelProgressTowardCenter, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0x61bd624 0x7875be06a0
	void AssignPolygonsToPolygonGroups(out const PolygonGroupForPolygon[] PolygonGroupForPolygons, const bool bDeleteOrphanedPolygonGroups);// 0x61bccd4 0x7875be0780
	bool AnyChangesToUndo();// 0x61c2114 0x7875be0860

--------------------------------
Class: PolygonToSplit
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x7876127a80
	VertexPair[] VertexPairsToSplitAt;//[Offset: 0x8, Size: 0x10] 0x7878006b40

--------------------------------
Class: VertexPair
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x7876127b00
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x7876127b80

--------------------------------
Class: AttributesForVertex
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x7876127c80
	MeshElementAttributeList VertexAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127d00

--------------------------------
Class: MeshElementAttributeList
	MeshElementAttributeData[] Attributes;//[Offset: 0x0, Size: 0x10] 0x7895c1dd00

--------------------------------
Class: MeshElementAttributeData
	FName AttributeName;//[Offset: 0x0, Size: 0x8] 0x7876126480
	int AttributeIndex;//[Offset: 0x8, Size: 0x4] 0x7876126500
	MeshElementAttributeValue AttributeValue;//[Offset: 0x10, Size: 0x50] 0x7876126580

--------------------------------
Class: MeshElementAttributeValue

--------------------------------
Class: AttributesForVertexInstance
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x7876127d80
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127e00

--------------------------------
Class: VertexAttributesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x7876127f80
	MeshElementAttributeList[] PerimeterVertexAttributeLists;//[Offset: 0x8, Size: 0x10] 0x7878006d20
	VertexAttributesForPolygonHole[] VertexAttributeListsForEachHole;//[Offset: 0x18, Size: 0x10] 0x7878006e60

--------------------------------
Class: VertexAttributesForPolygonHole
	MeshElementAttributeList[] VertexAttributeList;//[Offset: 0x0, Size: 0x10] 0x7878006c80

--------------------------------
Class: AttributesForEdge
	EdgeID EdgeID;//[Offset: 0x0, Size: 0x4] 0x7876127e80
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127f00

--------------------------------
Class: VertexToMove
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x7876126380
	Vector NewVertexPosition;//[Offset: 0x4, Size: 0xc] 0x7876126400

--------------------------------
Class: SubdivisionLimitData
	Vector[] VertexPositions;//[Offset: 0x0, Size: 0x10] 0x7878006780
	SubdivisionLimitSection[] Sections;//[Offset: 0x10, Size: 0x10] 0x78780068c0
	SubdividedWireEdge[] SubdividedWireEdges;//[Offset: 0x20, Size: 0x10] 0x7878006820

--------------------------------
Class: SubdivisionLimitSection
	SubdividedQuad[] SubdividedQuads;//[Offset: 0x0, Size: 0x10] 0x7878006960

--------------------------------
Class: SubdividedQuad
	SubdividedQuadVertex QuadVertex0;//[Offset: 0x0, Size: 0x34] 0x7876128b80
	SubdividedQuadVertex QuadVertex1;//[Offset: 0x34, Size: 0x34] 0x7876128c00
	SubdividedQuadVertex QuadVertex2;//[Offset: 0x68, Size: 0x34] 0x7876128c80
	SubdividedQuadVertex QuadVertex3;//[Offset: 0x9c, Size: 0x34] 0x7876129080

--------------------------------
Class: SubdividedQuadVertex
	int VertexPositionIndex;//[Offset: 0x0, Size: 0x4] 0x7876128d00
	Vector2D TextureCoordinate0;//[Offset: 0x4, Size: 0x8] 0x7876128d80
	Vector2D TextureCoordinate1;//[Offset: 0xc, Size: 0x8] 0x7876128e00
	Color VertexColor;//[Offset: 0x14, Size: 0x4] 0x7876128e80
	Vector VertexNormal;//[Offset: 0x18, Size: 0xc] 0x7876128f00
	Vector VertexTangent;//[Offset: 0x24, Size: 0xc] 0x7876128f80
	float VertexBinormalSign;//[Offset: 0x30, Size: 0x4] 0x7876129000

--------------------------------
Class: SubdividedWireEdge
	int EdgeVertex0PositionIndex;//[Offset: 0x0, Size: 0x4] 0x7876129200
	int EdgeVertex1PositionIndex;//[Offset: 0x4, Size: 0x4] 0x7876129280

--------------------------------
Class: VertexToCreate
	MeshElementAttributeList VertexAttributes;//[Offset: 0x0, Size: 0x10] 0x7876129380
	VertexID OriginalVertexID;//[Offset: 0x10, Size: 0x4] 0x7876129400

--------------------------------
Class: VertexInstanceToCreate
	VertexID VertexID;//[Offset: 0x0, Size: 0x4] 0x7876129480
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127400
	VertexInstanceID OriginalVertexInstanceID;//[Offset: 0x18, Size: 0x4] 0x7876127480

--------------------------------
Class: PolygonToCreate
	PolygonGroupID PolygonGroupID;//[Offset: 0x0, Size: 0x4] 0x7876127700
	VertexAndAttributes[] PerimeterVertices;//[Offset: 0x8, Size: 0x10] 0x7878006aa0
	PolygonID OriginalPolygonID;//[Offset: 0x18, Size: 0x4] 0x7876127980
	enum PolygonEdgeHardness;//[Offset: 0x1c, Size: 0x1] 0x7878006be0

--------------------------------
Class: VertexAndAttributes
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4] 0x7876127780
	VertexID VertexID;//[Offset: 0x4, Size: 0x4] 0x7876127800
	MeshElementAttributeList PolygonVertexAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127880

--------------------------------
Class: PolygonGroupToCreate
	MeshElementAttributeList PolygonGroupAttributes;//[Offset: 0x0, Size: 0x10] 0x7876126700
	PolygonGroupID OriginalPolygonGroupID;//[Offset: 0x10, Size: 0x4] 0x7876126780

--------------------------------
Class: EdgeToCreate
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4] 0x7876127500
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4] 0x7876127580
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10] 0x7876127600
	EdgeID OriginalEdgeID;//[Offset: 0x18, Size: 0x4] 0x7876127680

--------------------------------
Class: ChangeVertexInstancesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x7876128180
	VertexIndexAndInstanceID[] PerimeterVertexIndicesAndInstanceIDs;//[Offset: 0x8, Size: 0x10] 0x78780074a0
	VertexInstancesForPolygonHole[] VertexIndicesAndInstanceIDsForEachHole;//[Offset: 0x18, Size: 0x10] 0x7878006f00

--------------------------------
Class: VertexIndexAndInstanceID
	int ContourIndex;//[Offset: 0x0, Size: 0x4] 0x7876128280
	VertexInstanceID VertexInstanceID;//[Offset: 0x4, Size: 0x4] 0x7876128300

--------------------------------
Class: VertexInstancesForPolygonHole
	VertexIndexAndInstanceID[] VertexIndicesAndInstanceIDs;//[Offset: 0x0, Size: 0x10] 0x7878006fa0

--------------------------------
Class: PolygonGroupForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4] 0x7876126800
	PolygonGroupID PolygonGroupID;//[Offset: 0x4, Size: 0x4] 0x7876126880

--------------------------------
Class: EditableMeshFactory.Object
	static EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, const int LODIndex);// 0x61c9080 0x7875be7f60

--------------------------------
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8] 0x7875bf6b80
	StaticMesh* OriginalStaticMesh;//[Offset: 0x30, Size: 0x8] 0x7875bf6c00
	int StaticMeshLODIndex;//[Offset: 0x38, Size: 0x4] 0x7875bf6c80

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30] 0x7875bf6b00

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18] 0x7876128680
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4] 0x7876128700
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4] 0x7876128780
	float PlayRate;//[Offset: 0x28, Size: 0x4] 0x7876128800

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7875b3f600

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	static void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x61e945c 0x7875be76a0
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x61e9b08 0x7875be7780
	static void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x61e96bc 0x7875be7860
	static void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x61ea8b4 0x7875be7940
	static void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x61ea0c4 0x7875be7a20
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x61ea318 0x7875be7b00
	static void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x61e9e18 0x7875be7be0
	static void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x61e9984 0x7875be7cc0
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x61ea4ac 0x7875be7da0
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x61ea684 0x7875be7e80

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1] 0x7875bf9800
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1] 0x7875bf9880
	BodySetup* ProcMeshBodySetup;//[Offset: 0x480, Size: 0x8] 0x7875bf9900
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x488, Size: 0x10] 0x7875c00920
	KConvexElem[] CollisionConvexElems;//[Offset: 0x498, Size: 0x10] 0x7875c009c0
	BoxSphereBounds LocalBounds;//[Offset: 0x4a8, Size: 0x1c] 0x7875bf9a80
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4c8, Size: 0x10] 0x7875c00a60
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x61ebbd4 0x7875bea6c0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x61ebf7c 0x7875bea7a0
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x61eba20 0x7875bea880
	bool IsMeshSectionVisible(int SectionIndex);// 0x61eb96c 0x7875bea960
	int GetNumSections();// 0x61eb938 0x7875beaa40
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x61ec224 0x7875beab20
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x61ec680 0x7875beac00
	void ClearMeshSection(int SectionIndex);// 0x61ebb2c 0x7875beace0
	void ClearCollisionConvexMeshes();// 0x61eb824 0x7875be7400
	void ClearAllMeshSections();// 0x61ebb18 0x7875be74e0
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x61eb838 0x7875be75c0

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc] 0x7876129f80
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x787612a000

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10] 0x7878008f80
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10] 0x7878009020
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c] 0x787612a480
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x787612a500
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7876128480

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x7876129e80
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x7876129f00
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10] 0x787612a080
	Color Color;//[Offset: 0x28, Size: 0x4] 0x787612a100
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8] 0x787612a180
	Vector2D UV1;//[Offset: 0x34, Size: 0x8] 0x787612a200
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8] 0x787612a280
	Vector2D UV3;//[Offset: 0x44, Size: 0x8] 0x787612a300

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceChaosDestruction.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<ChaosSolverActor*> ChaosSolverActorSet;//[Offset: 0x38, Size: 0x50] 0x7875c002e0
	enum DataSourceType;//[Offset: 0x88, Size: 0x1] 0x7875c00380
	int DataProcessFrequency;//[Offset: 0x8c, Size: 0x4] 0x7875bfc380
	int MaxNumberOfDataEntriesToSpawn;//[Offset: 0x90, Size: 0x4] 0x7875bfc400
	bool DoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x7875bfc480
	Vector2D SpawnMultiplierMinMax;//[Offset: 0x98, Size: 0x8] 0x7875bfc500
	float SpawnChance;//[Offset: 0xa0, Size: 0x4] 0x7875bfc580
	Vector2D ImpulseToSpawnMinMax;//[Offset: 0xa4, Size: 0x8] 0x7875bfc600
	Vector2D SpeedToSpawnMinMax;//[Offset: 0xac, Size: 0x8] 0x7875bfa580
	Vector2D MassToSpawnMinMax;//[Offset: 0xb4, Size: 0x8] 0x7875bfa600
	Vector2D ExtentMinToSpawnMinMax;//[Offset: 0xbc, Size: 0x8] 0x7875bfa680
	Vector2D ExtentMaxToSpawnMinMax;//[Offset: 0xc4, Size: 0x8] 0x7875bfa700
	Vector2D VolumeToSpawnMinMax;//[Offset: 0xcc, Size: 0x8] 0x7875bfa780
	Vector2D SolverTimeToSpawnMinMax;//[Offset: 0xd4, Size: 0x8] 0x7875bfa800
	int SurfaceTypeToSpawn;//[Offset: 0xdc, Size: 0x4] 0x7875bfa880
	enum LocationFilteringMode;//[Offset: 0xe0, Size: 0x1] 0x7875c00420
	enum LocationXToSpawn;//[Offset: 0xe1, Size: 0x1] 0x7875c004c0
	Vector2D LocationXToSpawnMinMax;//[Offset: 0xe4, Size: 0x8] 0x7875bfaa00
	enum LocationYToSpawn;//[Offset: 0xec, Size: 0x1] 0x7875c00560
	Vector2D LocationYToSpawnMinMax;//[Offset: 0xf0, Size: 0x8] 0x7875bfab00
	enum LocationZToSpawn;//[Offset: 0xf8, Size: 0x1] 0x7875c00600
	Vector2D LocationZToSpawnMinMax;//[Offset: 0xfc, Size: 0x8] 0x7875bfac00
	enum DataSortingType;//[Offset: 0x104, Size: 0x1] 0x7875c006a0
	bool bGetExternalCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1] 0x7875bfad00
	bool DoSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1] 0x7875bfad80
	Vector SpatialHashVolumeMin;//[Offset: 0x108, Size: 0xc] 0x7875bfae00
	Vector SpatialHashVolumeMax;//[Offset: 0x114, Size: 0xc] 0x7875bfae80
	Vector SpatialHashVolumeCellSize;//[Offset: 0x120, Size: 0xc] 0x7875bfaf00
	int MaxDataPerCell;//[Offset: 0x12c, Size: 0x4] 0x7875bfaf80
	bool bApplyMaterialsFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x7875bfb000
	<PhysicalMaterial*> ChaosBreakingMaterialSet;//[Offset: 0x138, Size: 0x50] 0x7875c00740
	bool bGetExternalBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1] 0x7875bfb100
	bool bGetExternalTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1] 0x7875bfb180
	Vector2D RandomPositionMagnitudeMinMax;//[Offset: 0x18c, Size: 0x8] 0x7875bfb200
	float InheritedVelocityMultiplier;//[Offset: 0x194, Size: 0x4] 0x7875bfb280
	enum RandomVelocityGenerationType;//[Offset: 0x198, Size: 0x1] 0x7875c007e0
	Vector2D RandomVelocityMagnitudeMinMax;//[Offset: 0x19c, Size: 0x8] 0x7875bfb380
	float SpreadAngleMax;//[Offset: 0x1a4, Size: 0x4] 0x7875bfb400
	Vector VelocityOffsetMin;//[Offset: 0x1a8, Size: 0xc] 0x7875bfb480
	Vector VelocityOffsetMax;//[Offset: 0x1b4, Size: 0xc] 0x7875bfb500
	Vector2D FinalVelocityMagnitudeMinMax;//[Offset: 0x1c0, Size: 0x8] 0x7875bfb580
	float MaxLatency;//[Offset: 0x1c8, Size: 0x4] 0x7875bf9500
	enum DebugType;//[Offset: 0x1cc, Size: 0x1] 0x7875c00880
	int LastSpawnedPointID;//[Offset: 0x1d0, Size: 0x4] 0x7875bf9600
	float LastSpawnTime;//[Offset: 0x1d4, Size: 0x4] 0x7875bf9680
	float SolverTime;//[Offset: 0x1e8, Size: 0x4] 0x7875bf9700
	float TimeStampOfLastProcessedData;//[Offset: 0x1ec, Size: 0x4] 0x7875bf9780

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x220, Size: 0x68] 0x78e2618900
	float TimeStepMultiplier;//[Offset: 0x288, Size: 0x4] 0x78e2618980
	int CollisionIterations;//[Offset: 0x28c, Size: 0x4] 0x78e2618a00
	int PushOutIterations;//[Offset: 0x290, Size: 0x4] 0x78e2618a80
	int PushOutPairIterations;//[Offset: 0x294, Size: 0x4] 0x78e2618b00
	float ClusterConnectionFactor;//[Offset: 0x298, Size: 0x4] 0x78e2618b80
	enum ClusterUnionConnectionType;//[Offset: 0x29c, Size: 0x1] 0x78e26302e0
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1] 0x78e2618c80
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2a0, Size: 0x10] 0x78e2618d00
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78e2618d80
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x2b4, Size: 0x10] 0x78e2618e00
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x78e2618e80
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x2c8, Size: 0x10] 0x78e2618f00
	float MassScale;//[Offset: 0x2d8, Size: 0x4] 0x78e2618f80
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78e2619000
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1] 0x78e2619080
	float FloorHeight;//[Offset: 0x2e0, Size: 0x4] 0x78e2619100
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x2e4, Size: 0x3] 0x78e2619180
	BillboardComponent* SpriteComponent;//[Offset: 0x2e8, Size: 0x8] 0x78e2619200
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x308, Size: 0x8] 0x78e2619280
	void SetSolverActive(bool bActive);// 0x9b5370c 0x78e26237a0
	void SetAsCurrentWorldSolver();// 0x9b537c4 0x78e2623880

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875b4ca80
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7875b4cb00
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7875b4cb80

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50] 0x7875b1ce80
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50] 0x7875b1cf40

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50] 0x7875b33800

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: NiagaraDataInterfacePhysicsField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7875c00240

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0xa0, Size: 0x20] 0x7875bfc180

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10] 0x7878005b00

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7876129780
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4] 0x7876129880

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4] 0x7876129800

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4] 0x7875c02900
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4] 0x7875c00060
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4] 0x7875c00100
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1] 0x7875c001a0

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xc8, Size: 0x4] 0x7875bfbf00

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x220, Size: 0x8] 0x7875bfbd00
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1] 0x7875bfbd80
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0x64d09bc 0x7875bea500
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0x64d0914 0x7875bea5e0

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x448, Size: 0x8] 0x7875c10a00
	enum TickBehavior;//[Offset: 0x450, Size: 0x1] 0x7875c01e60
	int RandomSeedOffset;//[Offset: 0x454, Size: 0x4] 0x7875c10b00
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x458, Size: 0xc8] 0x7875c10b80
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1] 0x7875c10c00
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1] 0x7875c10c80
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54d, Size: 0x1] 0x7875c10d00
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54d, Size: 0x1] 0x7875c10d80
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54d, Size: 0x1] 0x7875c10e00
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54d, Size: 0x1] 0x7875c10e80
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x550, Size: 0x4] 0x7875c10f00
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x558, Size: 0x10] 0x7875c01f00
	delegate OnSystemFinished;//[Offset: 0x570, Size: 0x10] 0x7875c11000
	SceneComponent* AutoAttachParent;//[Offset: 0x580, Size: 0x8] 0x7875c11080
	FName AutoAttachSocketName;//[Offset: 0x588, Size: 0x8] 0x7875bff800
	enum AutoAttachLocationRule;//[Offset: 0x590, Size: 0x1] 0x7875c01fa0
	enum AutoAttachRotationRule;//[Offset: 0x591, Size: 0x1] 0x7875c02040
	enum AutoAttachScaleRule;//[Offset: 0x592, Size: 0x1] 0x7875c020e0
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x64dd8fc 0x7875beda60
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x64dd514 0x7875bedb40
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x64dd330 0x7875bedc20
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x64dc784 0x7875bedd00
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x64dd700 0x7875bedde0
	void SetVariableObject(FName InVariableName, Object* Object);// 0x64dc964 0x7875bedec0
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x64dc874 0x7875bedfa0
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x64ddb00 0x7875bee080
	void SetVariableInt(FName InVariableName, int InValue);// 0x64dcf48 0x7875bee160
	void SetVariableFloat(FName InVariableName, float InValue);// 0x64dd13c 0x7875bee240
	void SetVariableBool(FName InVariableName, bool InValue);// 0x64dcd44 0x7875bee320
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x64dcb54 0x7875bee400
	void SetTickBehavior(enum NewTickBehavior);// 0x64ddddc 0x7875bee4e0
	void SetSeekDelta(float InSeekDelta);// 0x64de0f8 0x7875bee5c0
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x64dc308 0x7875bee6a0
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0x64ddd18 0x7875beadc0
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0x64dbe90 0x7875beaea0
	void SetPaused(bool bInPaused);// 0x64dc074 0x7875beaf80
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x64dd9f8 0x7875beb060
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x64dd604 0x7875beb140
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x64dd41c 0x7875beb220
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x64dd7f8 0x7875beb300
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x64dca54 0x7875beb3e0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x64ddbf8 0x7875beb4c0
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x64dd03c 0x7875beb5a0
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x64dd230 0x7875beb680
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x64dce40 0x7875beb760
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x64dcc44 0x7875beb840
	void SetMaxSimTime(float InMaxTime);// 0x64ddf34 0x7875beb920
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0x64de010 0x7875beba00
	void SetGpuComputeDebug(bool bEnableDebug);// 0x64de4e4 0x7875bebae0
	void SetForceSolo(bool bInForceSolo);// 0x64de5b4 0x7875bebbc0
	void SetDesiredAge(float InDesiredAge);// 0x64de32c 0x7875bebca0
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x64de1d4 0x7875bebd80
	void SetAutoDestroy(bool bInAutoDestroy);// 0x64dde84 0x7875bebe60
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0x64de680 0x7875bebf40
	void SetAllowScalability(bool bAllow);// 0x64dbd9c 0x7875bec020
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x64de408 0x7875bec100
	void SeekToDesiredAge(float InDesiredAge);// 0x64de284 0x7875bec1e0
	void ResetSystem();// 0x64dc3cc 0x7875bec2c0
	void ReinitializeSystem();// 0x64dc3b8 0x7875bec3a0
	bool IsPaused();// 0x64dc03c 0x7875bec480
	void InitForPerformanceBaseline();// 0x64dbe4c 0x7875bec560
	enum GetTickBehavior();// 0x64dddc0 0x7875bec640
	float GetSeekDelta();// 0x64de1a0 0x7875bec720
	int GetRandomSeedOffset();// 0x64ddcfc 0x7875bec800
	bool GetPreviewLODDistanceEnabled();// 0x64dbe78 0x7875bec8e0
	float GetPreviewLODDistance();// 0x64dbe60 0x7875bec9c0
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x64dc3e0 0x7875be90e0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x64dc534 0x7875be91c0
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x64dc688 0x7875be92a0
	float GetMaxSimTime();// 0x64ddfdc 0x7875be9380
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0x64de0c0 0x7875be9460
	bool GetForceSolo();// 0x64de594 0x7875be9540
	float GetDesiredAge();// 0x64de3d4 0x7875be9620
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x64dbf80 0x7875be9700
	NiagaraSystem* GetAsset();// 0x64de664 0x7875be97e0
	enum GetAgeUpdateMode();// 0x64de4b0 0x7875be98c0
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x64dc124 0x7875be99a0
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x64dc214 0x7875be9a80

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875c45300
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875c45380
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x7875c45400
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7875c45480
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8] 0x7875c45500
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875c45580
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10] 0x7875c05b00
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10] 0x7875c45680
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10] 0x7875c05ba0
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10] 0x7875c05c40
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8] 0x7875c45800
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8] 0x7875c45880
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218] 0x7875c45900
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8] 0x7875c45980
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c] 0x7875c45a00
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1] 0x7875c45a80
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4] 0x7875c45b00
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4] 0x7875c45b80
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4] 0x7875c45c00
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1] 0x7875c45c80
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1] 0x7875c45d00
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10] 0x7875c05ce0

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4] 0x7875c05060
	enum CullReaction;//[Offset: 0x2c, Size: 0x4] 0x7875c05100
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8] 0x7875c1ae80
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10] 0x7875c051a0
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10] 0x7875c1af80
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10] 0x7875c1b000
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x70, Size: 0x8] 0x7875c1b080
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x78, Size: 0x10] 0x7875c1b100
	Guid PerfBaselineVersion;//[Offset: 0x88, Size: 0x10] 0x7875c1b180

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x7875952780
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7875952800
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1] 0x7875952880
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1] 0x7875952900
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1] 0x7875952980
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1] 0x7875952a00
	float MaxDistance;//[Offset: 0x34, Size: 0x4] 0x7875952a80
	int MaxInstances;//[Offset: 0x38, Size: 0x4] 0x7875952b00
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4] 0x7875952b80
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4] 0x7875952c00
	float MaxGlobalBudgetUsage;//[Offset: 0x44, Size: 0x4] 0x7875952c80

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4] 0x7875952e80
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10] 0x78780015a0
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10] 0x78780016e0

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8] 0x7875952f00
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4] 0x7875952f80
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4] 0x7875953000

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8] 0x7875953100
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875953180
	int MinInt;//[Offset: 0xc, Size: 0x4] 0x7875951100
	int MaxInt;//[Offset: 0x10, Size: 0x4] 0x7875951180
	float MinFloat;//[Offset: 0x14, Size: 0x4] 0x7875951200
	float MaxFloat;//[Offset: 0x18, Size: 0x4] 0x7875951280
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1] 0x7875951300
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1] 0x7875951380
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1] 0x7875951400
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1] 0x7875951480

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7878003d00

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10] 0x7878003da0

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30] 0x7875951580
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7875951600
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4] 0x7875951680

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 0x4] 0x7875c40600
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 0x8] 0x7875c40680
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 0x8] 0x7875c40700
	NiagaraSystem* System;//[Offset: 0x40, Size: 0x28] 0x7875c40780
	bool OnTickTest();// 0x65105e0 0x7875c206a0
	void OnOwnerTick(float DeltaTime);// 0x651047c 0x7875c20780
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0x651052c 0x7875c20860
	void OnBeginTest();// 0x6510620 0x7875c20940
	NiagaraSystem* GetSystem();// 0x6510448 0x7875c20a20

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 0x4] 0x7875954d00
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 0x4] 0x7875954d80
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 0x4] 0x7875954e00
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 0x4] 0x7875954e80

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x220, Size: 0x8] 0x7875c40400
	TextRenderComponent* Label;//[Offset: 0x228, Size: 0x8] 0x7875c40480

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x7875952500
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1] 0x7875952580
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1] 0x7875952600
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1] 0x7875952680
	bool bOverrideGlobalBudgetCullingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 0x1] 0x7875952700

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7878001500

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10] 0x7875953880
	FName IdName;//[Offset: 0x10, Size: 0x8] 0x7875953900
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875953980
	FName Name;//[Offset: 0x1c, Size: 0x8] 0x7875953a00
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8] 0x7875953a80

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c1bd80
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875c1be00
	int RandomSeed;//[Offset: 0x2c, Size: 0x4] 0x7875c1be80
	enum AllocationMode;//[Offset: 0x30, Size: 0x1] 0x7875c04c00
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4] 0x7875c1bf80
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28] 0x7875c1c000
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28] 0x7875c1c080
	enum SimTarget;//[Offset: 0x88, Size: 0x1] 0x7875c04ca0
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c] 0x7875c1c180
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4] 0x7875c1c200
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4] 0x7875c1c280
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14] 0x7875c1c300
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30] 0x7875c1c380
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10] 0x7875c1c400
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x7875c1c480
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1] 0x7875c1c500
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1] 0x7875c1c580
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1] 0x7875c1c600
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1] 0x7875c1a580
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1] 0x7875c1a600
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1] 0x7875c1a680
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4] 0x7875c1a700
	uint32 DefaultShaderStageIndex;//[Offset: 0x110, Size: 0x4] 0x7875c1a780
	uint32 MaxUpdateIterations;//[Offset: 0x114, Size: 0x4] 0x7875c1a800
	<uint32> SpawnStages;//[Offset: 0x118, Size: 0x50] 0x7875c04d40
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x7875c1a900
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1] 0x7875c1a980
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1] 0x7875c1aa00
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10] 0x7875c1aa80
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10] 0x7875c04de0
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10] 0x7875c04e80
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10] 0x7875c04f20
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8] 0x7875c1ac80
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10] 0x7875c04fc0

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8] 0x7875953e80
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10] 0x7878003c60
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10] 0x7878003a80

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1] 0x7875c06320
	Guid UsageId;//[Offset: 0x2c, Size: 0x10] 0x7875c43e00
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78] 0x7875c43e80
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98] 0x7875c43f00
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10] 0x7875c063c0
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x58] 0x7875c44000
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1c8, Size: 0xf0] 0x7875c44080
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x2b8, Size: 0x10] 0x7875c06460
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2c8, Size: 0x10] 0x7875c06500
	void RaiseOnGPUCompilationComplete();// 0x6517a9c 0x7875c23880

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8] 0x7875955080
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10] 0x7878003760
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10] 0x78780036c0
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10] 0x7878003940
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10] 0x78780039e0

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4] 0x7875955100

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4] 0x7875956c00
	uint32 PaddedParameterSize;//[Offset: 0x7c, Size: 0x4] 0x7875956c80
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10] 0x7878005420
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x7875956f80

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2] 0x7875956d00
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2] 0x7875956d80
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2] 0x7875956e00
	uint16 DestSize;//[Offset: 0x6, Size: 0x2] 0x7875956e80

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x7875954f00
	int SrcOffset;//[Offset: 0x20, Size: 0x4] 0x7875954f80
	int DestOffset;//[Offset: 0x24, Size: 0x4] 0x7875955000

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10] 0x7875957200
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1] 0x78780054c0
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10] 0x7875957300
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7875957380
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7875955300
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1] 0x7875955380
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10] 0x7875955400
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10] 0x7875955480
	Guid ScriptVersionID;//[Offset: 0x48, Size: 0x10] 0x7875955500

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10] 0x7878005ba0

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10] 0x7878005600
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10] 0x7878005560
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4] 0x7875955680
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4] 0x7875955700
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x28, Size: 0x10] 0x7878005740
	byte[] ScriptLiterals;//[Offset: 0x38, Size: 0x10] 0x78780057e0
	NiagaraVariable[] Attributes;//[Offset: 0x48, Size: 0x10] 0x7878005a60
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x58, Size: 0x1] 0x7875955a00
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x60, Size: 0x10] 0x78780059c0
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x70, Size: 0x10] 0x7878005920
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x90, Size: 0x10] 0x7878005880
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xa0, Size: 0x10] 0x7878002fe0
	NiagaraStatScope[] StatScopes;//[Offset: 0xb0, Size: 0x10] 0x7878003080
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xc0, Size: 0x10] 0x7878003260
	enum LastCompileStatus;//[Offset: 0xd0, Size: 0x1] 0x7878003120
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xd8, Size: 0x10] 0x78780033a0
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1] 0x7875954300
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1] 0x7875954380

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 0x20] 0x7875955780
	FString StringValue;//[Offset: 0x20, Size: 0x10] 0x7875955800

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787612e500

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787612d100
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4] 0x787612d180
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10] 0x787612d300
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8] 0x787612d380
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8] 0x787612d400
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x787612d480

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8] 0x787612d200
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2] 0x787612d280

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787612d600
	FName OwnerName;//[Offset: 0x8, Size: 0x8] 0x787612d680
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10] 0x78780065a0
	int NumOutputs;//[Offset: 0x20, Size: 0x4] 0x787612b680
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10] 0x78780063c0

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8] 0x787612b700
	FName Value;//[Offset: 0x8, Size: 0x8] 0x787612b780

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787612e300
	enum Type;//[Offset: 0x8, Size: 0x1] 0x78780040c0

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc] 0x787612e400
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10] 0x78780066e0

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8] 0x787612d500
	FName FriendlyName;//[Offset: 0x8, Size: 0x8] 0x787612d580

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10] 0x7875955d00
	FString DIClassName;//[Offset: 0x10, Size: 0x10] 0x7875955d80
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10] 0x7878003440

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8] 0x7875955f80
	FName IterationSource;//[Offset: 0x8, Size: 0x8] 0x7875956000
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875956080
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7875956100
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7875956180
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10] 0x7878003300
	int MinStage;//[Offset: 0x28, Size: 0x4] 0x7875956280
	int MaxStage;//[Offset: 0x2c, Size: 0x4] 0x7875956300

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8] 0x7875c40a00
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10] 0x7875c043e0
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8] 0x7875c40b00
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8] 0x7875c40b80
	Guid CompileId;//[Offset: 0x50, Size: 0x10] 0x7875c40c00

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8] 0x7875c40c80
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10] 0x7875c04480
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78] 0x7875c40d80
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x650bae0 0x7875c20b00
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x650b9d8 0x7875c20be0
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x650bbdc 0x7875c20cc0
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x650b7d8 0x7875c20da0
	void SetIntParameter(FString InVariableName, int InValue);// 0x650bcd4 0x7875c20e80
	void SetFloatParameter(FString InVariableName, float InValue);// 0x650bdd4 0x7875c20f60
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x650b8dc 0x7875c21040
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x650bed4 0x7875c21120
	Vector GetVectorParameter(FString InVariableName);// 0x650c21c 0x7875c21200
	Vector4 GetVector4Parameter(FString InVariableName);// 0x650c15c 0x7875c212e0
	Vector2D GetVector2DParameter(FString InVariableName);// 0x650c2dc 0x7875c213c0
	Quat GetQuatParameter(FString InVariableName);// 0x650c09c 0x7875c214a0
	int GetIntParameter(FString InVariableName);// 0x650c398 0x7875c21580
	float GetFloatParameter(FString InVariableName);// 0x650c454 0x7875c21660
	LinearColor GetColorParameter(FString InVariableName);// 0x650bfdc 0x7875c21740
	bool GetBoolParameter(FString InVariableName);// 0x650c510 0x7875c21820

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8] 0x787612ce00
	FName Name;//[Offset: 0x8, Size: 0x8] 0x787612ce80
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4] 0x787612cf00
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10] 0x787612cf80
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8] 0x787612d000
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8] 0x787612d080

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8] 0x7875953f00
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8] 0x7875953f80
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8] 0x7875954000

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4] 0x7875954100
	FName ID;//[Offset: 0x4, Size: 0x8] 0x7875954180
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40] 0x7875954200

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10] 0x7878004340
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10] 0x7878003f80
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc] 0x787612f700
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4] 0x787612f780
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4] 0x787612d700
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4] 0x787612d780
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x787612d800
	enum SimTarget;//[Offset: 0x39, Size: 0x1] 0x7878004020

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4] 0x787612f180
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4] 0x787612f200
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4] 0x787612f280
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60] 0x787612f600

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10] 0x78780043e0
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10] 0x7878004480
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10] 0x7878004520
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10] 0x78780042a0
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10] 0x7878004160
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10] 0x7878004200

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4] 0x7875952200
	float Medium;//[Offset: 0x4, Size: 0x4] 0x7875952280
	float High;//[Offset: 0x8, Size: 0x4] 0x7875952300
	float Epic;//[Offset: 0xc, Size: 0x4] 0x7875952380
	float Cine;//[Offset: 0x10, Size: 0x4] 0x7875952400

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10] 0x7878001640

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875952e00

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30] 0x7875c10680
	int SortOrderHint;//[Offset: 0x58, Size: 0x4] 0x7875c10700
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 0x4] 0x7875c01dc0
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875c10800
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7875c10880

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1] 0x78780038a0
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4] 0x7875953b80
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4] 0x7875953c00
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10] 0x7875953c80
	FName SourceEventName;//[Offset: 0x44, Size: 0x8] 0x7875953d00
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7875953d80
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4] 0x7875953e00

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8] 0x7875c43680
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8] 0x7875c43700
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875c43780

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78] 0x7875958380
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40] 0x7875958400
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40] 0x7875956380
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40] 0x7875956400
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20] 0x7875956480
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20] 0x7875956500
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20] 0x7875956580
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10] 0x78780079a0
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20] 0x7875956680
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20] 0x7875956700
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20] 0x7875956780
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10] 0x78ce1f5100

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10] 0x7878007b80
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10] 0x7878005c40

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4] 0x7875956880
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4] 0x7875956900

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50] 0x787613b440

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8] 0x787612e180
	uint32 MaterialSubIndex;//[Offset: 0x8, Size: 0x4] 0x787612e200
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8] 0x787612e280

--------------------------------
Class: NiagaraBakerSettings.Object
	float StartSeconds;//[Offset: 0x28, Size: 0x4] 0x7875bfd680
	float DurationSeconds;//[Offset: 0x2c, Size: 0x4] 0x7875bfb600
	int FramesPerSecond;//[Offset: 0x30, Size: 0x4] 0x7875bfb680
	bool bPreviewLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1] 0x7875bfb700
	IntPoint FramesPerDimension;//[Offset: 0x38, Size: 0x8] 0x7875bfb780
	NiagaraBakerTextureSettings[] OutputTextures;//[Offset: 0x40, Size: 0x10] 0x7875c027c0
	enum CameraViewportMode;//[Offset: 0x50, Size: 0x4] 0x7875c02860
	Vector CameraViewportLocation;//[Offset: 0x54, Size: 0xc] 0x7875bfb900
	Rotator CameraViewportRotation;//[Offset: 0xa8, Size: 0xc] 0x7875bfb980
	float CameraOrbitDistance;//[Offset: 0xfc, Size: 0x4] 0x7875bfba00
	float CameraFOV;//[Offset: 0x100, Size: 0x4] 0x7875bfba80
	float CameraOrthoWidth;//[Offset: 0x104, Size: 0x4] 0x7875bfbb00
	bool bUseCameraAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1] 0x7875bfbb80
	float CameraAspectRatio;//[Offset: 0x10c, Size: 0x4] 0x7875bfbc00
	bool bRenderComponentOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1] 0x7875bfbc80

--------------------------------
Class: NiagaraBakerTextureSettings
	FName OutputName;//[Offset: 0x0, Size: 0x8] 0x787612a900
	NiagaraBakerTextureSource SourceBinding;//[Offset: 0x8, Size: 0x8] 0x787612aa00
	bool bUseFrameSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x787612aa80
	IntPoint FrameSize;//[Offset: 0x14, Size: 0x8] 0x787612ab00
	IntPoint TextureSize;//[Offset: 0x1c, Size: 0x8] 0x787612ab80
	Texture2D* GeneratedTexture;//[Offset: 0x28, Size: 0x8] 0x787612ac00

--------------------------------
Class: NiagaraBakerTextureSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x787612a980

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50] 0x7875b19700

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10] 0x7878003ee0

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8] 0x787612e080

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0x78, Size: 0x8] 0x7875c01c80
	uint32 ComponentCountLimit;//[Offset: 0x80, Size: 0x4] 0x7875c10280
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x88, Size: 0x58] 0x7875c10300
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0xe0, Size: 0x58] 0x7875c10380
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x7875c10400
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1] 0x7875c10480
	int RendererVisibility;//[Offset: 0x13c, Size: 0x4] 0x7875c10500
	SceneComponent* TemplateComponent;//[Offset: 0x140, Size: 0x8] 0x7875c10580
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0x148, Size: 0x10] 0x7875c01d20

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc] 0x787612bc00
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20] 0x787612bc80
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20] 0x787612bd00
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1] 0x787612bd80
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1] 0x787612be00
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1] 0x787612be80

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58] 0x787612dd00
	FName PropertyName;//[Offset: 0x58, Size: 0x8] 0x787612dd80
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10] 0x787612de00
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8] 0x787612de80
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0x78, Size: 0x50] 0x78761367c0
	NiagaraVariable WritableValue;//[Offset: 0xc8, Size: 0x20] 0x787612e000

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50] 0x7875c01aa0
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50] 0x7875c01b40
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50] 0x7875c01be0

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x787612dc00
	FString EmitterName;//[Offset: 0x8, Size: 0x10] 0x787612dc80

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8] 0x7875c10080

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxElements;//[Offset: 0x6c, Size: 0x4] 0x7875c12100

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7875c01a00

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7875c01960

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7875c018c0

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x78, Size: 0x10] 0x7875c01820

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10] 0x7875c01780

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x78, Size: 0x10] 0x7875c016e0

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector Value, bool bSizeToFit);// 0x64e6ca4 0x7875bef3c0
	static void SetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector4 Value, bool bSizeToFit);// 0x64e6ad0 0x7875bef4a0
	static void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0x64e8100 0x7875bef580
	static void SetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector2D Value, bool bSizeToFit);// 0x64e6e74 0x7875bef660
	static void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0x64e8388 0x7875bef740
	static void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x64e8244 0x7875bef820
	static void SetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Quat Value, bool bSizeToFit);// 0x64e6730 0x7875bef900
	static void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0x64e7e78 0x7875bef9e0
	static void SetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, int Value, bool bSizeToFit);// 0x64e6568 0x7875befac0
	static void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0x64e7d34 0x7875befba0
	static void SetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, float Value, bool bSizeToFit);// 0x64e7044 0x7875befc80
	static void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0x64e84cc 0x7875befd60
	static void SetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const LinearColor Value, bool bSizeToFit);// 0x64e6900 0x7875befe40
	static void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0x64e7fbc 0x7875beff20
	static void SetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const bool Value, bool bSizeToFit);// 0x64e6390 0x7875becaa0
	static void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0x64e7bf0 0x7875becb80
	static Vector GetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e5fd8 0x7875becc60
	static Vector4 GetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e5e98 0x7875becd40
	static Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e7700 0x7875bece20
	static Vector2D GetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e6118 0x7875becf00
	static Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e7978 0x7875becfe0
	static Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e783c 0x7875bed0c0
	static Quat GetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e5c18 0x7875bed1a0
	static Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e7488 0x7875bed280
	static int GetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e5adc 0x7875bed360
	static int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e734c 0x7875bed440
	static float GetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e6254 0x7875bed520
	static float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e7ab4 0x7875bed600
	static LinearColor GetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e5d58 0x7875bed6e0
	static LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e75c4 0x7875bed7c0
	static bool GetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x64e599c 0x7875bed8a0
	static bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x64e7210 0x7875bed980

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10] 0x7875c03580

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x78, Size: 0x10] 0x7875c034e0

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x7875c14280

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8] 0x7875c16200
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x7875c16280
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4] 0x7875c16300

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8] 0x7875c15e80
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8] 0x7875c15f00
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8] 0x7875c15f80
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10] 0x7875c03440
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875c16080
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4] 0x7875c16100
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x7875c16180

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4] 0x7875c15c80
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4] 0x7875c15d00
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4] 0x7875c15d80
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4] 0x7875c15e00

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x34, Size: 0x4] 0x7875c15b80
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875c15c00

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10] 0x7875c033a0
	float LUTMinTime;//[Offset: 0x48, Size: 0x4] 0x7875c15780
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4] 0x7875c15800
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4] 0x7875c15880
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4] 0x7875c15900
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7875c15980
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1] 0x7875c15a00
	FName ExposedName;//[Offset: 0x5c, Size: 0x8] 0x7875c15a80
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8] 0x7875c15b00

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80] 0x7875c15500
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80] 0x7875c15580
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80] 0x7875c15600
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80] 0x7875c15680

--------------------------------
Class: NiagaraDataInterfaceCubeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	TextureCube* Texture;//[Offset: 0x38, Size: 0x8] 0x7875c15480

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 Seed;//[Offset: 0x34, Size: 0x4] 0x7875c15400

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80] 0x7875c15380

--------------------------------
Class: NiagaraDataInterfaceDebugDraw.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0x64ec9dc 0x7875bef2e0

--------------------------------
Class: BasicParticleData
	Vector Position;//[Offset: 0x0, Size: 0xc] 0x787612da80
	float Size;//[Offset: 0xc, Size: 0x4] 0x787612db00
	Vector Velocity;//[Offset: 0x10, Size: 0xc] 0x787612db80

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20] 0x7875c17180
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1] 0x7875c03260
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4] 0x7875c17280
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4] 0x7875c17300

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20] 0x787612c200

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<int> OutputShaderStages;//[Offset: 0x38, Size: 0x50] 0x7875c03120
	<int> IterationShaderStages;//[Offset: 0x88, Size: 0x50] 0x7875c031c0

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0xd8, Size: 0x4] 0x7875c16d80
	int NumCellsY;//[Offset: 0xdc, Size: 0x4] 0x7875c16e00
	int NumCellsMaxAxis;//[Offset: 0xe0, Size: 0x4] 0x7875c16e80
	int NumAttributes;//[Offset: 0xe4, Size: 0x4] 0x7875c16f00
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7875c16f80
	Vector2D WorldBBoxSize;//[Offset: 0xec, Size: 0x8] 0x7875c17000

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xf8, Size: 0x20] 0x7875c16380
	enum OverrideBufferFormat;//[Offset: 0x118, Size: 0x1] 0x7875c03080
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1] 0x7875c16480
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x170, Size: 0x50] 0x7875b19640
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x64ef630 0x7875beef60
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x64ef788 0x7875bef040
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0x64efa94 0x7875bef120
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0x64ef8e0 0x7875bef200

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xf8, Size: 0x10] 0x7875c18380
	FString DIName;//[Offset: 0x108, Size: 0x10] 0x7875c18400

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0xd8, Size: 0xc] 0x7875c18100
	float CellSize;//[Offset: 0xe4, Size: 0x4] 0x7875c18180
	int NumCellsMaxAxis;//[Offset: 0xe8, Size: 0x4] 0x7875c18200
	enum SetResolutionMethod;//[Offset: 0xec, Size: 0x4] 0x7875c02fe0
	Vector WorldBBoxSize;//[Offset: 0xf0, Size: 0xc] 0x7875c18300

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0xfc, Size: 0x4] 0x7875c17600
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x100, Size: 0x20] 0x7875c17680
	enum OverrideBufferFormat;//[Offset: 0x120, Size: 0x1] 0x7875c02f40
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x121, Size: 0x1] 0x7875c17780
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x64f0744 0x7875beebe0
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x64f08f4 0x7875beecc0
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0x64f0ca8 0x7875beeda0
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0x64f0aa4 0x7875beee80

--------------------------------
Class: NiagaraDataInterfaceIntRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0xd8, Size: 0x8] 0x7875c17400
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe0, Size: 0x20] 0x7875c17480
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x100, Size: 0x50] 0x7875b19580

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8] 0x7875c19380
	enum SourceMode;//[Offset: 0x40, Size: 0x1] 0x7875c02e00
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x48, Size: 0x10] 0x7875c02ea0

--------------------------------
Class: NiagaraDataInterfaceMeshRendererInfo.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraMeshRendererProperties* MeshRenderer;//[Offset: 0x38, Size: 0x8] 0x7875c19300

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraMeshRendererMeshProperties[] Meshes;//[Offset: 0x78, Size: 0x10] 0x7875c04520
	enum SourceMode;//[Offset: 0x88, Size: 0x1] 0x7875c045c0
	enum SortMode;//[Offset: 0x89, Size: 0x1] 0x7875c04660
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1] 0x7875c1ee00
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1] 0x7875c1ee80
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1] 0x7875c1ef00
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1] 0x7875c1ef80
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1] 0x7875c1f000
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1] 0x7875c1f080
	bool bEnableMeshFlipbook;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1] 0x7875c1f100
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0x90, Size: 0x10] 0x7875c04700
	Vector2D SubImageSize;//[Offset: 0xa0, Size: 0x8] 0x7875c1f200
	enum FacingMode;//[Offset: 0xa8, Size: 0x1] 0x7875c047a0
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1] 0x7875c1f300
	Vector LockedAxis;//[Offset: 0xac, Size: 0xc] 0x7875c1f380
	enum LockedAxisSpace;//[Offset: 0xb8, Size: 0x1] 0x7875c04840
	float MinCameraDistance;//[Offset: 0xbc, Size: 0x4] 0x7875c1f480
	float MaxCameraDistance;//[Offset: 0xc0, Size: 0x4] 0x7875c1f500
	uint32 RendererVisibility;//[Offset: 0xc4, Size: 0x4] 0x7875c1f580
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xc8, Size: 0x58] 0x7875c1f600
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x120, Size: 0x58] 0x7875c1f680
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x178, Size: 0x58] 0x7875c1f700
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x1d0, Size: 0x58] 0x7875c1f780
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x228, Size: 0x58] 0x7875c1d700
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x280, Size: 0x58] 0x7875c1d780
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x2d8, Size: 0x58] 0x7875c1d800
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x330, Size: 0x58] 0x7875c1d880
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x388, Size: 0x58] 0x7875c1d900
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x3e0, Size: 0x58] 0x7875c1d980
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x438, Size: 0x58] 0x7875c1da00
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x490, Size: 0x58] 0x7875c1da80
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x4e8, Size: 0x58] 0x7875c1db00
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x540, Size: 0x58] 0x7875c1db80
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x598, Size: 0x58] 0x7875c1dc00
	NiagaraVariableAttributeBinding MeshIndexBinding;//[Offset: 0x5f0, Size: 0x58] 0x7875c1dc80
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x648, Size: 0x10] 0x7875c048e0
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x658, Size: 0x58] 0x7875c1dd80
	NiagaraVariableAttributeBinding PrevScaleBinding;//[Offset: 0x6b0, Size: 0x58] 0x7875c1de00
	NiagaraVariableAttributeBinding PrevMeshOrientationBinding;//[Offset: 0x708, Size: 0x58] 0x7875c1de80
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x760, Size: 0x58] 0x7875c1df00
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x7b8, Size: 0x58] 0x7875c1df80
	StaticMesh* ParticleMesh;//[Offset: 0x878, Size: 0x8] 0x7875c1e000
	Vector PivotOffset;//[Offset: 0x880, Size: 0xc] 0x7875c1e080
	enum PivotOffsetSpace;//[Offset: 0x88c, Size: 0x1] 0x7875c04980

--------------------------------
Class: NiagaraMeshRendererMeshProperties
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x8] 0x7875953400
	Vector Scale;//[Offset: 0x8, Size: 0xc] 0x7875953480
	Vector PivotOffset;//[Offset: 0x14, Size: 0xc] 0x7875953500
	enum PivotOffsetSpace;//[Offset: 0x20, Size: 0x1] 0x7878003b20

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8] 0x7875953300
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20] 0x7875953380

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8] 0x787612bf00
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc] 0x787612bf80
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc] 0x787612c000
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc] 0x787612c080

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 MaxNeighborsPerCell;//[Offset: 0xfc, Size: 0x4] 0x7875c19280

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xd8, Size: 0x10] 0x7875c19200

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30] 0x7875c19180

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0xd8, Size: 0x8] 0x7875c18d80
	enum MipMapGeneration;//[Offset: 0xe0, Size: 0x1] 0x7875c02d60
	byte OverrideRenderTargetFormat;//[Offset: 0xe1, Size: 0x1] 0x7875c18e80
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe2, Size: 0x1] 0x7875c18f00
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe2, Size: 0x1] 0x7875c18f80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x7875c19000
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x158, Size: 0x50] 0x7875b194c0

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc] 0x7875c18a00
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1] 0x7875c18a80
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1] 0x7875c18b00
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe5, Size: 0x1] 0x7875c18b80
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x7875c18c00
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50] 0x7875b1c580

--------------------------------
Class: NiagaraDataInterfaceRenderTargetCube.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Size;//[Offset: 0xd8, Size: 0x4] 0x7875c18680
	byte OverrideRenderTargetFormat;//[Offset: 0xdc, Size: 0x1] 0x7875c18700
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd, Size: 0x1] 0x7875c18780
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdd, Size: 0x1] 0x7875c18800
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe0, Size: 0x20] 0x7875c18880
	<uint64,TextureRenderTargetCube*> ManagedRenderTargets;//[Offset: 0x100, Size: 0x50] 0x7875b1c4c0

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc] 0x7875c1a400
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1] 0x7875c1a480
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1] 0x7875c1a500
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe5, Size: 0x1] 0x7875c18480
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20] 0x7875c18500
	<uint64,TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50] 0x7875b1c400

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x7875c02a40
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x7875c19e00
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x40, Size: 0x20] 0x7875c19e80
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x60, Size: 0x8] 0x7875c19f00
	enum SkinningMode;//[Offset: 0x68, Size: 0x1] 0x7875c02ae0
	FName[] SamplingRegions;//[Offset: 0x70, Size: 0x10] 0x7875c02b80
	int WholeMeshLOD;//[Offset: 0x80, Size: 0x4] 0x7875c1a080
	FName[] FilteredBones;//[Offset: 0x88, Size: 0x10] 0x7875c02c20
	FName[] FilteredSockets;//[Offset: 0x98, Size: 0x10] 0x7875c02cc0
	FName ExcludeBoneName;//[Offset: 0xa8, Size: 0x8] 0x7875c1a200
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x7875c1a280
	int UvSetIndex;//[Offset: 0xb4, Size: 0x4] 0x7875c1a300
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7875c1a380

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8] 0x7875c19c80
	NiagaraUserParameterBinding SplineUserParameter;//[Offset: 0x40, Size: 0x20] 0x7875c19d00

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1] 0x7875c05240
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8] 0x7875c19980
	Actor* Source;//[Offset: 0x40, Size: 0x8] 0x7875c19a00
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8] 0x7875c19a80
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10] 0x7875c19b00
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875c19b80
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10] 0x7875c029a0

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10] 0x7878003e40

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8] 0x7875c19880

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7875c19780
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7875c19800

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7875c19580
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7875c19600
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x7875c19680
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80] 0x7875c19700

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80] 0x7875c1b500
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80] 0x7875c1b580
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80] 0x7875c19500

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8] 0x7875c1b300
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875c1b380
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7875c1b400
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7875c1b480

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8] 0x7875c1b280

--------------------------------
Class: NiagaraDebugHUDSettings.Object
	NiagaraDebugHUDSettingsData Data;//[Offset: 0x48, Size: 0xe0] 0x7875c1b200

--------------------------------
Class: NiagaraDebugHUDSettingsData
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875950b00
	bool bValidateSystemSimulationDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7875950b80
	bool bValidateParticleDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7875950c00
	bool bOverviewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7875950c80
	enum OverviewFont;//[Offset: 0x4, Size: 0x4] 0x7878004fc0
	Vector2D OverviewLocation;//[Offset: 0x8, Size: 0x8] 0x7875950d80
	FString ActorFilter;//[Offset: 0x10, Size: 0x10] 0x7875950e00
	bool bComponentFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875950e80
	FString ComponentFilter;//[Offset: 0x28, Size: 0x10] 0x7875950f00
	bool bSystemFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875950f80
	FString SystemFilter;//[Offset: 0x40, Size: 0x10] 0x7875951000
	bool bEmitterFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875951080
	FString EmitterFilter;//[Offset: 0x58, Size: 0x10] 0x787612f800
	bool bActorFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x787612f880
	enum SystemDebugVerbosity;//[Offset: 0x6c, Size: 0x4] 0x7878004d40
	enum SystemEmitterVerbosity;//[Offset: 0x70, Size: 0x4] 0x7878004b60
	bool bSystemShowBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x787612fa00
	bool bSystemShowActiveOnlyInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x787612fa80
	bool bShowSystemVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x787612fb00
	NiagaraDebugHUDVariable[] SystemVariables;//[Offset: 0x78, Size: 0x10] 0x7878004c00
	NiagaraDebugHudTextOptions SystemTextOptions;//[Offset: 0x88, Size: 0x10] 0x787612fc00
	bool bShowParticleVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x787612fc80
	bool bEnableGpuParticleReadback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x787612fd00
	NiagaraDebugHUDVariable[] ParticlesVariables;//[Offset: 0xa0, Size: 0x10] 0x7878004ac0
	NiagaraDebugHudTextOptions ParticleTextOptions;//[Offset: 0xb0, Size: 0x10] 0x787612e880
	bool bShowParticlesVariablesWithSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x787612e900
	bool bUseMaxParticlesToDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x787612e980
	int MaxParticlesToDisplay;//[Offset: 0xc4, Size: 0x4] 0x787612ea00
	enum PlaybackMode;//[Offset: 0xc8, Size: 0x1] 0x78780048e0
	bool bPlaybackRateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x787612eb00
	float PlaybackRate;//[Offset: 0xcc, Size: 0x4] 0x787612eb80
	bool bLoopTimeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x787612ec00
	float LoopTime;//[Offset: 0xd4, Size: 0x4] 0x787612ec80
	bool bShowGlobalBudgetInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x787612ed00

--------------------------------
Class: NiagaraDebugHUDVariable
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787612fd80
	FString Name;//[Offset: 0x8, Size: 0x10] 0x787612fe00

--------------------------------
Class: NiagaraDebugHudTextOptions
	enum Font;//[Offset: 0x0, Size: 0x4] 0x7878004980
	enum HorizontalAlignment;//[Offset: 0x4, Size: 0x1] 0x7878004a20
	enum VerticalAlignment;//[Offset: 0x5, Size: 0x1] 0x7878004840
	Vector2D ScreenOffset;//[Offset: 0x8, Size: 0x8] 0x787612e800

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraEditorParametersAdapterBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	uint32 NumParticles;//[Offset: 0x28, Size: 0x4] 0x7875c1bd00

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	static NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x6508a70 0x7875c21900
	static NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x6508dc0 0x7875c219e0
	static void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0x65081b4 0x7875c21ac0
	static void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0x650842c 0x7875c21ba0
	static void SetTexture2DArrayObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture2DArray* Texture);// 0x65082f0 0x7875c21c80
	static void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0x6508568 0x7875bee780
	static void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0x6508934 0x7875bee860
	static void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0x65087f8 0x7875bee940
	static void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0x65086bc 0x7875beea20
	static NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0x65080c4 0x7875beeb00

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x7875c1e180
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x7875c1e200
	bool bAlphaScalesBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1] 0x7875c1e280
	float RadiusScale;//[Offset: 0x7c, Size: 0x4] 0x7875c1e300
	float DefaultExponent;//[Offset: 0x80, Size: 0x4] 0x7875c1e380
	Vector ColorAdd;//[Offset: 0x84, Size: 0xc] 0x7875c1e400
	int RendererVisibility;//[Offset: 0x90, Size: 0x4] 0x7875c1e480
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x98, Size: 0x58] 0x7875c1e500
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0xf0, Size: 0x58] 0x7875c1e580
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x148, Size: 0x58] 0x7875c1e600
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a0, Size: 0x58] 0x7875c1e680
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x1f8, Size: 0x58] 0x7875c1e700
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x250, Size: 0x58] 0x7875c1c680
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x2a8, Size: 0x58] 0x7875c1c700

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraParameterDefinitionsBase.Object

--------------------------------
Class: NiagaraBaselineController_Basic.NiagaraBaselineController.Object
	int NumInstances;//[Offset: 0x68, Size: 0x4] 0x7875c40500
	NiagaraComponent*[] SpawnedComponents;//[Offset: 0x70, Size: 0x10] 0x7875c04340

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10] 0x7875c042a0
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8] 0x7875c40380

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x6d94ba8 0x7875c204e0
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x6d94ba8 0x7875c205c0

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0x6512c0c 0x7875c20320
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0x6512a64 0x7875c20400

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8] 0x7875c41f00
	int Count;//[Offset: 0x30, Size: 0x4] 0x7875c41f80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x34, Size: 0x4] 0x7875c41e00
	int Max;//[Offset: 0x38, Size: 0x4] 0x7875c41e80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x34, Size: 0x4] 0x7875c41d00
	float Max;//[Offset: 0x38, Size: 0x4] 0x7875c41d80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x34, Size: 0x8] 0x7875c41c00
	Vector2D Max;//[Offset: 0x3c, Size: 0x8] 0x7875c41c80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x34, Size: 0xc] 0x7875c41b00
	Vector Max;//[Offset: 0x40, Size: 0xc] 0x7875c41b80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x10] 0x7875c41a00
	Vector4 Max;//[Offset: 0x50, Size: 0x10] 0x7875c41a80

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10] 0x7875c41900
	LinearColor Max;//[Offset: 0x44, Size: 0x10] 0x7875c41980

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x220, Size: 0x8] 0x7875c41300
	enum ResetMode;//[Offset: 0x228, Size: 0x1] 0x7875c04020
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x230, Size: 0x8] 0x7875c41400
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x238, Size: 0x8] 0x7875c41480
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x240, Size: 0x8] 0x7875c040c0
	float SpacingX;//[Offset: 0x248, Size: 0x4] 0x7875c41500
	float SpacingY;//[Offset: 0x24c, Size: 0x4] 0x7875c41580
	int NumX;//[Offset: 0x250, Size: 0x4] 0x7875c41600
	int NumY;//[Offset: 0x254, Size: 0x4] 0x7875c41680
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x258, Size: 0x10] 0x7875c04160
	void SetPaused(bool bPaused);// 0x6514d54 0x7875c23960
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0x6514c94 0x7875c20080
	void DeactivatePreviews();// 0x6514e04 0x7875c20160
	void ActivatePreviews(bool bReset);// 0x6514e18 0x7875c20240

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x78, Size: 0x8] 0x7875c44200
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x80, Size: 0x20] 0x7875c42180
	enum FacingMode;//[Offset: 0xa0, Size: 0x1] 0x7875c065a0
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0xa4, Size: 0x24] 0x7875c42280
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0xc8, Size: 0x24] 0x7875c42300
	enum DrawDirection;//[Offset: 0xec, Size: 0x1] 0x7875c06640
	enum Shape;//[Offset: 0xed, Size: 0x1] 0x7875c066e0
	bool bEnableAccurateGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1] 0x7875c42480
	int WidthSegmentationCount;//[Offset: 0xf0, Size: 0x4] 0x7875c42500
	int MultiPlaneCount;//[Offset: 0xf4, Size: 0x4] 0x7875c42580
	int TubeSubdivisions;//[Offset: 0xf8, Size: 0x4] 0x7875c42600
	NiagaraRibbonShapeCustomVertex[] CustomVertices;//[Offset: 0x100, Size: 0x10] 0x7875c03e40
	float CurveTension;//[Offset: 0x110, Size: 0x4] 0x7875c42700
	enum TessellationMode;//[Offset: 0x114, Size: 0x1] 0x7875c03ee0
	int TessellationFactor;//[Offset: 0x118, Size: 0x4] 0x7875c42800
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x7875c42880
	float TessellationAngle;//[Offset: 0x120, Size: 0x4] 0x7875c42900
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x7875c42980
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x128, Size: 0x58] 0x7875c42a00
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x180, Size: 0x58] 0x7875c42a80
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1d8, Size: 0x58] 0x7875c42b00
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x230, Size: 0x58] 0x7875c42b80
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x288, Size: 0x58] 0x7875c42c00
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x2e0, Size: 0x58] 0x7875c42c80
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x338, Size: 0x58] 0x7875c42d00
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x390, Size: 0x58] 0x7875c42d80
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x3e8, Size: 0x58] 0x7875c42e00
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x440, Size: 0x58] 0x7875c42e80
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x498, Size: 0x58] 0x7875c42f00
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x4f0, Size: 0x58] 0x7875c42f80
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x548, Size: 0x58] 0x7875c43000
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x5a0, Size: 0x58] 0x7875c43080
	NiagaraVariableAttributeBinding RibbonUVDistance;//[Offset: 0x5f8, Size: 0x58] 0x7875c43100
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x650, Size: 0x58] 0x7875c43180
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x6a8, Size: 0x58] 0x7875c41100
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x700, Size: 0x58] 0x7875c41180
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x758, Size: 0x58] 0x7875c41200
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x7b0, Size: 0x10] 0x7875c03f80

--------------------------------
Class: NiagaraRibbonUVSettings
	enum DistributionMode;//[Offset: 0x0, Size: 0x4] 0x7878003800
	enum LeadingEdgeMode;//[Offset: 0x4, Size: 0x4] 0x7878003580
	enum TrailingEdgeMode;//[Offset: 0x8, Size: 0x4] 0x78780034e0
	float TilingLength;//[Offset: 0xc, Size: 0x4] 0x7875954800
	Vector2D Offset;//[Offset: 0x10, Size: 0x8] 0x7875954880
	Vector2D Scale;//[Offset: 0x18, Size: 0x8] 0x7875954900
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875954980
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1] 0x7875954a00

--------------------------------
Class: NiagaraRibbonShapeCustomVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x7875954500
	Vector2D Normal;//[Offset: 0x8, Size: 0x8] 0x7875954580
	float TextureV;//[Offset: 0x10, Size: 0x4] 0x7875954600

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	SoftObjectPath DefaultEffectType;//[Offset: 0x38, Size: 0x18] 0x7875c43800
	FText[] QualityLevels;//[Offset: 0x50, Size: 0x10] 0x7875c06140
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x60, Size: 0x50] 0x7875b1c340
	byte DefaultRenderTargetFormat;//[Offset: 0xb0, Size: 0x1] 0x7875c43a00
	enum DefaultGridFormat;//[Offset: 0xb1, Size: 0x1] 0x7875c061e0
	enum DefaultRendererMotionVectorSetting;//[Offset: 0xb4, Size: 0x4] 0x7875c06280
	byte NDISkelMesh_GpuMaxInfluences;//[Offset: 0xb8, Size: 0x1] 0x7875c43b80
	byte NDISkelMesh_GpuUniformSamplingFormat;//[Offset: 0xb9, Size: 0x1] 0x7875c43c00
	byte NDISkelMesh_AdjacencyTriangleIndexFormat;//[Offset: 0xba, Size: 0x1] 0x7875c43c80
	NiagaraEffectType* DefaultEffectTypePtr;//[Offset: 0xc0, Size: 0x8] 0x7875c43d00

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	enum IterationSource;//[Offset: 0x39, Size: 0x1] 0x7875c060a0
	int Iterations;//[Offset: 0x3c, Size: 0x4] 0x7875c43480
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1] 0x7875c43500
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1] 0x7875c43580
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x48, Size: 0x20] 0x7875c43600

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20] 0x787612c100

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x78, Size: 0x8] 0x7875c45f00
	enum SourceMode;//[Offset: 0x80, Size: 0x1] 0x7875c05d80
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x88, Size: 0x20] 0x7875c46000
	enum Alignment;//[Offset: 0xa8, Size: 0x1] 0x7875c05e20
	enum FacingMode;//[Offset: 0xa9, Size: 0x1] 0x7875c05ec0
	Vector2D PivotInUVSpace;//[Offset: 0xac, Size: 0x8] 0x7875c46180
	enum SortMode;//[Offset: 0xb4, Size: 0x1] 0x7875c05f60
	Vector2D SubImageSize;//[Offset: 0xb8, Size: 0x8] 0x7875c46280
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1] 0x7875c46300
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1] 0x7875c44280
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1] 0x7875c44300
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1] 0x7875c44380
	float MinFacingCameraBlendDistance;//[Offset: 0xc4, Size: 0x4] 0x7875c44400
	float MaxFacingCameraBlendDistance;//[Offset: 0xc8, Size: 0x4] 0x7875c44480
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1] 0x7875c44500
	float MinCameraDistance;//[Offset: 0xd0, Size: 0x4] 0x7875c44580
	float MaxCameraDistance;//[Offset: 0xd4, Size: 0x4] 0x7875c44600
	uint32 RendererVisibility;//[Offset: 0xd8, Size: 0x4] 0x7875c44680
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe0, Size: 0x58] 0x7875c44700
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x138, Size: 0x58] 0x7875c44780
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x190, Size: 0x58] 0x7875c44800
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x1e8, Size: 0x58] 0x7875c44880
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x240, Size: 0x58] 0x7875c44900
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x298, Size: 0x58] 0x7875c44980
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x2f0, Size: 0x58] 0x7875c44a00
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x348, Size: 0x58] 0x7875c44a80
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x3a0, Size: 0x58] 0x7875c44b00
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x3f8, Size: 0x58] 0x7875c44b80
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x450, Size: 0x58] 0x7875c44c00
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x4a8, Size: 0x58] 0x7875c44c80
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x500, Size: 0x58] 0x7875c44d00
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x558, Size: 0x58] 0x7875c44d80
	NiagaraVariableAttributeBinding PivotOffsetBinding;//[Offset: 0x5b0, Size: 0x58] 0x7875c44e00
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x608, Size: 0x58] 0x7875c44e80
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x660, Size: 0x58] 0x7875c44f00
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x6b8, Size: 0x58] 0x7875c44f80
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x710, Size: 0x58] 0x7875c45000
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x768, Size: 0x10] 0x7875c06000
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x778, Size: 0x58] 0x7875c45100
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x7d0, Size: 0x58] 0x7875c45180
	NiagaraVariableAttributeBinding PrevSpriteRotationBinding;//[Offset: 0x828, Size: 0x58] 0x7875c45200
	NiagaraVariableAttributeBinding PrevSpriteSizeBinding;//[Offset: 0x880, Size: 0x58] 0x7875c45280
	NiagaraVariableAttributeBinding PrevSpriteFacingBinding;//[Offset: 0x8d8, Size: 0x58] 0x7875c43200
	NiagaraVariableAttributeBinding PrevSpriteAlignmentBinding;//[Offset: 0x930, Size: 0x58] 0x7875c43280
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x988, Size: 0x58] 0x7875c43300
	NiagaraVariableAttributeBinding PrevPivotOffsetBinding;//[Offset: 0x9e0, Size: 0x58] 0x7875c43380

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8] 0x7875c47000
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x7875c47080
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x7875c47100
	Vector Scale;//[Offset: 0x58, Size: 0xc] 0x7875c47180
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7875c47200
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x7875c47280
	FName SocketName;//[Offset: 0x84, Size: 0x8] 0x7875c47300
	FXSystemComponent* GetSpawnedEffect();// 0x652c7d8 0x7875c237a0

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8] 0x7875c46680
	FName SocketName;//[Offset: 0x38, Size: 0x8] 0x7875c46700
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc] 0x7875c46780
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc] 0x7875c46800
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7875c46880
	FXSystemComponent* GetSpawnedEffect(MeshComponent* MeshComp);// 0x652ccfc 0x7875c23340

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffectAdvanced.AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	float GetNotifyProgress(MeshComponent* MeshComp);// 0x652d244 0x7875c23260

--------------------------------
Class: MotoSynthPreset.Object
	MotoSynthRuntimeSettings Settings;//[Offset: 0x28, Size: 0x68] 0x7875c46500

--------------------------------
Class: MotoSynthRuntimeSettings
	bool bSynthToneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875959900
	float SynthToneVolume;//[Offset: 0x4, Size: 0x4] 0x7875959980
	float SynthToneFilterFrequency;//[Offset: 0x8, Size: 0x4] 0x7875959a00
	int SynthOctaveShift;//[Offset: 0xc, Size: 0x4] 0x7875959a80
	bool bGranularEngineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875959b00
	float GranularEngineVolume;//[Offset: 0x14, Size: 0x4] 0x7875959b80
	float GranularEnginePitchScale;//[Offset: 0x18, Size: 0x4] 0x7875959c00
	int NumSamplesToCrossfadeBetweenGrains;//[Offset: 0x1c, Size: 0x4] 0x7875959c80
	int NumGrainTableEntriesPerGrain;//[Offset: 0x20, Size: 0x4] 0x7875959d00
	int GrainTableRandomOffsetForConstantRPMs;//[Offset: 0x24, Size: 0x4] 0x7875959d80
	int GrainCrossfadeSamplesForConstantRPMs;//[Offset: 0x28, Size: 0x4] 0x7875959e00
	MotoSynthSource* AccelerationSource;//[Offset: 0x30, Size: 0x8] 0x7875959e80
	MotoSynthSource* DecelerationSource;//[Offset: 0x38, Size: 0x8] 0x7875959f00
	bool bStereoWidenerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7875959f80
	float StereoDelayMsec;//[Offset: 0x44, Size: 0x4] 0x787595a000
	float StereoFeedback;//[Offset: 0x48, Size: 0x4] 0x787595a080
	float StereoWidenerWetlevel;//[Offset: 0x4c, Size: 0x4] 0x787595a100
	float StereoWidenerDryLevel;//[Offset: 0x50, Size: 0x4] 0x787595a180
	float StereoWidenerDelayRatio;//[Offset: 0x54, Size: 0x4] 0x787595a200
	bool bStereoWidenerFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x787595a280
	float StereoWidenerFilterFrequency;//[Offset: 0x5c, Size: 0x4] 0x787595a300
	float StereoWidenerFilterQ;//[Offset: 0x60, Size: 0x4] 0x787595a380

--------------------------------
Class: MotoSynthSource.Object
	bool bConvertTo8Bit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c48280
	float DownSampleFactor;//[Offset: 0x2c, Size: 0x4] 0x7875c48300
	RuntimeFloatCurve RPMCurve;//[Offset: 0x30, Size: 0x88] 0x7875c48380
	float[] SourceData;//[Offset: 0xb8, Size: 0x10] 0x7875c05920
	int16[] SourceDataPCM;//[Offset: 0xc8, Size: 0x10] 0x7875c059c0
	int SourceSampleRate;//[Offset: 0xd8, Size: 0x4] 0x7875c46400
	GrainTableEntry[] GrainTable;//[Offset: 0xe0, Size: 0x10] 0x7875c05a60

--------------------------------
Class: GrainTableEntry
	int SampleIndex;//[Offset: 0x0, Size: 0x4] 0x7875959800
	float RPM;//[Offset: 0x4, Size: 0x4] 0x7875959880

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x7875c49400
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x7875c49480
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x7875c47400
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1] 0x7875c47480
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1] 0x7875c47500
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1] 0x7875c47580
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1] 0x7875c47600
	SoundAttenuation* AttenuationSettings;//[Offset: 0x1f8, Size: 0x8] 0x7875c47680
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x200, Size: 0x3a0] 0x7875c47700
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a0, Size: 0x8] 0x7875c47780
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5a8, Size: 0x50] 0x7875c056a0
	SoundClass* SoundClass;//[Offset: 0x5f8, Size: 0x8] 0x7875c47880
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x600, Size: 0x8] 0x7875c47900
	SoundSubmixBase* SoundSubmix;//[Offset: 0x608, Size: 0x8] 0x7875c47980
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x610, Size: 0x10] 0x7875c05740
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x620, Size: 0x10] 0x7875c057e0
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x630, Size: 0x10] 0x7875c05880
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x640, Size: 0x1] 0x7875c47b80
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x640, Size: 0x1] 0x7875c47c00
	int EnvelopeFollowerAttackTime;//[Offset: 0x644, Size: 0x4] 0x7875c47c80
	int EnvelopeFollowerReleaseTime;//[Offset: 0x648, Size: 0x4] 0x7875c47d00
	delegate OnAudioEnvelopeValue;//[Offset: 0x650, Size: 0x10] 0x7875c47d80
	SynthSound* Synth;//[Offset: 0x680, Size: 0x8] 0x7875c47e00
	AudioComponent* AudioComponent;//[Offset: 0x688, Size: 0x8] 0x7875c47e80
	void Stop();// 0x87c6f1c 0x7875c22b60
	void Start();// 0x87c6f30 0x7875c22c40
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x87c6e3c 0x7875c22d20
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x87c6d48 0x7875c22e00
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x87c6b38 0x7875c22ee0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x87c6be8 0x7875c22fc0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x87c6c98 0x7875c230a0
	bool IsPlaying();// 0x87c6ee4 0x7875c23180

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 0x8] 0x78e2327a80

--------------------------------
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object
	MotoSynthPreset* MotoSynthPreset;//[Offset: 0x6c0, Size: 0x8] 0x7875c49000
	float RPM;//[Offset: 0x6c8, Size: 0x4] 0x7875c49080
	void SetSettings(out const MotoSynthRuntimeSettings InSettings);// 0x6561638 0x7875c227e0
	void SetRPM(float InRPM, float InTimeSec);// 0x6561748 0x7875c228c0
	bool IsEnabled();// 0x65614fc 0x7875c229a0
	void GetRPMRange(out float OutMinRPM, out float OutMaxRPM);// 0x6561534 0x7875c22a80

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c48f80

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x8953718 0x7875c222a0
	void SetMediaOptionString(out const FName Key, FString Value);// 0x8953324 0x7875c22380
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x8953428 0x7875c22460
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x8953520 0x7875c22540
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x8953618 0x7875c22620
	FString GetUrl();// 0x8953758 0x7875c22700

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8] 0x7875c48a00

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	bool IsPathRelativeToProjectRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x7875c4a480
	FrameRate FrameRateOverride;//[Offset: 0x8c, Size: 0x8] 0x7875c4a500
	FString ProxyOverride;//[Offset: 0x98, Size: 0x10] 0x7875c48480
	DirectoryPath SequencePath;//[Offset: 0xa8, Size: 0x10] 0x7875c48500
	void SetSequencePath(FString Path);// 0x65890e4 0x7875c25560
	void SetMipLevelDistance(float Distance);// 0x6588d50 0x7875c25640
	void RemoveTargetObject(Actor* InActor);// 0x6588df8 0x7875c21d60
	void RemoveGlobalCamera(Actor* InActor);// 0x6588f94 0x7875c21e40
	FString GetSequencePath();// 0x6589198 0x7875c21f20
	void GetProxies(out FString[] OutProxies);// 0x65893a0 0x7875c22000
	void AddTargetObject(Actor* InActor, float Width);// 0x6588ea0 0x7875c220e0
	void AddGlobalCamera(Actor* InActor);// 0x658903c 0x7875c221c0

--------------------------------
Class: ImgMediaPlaybackComponent.ActorComponent.Object
	float Width;//[Offset: 0xb0, Size: 0x4] 0x7875c4a380
	float LODBias;//[Offset: 0xb4, Size: 0x4] 0x7875c4a400

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8] 0x7875c49e80
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4] 0x7875c49f00
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4] 0x7875c49f80
	int CacheThreads;//[Offset: 0x38, Size: 0x4] 0x7875c4a000
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4] 0x7875c4a080
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4] 0x7875c4a100
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875c4a180
	uint32 ExrDecoderThreads;//[Offset: 0x48, Size: 0x4] 0x7875c4a200
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10] 0x7875c4a280
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875c4a300

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x7875c49d80
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7875c49e00

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x90, Size: 0x8] 0x7875c49c00
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x98, Size: 0x14] 0x7875c49c80
	MovieSceneSection*[] Sections;//[Offset: 0xb0, Size: 0x10] 0x7875c05560

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8] 0x7875c49880
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x7875c49900
	FrameNumber StartFrameOffset;//[Offset: 0xec, Size: 0x4] 0x7875c49980
	MediaTexture* MediaTexture;//[Offset: 0xf0, Size: 0x8] 0x7875c49a00
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0xf8, Size: 0x8] 0x7875c49a80
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1] 0x7875c49b00
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x108, Size: 0x8] 0x7875c49b80

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x178, Size: 0x1] 0x78e233c300
	byte AddressY;//[Offset: 0x179, Size: 0x1] 0x78e233c380
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1] 0x78e233c400
	LinearColor ClearColor;//[Offset: 0x17c, Size: 0x10] 0x78e233c480
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1] 0x78e233c500
	byte NumMips;//[Offset: 0x18d, Size: 0x1] 0x78e233c580
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e, Size: 0x1] 0x78e233c600
	byte OutputFormat;//[Offset: 0x18f, Size: 0x1] 0x78e233a580
	float CurrentAspectRatio;//[Offset: 0x190, Size: 0x4] 0x78e233a600
	byte CurrentOrientation;//[Offset: 0x194, Size: 0x1] 0x78e233a680
	MediaPlayer* MediaPlayer;//[Offset: 0x198, Size: 0x8] 0x78e233a700
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x8953eec 0x78e2345e20
	int GetWidth();// 0x8953ffc 0x78e2345f00
	int GetTextureNumMips();// 0x8953fc8 0x78e2345fe0
	MediaPlayer* GetMediaPlayer();// 0x8953f94 0x78e23460c0
	int GetHeight();// 0x8954030 0x78e23461a0
	float GetAspectRatio();// 0x8954064 0x78e2346280

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10] 0x78e2339f00
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10] 0x78e2339f80
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10] 0x78e233a000
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10] 0x78e233a080
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10] 0x78e233a100
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10] 0x78e233a180
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10] 0x78e233a200
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10] 0x78e233a280
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8] 0x78e233a300
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8] 0x78e233a380
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8] 0x78e233a400
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78e233a480
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1] 0x78e233a500
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1] 0x78e2338480
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1] 0x78e2338500
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8] 0x78e2338580
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4] 0x78e2338600
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8] 0x78e2338680
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4] 0x78e2338700
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4] 0x78e2338780
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc] 0x78e2338800
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10] 0x78e2338880
	bool SupportsSeeking();// 0x894c738 0x78e2343ce0
	bool SupportsScrubbing();// 0x894c770 0x78e2343dc0
	bool SupportsRate(float Rate, bool Unthinned);// 0x894c7a8 0x78e2343ea0
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x894c954 0x78e2343f80
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x894ca64 0x78e2344060
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x894cbb4 0x78e2344140
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x894ccfc 0x78e2344220
	void SetTimeDelay(Timespan TimeDelay);// 0x894c8b0 0x78e2344300
	bool SetRate(float Rate);// 0x894cef8 0x78e23443e0
	bool SetNativeVolume(float Volume);// 0x894ce44 0x78e23444c0
	void SetMediaOptions(const MediaSource* Options);// 0x894cfac 0x78e23445a0
	bool SetLooping(bool Looping);// 0x894d054 0x78e2344680
	void SetDesiredPlayerName(FName PlayerName);// 0x894d110 0x78e2344760
	void SetBlockOnTime(out const Timespan Time);// 0x894d1b8 0x78e2344840
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x894d268 0x78e2344920
	bool Seek(out const Timespan Time);// 0x894d368 0x78e2344a00
	bool Rewind();// 0x894d424 0x78e2344ae0
	bool Reopen();// 0x894d45c 0x78e2344bc0
	bool Previous();// 0x894d494 0x78e2344ca0
	void PlayAndSeek();// 0x894d4cc 0x78e2344d80
	bool Play();// 0x894d4e0 0x78e2344e60
	bool Pause();// 0x894d518 0x78e2344f40
	bool OpenUrl(FString URL);// 0x894d550 0x78e2345020
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x894d810 0x78e2345100
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x894d610 0x78e23451e0
	bool OpenSource(MediaSource* MediaSource);// 0x894d92c 0x78e23452c0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x894d9e0 0x78e23453a0
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x894dae0 0x78e2345480
	bool OpenFile(FString FilePath);// 0x894db98 0x78e2345560
	bool Next();// 0x894dc58 0x78e2345640
	bool IsReady();// 0x894dc90 0x78e2341d60
	bool IsPreparing();// 0x894dd00 0x78e2341e40
	bool IsPlaying();// 0x894dd38 0x78e2341f20
	bool IsPaused();// 0x894dd70 0x78e2342000
	bool IsLooping();// 0x894dda8 0x78e23420e0
	bool IsConnecting();// 0x894dde0 0x78e23421c0
	bool IsClosed();// 0x894dcc8 0x78e23422a0
	bool IsBuffering();// 0x894de18 0x78e2342380
	bool HasError();// 0x894de50 0x78e2342460
	Rotator GetViewRotation();// 0x894debc 0x78e2342540
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x894def4 0x78e2342620
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x894e038 0x78e2342700
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x894e130 0x78e23427e0
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x894e228 0x78e23428c0
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x894e324 0x78e23429a0
	float GetVerticalFieldOfView();// 0x894e41c 0x78e2342a80
	FString GetUrl();// 0x894e450 0x78e2342b60
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x894e4d4 0x78e2342c40
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x894e61c 0x78e2342d20
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x894e718 0x78e2342e00
	MediaTimeStampInfo* GetTimeStamp();// 0x894e880 0x78e2342ee0
	Timespan GetTimeDelay();// 0x894de88 0x78e2342fc0
	Timespan GetTime();// 0x894e8b4 0x78e23430a0
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x894e8e8 0x78e2343180
	int GetSelectedTrack(enum TrackType);// 0x894e9f4 0x78e2343260
	float GetRate();// 0x894eaa4 0x78e2343340
	int GetPlaylistIndex();// 0x894ead8 0x78e2343420
	MediaPlaylist* GetPlaylist();// 0x894eaf4 0x78e2343500
	FName GetPlayerName();// 0x894eb10 0x78e23435e0
	int GetNumTracks(enum TrackType);// 0x894ec40 0x78e23436c0
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x894eb44 0x78e23437a0
	FText GetMediaName();// 0x894ecf0 0x78e2343880
	float GetHorizontalFieldOfView();// 0x894edc8 0x78e2343960
	Timespan GetDuration();// 0x894edfc 0x78e2340080
	FName GetDesiredPlayerName();// 0x894ee30 0x78e2340160
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x894ee64 0x78e2340240
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x894efa8 0x78e2340320
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x894f0a0 0x78e2340400
	void Close();// 0x894f198 0x78e23404e0
	bool CanPlayUrl(FString URL);// 0x894f1ac 0x78e23405c0
	bool CanPlaySource(MediaSource* MediaSource);// 0x894f26c 0x78e23406a0
	bool CanPause();// 0x894f320 0x78e2340780

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10] 0x7875d4d3a0
	bool Replace(int Index, MediaSource* Replacement);// 0x8950ff8 0x78e2346c20
	bool RemoveAt(int Index);// 0x89510f8 0x78e2346d00
	bool Remove(MediaSource* MediaSource);// 0x89511ac 0x78e2346de0
	int Num();// 0x8951260 0x78e2346ec0
	void Insert(MediaSource* MediaSource, int Index);// 0x895127c 0x78e2346fa0
	MediaSource* GetRandom(out int OutIndex);// 0x8951370 0x78e2347080
	MediaSource* GetPrevious(out int InOutIndex);// 0x895142c 0x78e2347160
	MediaSource* GetNext(out int InOutIndex);// 0x89514e8 0x78e2347240
	MediaSource* Get(int Index);// 0x89515a4 0x78e2347320
	bool AddUrl(FString URL);// 0x8951654 0x78e2343a40
	bool AddFile(FString FilePath);// 0x8951714 0x78e2343b20
	bool Add(MediaSource* MediaSource);// 0x89517d4 0x78e2343c00

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c] 0x7875a18b00
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8] 0x7875a18b80
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1] 0x78759e4980
	enum Loop;//[Offset: 0x29, Size: 0x1] 0x78759e4a20

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4] 0x7875a18780
	int Caption;//[Offset: 0x4, Size: 0x4] 0x7875a18800
	int MetaData;//[Offset: 0x8, Size: 0x4] 0x7875a18880
	int Script;//[Offset: 0xc, Size: 0x4] 0x7875a18900
	int Subtitle;//[Offset: 0x10, Size: 0x4] 0x7875a18980
	int Text;//[Offset: 0x14, Size: 0x4] 0x7875a18a00
	int Video;//[Offset: 0x18, Size: 0x4] 0x7875a18a80

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8] 0x78e2334600
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8] 0x78e2334680

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6c0, Size: 0x4] 0x7875d4d080
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1] 0x78e233ab00
	float RateAdjustmentFactor;//[Offset: 0x6c8, Size: 0x4] 0x78e233ab80
	FloatRange RateAdjustmentRange;//[Offset: 0x6cc, Size: 0x10] 0x78e233ac00
	MediaPlayer* MediaPlayer;//[Offset: 0x6e0, Size: 0x8] 0x78e233ac80
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x895271c 0x78e2346360
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x8952914 0x78e2346440
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x895241c 0x78e2346520
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x8952864 0x78e2346600
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x895250c 0x78e23466e0
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x895266c 0x78e23467c0
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x89525bc 0x78e23468a0
	MediaPlayer* GetMediaPlayer();// 0x89529bc 0x78e2346980
	float GetEnvelopeValue();// 0x89523e8 0x78e2346a60
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x89529f0 0x78e2346b40

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4] 0x7875a18580
	float Magnitude;//[Offset: 0x4, Size: 0x4] 0x7875a18600

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] MediaSections;//[Offset: 0x98, Size: 0x10] 0x7875c054c0

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c49580
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10] 0x7875c49600
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10] 0x7875c05420
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4] 0x7875c49700
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7875c49780

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c4af00
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875c4af80
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7875c4b000
	float MaxSendRate;//[Offset: 0x2c, Size: 0x4] 0x7875c4b080
	uint32 AutoRepairAttemptLimit;//[Offset: 0x30, Size: 0x4] 0x7875c4b100
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7875c4b180
	FString UnicastEndpoint;//[Offset: 0x38, Size: 0x10] 0x7875c4b200
	FString MulticastEndpoint;//[Offset: 0x48, Size: 0x10] 0x7875c4b280
	enum MessageFormat;//[Offset: 0x58, Size: 0x1] 0x7875c07b80
	byte MulticastTimeToLive;//[Offset: 0x59, Size: 0x1] 0x7875c4b380
	FString[] StaticEndpoints;//[Offset: 0x60, Size: 0x10] 0x7875c052e0
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x7875c4b480
	FString TunnelUnicastEndpoint;//[Offset: 0x78, Size: 0x10] 0x7875c4b500
	FString TunnelMulticastEndpoint;//[Offset: 0x88, Size: 0x10] 0x7875c4b580
	FString[] RemoteTunnelEndpoints;//[Offset: 0x98, Size: 0x10] 0x7875c05380

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x7875c4ae00
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20] 0x7875c4ae80

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10] 0x7878007180
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10] 0x7878007400

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10] 0x7878007ae0

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1] 0x78780072c0
	Guid ActorId;//[Offset: 0x4, Size: 0x10] 0x787595af00
	FString PathToComponent;//[Offset: 0x18, Size: 0x10] 0x787595af80

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14] 0x7875c4ac80
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8] 0x7875c4ad00
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8] 0x7875c4ad80

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10] 0x7875c07a40
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10] 0x7875c07ae0

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x787595ac00
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8] 0x787595ac80

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8] 0x787595ad00
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10] 0x787595ad80

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x6d94ba8 0x7875c253a0
	void OnMatchEnded(FString Match);// 0x6d94ba8 0x7875c25480

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10] 0x7875c4a880

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool CheckPermission(FString permission);// 0x66df8fc 0x7875c25100
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x66df808 0x7875c251e0

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x6755b48 0x7875c24f40
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x6755760 0x7875c25020

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4bd00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4bd80
	static AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x675630c 0x7875c24d80
	static AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x675621c 0x7875c24e60

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4b900
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4b980
	static AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x6756930 0x7875c24ca0

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4b680
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4b700
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x6756ff8 0x7875c24bc0

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4d400
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4d480
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x675758c 0x7875c24ae0

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4d180
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4d200
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x6757bd0 0x7875c24a00

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4cd00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4cd80
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x6758164 0x7875c24920

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4c980
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4ca00
	static EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x67588a8 0x7875c24840

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4e300
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4e380
	static FString GetServerName(out const BlueprintSessionResult Result);// 0x67594f8 0x7875c243e0
	static int GetPingInMs(out const BlueprintSessionResult Result);// 0x675974c 0x7875c244c0
	static int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x67590f0 0x7875c245a0
	static int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x67592f4 0x7875c24680
	static FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x6759950 0x7875c24760

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c4de00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c4de80
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x675a10c 0x7875c24300

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4db80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4dc00
	static InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x675a9d8 0x7875c24220

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x787595ab00
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x787595ab80

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4d700
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4d780
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x675b520 0x7875c23f80
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x675b478 0x7875c24060
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x675b5c8 0x7875c24140

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10] 0x787595c300
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x787595c380

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4f580
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4f600
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x675bc38 0x7875c23ea0

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4f300
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4f380
	static InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x675c484 0x7875c23dc0

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4f080
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4f100
	static InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x675ca88 0x7875c23ce0

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c4ee00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c4ee80
	static InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x675d1d4 0x7875c23c00

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x1bf8, Size: 0x4] 0x7875c4fe00

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75e, Size: 0x1] 0x7875c50380
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75e, Size: 0x1] 0x7875c50400
	uint32 MaxPortCountToTry;//[Offset: 0x760, Size: 0x4] 0x7875c50480
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x774, Size: 0x4] 0x7875c50500
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x778, Size: 0x4] 0x7875c50580
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x77c, Size: 0x4] 0x7875c50600
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x780, Size: 0x4] 0x7875c50680
	double MaxSecondsInReceive;//[Offset: 0x788, Size: 0x8] 0x7875c50700
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x790, Size: 0x4] 0x7875c50780
	float ResolutionConnectionTimeout;//[Offset: 0x794, Size: 0x4] 0x7875c50800

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c50080
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c50100
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x6761470 0x7875c23b20

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	static bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x6761c24 0x7875c23a40

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c51d00
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c51d80
	static LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x6762244 0x7875c27320

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x7875c51a80
	delegate OnFailure;//[Offset: 0x38, Size: 0x10] 0x7875c51b00
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x67627f4 0x7875c27240

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c51800
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c51880
	static LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x6762db8 0x7875c27160

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x228, Size: 0x4] 0x7875c51680
	float BeaconConnectionTimeout;//[Offset: 0x22c, Size: 0x4] 0x7875c51700
	NetDriver* NetDriver;//[Offset: 0x230, Size: 0x8] 0x7875c51780

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x250, Size: 0x8] 0x7875c51500
	NetConnection* BeaconConnection;//[Offset: 0x258, Size: 0x8] 0x7875c51580
	enum ConnectionState;//[Offset: 0x260, Size: 0x1] 0x7875c06f00
	void ClientOnConnected();// 0x6763828 0x7875c27080

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x220, Size: 0x10] 0x7875c51300
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x230, Size: 0x8] 0x7875c06d20
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x238, Size: 0x10] 0x7875c06dc0

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x250, Size: 0x4] 0x7875c51400
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x258, Size: 0x10] 0x7875c06e60

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	<FName,FName> MappedUniqueNetIdTypes;//[Offset: 0x28, Size: 0x50] 0x7875b1c1c0
	FName[] CompatibleUniqueNetIdTypes;//[Offset: 0x78, Size: 0x10] 0x7875c06c80
	FName VoiceSubsystemNameOverride;//[Offset: 0x88, Size: 0x8] 0x7875c51280

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875c53100
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10] 0x7875c06be0

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10] 0x787595be00
	FString Token;//[Offset: 0x10, Size: 0x10] 0x787595be80
	FString Type;//[Offset: 0x20, Size: 0x10] 0x787595bf00
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10] 0x7878007040

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x7875c53000
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1] 0x7875c53080

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x7875c52780
	PartyReservation PendingReservation;//[Offset: 0x2f0, Size: 0x50] 0x7875c52800
	enum RequestType;//[Offset: 0x340, Size: 0x1] 0x7875c06b40
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1] 0x7875c52900
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1] 0x7875c52980
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x6765ad0 0x7875c268a0
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x6765cb0 0x7875c26980
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x6765710 0x7875c26a60
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x6765598 0x7875c26b40
	void ServerAddOrUpdateReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x67658f0 0x7875c26c20
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x6765eac 0x7875c26d00
	void ClientSendReservationFull();// 0x6765e90 0x7875c26de0
	void ClientReservationResponse(byte ReservationResponse);// 0x676600c 0x7875c26ec0
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x6765f5c 0x7875c26fa0

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4] 0x787595bb00
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28] 0x787595bb80
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10] 0x787800a4c0
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 0x10] 0x78780070e0

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x28] 0x787595c080
	FString ValidationStr;//[Offset: 0x28, Size: 0x10] 0x787595c100
	FString Platform;//[Offset: 0x38, Size: 0x10] 0x787595c180
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x787595c200
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4] 0x787595c280

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x7875c52580
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7875c52600
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x7875c52680
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x7875c52700

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7875c54000
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7875c54080
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7875c54100
	int NumTeams;//[Offset: 0x38, Size: 0x4] 0x7875c54180
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4] 0x7875c54200
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8] 0x7875c52180
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4] 0x7875c52200
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4] 0x7875c52280
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x7875c52300
	FString[] PlatformCrossplayRestrictions;//[Offset: 0x58, Size: 0x10] 0x7875c06960
	PartyBeaconCrossplayPlatformMapping[] PlatformTypeMapping;//[Offset: 0x68, Size: 0x10] 0x7875c06a00
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x7875c52480
	PartyReservation[] Reservations;//[Offset: 0x80, Size: 0x10] 0x7875c06aa0

--------------------------------
Class: PartyBeaconCrossplayPlatformMapping
	FString PlatformName;//[Offset: 0x0, Size: 0x10] 0x787595bd00
	FString PlatformType;//[Offset: 0x10, Size: 0x10] 0x787595bd80

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c53c00
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c53c80
	static QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x6767dc0 0x7875c267c0

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c53980
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c53a00
	static ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x6768494 0x7875c266e0

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e0, Size: 0x10] 0x7875c53400
	SpectatorReservation PendingReservation;//[Offset: 0x2f0, Size: 0x78] 0x7875c53480
	enum RequestType;//[Offset: 0x368, Size: 0x1] 0x7875c068c0
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1] 0x7875c53580
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 0x1] 0x7875c53600
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x6768ccc 0x7875c261a0
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x6768b54 0x7875c26280
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x6768f54 0x7875c26360
	void ClientSendReservationFull();// 0x6768f38 0x7875c26440
	void ClientReservationResponse(byte ReservationResponse);// 0x67690b4 0x7875c26520
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x6769004 0x7875c26600

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x28] 0x787595ba00
	PlayerReservation Spectator;//[Offset: 0x28, Size: 0x50] 0x787595ba80

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x248, Size: 0x8] 0x7875c53200
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7875c53280
	float SessionTimeoutSecs;//[Offset: 0x2b4, Size: 0x4] 0x7875c53300
	float TravelSessionTimeoutSecs;//[Offset: 0x2b8, Size: 0x4] 0x7875c53380

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8] 0x7875c55080
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4] 0x7875c55100
	int MaxReservations;//[Offset: 0x34, Size: 0x4] 0x7875c55180
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875c55200
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10] 0x7875c06820

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x676d5f0 0x7875c25fe0
	void ClientPing();// 0x676d64c 0x7875c260c0

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x676e1b4 0x7875c25c60
	static void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x676df68 0x7875c25d40
	static void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x676e2e0 0x7875c25e20
	static void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x676e4d4 0x7875c25f00

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0x676ec40 0x7875c25b80

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x67702ac 0x7875c258e0
	static Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x677048c 0x7875c259c0
	static void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x677039c 0x7875c25aa0

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8] 0x787595b980

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x7875c55700
	delegate OnFailure;//[Offset: 0x40, Size: 0x10] 0x7875c55780
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20] 0x7875c55800
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x6778390 0x7875c28f20
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x67781b8 0x7875c29000
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x677878c 0x7875c25720
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x6778568 0x7875c25800

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10] 0x7878051900
	byte[] ImageData;//[Offset: 0x10, Size: 0x10] 0x78780010a0

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x677c61c 0x7875c289e0
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x677c718 0x7875c28ac0
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x677c8a4 0x7875c28ba0
	FName[] GetCollections();// 0x677cbcc 0x7875c28c80
	AssetData[] GetAssetsInCollection(const FName Name);// 0x677c9a0 0x7875c28d60
	bool CollectionExists(const FName Name);// 0x677cc7c 0x7875c28e40

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8] 0x78a8151580
	FName PackageName;//[Offset: 0x8, Size: 0x8] 0x78a8151600
	FName PackagePath;//[Offset: 0x10, Size: 0x8] 0x78a8151680
	FName AssetName;//[Offset: 0x18, Size: 0x8] 0x78a8151700
	FName AssetClass;//[Offset: 0x20, Size: 0x8] 0x78a8151780

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCapture.AudioGenerator.Object
	void StopCapturingAudio();// 0x677e90c 0x7875c28660
	void StartCapturingAudio();// 0x677e920 0x7875c28740
	bool IsCapturingAudio();// 0x677e8d4 0x7875c28820
	bool GetAudioCaptureDeviceInfo(out AudioCaptureDeviceInfo OutInfo);// 0x677e934 0x7875c28900

--------------------------------
Class: AudioCaptureDeviceInfo
	FName DeviceName;//[Offset: 0x0, Size: 0x8] 0x787595b800
	int NumInputChannels;//[Offset: 0x8, Size: 0x4] 0x787595b880
	int SampleRate;//[Offset: 0xc, Size: 0x4] 0x787595b900

--------------------------------
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object
	static AudioCapture* CreateAudioCapture();// 0x677ef78 0x7875c28580

--------------------------------
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int JitterLatencyFrames;//[Offset: 0x6c0, Size: 0x4] 0x7875c57000

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x220, Size: 0x8] 0x7875c56f80

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1] 0x7875c58280
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1] 0x7875c58300
	ComponentReference AttachEndTo;//[Offset: 0x470, Size: 0x28] 0x7875c58380
	FName AttachEndToSocketName;//[Offset: 0x498, Size: 0x8] 0x7875c58400
	Vector EndLocation;//[Offset: 0x4a0, Size: 0xc] 0x7875c56380
	float CableLength;//[Offset: 0x4ac, Size: 0x4] 0x7875c56400
	int NumSegments;//[Offset: 0x4b0, Size: 0x4] 0x7875c56480
	float SubstepTime;//[Offset: 0x4b4, Size: 0x4] 0x7875c56500
	int SolverIterations;//[Offset: 0x4b8, Size: 0x4] 0x7875c56580
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1] 0x7875c56600
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 0x1] 0x7875c56680
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 0x1] 0x7875c56700
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf, Size: 0x1] 0x7875c56780
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1] 0x7875c56800
	float CollisionFriction;//[Offset: 0x4c4, Size: 0x4] 0x7875c56880
	Vector CableForce;//[Offset: 0x4c8, Size: 0xc] 0x7875c56900
	float CableGravityScale;//[Offset: 0x4d4, Size: 0x4] 0x7875c56980
	float CableWidth;//[Offset: 0x4d8, Size: 0x4] 0x7875c56a00
	int NumSides;//[Offset: 0x4dc, Size: 0x4] 0x7875c56a80
	float TileMaterial;//[Offset: 0x4e0, Size: 0x4] 0x7875c56b00
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x6784584 0x7875c28120
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x6784448 0x7875c28200
	void GetCableParticleLocations(out Vector[] Locations);// 0x6784320 0x7875c282e0
	SceneComponent* GetAttachedComponent();// 0x67843e0 0x7875c283c0
	Actor* GetAttachedActor();// 0x6784414 0x7875c284a0

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8] 0x7875a8d900
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8] 0x7875a8d980
	FString PathToComponent;//[Offset: 0x10, Size: 0x10] 0x7875a8da00

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x679b5f0 0x7875c27e80
	void ClearCustomMeshTriangles();// 0x679b51c 0x7875c27f60
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x679b530 0x7875c28040

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0xc] 0x787595b680
	Vector Vertex1;//[Offset: 0xc, Size: 0xc] 0x787595b700
	Vector Vertex2;//[Offset: 0x18, Size: 0xc] 0x787595b780

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	static enum ShowCellularDataConfirmation();// 0x67a12f4 0x7875c2ab20
	static enum RequestRemoval(FString Name);// 0x67a1328 0x7875c2ac00
	static enum RequestInfo(const FString[] AssetPacks);// 0x67a1ae0 0x7875c2ace0
	static enum RequestDownload(const FString[] AssetPacks);// 0x67a192c 0x7875c27400
	static void ReleaseDownloadState(const int State);// 0x67a15d4 0x7875c274e0
	static void ReleaseAssetPackLocation(const int Location);// 0x67a109c 0x7875c275c0
	static int GetTotalBytesToDownload(const int State);// 0x67a13dc 0x7875c276a0
	static enum GetStorageMethod(const int Location);// 0x67a0ff4 0x7875c27780
	static enum GetShowCellularDataConfirmationStatus(out enum Status);// 0x67a1240 0x7875c27860
	static enum GetDownloadStatus(const int State);// 0x67a152c 0x7875c27940
	static enum GetDownloadState(FString Name, out int State);// 0x67a166c 0x7875c27a20
	static int GetBytesDownloaded(const int State);// 0x67a1484 0x7875c27b00
	static FString GetAssetsPath(const int Location);// 0x67a0f00 0x7875c27be0
	static enum GetAssetPackLocation(FString Name, out int Location);// 0x67a1134 0x7875c27cc0
	static enum CancelDownload(const FString[] AssetPacks);// 0x67a1778 0x7875c27da0

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	static bool StopLocationServices();// 0x67a3498 0x7875c2a500
	static bool StartLocationServices();// 0x67a34d0 0x7875c2a5e0
	static bool IsLocationAccuracyAvailable(enum Accuracy);// 0x67a3348 0x7875c2a6c0
	static bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x67a3508 0x7875c2a7a0
	static LocationServicesImpl* GetLocationServicesImpl();// 0x67a3324 0x7875c2a880
	static LocationServicesData GetLastKnownLocation();// 0x67a342c 0x7875c2a960
	static bool AreLocationServicesEnabled();// 0x67a33f4 0x7875c2aa40

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10] 0x7875c58d80

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4] 0x7878051580
	float Longitude;//[Offset: 0x4, Size: 0x4] 0x7878051600
	float Latitude;//[Offset: 0x8, Size: 0x4] 0x7878051700
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4] 0x7878051680
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4] 0x7878051800
	float Altitude;//[Offset: 0x14, Size: 0x4] 0x7878051780

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x67a8c18 0x7875c29ee0
	float GetInstalledContentSize();// 0x67a8d24 0x7875c29fc0
	float GetDiskFreeSpace();// 0x67a8d58 0x7875c2a0a0

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x67a92d0 0x7875c298c0
	float GetTotalDownloadedSize();// 0x67a9510 0x7875c299a0
	float GetRequiredDiskSpace();// 0x67a9544 0x7875c29a80
	float GetInstallProgress();// 0x67a93d8 0x7875c29b60
	FText GetDownloadStatusText();// 0x67a940c 0x7875c29c40
	float GetDownloadSpeed();// 0x67a94dc 0x7875c29d20
	float GetDownloadSize();// 0x67a9578 0x7875c29e00

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x67a9da0 0x7875c29460
	static bool HasActiveWiFiConnection();// 0x67a9d68 0x7875c29540
	static FString[] GetSupportedPlatformNames();// 0x67a9ba0 0x7875c29620
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x67a9f94 0x7875c29700
	static FString GetActiveDeviceProfileName();// 0x67a9cb8 0x7875c297e0

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1] 0x7875c5d080
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1] 0x7875c5d100
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1] 0x7875c5d180
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1] 0x7875c5d200
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 0x1] 0x7875c5d280
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1] 0x7875c5d300
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x140, Size: 0x1] 0x7875c5d380
	float Mass;//[Offset: 0x144, Size: 0x4] 0x7875c5d400
	WheelSetup[] WheelSetups;//[Offset: 0x148, Size: 0x10] 0x7875c07d60
	float DragCoefficient;//[Offset: 0x158, Size: 0x4] 0x7875c5d500
	float ChassisWidth;//[Offset: 0x15c, Size: 0x4] 0x7875c5d580
	float ChassisHeight;//[Offset: 0x160, Size: 0x4] 0x7875c5d600
	float DragArea;//[Offset: 0x164, Size: 0x4] 0x7875c5d680
	float EstimatedMaxEngineSpeed;//[Offset: 0x168, Size: 0x4] 0x7875c5b600
	float MaxEngineRPM;//[Offset: 0x16c, Size: 0x4] 0x7875c5b680
	float DebugDragMagnitude;//[Offset: 0x170, Size: 0x4] 0x7875c5b700
	Vector InertiaTensorScale;//[Offset: 0x174, Size: 0xc] 0x7875c5b780
	float MinNormalizedTireLoad;//[Offset: 0x180, Size: 0x4] 0x7875c5b800
	float MinNormalizedTireLoadFiltered;//[Offset: 0x184, Size: 0x4] 0x7875c5b880
	float MaxNormalizedTireLoad;//[Offset: 0x188, Size: 0x4] 0x7875c5b900
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 0x4] 0x7875c5b980
	float ThresholdLongitudinalSpeed;//[Offset: 0x190, Size: 0x4] 0x7875c5ba00
	int LowForwardSpeedSubStepCount;//[Offset: 0x194, Size: 0x4] 0x7875c5ba80
	int HighForwardSpeedSubStepCount;//[Offset: 0x198, Size: 0x4] 0x7875c5bb00
	VehicleWheel*[] Wheels;//[Offset: 0x1a0, Size: 0x10] 0x7875c07e00
	float RVOAvoidanceRadius;//[Offset: 0x1c8, Size: 0x4] 0x7875c5bc00
	float RVOAvoidanceHeight;//[Offset: 0x1cc, Size: 0x4] 0x7875c5bc80
	float AvoidanceConsiderationRadius;//[Offset: 0x1d0, Size: 0x4] 0x7875c5bd00
	float RVOSteeringStep;//[Offset: 0x1d4, Size: 0x4] 0x7875c5bd80
	float RVOThrottleStep;//[Offset: 0x1d8, Size: 0x4] 0x7875c5be00
	int AvoidanceUID;//[Offset: 0x1dc, Size: 0x4] 0x7875c5be80
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e0, Size: 0x4] 0x7875c5bf00
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1e4, Size: 0x4] 0x7875c5bf80
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1e8, Size: 0x4] 0x7875c5c000
	float AvoidanceWeight;//[Offset: 0x1ec, Size: 0x4] 0x7875c5c080
	Vector PendingLaunchVelocity;//[Offset: 0x1f0, Size: 0xc] 0x7875c5c100
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1fc, Size: 0x14] 0x7875c5c180
	float RawSteeringInput;//[Offset: 0x214, Size: 0x4] 0x7875c5c200
	float RawThrottleInput;//[Offset: 0x218, Size: 0x4] 0x7875c5c280
	float RawBrakeInput;//[Offset: 0x21c, Size: 0x4] 0x7875c5c300
	float SteeringInput;//[Offset: 0x220, Size: 0x4] 0x7875c5c380
	float ThrottleInput;//[Offset: 0x224, Size: 0x4] 0x7875c5c400
	float BrakeInput;//[Offset: 0x228, Size: 0x4] 0x7875c5c480
	float HandbrakeInput;//[Offset: 0x22c, Size: 0x4] 0x7875c5c500
	float IdleBrakeInput;//[Offset: 0x230, Size: 0x4] 0x7875c5c580
	float StopThreshold;//[Offset: 0x234, Size: 0x4] 0x7875c5c600
	float WrongDirectionThreshold;//[Offset: 0x238, Size: 0x4] 0x7875c5a580
	VehicleInputRate ThrottleInputRate;//[Offset: 0x23c, Size: 0x8] 0x7875c5a600
	VehicleInputRate BrakeInputRate;//[Offset: 0x244, Size: 0x8] 0x7875c5a680
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x24c, Size: 0x8] 0x7875c5a700
	VehicleInputRate SteeringInputRate;//[Offset: 0x254, Size: 0x8] 0x7875c5a780
	Controller* OverrideController;//[Offset: 0x280, Size: 0x8] 0x7875c5a800
	void SetUseAutoGears(bool bUseAuto);// 0x67be640 0x7875c2aea0
	void SetThrottleInput(float Throttle);// 0x67beb48 0x7875c2af80
	void SetTargetGear(int GearNum, bool bImmediate);// 0x67be6f0 0x7875c2b060
	void SetSteeringInput(float Steering);// 0x67be9f8 0x7875c2b140
	void SetHandbrakeInput(bool bNewHandbrake);// 0x67be948 0x7875c2b220
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x67be0f0 0x7875c2b300
	void SetGroupsToIgnore(int GroupFlags);// 0x67be1a4 0x7875c2b3e0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x67be24c 0x7875c2b4c0
	void SetGroupsToAvoid(int GroupFlags);// 0x67be300 0x7875c2b5a0
	void SetGearUp(bool bNewGearUp);// 0x67be898 0x7875c2b680
	void SetGearDown(bool bNewGearDown);// 0x67be7e8 0x7875c2b760
	void SetBrakeInput(float Brake);// 0x67beaa0 0x7875c2b840
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x67be3a8 0x7875c2b920
	void SetAvoidanceGroup(int GroupFlags);// 0x67be45c 0x7875c2ba00
	void SetAvoidanceEnabled(bool bEnable);// 0x67be040 0x7875c2bae0
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x67bde28 0x7875c2bbc0
	bool GetUseAutoGears();// 0x67be504 0x7875c2bca0
	int GetTargetGear();// 0x67be53c 0x7875c2bd80
	float GetForwardSpeed();// 0x67be60c 0x7875c2be60
	float GetEngineRotationSpeed();// 0x67be5d8 0x7875c2bf40
	float GetEngineMaxRotationSpeed();// 0x67be5a4 0x7875c2c020
	int GetCurrentGear();// 0x67be570 0x7875c2c100

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8] 0x787800a240
	FName BoneName;//[Offset: 0x8, Size: 0x8] 0x787595e100
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc] 0x787595e180
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787595e200

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8] 0x7875c5d980
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875c5da00
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875c5da80
	Vector Offset;//[Offset: 0x34, Size: 0xc] 0x7875c5db00
	float ShapeRadius;//[Offset: 0x40, Size: 0x4] 0x7875c5db80
	float ShapeWidth;//[Offset: 0x44, Size: 0x4] 0x7875c5dc00
	float Mass;//[Offset: 0x48, Size: 0x4] 0x7875c5dc80
	float DampingRate;//[Offset: 0x4c, Size: 0x4] 0x7875c5dd00
	float SteerAngle;//[Offset: 0x50, Size: 0x4] 0x7875c5dd80
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1] 0x7875c5de00
	TireType* TireType;//[Offset: 0x58, Size: 0x8] 0x7875c5de80
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8] 0x7875c5df00
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4] 0x7875c5df80
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4] 0x7875c5e000
	float LongStiffValue;//[Offset: 0x70, Size: 0x4] 0x7875c5e080
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4] 0x7875c5e100
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4] 0x7875c5e180
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4] 0x7875c5e200
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4] 0x7875c5e280
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4] 0x7875c5e300
	byte SweepType;//[Offset: 0x88, Size: 0x1] 0x7875c5e380
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4] 0x7875c5e400
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4] 0x7875c5e480
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8] 0x7875c5e500
	int WheelIndex;//[Offset: 0xa0, Size: 0x4] 0x7875c5e580
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4] 0x7875c5e600
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4] 0x7875c5e680
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4] 0x7875c5e700
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4] 0x7875c5c680
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4] 0x7875c5c700
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4] 0x7875c5c780
	Vector Location;//[Offset: 0xc0, Size: 0xc] 0x7875c5c800
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc] 0x7875c5c880
	Vector Velocity;//[Offset: 0xd8, Size: 0xc] 0x7875c5c900
	bool IsInAir();// 0x67bd064 0x7875c2e160
	float GetSuspensionOffset();// 0x67bd09c 0x7875c2e240
	float GetSteerAngle();// 0x67bd104 0x7875c2e320
	float GetRotationAngle();// 0x67bd0d0 0x7875c2e400

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4] 0x7875c5cc80
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10] 0x7875c07cc0

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x787595e600
	float FrictionScale;//[Offset: 0x8, Size: 0x4] 0x787595e680

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4] 0x787595e280
	float ThrottleInput;//[Offset: 0x4, Size: 0x4] 0x787595e300
	float BrakeInput;//[Offset: 0x8, Size: 0x4] 0x787595e380
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4] 0x787595e400
	int CurrentGear;//[Offset: 0x10, Size: 0x4] 0x787595e480

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4] 0x787595e500
	float FallRate;//[Offset: 0x4, Size: 0x4] 0x787595e580

--------------------------------
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void SetSteerAngle(float SteerAngle, int WheelIndex);// 0x67bb808 0x7875c2e5c0
	void SetDriveTorque(float DriveTorque, int WheelIndex);// 0x67bb8fc 0x7875c2e6a0
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);// 0x67bb9f0 0x7875c2adc0

--------------------------------
Class: VehicleAnimInstance.AnimInstance.Object
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent;//[Offset: 0xa50, Size: 0x8] 0x7875c5cb80
	WheeledVehicle* GetVehicle();// 0x67bc8b0 0x7875c2e4e0

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 0x8] 0x7875c5d880
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x288, Size: 0x8] 0x7875c5d900

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10] 0x78e24eb320
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10] 0x78e24eb3c0
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8] 0x78e24eb460
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1] 0x78e25f6280
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1] 0x78e25f6300

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x7875b47500
	float Radius;//[Offset: 0xc, Size: 0x4] 0x7875b47580
	float Height;//[Offset: 0x10, Size: 0x4] 0x7875b47600

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc] 0x7875b47680
	Vector Extent;//[Offset: 0xc, Size: 0xc] 0x7875b47700

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4] 0x78e25f4280
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4] 0x78e25f4300
	Color DrawColor;//[Offset: 0x34, Size: 0x4] 0x78e25f4380
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4] 0x78e25f4400
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x78e25f4480
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x78e25f4500
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1] 0x78e25f4580
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1] 0x78e25f4600
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1] 0x78e25f4680
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1] 0x78e25f4700
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1] 0x78e25f4780
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1] 0x78e25f4800
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1] 0x78e25f4880
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1] 0x78e25f4900
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1] 0x78e25f4980
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1] 0x78e25f4a00
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1] 0x78e25f4a80
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1] 0x78e25f4b00
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1] 0x78e25f4b80
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1] 0x78e25f4c00

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x288, Size: 0xa0] 0x7875c5f700
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x328, Size: 0x1c] 0x7875c5f780
	float AckermannAccuracy;//[Offset: 0x344, Size: 0x4] 0x7875c5d700
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x348, Size: 0x30] 0x7875c5d780
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x378, Size: 0x88] 0x7875c5d800

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x88] 0x787595d800
	float MaxRPM;//[Offset: 0x88, Size: 0x4] 0x787595d880
	float MOI;//[Offset: 0x8c, Size: 0x4] 0x787595d900
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 0x4] 0x787595d980
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 0x4] 0x787595da00
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 0x4] 0x787595da80

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1] 0x787595ed80
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4] 0x787595ee00
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4] 0x787595ee80
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4] 0x787595ef00
	float CentreBias;//[Offset: 0x10, Size: 0x4] 0x787595ef80
	float FrontBias;//[Offset: 0x14, Size: 0x4] 0x787595f000
	float RearBias;//[Offset: 0x18, Size: 0x4] 0x787595f080

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787595db80
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4] 0x787595dc00
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4] 0x787595dc80
	float FinalRatio;//[Offset: 0xc, Size: 0x4] 0x787595dd00
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10] 0x787800a1a0
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4] 0x787595df80
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4] 0x787595e000
	float ClutchStrength;//[Offset: 0x28, Size: 0x4] 0x787595e080

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4] 0x787595dd80
	float DownRatio;//[Offset: 0x4, Size: 0x4] 0x787595de00
	float UpRatio;//[Offset: 0x8, Size: 0x4] 0x787595de80

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4] 0x7875c5f680

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10] 0x7875c07c20

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10] 0x7875961f80
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xd0] 0x787595ed00

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x7875962000
	enum Osc1Type;//[Offset: 0x9, Size: 0x1] 0x7878009660
	float Osc1Gain;//[Offset: 0xc, Size: 0x4] 0x7875962100
	float Osc1Octave;//[Offset: 0x10, Size: 0x4] 0x7875960080
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4] 0x7875960100
	float Osc1Cents;//[Offset: 0x18, Size: 0x4] 0x7875960180
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4] 0x7875960200
	enum Osc2Type;//[Offset: 0x20, Size: 0x1] 0x7878009700
	float Osc2Gain;//[Offset: 0x24, Size: 0x4] 0x7875960300
	float Osc2Octave;//[Offset: 0x28, Size: 0x4] 0x7875960380
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4] 0x7875960400
	float Osc2Cents;//[Offset: 0x30, Size: 0x4] 0x7875960480
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4] 0x7875960500
	float Portamento;//[Offset: 0x38, Size: 0x4] 0x7875960580
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1] 0x7875960600
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1] 0x7875960680
	float Spread;//[Offset: 0x40, Size: 0x4] 0x7875960700
	float Pan;//[Offset: 0x44, Size: 0x4] 0x7875960780
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4] 0x7875960800
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4] 0x7875960880
	enum LFO1Type;//[Offset: 0x50, Size: 0x1] 0x78780097a0
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1] 0x7878009840
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1] 0x78780098e0
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4] 0x7875960a80
	float LFO2Gain;//[Offset: 0x58, Size: 0x4] 0x7875960b00
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1] 0x7878009980
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1] 0x7878009a20
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1] 0x7878009ac0
	float GainDb;//[Offset: 0x60, Size: 0x4] 0x7875960d00
	float AttackTime;//[Offset: 0x64, Size: 0x4] 0x7875960d80
	float DecayTime;//[Offset: 0x68, Size: 0x4] 0x7875960e00
	float SustainGain;//[Offset: 0x6c, Size: 0x4] 0x7875960e80
	float ReleaseTime;//[Offset: 0x70, Size: 0x4] 0x7875960f00
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1] 0x7878009b60
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1] 0x7878009c00
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1] 0x7875961080
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1] 0x787595f800
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4] 0x787595f880
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4] 0x787595f900
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4] 0x787595f980
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4] 0x787595fa00
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4] 0x787595fa80
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1] 0x787595fb00
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1] 0x787595fb80
	float FilterFrequency;//[Offset: 0x90, Size: 0x4] 0x787595fc00
	float FilterQ;//[Offset: 0x94, Size: 0x4] 0x787595fc80
	enum FilterType;//[Offset: 0x98, Size: 0x1] 0x7878009ca0
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1] 0x7878009d40
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1] 0x787595fe00
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1] 0x7878009de0
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4] 0x787595ff00
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4] 0x787595ff80
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4] 0x787595e780
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4] 0x787595e800
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x787595e880
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4] 0x787595e900
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4] 0x787595e980
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4] 0x787595ea00
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10] 0x787800a060

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1] 0x7878009e80
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10] 0x7878009fc0

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4] 0x787595eb00
	enum Destination;//[Offset: 0x4, Size: 0x1] 0x7878009f20

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	static void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0x681355c 0x7875c2e080

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x6c0, Size: 0x4] 0x7875c81d00
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0x6813f28 0x7875c91820
	void SetSustainGain(float SustainGain);// 0x681539c 0x7875c91900
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0x681445c 0x7875c919e0
	void SetStereoDelayTime(float DelayTimeMsec);// 0x68145ac 0x7875c91ac0
	void SetStereoDelayRatio(float DelayRatio);// 0x68143b4 0x7875c91ba0
	void SetStereoDelayMode(enum StereoDelayMode);// 0x6814654 0x7875c91c80
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0x68146fc 0x7875c2e780
	void SetStereoDelayFeedback(float DelayFeedback);// 0x6814504 0x7875c2e860
	void SetSpread(float Spread);// 0x6815ce8 0x7875c2e940
	void SetReleaseTime(float ReleaseTimeMsec);// 0x68152f4 0x7875c2ea20
	void SetPortamento(float Portamento);// 0x681608c 0x7875c2eb00
	void SetPitchBend(float PitchBend);// 0x6816134 0x7875c2ebe0
	void SetPan(float Pan);// 0x6815d90 0x7875c2ecc0
	void SetOscType(int OscIndex, enum OscType);// 0x68164b8 0x7875c2eda0
	void SetOscSync(const bool bIsSynced);// 0x6815e38 0x7875c2ee80
	void SetOscSemitones(int OscIndex, float Semitones);// 0x68162d0 0x7875c2ef60
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0x6815f98 0x7875c2f040
	void SetOscOctave(int OscIndex, float Octave);// 0x68163c4 0x7875c2f120
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0x68166a0 0x7875c2f200
	void SetOscGain(int OscIndex, float OscGain);// 0x6816794 0x7875c2f2e0
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0x68165ac 0x7875c2f3c0
	void SetOscCents(int OscIndex, float Cents);// 0x68161dc 0x7875c2f4a0
	void SetModEnvSustainGain(const float SustainGain);// 0x6814da4 0x7875c2f580
	void SetModEnvReleaseTime(const float Release);// 0x6814cfc 0x7875c2f660
	void SetModEnvPatch(const enum InPatchType);// 0x681524c 0x7875c2f740
	void SetModEnvInvert(const bool bInvert);// 0x68150f4 0x7875c2f820
	void SetModEnvDepth(const float Depth);// 0x6814f9c 0x7875c2f900
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0x6814e4c 0x7875c2f9e0
	void SetModEnvBiasPatch(const enum InPatchType);// 0x68151a4 0x7875c2fac0
	void SetModEnvBiasInvert(const bool bInvert);// 0x6815044 0x7875c2fba0
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0x6814ef4 0x7875c2fc80
	void SetLFOType(int LFOIndex, enum LFOType);// 0x6815824 0x7875c2fd60
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0x681563c 0x7875c2fe40
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0x6815730 0x7875c2ff20
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0x6815918 0x7875c2caa0
	void SetLFOGain(int LFOIndex, float Gain);// 0x6815a0c 0x7875c2cb80
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0x6815b00 0x7875c2cc60
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0x6815bf4 0x7875c2cd40
	void SetGainDb(float GainDb);// 0x6815594 0x7875c2ce20
	void SetFilterType(enum FilterType);// 0x6814854 0x7875c2cf00
	void SetFilterQMod(float FilterQ);// 0x68148fc 0x7875c2cfe0
	void SetFilterQ(float FilterQ);// 0x68149a4 0x7875c2d0c0
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0x6814a4c 0x7875c2d1a0
	void SetFilterFrequency(float FilterFrequencyHz);// 0x6814af4 0x7875c2d280
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0x68147ac 0x7875c2d360
	void SetEnableUnison(bool EnableUnison);// 0x6815ee8 0x7875c2d440
	void SetEnableRetrigger(bool RetriggerEnabled);// 0x6814b9c 0x7875c2d520
	void SetEnablePolyphony(bool bEnablePolyphony);// 0x6816888 0x7875c2d600
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0x6813cb8 0x7875c2d6e0
	void SetEnableLegato(bool LegatoEnabled);// 0x6814c4c 0x7875c2d7c0
	void SetDecayTime(float DecayTimeMsec);// 0x6815444 0x7875c2d8a0
	void SetChorusFrequency(float Frequency);// 0x681410c 0x7875c2d980
	void SetChorusFeedback(float Feedback);// 0x68141b4 0x7875c2da60
	void SetChorusEnabled(bool EnableChorus);// 0x6814304 0x7875c2db40
	void SetChorusDepth(float Depth);// 0x681425c 0x7875c2dc20
	void SetAttackTime(float AttackTimeMsec);// 0x68154ec 0x7875c2dd00
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x6816a7c 0x7875c2dde0
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0x6816938 0x7875c2dec0
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0x6813dc0 0x7875c2dfa0

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4] 0x7875961f00

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30] 0x7875c81980
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0x681a98c 0x7875c912e0
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0x681aa48 0x7875c913c0
	void SetSampleRate(float SampleRate);// 0x681aaf0 0x7875c914a0
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0x681a8bc 0x7875c91580
	void SetBits(float Bits);// 0x681ac40 0x7875c91660
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0x681ab98 0x7875c91740

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4] 0x7875961b00
	float BitDepth;//[Offset: 0x4, Size: 0x4] 0x7875961b80

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4] 0x7875961c00
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10] 0x7875961c80
	float CrushedBits;//[Offset: 0x18, Size: 0x4] 0x7875961d00
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10] 0x7875961e80

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78] 0x7875c81200
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0x681bb28 0x7875c906a0
	void SetWet(float WetAmount);// 0x681bbd0 0x7875c90780
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0x681b888 0x7875c90860
	void SetSpread(float Spread);// 0x681b930 0x7875c90940
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0x681b7c4 0x7875c90a20
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0x681b6c0 0x7875c90b00
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0x681bc78 0x7875c90be0
	void SetFrequency(float Frequency);// 0x681bd20 0x7875c90cc0
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0x681bdc8 0x7875c90da0
	void SetFeedback(float Feedback);// 0x681be70 0x7875c90e80
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0x681b9d8 0x7875c90f60
	void SetDry(float DryAmount);// 0x681ba80 0x7875c91040
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0x681bf18 0x7875c91120
	void SetDepth(float Depth);// 0x681bfc0 0x7875c91200

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7875961500
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7875961580
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7875961600
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x7875961680
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x7875961700
	float Spread;//[Offset: 0x14, Size: 0x4] 0x7875961780
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10] 0x7875961800
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10] 0x7875961880
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10] 0x7875961900
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10] 0x7875961980
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10] 0x7875961a00
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10] 0x7875961a80

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4] 0x7875961200
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7875961280
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7875961300
	float WetLevel;//[Offset: 0xc, Size: 0x4] 0x7875961380
	float DryLevel;//[Offset: 0x10, Size: 0x4] 0x7875961400
	float Spread;//[Offset: 0x14, Size: 0x4] 0x7875961480

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28] 0x7875c81100
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0x681ce0c 0x7875c905c0

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x7878009520
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78780095c0
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7875962e00
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7875962e80
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7875962f00
	float ThresholdDb;//[Offset: 0x10, Size: 0x4] 0x7875962f80
	float Ratio;//[Offset: 0x14, Size: 0x4] 0x7875963000
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4] 0x7875963080
	float InputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7875963100
	float OutputGainDb;//[Offset: 0x20, Size: 0x4] 0x7875963180
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1] 0x7875961100
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1] 0x7875961180

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb0, Size: 0x10] 0x7875c83180

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7875c82f80
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x681db5c 0x7875c90320
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0x681dcac 0x7875c90400
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x681dc04 0x7875c904e0

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4] 0x7875962b00
	float ReleaseTime;//[Offset: 0x4, Size: 0x4] 0x7875962b80
	enum PeakMode;//[Offset: 0x8, Size: 0x1] 0x7878009480
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7875962c80

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x7875c82e80
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0x681e62c 0x7875c90240

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78780093e0

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7875962880
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7875962900
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7875962980
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875962a00

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x7875c82d80
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0x681f1c0 0x7875c90160

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1] 0x7878009160
	enum FilterType;//[Offset: 0x1, Size: 0x1] 0x7878009200
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4] 0x7875962280
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7875962300
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10] 0x7878009340

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8] 0x7875962380
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7875962400
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4] 0x7875962480
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4] 0x7875962500
	enum FilterParam;//[Offset: 0x14, Size: 0x1] 0x78780092a0
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4] 0x7875962600
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4] 0x7875962680
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4] 0x7875962700
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4] 0x7875962780

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7875c82c80
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0x681f984 0x7875c90080

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4] 0x7875964100
	float ThresholdDb;//[Offset: 0x4, Size: 0x4] 0x7875964180
	float OutputGainDb;//[Offset: 0x8, Size: 0x4] 0x7875964200

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7875c82b80
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0x6820214 0x7875c93960

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4] 0x7875963f00
	enum InputMode;//[Offset: 0x4, Size: 0x1] 0x787800b960
	enum OutputMode;//[Offset: 0x5, Size: 0x1] 0x78780090c0
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7875964080

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7875c82a80
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0x68209b0 0x7875c93880

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4] 0x7875963e00
	float Pan;//[Offset: 0x4, Size: 0x4] 0x7875963e80

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x7875c82980
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0x6821220 0x7875c937a0

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4] 0x7875963b80
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7875963c00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7875963c80
	enum LFOType;//[Offset: 0xc, Size: 0x1] 0x787800b8c0
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7875963d80

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x7875c82880
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0x6821acc 0x7875c936c0

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1] 0x787800b820
	float Frequency;//[Offset: 0x4, Size: 0x4] 0x7875963900
	float Depth;//[Offset: 0x8, Size: 0x4] 0x7875963980
	float DryLevel;//[Offset: 0xc, Size: 0x4] 0x7875963a00
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7875963a80
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8] 0x7875963b00

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa4, Size: 0x18] 0x7875c82780
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0x6828ab8 0x7875c935e0

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4] 0x7875963580
	float DelayAmount;//[Offset: 0x4, Size: 0x4] 0x7875963600
	float DryAmount;//[Offset: 0x8, Size: 0x4] 0x7875963680
	float WetAmount;//[Offset: 0xc, Size: 0x4] 0x7875963700
	float Feedback;//[Offset: 0x10, Size: 0x4] 0x7875963780
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1] 0x7875963800

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7875c82680
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0x6829474 0x7875c93500

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x787800b6e0
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7875965200
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7875965280
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7875963200
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7875963280
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7875963300
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875963380
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x787800b780
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7875963480
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7875963500

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x94, Size: 0x8] 0x7875c82580
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0x6829c68 0x7875c93420

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7875965080
	float OutputGainDb;//[Offset: 0x4, Size: 0x4] 0x7875965100

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10] 0x7875c09d40
	int NumChannels;//[Offset: 0x38, Size: 0x4] 0x7875c82300
	int SampleRate;//[Offset: 0x3c, Size: 0x4] 0x7875c82380
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4] 0x7875c82400
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875c82480
	float[] IRData;//[Offset: 0x48, Size: 0x10] 0x7875c09de0

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8] 0x7875c84080
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28] 0x7875c84100
	enum BlockSize;//[Offset: 0x98, Size: 0x1] 0x7875c09ca0
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x7875c84200
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0x682a930 0x7875c93260
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0x682a888 0x7875c93340

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4] 0x7875964b80
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7875964c00
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7875964c80
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1] 0x7875964d00
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4] 0x7875964d80
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x7875964e00
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x7875964e80
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4] 0x7875964f00
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8] 0x7875964f80
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875965000

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x98, Size: 0xc] 0x7875c83d80
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa4, Size: 0xc] 0x7875c83e00
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0x682b1e8 0x7875c92ee0
	void SetInterpolationTime(float Time);// 0x682b124 0x7875c92fc0
	void SetDelay(float Length);// 0x682b07c 0x7875c930a0
	float GetMaxDelayInMilliseconds();// 0x682b1cc 0x7875c93180

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x7875964a00
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x7875964a80
	float DelayLength;//[Offset: 0x8, Size: 0x4] 0x7875964b00

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7875c83900
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0x682c048 0x7875c928c0
	void SetFilterType(enum InType);// 0x682bfa0 0x7875c929a0
	void SetFilterQMod(float InQ);// 0x682bc58 0x7875c92a80
	void SetFilterQ(float InQ);// 0x682bd00 0x7875c92b60
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0x682bda8 0x7875c92c40
	void SetFilterCutoffFrequency(float InFrequency);// 0x682be50 0x7875c92d20
	void SetFilterAlgorithm(enum InAlgorithm);// 0x682bef8 0x7875c92e00

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1] 0x787800b5a0
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1] 0x787800b640
	float FilterFrequency;//[Offset: 0x4, Size: 0x4] 0x7875964900
	float FilterQ;//[Offset: 0x8, Size: 0x4] 0x7875964980

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0x9c, Size: 0x10] 0x7875c83800
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0x682c998 0x7875c927e0

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4] 0x7875964600
	float DecayTime;//[Offset: 0x4, Size: 0x4] 0x7875964680
	float RoomDampening;//[Offset: 0x8, Size: 0x4] 0x7875964700
	int Complexity;//[Offset: 0xc, Size: 0x4] 0x7875964780

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xb0, Size: 0x20] 0x7875c83700
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0x682d2a0 0x7875c92700

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x787800b3c0
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x787800b460
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4] 0x7875966080
	bool bLinkChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875966100
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x7875966180
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x7875966200
	DynamicsBandSettings[] Bands;//[Offset: 0x10, Size: 0x10] 0x787800b500

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4] 0x7875966280
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7875966300
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4] 0x7875964280
	float ThresholdDb;//[Offset: 0xc, Size: 0x4] 0x7875964300
	float Ratio;//[Offset: 0x10, Size: 0x4] 0x7875964380
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4] 0x7875964400
	float InputGainDb;//[Offset: 0x18, Size: 0x4] 0x7875964480
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4] 0x7875964500

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24] 0x7875c83600
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0x682daa4 0x7875c92620

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1] 0x787800b280
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4] 0x7875965b00
	float Feedback;//[Offset: 0x8, Size: 0x4] 0x7875965b80
	float DelayRatio;//[Offset: 0xc, Size: 0x4] 0x7875965c00
	float WetLevel;//[Offset: 0x10, Size: 0x4] 0x7875965c80
	float DryLevel;//[Offset: 0x14, Size: 0x4] 0x7875965d00
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875965d80
	enum FilterType;//[Offset: 0x19, Size: 0x1] 0x787800b320
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4] 0x7875965e80
	float FilterQ;//[Offset: 0x20, Size: 0x4] 0x7875965f00

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18] 0x7875c85180
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0x682e750 0x7875c91f20
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0x682e9a4 0x7875c92000
	void SetInterpolationTime(float Time);// 0x682e4d4 0x7875c920e0
	void RemoveTap(int TapId);// 0x682e848 0x7875c921c0
	void GetTapIds(out int[] TapIds);// 0x682e598 0x7875c922a0
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0x682e658 0x7875c92380
	float GetMaxDelayInMilliseconds();// 0x682e57c 0x7875c92460
	void AddTap(out int TapId);// 0x682e8f0 0x7875c92540

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1] 0x787800b140
	float DelayLength;//[Offset: 0x4, Size: 0x4] 0x7875965780
	float Gain;//[Offset: 0x8, Size: 0x4] 0x7875965800
	int OutputChannel;//[Offset: 0xc, Size: 0x4] 0x7875965880
	float PanInDegrees;//[Offset: 0x10, Size: 0x4] 0x7875965900
	int TapId;//[Offset: 0x14, Size: 0x4] 0x7875965980

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4] 0x7875965600
	float InterpolationTime;//[Offset: 0x4, Size: 0x4] 0x7875965680
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10] 0x787800b1e0

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x108, Size: 0x4] 0x7875c84680
	float ValueY;//[Offset: 0x10c, Size: 0x4] 0x7875c84700
	delegate ValueXDelegate;//[Offset: 0x110, Size: 0x10] 0x7875c84780
	delegate ValueYDelegate;//[Offset: 0x120, Size: 0x10] 0x7875c84800
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x130, Size: 0x2b8] 0x7875c84880
	LinearColor SliderHandleColor;//[Offset: 0x3e8, Size: 0x10] 0x7875c84900
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1] 0x7875c84980
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1] 0x7875c84a00
	float StepSize;//[Offset: 0x3fc, Size: 0x4] 0x7875c84a80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1] 0x7875c84b00
	delegate OnMouseCaptureBegin;//[Offset: 0x408, Size: 0x10] 0x7875c84b80
	delegate OnMouseCaptureEnd;//[Offset: 0x418, Size: 0x10] 0x7875c84c00
	delegate OnControllerCaptureBegin;//[Offset: 0x428, Size: 0x10] 0x7875c84c80
	delegate OnControllerCaptureEnd;//[Offset: 0x438, Size: 0x10] 0x7875c84d00
	delegate OnValueChangedX;//[Offset: 0x448, Size: 0x10] 0x7875c84d80
	delegate OnValueChangedY;//[Offset: 0x458, Size: 0x10] 0x7875c84e00
	void SetValue(Vector2D InValue);// 0x682f644 0x7875c953a0
	void SetStepSize(float InValue);// 0x682f43c 0x7875c95480
	void SetSliderHandleColor(LinearColor InValue);// 0x682f394 0x7875c95560
	void SetLocked(bool InValue);// 0x682f4e4 0x7875c95640
	void SetIndentHandle(bool InValue);// 0x682f594 0x7875c91d60
	Vector2D GetValue();// 0x682f6e8 0x7875c91e40

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x8, Size: 0x88] 0x7875965300
	SlateBrush DisabledThumbImage;//[Offset: 0x90, Size: 0x88] 0x7875965380
	SlateBrush NormalBarImage;//[Offset: 0x118, Size: 0x88] 0x7875965400
	SlateBrush DisabledBarImage;//[Offset: 0x1a0, Size: 0x88] 0x7875965480
	SlateBrush BackgroundImage;//[Offset: 0x228, Size: 0x88] 0x7875965500
	float BarThickness;//[Offset: 0x2b0, Size: 0x4] 0x7875965580

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x6c0, Size: 0x8] 0x7875c85780
	void SetSustainGain(const float SustainGain);// 0x6835828 0x7875c94220
	void SetSoundWave(SoundWave* InSoundWave);// 0x6835a20 0x7875c94300
	void SetScrubMode(const bool bScrubMode);// 0x6834e10 0x7875c943e0
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0x6835780 0x7875c944c0
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0x6834cd4 0x7875c945a0
	void SetPlaybackSpeed(const float InPlayheadRate);// 0x68352a4 0x7875c94680
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0x68350cc 0x7875c94760
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0x683549c 0x7875c94840
	void SetGrainProbability(const float InGrainProbability);// 0x68353f4 0x7875c94920
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0x68351b8 0x7875c94a00
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0x6834fe0 0x7875c94ae0
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0x683534c 0x7875c94bc0
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0x6834ef4 0x7875c94ca0
	void SetDecayTime(const float DecayTimeMsec);// 0x68358d0 0x7875c94d80
	void SetAttackTime(const float AttackTimeMsec);// 0x6835978 0x7875c94e60
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x6835640 0x7875c94f40
	void NoteOff(const float Note, const bool bKill);// 0x6835544 0x7875c95020
	bool IsLoaded();// 0x6834c68 0x7875c95100
	float GetSampleDuration();// 0x6834ec0 0x7875c951e0
	float GetCurrentPlayheadTime();// 0x6834ca0 0x7875c952c0

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10] 0x7875c85480
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875c85500
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4] 0x7875c85580
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4] 0x7875c85600
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10] 0x7875c098e0
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x7875c85700

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x6c0, Size: 0x10] 0x7875c87980
	delegate OnNumTablesChanged;//[Offset: 0x6d0, Size: 0x10] 0x7875c87a00
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x6e0, Size: 0x8] 0x7875c87a80
	void SetWaveTablePosition(float InPosition);// 0x6838338 0x7875c98f20
	void SetSustainPedalState(bool InSustainPedalState);// 0x68385d8 0x7875c99000
	void SetPosLfoType(const enum InLfoType);// 0x6838084 0x7875c95720
	void SetPosLfoFrequency(const float InLfoFrequency);// 0x68381d4 0x7875c95800
	void SetPosLfoDepth(const float InLfoDepth);// 0x683812c 0x7875c958e0
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0x6837344 0x7875c959c0
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x683729c 0x7875c95aa0
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0x68371ec 0x7875c95b80
	void SetPositionEnvelopeDepth(const float InDepth);// 0x6837094 0x7875c95c60
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0x68373ec 0x7875c95d40
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0x683713c 0x7875c95e20
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0x6836fec 0x7875c95f00
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0x6837494 0x7875c95fe0
	void SetLowPassFilterResonance(float InNewQ);// 0x6837fdc 0x7875c960c0
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0x68383e0 0x7875c961a0
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0x6838488 0x7875c96280
	void SetFrequency(const float FrequencyHz);// 0x6838530 0x7875c96360
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0x6837894 0x7875c96440
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x68377ec 0x7875c96520
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0x683793c 0x7875c96600
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0x683773c 0x7875c966e0
	void SetFilterEnvelopeDepth(const float InDepth);// 0x68375e4 0x7875c967c0
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0x683768c 0x7875c968a0
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0x683753c 0x7875c96980
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0x68379e4 0x7875c96a60
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0x6836e70 0x7875c96b40
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0x6836c70 0x7875c96c20
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0x6836d70 0x7875c96d00
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0x6837de4 0x7875c96de0
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x6837d3c 0x7875c96ec0
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0x6837c8c 0x7875c96fa0
	void SetAmpEnvelopeDepth(const float InDepth);// 0x6837b34 0x7875c97080
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0x6837e8c 0x7875c97160
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0x6837bdc 0x7875c97240
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0x6837a8c 0x7875c97320
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0x6837f34 0x7875c93a40
	void RefreshWaveTable(int Index);// 0x6838290 0x7875c93b20
	void RefreshAllWaveTables();// 0x683827c 0x7875c93c00
	void NoteOn(const float InMidiNote, const float InVelocity);// 0x6838730 0x7875c93ce0
	void NoteOff(const float InMidiNote);// 0x6838688 0x7875c93dc0
	int GetNumTableEntries();// 0x6838820 0x7875c93ea0
	int GetMaxTableIndex();// 0x6836fb8 0x7875c93f80
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0x6836ac4 0x7875c94060
	float GetCurveTangent(int TableIndex);// 0x6836bc0 0x7875c94140

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x6c0, Size: 0x4] 0x7875c87780
	float Volume;//[Offset: 0x6c4, Size: 0x4] 0x7875c87800
	void SetVolume(float InVolume);// 0x6839a44 0x7875c98d60
	void SetFrequency(float InFrequency);// 0x6839aec 0x7875c98e40

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x6c0, Size: 0x8] 0x7875c89100
	delegate OnSampleLoaded;//[Offset: 0x6c8, Size: 0x10] 0x7875c89180
	delegate OnSamplePlaybackProgress;//[Offset: 0x6d8, Size: 0x10] 0x7875c89200
	void SetSoundWave(SoundWave* InSoundWave);// 0x683a6c4 0x7875c98580
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0x683a334 0x7875c98660
	void SetScrubMode(bool bScrubMode);// 0x683a3dc 0x7875c98740
	void SetPitch(float InPitch, float TimeSec);// 0x683a5d4 0x7875c98820
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0x683a48c 0x7875c98900
	bool IsLoaded();// 0x683a260 0x7875c989e0
	float GetSampleDuration();// 0x683a300 0x7875c98ac0
	float GetCurrentPlaybackProgressTime();// 0x683a2cc 0x7875c98ba0
	float GetCurrentPlaybackProgressPercent();// 0x683a298 0x7875c98c80

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x683b090 0x7875c983c0
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x683aec0 0x7875c984a0

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x7875c8a200
	float StepSize;//[Offset: 0x10c, Size: 0x4] 0x7875c8a280
	float MouseSpeed;//[Offset: 0x110, Size: 0x4] 0x7875c8a300
	float MouseFineTuneSpeed;//[Offset: 0x114, Size: 0x4] 0x7875c8a380
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1] 0x7875c8a400
	FText ParameterName;//[Offset: 0x120, Size: 0x18] 0x7875c8a480
	FText ParameterUnits;//[Offset: 0x138, Size: 0x18] 0x7875c8a500
	delegate ValueDelegate;//[Offset: 0x150, Size: 0x10] 0x7875c88480
	SynthKnobStyle WidgetStyle;//[Offset: 0x160, Size: 0x238] 0x7875c88500
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1] 0x7875c88580
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1] 0x7875c88600
	delegate OnMouseCaptureBegin;//[Offset: 0x3a0, Size: 0x10] 0x7875c88680
	delegate OnMouseCaptureEnd;//[Offset: 0x3b0, Size: 0x10] 0x7875c88700
	delegate OnControllerCaptureBegin;//[Offset: 0x3c0, Size: 0x10] 0x7875c88780
	delegate OnControllerCaptureEnd;//[Offset: 0x3d0, Size: 0x10] 0x7875c88800
	delegate OnValueChanged;//[Offset: 0x3e0, Size: 0x10] 0x7875c88880
	void SetValue(float InValue);// 0x683c718 0x7875c98040
	void SetStepSize(float InValue);// 0x683c5c0 0x7875c98120
	void SetLocked(bool InValue);// 0x683c668 0x7875c98200
	float GetValue();// 0x683c7c0 0x7875c982e0

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x8, Size: 0x88] 0x7875967080
	SlateBrush LargeKnobOverlay;//[Offset: 0x90, Size: 0x88] 0x7875967100
	SlateBrush MediumKnob;//[Offset: 0x118, Size: 0x88] 0x7875967180
	SlateBrush MediumKnobOverlay;//[Offset: 0x1a0, Size: 0x88] 0x7875967200
	float MinValueAngle;//[Offset: 0x228, Size: 0x4] 0x7875967280
	float MaxValueAngle;//[Offset: 0x22c, Size: 0x4] 0x7875967300
	enum KnobSize;//[Offset: 0x230, Size: 0x1] 0x787800b0a0

--------------------------------
Class: AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8] 0x7875c8a100
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4] 0x7875c8a180

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4] 0x7875c89b80
	int NumBands;//[Offset: 0x2c, Size: 0x4] 0x7875c89c00
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4] 0x7875c89c80
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4] 0x7875c89d00
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875c89d80
	enum FFTSize;//[Offset: 0x39, Size: 0x1] 0x7875c093e0
	enum WindowType;//[Offset: 0x3a, Size: 0x1] 0x7875c09480
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1] 0x7875c09520
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4] 0x7875c89f80
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1] 0x7875c095c0
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4] 0x7875c8a080

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7875c89800
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x6852f44 0x7875c97e80
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x685309c 0x7875c97f60

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4] 0x7875c89580
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4] 0x7875c89600
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4] 0x7875c89680
	enum CurveType;//[Offset: 0x34, Size: 0x1] 0x7875c09200
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4] 0x7875c89780

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7875c8b100
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x6853cc8 0x7875c97b00
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x6853b7c 0x7875c97be0
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x6853f14 0x7875c97cc0
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x6853dc8 0x7875c97da0

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c8ae80
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4] 0x7875c8af00
	float Sensitivity;//[Offset: 0x30, Size: 0x4] 0x7875c8af80
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4] 0x7875c8b000
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4] 0x7875c8b080

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8] 0x7875c8a900
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x6854908 0x7875c97940
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x6854b08 0x7875c97a20

--------------------------------
Class: FPSGameGameModeBase.GameModeBase.Info.Actor.Object

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8] 0x7875c8a880

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278] 0x7875c8a800

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580] 0x7875c8a780

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3f0] 0x7875c8a700

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8] 0x7875ff1080
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18] 0x7875fcf800
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18] 0x7875fcf900

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278] 0x7875ff0d80
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88] 0x7875ff0e00
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8] 0x7875ff0e80
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10] 0x7875ff0f00
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88] 0x7875ff0f80
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10] 0x7875ff1000

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3b8] 0x7875c8a680

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f8] 0x7875c8a600

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88] 0x7875ff3700
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88] 0x7875ff3780
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88] 0x7875ff3800
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88] 0x7875ff3880
	Margin Padding;//[Offset: 0x228, Size: 0x10] 0x7875ff3900
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x58] 0x7875ff3980
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 0x28] 0x7875ff3a00
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 0x28] 0x7875ff3a80
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 0x28] 0x7875ff3b00
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 0x10] 0x7875ff3b80
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 0x10] 0x7875ff3c00
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 0x4d0] 0x7875ff4100

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8] 0x7875fcec00
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8] 0x7875fcec80
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20] 0x7875fcef80
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8] 0x7875fcf000
	int Size;//[Offset: 0x48, Size: 0x4] 0x7875fcf080
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4] 0x7875fcf100

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4] 0x7875fced00
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7875fced80
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7875fcee00
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8] 0x7875fcee80
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10] 0x7875fcef00

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88] 0x7875ff3c80
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88] 0x7875ff3d00
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88] 0x7875ff3d80
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88] 0x7875ff3e00
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88] 0x7875ff3e80
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88] 0x7875ff3f00
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88] 0x7875ff3f80
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88] 0x7875ff4000
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88] 0x7875ff4080

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x220] 0x7875c8a580

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x7875ff1400
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x7875ff1480
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 0x88] 0x7875ff1500
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 0x88] 0x7875ff1580
	SlateBrush CaretImage;//[Offset: 0x198, Size: 0x88] 0x7875ff1600

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0] 0x7875c8c600

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88] 0x787596a480
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88] 0x787596a500
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88] 0x7875968480

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0] 0x7875c8c580

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228] 0x7875c8c500

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88] 0x7875967f00
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88] 0x7875967f80
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88] 0x7875968000
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88] 0x7875968080

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875c8c480

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8] 0x7875c8c400

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88] 0x7875ff9700
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88] 0x7875ff9780
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88] 0x7875ff9800
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88] 0x7875ff9880
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88] 0x7875ff9900
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28] 0x7875ff9980
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10] 0x7875ff9a00

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x270] 0x7875c8c380

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58] 0x7875ff4480
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28] 0x7875ff4500
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8] 0x7875ff4580
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10] 0x7875ff4600
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28] 0x7875ff4680
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10] 0x7875ff4700
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88] 0x7875ff4780
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 0x88] 0x7875ff4800
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 0x88] 0x7875ff4880

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x73f4cb8 0x7875c97860

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1] 0x787800a920
	delegate OnComplete;//[Offset: 0x4, Size: 0x10] 0x787596b280
	int CompressionQuality;//[Offset: 0x14, Size: 0x4] 0x787596b300
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x787596b380
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x787596b400

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4] 0x7875c8ce00
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4] 0x7875c8ce80
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4] 0x7875c8cf00
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4] 0x7875c8cf80
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875c8d000
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4] 0x7875c8d080
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4] 0x7875c8d100
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4] 0x7875c8d180
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4] 0x7875c8d200
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4] 0x7875c8d280
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4] 0x7875c8d300

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4] 0x7875c8cc80
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4] 0x7875c8cd00
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x7875c8cd80

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10] 0x7875c8e380
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10] 0x7875c8e400
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10] 0x7875c8e480
	FString Description;//[Offset: 0x58, Size: 0x10] 0x7875c8e500
	FString Homepage;//[Offset: 0x68, Size: 0x10] 0x7875c8e580
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10] 0x7875c8e600
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10] 0x7875c8e680
	Guid ProjectID;//[Offset: 0x98, Size: 0x10] 0x7875c8e700
	FString ProjectName;//[Offset: 0xa8, Size: 0x10] 0x7875c8c680
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10] 0x7875c8c700
	FString SupportContact;//[Offset: 0xc8, Size: 0x10] 0x7875c8c780
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18] 0x7875c8c800
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18] 0x7875c8c880
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x7875c8c900
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1] 0x7875c8c980
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1] 0x7875c8ca00
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1] 0x7875c8ca80
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x7875c8cb00
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x7875c8cb80
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x7875c8cc00

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1] 0x7875c8e280
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10] 0x7875c0b500

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4] 0x7875c8dd00
	float StaticFriction;//[Offset: 0x2c, Size: 0x4] 0x7875c8dd80
	float Restitution;//[Offset: 0x30, Size: 0x4] 0x7875c8de00
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4] 0x7875c8de80
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4] 0x7875c8df00
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4] 0x7875c8df80
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4] 0x7875c8e000

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x7abaa84 0x7875c9a960
	void StartReconstruction();// 0x7abaaa0 0x7875c9aa40
	void PauseReconstruction();// 0x7abaa68 0x7875c9ab20
	bool IsReconstructionStarted();// 0x7abaa28 0x7875c9ac00
	bool IsReconstructionPaused();// 0x7aba9e8 0x7875c9ace0
	void DisconnectMRMesh();// 0x7aba91c 0x7875c97400
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x7aba938 0x7875c974e0

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x458, Size: 0x8] 0x7875c8e980
	MaterialInterface* WireframeMaterial;//[Offset: 0x460, Size: 0x8] 0x7875c8ea00
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1] 0x7875c8ea80
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1] 0x7875c8eb00
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1] 0x7875c8eb80
	BodySetup* CachedBodySetup;//[Offset: 0x470, Size: 0x8] 0x7875c8ec00
	BodySetup*[] BodySetups;//[Offset: 0x478, Size: 0x10] 0x7875c0b460
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x7abbc70 0x7875c9a0a0
	void SetWireframeColor(out const LinearColor InColor);// 0x7abba28 0x7875c9a180
	void SetUseWireframe(bool bUseWireframe);// 0x7abbaf4 0x7875c9a260
	void SetEnableMeshOcclusion(bool bEnable);// 0x7abbbc0 0x7875c9a340
	bool IsConnected();// 0x7abbd50 0x7875c9a420
	LinearColor GetWireframeColor();// 0x7abba08 0x7875c9a500
	bool GetUseWireframe();// 0x7abbad8 0x7875c9a5e0
	bool GetEnableMeshOcclusion();// 0x7abbba4 0x7875c9a6c0
	void ForceNavMeshUpdate();// 0x7abbd3c 0x7875c9a7a0
	void Clear();// 0x7abbd20 0x7875c9a880

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x1f8, Size: 0x10] 0x7875fc3e00
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x7875fc3e80
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1] 0x7875fc3f80
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1] 0x7875fc3f00
	enum VertexColorMode;//[Offset: 0x20b, Size: 0x1] 0x7895c18440
	Color[] BlockVertexColors;//[Offset: 0x210, Size: 0x10] 0x7895c181c0
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x220, Size: 0x10] 0x7875fc4100
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x230, Size: 0x10] 0x7875fc4180
	float UpdateInterval;//[Offset: 0x240, Size: 0x4] 0x7875fc4200
	MRMeshComponent* MRMesh;//[Offset: 0x248, Size: 0x8] 0x7875fc2180
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0x6d94ba8 0x7875fad360
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x7abb3b8 0x7875fad440
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x7abb460 0x7875fad520

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x7adefd8 0x7875c99fc0

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x1f4, Size: 0x10] 0x7875cb5280
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x7875cb3200
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x240, Size: 0x8] 0x7875cb3280
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x248, Size: 0x8] 0x7875cb3300
	MRMeshComponent* MRMeshComponent;//[Offset: 0x250, Size: 0x8] 0x7875cb3380
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x258, Size: 0x8] 0x7875cb3400
	void UpdateVisualization();// 0x7ae7f08 0x7875c9d280
	void SetNativeID(Guid NativeID);// 0x7ae7f40 0x7875c9d360
	void ReceiveRemove();// 0x6d94ba8 0x7875c9d440
	void OnRep_Payload();// 0x7ae7eec 0x7875c9d520
	MRMeshComponent* GetMRMesh();// 0x7ae7f24 0x7875c9d600

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10] 0x7875d26a00
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x7875d26a80
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x7875d26b00
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x7875c0f920
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8] 0x7875d26c00
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1] 0x7875c0f9c0
	enum SpatialMeshUsageFlags;//[Offset: 0xb9, Size: 0x1] 0x7875c0fa60
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4] 0x7875d26d80
	FName DebugName;//[Offset: 0xe0, Size: 0x8] 0x7875d26e00
	bool IsTracked();// 0x7afe038 0x7875d1d600
	bool HasSpatialMeshUsageFlag(const enum InFlag);// 0x7afde14 0x7875d1d6e0
	MRMeshComponent* GetUnderlyingMesh();// 0x7afdee4 0x7875d1d7c0
	enum GetTrackingState();// 0x7afe070 0x7875d1d8a0
	enum GetObjectClassification();// 0x7afdec8 0x7875d1d980
	FString GetName();// 0x7afdf80 0x7875d1da60
	Transform GetLocalToWorldTransform();// 0x7afe110 0x7875d1db40
	Transform GetLocalToTrackingTransform();// 0x7afe0a4 0x7875d1dc20
	float GetLastUpdateTimestamp();// 0x7afdf18 0x7875d1dd00
	int GetLastUpdateFrameNumber();// 0x7afdf4c 0x7875d1dde0
	FName GetDebugName();// 0x7afe004 0x7875d1dec0

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x7ae1040 0x7875c9dde0
	static bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x7ae252c 0x7875c9dec0
	static void StopARSession();// 0x7ae2714 0x7875c9dfa0
	static void StartARSession(ARSessionConfig* SessionConfig);// 0x7ae273c 0x7875c9e080
	static void SetEnabledXRCamera(bool bOnOff);// 0x7ae248c 0x7875c9e160
	static void SetARWorldScale(float InWorldScale);// 0x7adfbe8 0x7875c9e240
	static void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x7adfc80 0x7875c9e320
	static void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x7ae230c 0x7875c9e400
	static bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x7ae0c60 0x7875c9e4e0
	static IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x7ae23d8 0x7875c9e5c0
	static void RemovePin(ARPin* PinToRemove);// 0x7ae0fa8 0x7875c9e6a0
	static void RemoveARPinFromLocalStore(FName InSaveName);// 0x7ae0bc8 0x7875c9adc0
	static void RemoveAllARPinsFromLocalStore();// 0x7ae0bb4 0x7875c9aea0
	static ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x7ae11cc 0x7875c9af80
	static bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x7ae10d8 0x7875c9b060
	static ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x7ae135c 0x7875c9b140
	static void PauseARSession();// 0x7ae2728 0x7875c9b220
	static <FName,ARPin*> LoadARPinsFromLocalStore();// 0x7ae0d54 0x7875c9b300
	static ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x7ae1c78 0x7875c9b3e0
	static ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x7ae1fe8 0x7875c9b4c0
	static bool IsSessionTypeSupported(enum SessionType);// 0x7ae18b0 0x7875c9b5a0
	static bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x7ae0344 0x7875c9b680
	static bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0x7ae024c 0x7875c9b760
	static bool IsARSupported();// 0x7ae27d4 0x7875c9b840
	static bool IsARPinLocalStoreSupported();// 0x7ae0ec0 0x7875c9b920
	static bool IsARPinLocalStoreReady();// 0x7ae0e88 0x7875c9ba00
	static enum GetWorldMappingStatus();// 0x7ae07cc 0x7875c9bae0
	static enum GetTrackingQualityReason();// 0x7ae1c10 0x7875c9bbc0
	static enum GetTrackingQuality();// 0x7ae1c44 0x7875c9bca0
	static ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x7ae0628 0x7875c9bd80
	static ARSessionConfig* GetSessionConfig();// 0x7ae2620 0x7875c9be60
	static Vector[] GetPointCloud();// 0x7ae071c 0x7875c9bf40
	static ARTexture* GetPersonSegmentationImage();// 0x7adffd4 0x7875c9c020
	static ARTexture* GetPersonSegmentationDepthImage();// 0x7adffa0 0x7875c9c100
	static bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x7adfe04 0x7875c9c1e0
	static int GetNumberOfTrackedFacesSupported();// 0x7adf58c 0x7875c9c2c0
	static ARLightEstimate* GetCurrentLightEstimate();// 0x7ae1504 0x7875c9c3a0
	static bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x7adf4b8 0x7875c9c480
	static ARTextureCameraImage* GetCameraImage();// 0x7ae1a38 0x7875c9c560
	static ARTextureCameraDepth* GetCameraDepth();// 0x7ae1a04 0x7875c9c640
	static float GetARWorldScale();// 0x7adfbb4 0x7875c9c720
	static ARTexture* GetARTexture(enum TextureType);// 0x7ae195c 0x7875c9c800
	static ARSessionStatus GetARSessionStatus();// 0x7ae2654 0x7875c9c8e0
	static ARTrackedPose*[] GetAllTrackedPoses();// 0x7ae0008 0x7875c9c9c0
	static ARTrackedPoint*[] GetAllTrackedPoints();// 0x7ae0a54 0x7875c990e0
	static ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x7ae0b04 0x7875c991c0
	static ARTrackedImage*[] GetAllTrackedImages();// 0x7ae09a4 0x7875c992a0
	static AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x7ae08f4 0x7875c99380
	static ARPose2D[] GetAllTracked2DPoses();// 0x7ae00b8 0x7875c99460
	static ARPin*[] GetAllPins();// 0x7ae0ef8 0x7875c99540
	static ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x7ae1a6c 0x7875c99620
	static ARTrackedGeometry*[] GetAllGeometries();// 0x7ae1b60 0x7875c99700
	static Transform GetAlignmentTransform();// 0x7adfb48 0x7875c997e0
	static ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x7adf8d0 0x7875c998c0
	static void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x7ae16f4 0x7875c999a0
	static void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x7ae1538 0x7875c99a80
	static void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x7adf770 0x7875c99b60
	static void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x7adf5c0 0x7875c99c40
	static bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x7adf9c4 0x7875c99d20
	static ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x7ae043c 0x7875c99e00
	static bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x7ae0800 0x7875c99ee0

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875cba080
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1] 0x7875cba100
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x7875cba180
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1] 0x7875cba200
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1] 0x7875cba280
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1] 0x7875cba300
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1] 0x7875cba380
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1] 0x7875cba400
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875cba480
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1] 0x7875cba500
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1] 0x7875c0f740
	enum SessionType;//[Offset: 0x3b, Size: 0x1] 0x7875c0cea0
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1] 0x7875c0cf40
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x7875cb8600
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1] 0x7875cb8680
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1] 0x7875cb8700
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1] 0x7875c0cfe0
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1] 0x7875c0d080
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1] 0x7875cb8880
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1] 0x7875cb8900
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x7875cb8980
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x7875cb8a00
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10] 0x7875c0d120
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4] 0x7875cb8b00
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1] 0x7875c0d1c0
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10] 0x7875c0d260
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10] 0x7875c0d300
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc] 0x7875cb8d00
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x7875cb8d80
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1] 0x7875c0d3a0
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1] 0x7875c0d440
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4] 0x7875cb8f00
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10] 0x7875c0d4e0
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1] 0x7875c0d580
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1] 0x7875c0d620
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8] 0x7875c0d6c0
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8] 0x7875c0d760
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8] 0x7875c0d800
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8] 0x7875c0d8a0
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8] 0x7875c0d940
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8] 0x7875c0d9e0
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8] 0x7875c0da80
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8] 0x7875c0db20
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8] 0x7875c0dbc0
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8] 0x7875c0dc60
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8] 0x7875cb9100
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8] 0x7875cb9180
	bool ShouldResetTrackedObjects();// 0x7af7e48 0x7875d127e0
	bool ShouldResetCameraTracking();// 0x7af7f30 0x7875d128c0
	bool ShouldRenderCameraOverlay();// 0x7af8088 0x7875d129a0
	bool ShouldEnableCameraTracking();// 0x7af8050 0x7875d12a80
	bool ShouldEnableAutoFocus();// 0x7af8018 0x7875d12b60
	void SetWorldMapData(byte[] WorldMapData);// 0x7af7a84 0x7875d12c40
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x7af74e8 0x7875d12d20
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x7af7440 0x7875d12e00
	void SetResetTrackedObjects(bool bNewValue);// 0x7af7d98 0x7875d12ee0
	void SetResetCameraTracking(bool bNewValue);// 0x7af7e80 0x7875d12fc0
	void SetFaceTrackingUpdate(enum InUpdate);// 0x7af75f8 0x7875d130a0
	void SetFaceTrackingDirection(enum InDirection);// 0x7af76d4 0x7875d13180
	void SetEnableAutoFocus(bool bNewValue);// 0x7af7f68 0x7875d13260
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x7af77b0 0x7875d13340
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x7af7940 0x7875d13420
	byte[] GetWorldMapData();// 0x7af7b80 0x7875d13500
	enum GetWorldAlignment();// 0x7af8190 0x7875d135e0
	enum GetSessionType();// 0x7af815c 0x7875d136c0
	enum GetSceneReconstructionMethod();// 0x7af7590 0x7875d137a0
	enum GetPlaneDetectionMode();// 0x7af8128 0x7875d13880
	int GetMaxNumSimultaneousImagesTracked();// 0x7af7c38 0x7875d13960
	enum GetLightEstimationMode();// 0x7af80f4 0x7875d10080
	enum GetFrameSyncMode();// 0x7af80c0 0x7875d10160
	enum GetFaceTrackingUpdate();// 0x7af76a0 0x7875d10240
	enum GetFaceTrackingDirection();// 0x7af777c 0x7875d10320
	enum GetEnvironmentCaptureProbeType();// 0x7af7c04 0x7875d10400
	enum GetEnabledSessionTrackingFeature();// 0x7af75c4 0x7875d104e0
	ARVideoFormat GetDesiredVideoFormat();// 0x7af7860 0x7875d105c0
	ARCandidateObject*[] GetCandidateObjectList();// 0x7af7a00 0x7875d106a0
	ARCandidateImage*[] GetCandidateImageList();// 0x7af7d14 0x7875d10780
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x7af7898 0x7875d10860
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x7af7c6c 0x7875d10940

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4] 0x787596f180
	int Width;//[Offset: 0x4, Size: 0x4] 0x787596f200
	int Height;//[Offset: 0x8, Size: 0x4] 0x787596f280

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10] 0x7875d40c40
	FString FriendlyName;//[Offset: 0x40, Size: 0x10] 0x7875d2a200
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c] 0x7875d2a280
	void SetFriendlyName(FString NewName);// 0x7b04d24 0x7875d1f040
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x7b04eac 0x7875d1f120
	void SetBoundingBox(out const Box InBoundingBox);// 0x7b04c48 0x7875d1f200
	FString GetFriendlyName();// 0x7b04e28 0x7875d1f2e0
	byte[] GetCandidateObjectData();// 0x7b04fbc 0x7875d1f3c0
	Box GetBoundingBox();// 0x7b04d00 0x7875d1f4a0

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8] 0x7875d28500
	FString FriendlyName;//[Offset: 0x38, Size: 0x10] 0x7875d28580
	float Width;//[Offset: 0x48, Size: 0x4] 0x7875d28600
	float Height;//[Offset: 0x4c, Size: 0x4] 0x7875d28680
	enum Orientation;//[Offset: 0x50, Size: 0x1] 0x7875d40e20
	float GetPhysicalWidth();// 0x7b04660 0x7875d1f580
	float GetPhysicalHeight();// 0x7b04644 0x7875d1f660
	enum GetOrientation();// 0x7b04628 0x7875d1f740
	FString GetFriendlyName();// 0x7b0467c 0x7875d1f820
	Texture2D* GetCandidateTexture();// 0x7b04700 0x7875d1f900

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x80] 0x7875cb4e00
	static void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x7ae89d4 0x7875c9cd40
	static void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x7ae88a8 0x7875c9ce20
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x7ae86e0 0x7875c9cf00
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x6d94ba8 0x7875c9cfe0
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x6d94ba8 0x7875c9d0c0
	static <enum,LinearColor> GetObjectClassificationDebugColors();// 0x7ae8814 0x7875c9d1a0

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596db80
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x787596dc00
	Vector Center;//[Offset: 0x50, Size: 0xc] 0x787596dc80
	Vector Extents;//[Offset: 0x5c, Size: 0xc] 0x787596dd00
	Vector[] BoundaryVertices;//[Offset: 0x68, Size: 0x10] 0x787800c900
	enum ObjectClassification;//[Offset: 0x78, Size: 0x1] 0x787800c9a0

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4] 0x787596c700
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8] 0x787596c780
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8] 0x787596c800

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x274, Size: 0x1] 0x7875cb4c00
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x7ae9554 0x7875c9caa0
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x6d94ba8 0x7875c9cb80
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x6d94ba8 0x7875c9cc60

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x274, Size: 0x1] 0x7875c0c720
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1] 0x7875cb4880
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1] 0x7875cb4900
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x278, Size: 0x40] 0x7875cb4980
	static void SetFaceComponentDebugMode(enum NewDebugMode);// 0x7ae9e80 0x7875c9fc80
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x7ae9d88 0x7875c9fd60
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x6d94ba8 0x7875c9fe40
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x6d94ba8 0x7875c9ff20

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596de80
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0xc] 0x787596df00
	Vector RightEyePosition;//[Offset: 0x24, Size: 0xc] 0x787596df80
	Vector LookAtTarget;//[Offset: 0x30, Size: 0xc] 0x787596e000

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60] 0x7875cb4580
	static void SetImageComponentDebugMode(enum NewDebugMode);// 0x7aea878 0x7875c9f900
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x7aea764 0x7875c9f9e0
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x6d94ba8 0x7875c9fac0
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x6d94ba8 0x7875c9fba0

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596e080
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x787596e100
	ARCandidateImage* DetectedImage;//[Offset: 0x50, Size: 0x8] 0x787596e180
	Vector2D EstimatedSize;//[Offset: 0x58, Size: 0x8] 0x787596e200

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70] 0x7875cb4300
	static void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x7aeb278 0x7875c9f580
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x7aeb164 0x7875c9f660
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x6d94ba8 0x7875c9f740
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x6d94ba8 0x7875c9f820

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596e280
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x787596e300
	Vector Extents;//[Offset: 0x50, Size: 0xc] 0x787596e380
	FString QRCode;//[Offset: 0x60, Size: 0x10] 0x787596e400

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x40] 0x7875cb6180
	static void SetPoseComponentDebugMode(enum NewDebugMode);// 0x7aebd98 0x7875c9f200
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x7aebc94 0x7875c9f2e0
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x6d94ba8 0x7875c9f3c0
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x6d94ba8 0x7875c9f4a0

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x787596e480
	Transform[] JointTransforms;//[Offset: 0x30, Size: 0x10] 0x787800ca40

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30] 0x7875cb5f80
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x7aec7b8 0x7875c9ef60
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x6d94ba8 0x7875c9f040
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x6d94ba8 0x7875c9f120

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x787596e580

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30] 0x7875cb5d80
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x7aed064 0x7875c9ecc0
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x6d94ba8 0x7875c9eda0
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x6d94ba8 0x7875c9ee80

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30] 0x787596e600

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60] 0x7875cb5b80
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x7aed910 0x7875c9ea20
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x6d94ba8 0x7875c9eb00
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x6d94ba8 0x7875c9ebe0

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596e680
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x787596e700
	enum ObjectClassification;//[Offset: 0x50, Size: 0x1] 0x787800cae0

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70] 0x7875cb5900
	static void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x7aee33c 0x7875d11c80
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x7aee220 0x7875c9e780
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x6d94ba8 0x7875c9e860
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x6d94ba8 0x7875c9e940

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18] 0x787596c880
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30] 0x787596c900
	float Longitude;//[Offset: 0x50, Size: 0x4] 0x787596c980
	float Latitude;//[Offset: 0x54, Size: 0x4] 0x787596ca00
	float AltitudeMeters;//[Offset: 0x58, Size: 0x4] 0x787596ca80
	enum AltitudeSource;//[Offset: 0x5c, Size: 0x1] 0x787800cb80
	FString AnchorName;//[Offset: 0x60, Size: 0x10] 0x787596cb80

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8] 0x7875cb8200
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8] 0x7875cb8280
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30] 0x7875cb8300
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30] 0x7875cb8380
	enum TrackingState;//[Offset: 0xa0, Size: 0x1] 0x7875c0bfa0
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10] 0x7875cb6380
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10] 0x7875cb6400
	enum GetTrackingState();// 0x7af6370 0x7875d10a20
	ARTrackedGeometry* GetTrackedGeometry();// 0x7af633c 0x7875d10b00
	SceneComponent* GetPinnedComponent();// 0x7af6308 0x7875d10be0
	Transform GetLocalToWorldTransform();// 0x7af63a4 0x7875d10cc0
	Transform GetLocalToTrackingTransform();// 0x7af6410 0x7875d10da0
	FName GetDebugName();// 0x7af6148 0x7875d10e80
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x7af617c 0x7875d10f60

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4] 0x787596d880
	enum TraceChannel;//[Offset: 0x4, Size: 0x1] 0x787800c860
	Transform LocalTransform;//[Offset: 0x10, Size: 0x30] 0x787596d980
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8] 0x787596da00

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x178, Size: 0x1] 0x7875c0fec0
	float Timestamp;//[Offset: 0x17c, Size: 0x4] 0x7875d25780
	Guid ExternalTextureGuid;//[Offset: 0x180, Size: 0x10] 0x7875d25800
	Vector2D Size;//[Offset: 0x190, Size: 0x8] 0x7875d25880

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8] 0x787596d700
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x8] 0x787596d780
	Vector2D PrincipalPoint;//[Offset: 0x10, Size: 0x8] 0x787596d800

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x198, Size: 0x1] 0x7875c0fd80
	enum DepthAccuracy;//[Offset: 0x199, Size: 0x1] 0x7875c0fe20
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 0x1] 0x7875d25680

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10] 0x787596f080
	enum Status;//[Offset: 0x10, Size: 0x1] 0x787800c360

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0xf8, Size: 0x50] 0x7875d27800
	ARPose3D GetTrackedPoseData();// 0x7b0163c 0x7875d1fe40

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x787596f600
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10] 0x787800c680
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x787800c720
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1] 0x787800c7c0

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4] 0x787596f480
	FName[] JointNames;//[Offset: 0x8, Size: 0x10] 0x787800c540
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10] 0x787800c5e0

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0xf8, Size: 0x1] 0x7875d413c0
	Vector Center;//[Offset: 0xfc, Size: 0xc] 0x7875d26580
	Vector Extent;//[Offset: 0x108, Size: 0xc] 0x7875d26600
	Vector[] BoundaryPolygon;//[Offset: 0x118, Size: 0x10] 0x7875d41460
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x128, Size: 0x8] 0x7875d26700
	ARPlaneGeometry* GetSubsumedBy();// 0x7afe98c 0x7875d1d1a0
	enum GetOrientation();// 0x7afe970 0x7875d1d280
	Vector GetExtent();// 0x7afea98 0x7875d1d360
	Vector GetCenter();// 0x7afeabc 0x7875d1d440
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x7afe9a8 0x7875d1d520

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0xf8, Size: 0x8] 0x7875d28400
	Vector2D EstimatedSize;//[Offset: 0x100, Size: 0x8] 0x7875d26380
	Vector2D GetEstimateSize();// 0x7aff59c 0x7875d1cfe0
	ARCandidateImage* GetDetectedImage();// 0x7aff5d0 0x7875d1d0c0

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0xf8, Size: 0xc] 0x7875d27a00
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x108, Size: 0x8] 0x7875d27a80
	Vector GetExtent();// 0x7b00adc 0x7875d1caa0
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x7b00aa8 0x7875d1cb80

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x1d0, Size: 0x1] 0x7875c0fce0
	float Timestamp;//[Offset: 0x1d4, Size: 0x4] 0x7875d25400
	Guid ExternalTextureGuid;//[Offset: 0x1d8, Size: 0x10] 0x7875d25480
	Vector2D Size;//[Offset: 0x1e8, Size: 0x8] 0x7875d25500

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28] 0x787596f300
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10] 0x787800c400
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10] 0x787800c4a0

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x7ae40d4 0x7875c9d8a0
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x7ae3fc4 0x7875c9d980
	static Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x7ae41e4 0x7875c9da60
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x7ae4304 0x7875c9db40
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x7ae4424 0x7875c9dc20
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x7ae4544 0x7875c9dd00

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7875cb3880
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7875cb3900
	static ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x7ae50c4 0x7875c9d7c0

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7875cb3580
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7875cb3600
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x7ae5650 0x7875c9d6e0

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x7aef054 0x7875d11820
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x7aef1a4 0x7875d11900
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x7aef34c 0x7875d119e0
	static ARDependencyHandler* GetARDependencyHandler();// 0x7aef60c 0x7875d11ac0
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x7aef4ac 0x7875d11ba0

--------------------------------
Class: ARGeoTrackingSupport.Object
	static ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x7af04b8 0x7875d112e0
	enum GetGeoTrackingStateReason();// 0x7af0440 0x7875d113c0
	enum GetGeoTrackingState();// 0x7af047c 0x7875d114a0
	enum GetGeoTrackingAccuracy();// 0x7af0404 0x7875d11580
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x7af0034 0x7875d11660
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x7af0248 0x7875d11740

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7875fc3700
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7875fc3780
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0x6d94ba8 0x7875facc60
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0x7af0b1c 0x7875facd40
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0x7af0c58 0x7875face20

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10] 0x7875fc3280
	delegate OnFailed;//[Offset: 0x60, Size: 0x10] 0x7875fc3300
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0x6d94ba8 0x7875facaa0
	static GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0x7af11e8 0x7875facb80

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x1f8, Size: 0x10] 0x7875fc5000
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x208, Size: 0x10] 0x7875fc5080
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0x7af4d20 0x7875fafc80
	void ServerDestroyARActor(ARActor* Actor);// 0x7af4c38 0x7875fafd60
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0x6d94ba8 0x7875fafe40
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0x6d94ba8 0x7875faff20

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4] 0x7875cb6980
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4] 0x7875cb6a00
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10] 0x7875cb6a80
	float GetAmbientIntensityLumens();// 0x7af5830 0x7875d11040
	float GetAmbientColorTemperatureKelvin();// 0x7af57fc 0x7875d11120
	LinearColor GetAmbientColor();// 0x7af57c4 0x7875d11200

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x304, Size: 0x4] 0x7875cb9e80
	void SetPreviewImageData(byte[] ImageData);// 0x7af9380 0x7875d12460
	void SetARWorldSharingIsReady();// 0x7af9270 0x7875d12540
	void SetARSharedWorldData(byte[] ARWorldData);// 0x7af9284 0x7875d12620
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x7af923c 0x7875d12700

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x288, Size: 0x10] 0x7875c0f2e0
	byte[] ARWorldData;//[Offset: 0x298, Size: 0x10] 0x7875c0f380
	int PreviewImageBytesTotal;//[Offset: 0x2a8, Size: 0x4] 0x7875cbb500
	int ARWorldBytesTotal;//[Offset: 0x2ac, Size: 0x4] 0x7875cbb580
	int PreviewImageBytesDelivered;//[Offset: 0x2b0, Size: 0x4] 0x7875cb9500
	int ARWorldBytesDelivered;//[Offset: 0x2b4, Size: 0x4] 0x7875cb9580
	void K2_OnARWorldMapIsReady();// 0x6d94ba8 0x7875d152c0

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x7afa1fc 0x7875d1e160
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x7af9f90 0x7875d1e240
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x7af9e54 0x7875d1e320
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x7afa0cc 0x7875d1e400

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x230, Size: 0x8] 0x7875d24480
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x7afaa24 0x7875d1dfa0

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x108, Size: 0x10] 0x7875d28300
	int Version;//[Offset: 0x118, Size: 0x4] 0x7875d28380

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xf8, Size: 0xc] 0x7875d27c00
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1] 0x7875d27c80
	<enum,float> BlendShapes;//[Offset: 0x108, Size: 0x50] 0x7875b1bd40
	Transform LeftEyeTransform;//[Offset: 0x190, Size: 0x30] 0x7875d27e00
	Transform RightEyeTransform;//[Offset: 0x1c0, Size: 0x30] 0x7875d27e80
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x7b0002c 0x7875d1cc60
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x7b000ec 0x7875d1cd40
	float GetBlendShapeValue(enum BlendShape);// 0x7b002e0 0x7875d1ce20
	<enum,float> GetBlendShapes();// 0x7b001a8 0x7875d1cf00

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xf8, Size: 0x8] 0x7875d27900
	ARCandidateObject* GetDetectedObject();// 0x7b0104c 0x7875d1ff20

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x7b01be8 0x7875d1fd60

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x7b02314 0x7875d1f9e0
	float GetLatitude();// 0x7b022f8 0x7875d1fac0
	enum GetAltitudeSource();// 0x7b022c0 0x7875d1fba0
	float GetAltitudeMeters();// 0x7b022dc 0x7875d1fc80

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10] 0x7875d28a00
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10] 0x7875d28a80
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10] 0x7875d28b00
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10] 0x7875d28b80
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10] 0x7875d28c00
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10] 0x7875d28c80
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10] 0x7875d28d00
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10] 0x7875d28d80
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10] 0x7875d28e00
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10] 0x7875d28e80
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10] 0x7875d28f00
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10] 0x7875d28f80
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10] 0x7875d29000
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10] 0x7875d29080
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10] 0x7875d29100
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10] 0x7875d29180
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10] 0x7875d29200
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10] 0x7875d29280
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10] 0x7875d29300
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10] 0x7875d29380
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10] 0x7875d29400

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x7b349cc 0x78e2293880
	static void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x7b338c4 0x78e2293960
	static void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x7b339dc 0x78e2290080
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x7b34d90 0x78e2290160
	static void SetTrackingOrigin(byte Origin);// 0x7b34c50 0x78e2290240
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0x7b34768 0x78e2290320
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x7b3451c 0x78e2290400
	static void SetSpectatorScreenMode(enum Mode);// 0x7b34800 0x78e22904e0
	static void SetClippingPlanes(float Near, float Far);// 0x7b34edc 0x78e22905c0
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0x7b34fbc 0x78e22906a0
	static bool IsSpectatorScreenModeControllable();// 0x7b34898 0x78e2290780
	static bool IsInLowPersistenceMode();// 0x7b35130 0x78e2290860
	static bool IsHeadMountedDisplayEnabled();// 0x7b35b48 0x78e2290940
	static bool IsHeadMountedDisplayConnected();// 0x7b35b10 0x78e2290a20
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x7b33f00 0x78e2290b00
	static bool HasValidTrackingPosition();// 0x7b357e4 0x78e2290be0
	static int GetXRSystemFlags();// 0x7b359f4 0x78e2290cc0
	static float GetWorldToMetersScale(Object* WorldContext);// 0x7b34ce8 0x78e2290da0
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x7b348d0 0x78e2290e80
	static FString GetVersionString();// 0x7b35944 0x78e2290f60
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x7b34b64 0x78e2291040
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x7b353dc 0x78e2291120
	static byte GetTrackingOrigin();// 0x7b34c1c 0x78e2291200
	static float GetScreenPercentage();// 0x7b34ea8 0x78e22912e0
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x7b35148 0x78e22913c0
	static Vector2D GetPlayAreaBounds(byte Origin);// 0x7b333b4 0x78e22914a0
	static float GetPixelDensity();// 0x7b34e74 0x78e2291580
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x7b3581c 0x78e2291660
	static int GetNumOfTrackingSensors();// 0x7b357b0 0x78e2291740
	static void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x7b33c74 0x78e2291820
	static byte GetHMDWornState();// 0x7b35910 0x78e2291900
	static FName GetHMDDeviceName();// 0x7b35a28 0x78e22919e0
	static void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x7b33e00 0x78e2291ac0
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x7b33fbc 0x78e2291ba0
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x7b341ec 0x78e2291c80
	static bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec);// 0x7b3345c 0x7875d1e780
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x7b343dc 0x7875d1e860
	static void EnableLowPersistenceMode(bool bEnable);// 0x7b350a0 0x7875d1e940
	static bool EnableHMD(bool bEnable);// 0x7b35a5c 0x7875d1ea20
	static void DisconnectRemoteXRDevice();// 0x7b33a9c 0x7875d1eb00
	static byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0x7b33ab0 0x7875d1ebe0
	static bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x7b33bb0 0x7875d1ecc0
	static void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x7b33820 0x7875d1eda0
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x7b34a98 0x7875d1ee80
	static void BreakKey(Key InKey, out FString InteractionProfile, out enum Hand, out FName MotionSource, out FString Indentifier, out FString Component);// 0x7b33074 0x7875d1ef60

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8] 0x787596fe00
	int DeviceID;//[Offset: 0x8, Size: 0x4] 0x787596fe80

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596e980
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x787596ea00
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x787596ea80
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1] 0x787800bfa0
	enum HandIndex;//[Offset: 0x1d, Size: 0x1] 0x787800c040
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1] 0x787800c0e0
	Vector GripPosition;//[Offset: 0x20, Size: 0xc] 0x787596ec80
	Quat GripRotation;//[Offset: 0x30, Size: 0x10] 0x787596ed00
	Vector AimPosition;//[Offset: 0x40, Size: 0xc] 0x787596ed80
	Quat AimRotation;//[Offset: 0x50, Size: 0x10] 0x787596ee00
	Vector[] HandKeyPositions;//[Offset: 0x60, Size: 0x10] 0x787800c180
	Quat[] HandKeyRotations;//[Offset: 0x70, Size: 0x10] 0x787800c220
	float[] HandKeyRadii;//[Offset: 0x80, Size: 0x10] 0x787800c2c0
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x787596f000

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596ff00
	FName DeviceName;//[Offset: 0x4, Size: 0x8] 0x787596ff80
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10] 0x787596e780
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1] 0x787800bf00
	Vector Position;//[Offset: 0x20, Size: 0xc] 0x787596e880
	Quat Rotation;//[Offset: 0x30, Size: 0x10] 0x787596e900

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787596fb00
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x787596fb80
	enum AxisGesture;//[Offset: 0x2, Size: 0x1] 0x787800be60
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x787596fc80
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x787596fd00
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x787596fd80

--------------------------------
Class: HandKeypointConversion.BlueprintFunctionLibrary.Object
	static int Conv_HandKeypointToInt32(enum Input);// 0x7b37d40 0x78e22937a0

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x448, Size: 0x4] 0x7875d2e080
	enum Hand;//[Offset: 0x44c, Size: 0x1] 0x7875d40560
	FName MotionSource;//[Offset: 0x450, Size: 0x8] 0x7875d2e180
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1] 0x7875d2e200
	enum CurrentTrackingStatus;//[Offset: 0x459, Size: 0x1] 0x7875d40600
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 0x1] 0x7875d2e300
	FName DisplayModelSource;//[Offset: 0x45c, Size: 0x8] 0x7875d2e380
	StaticMesh* CustomDisplayMesh;//[Offset: 0x468, Size: 0x8] 0x7875d2e400
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x470, Size: 0x10] 0x7875d406a0
	PrimitiveComponent* DisplayComponent;//[Offset: 0x4e0, Size: 0x8] 0x7875d2e500
	void SetTrackingSource(const enum NewSource);// 0x7b3885c 0x78e2292e00
	void SetTrackingMotionSource(const FName NewSource);// 0x7b38780 0x78e2292ee0
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x7b38a54 0x78e2292fc0
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x7b389ac 0x78e22930a0
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x7b38904 0x78e2293180
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x7b386d8 0x78e2293260
	void OnMotionControllerUpdated();// 0x6d94ba8 0x78e2293340
	bool IsTracked();// 0x7b38b04 0x78e2293420
	enum GetTrackingSource();// 0x7b38828 0x78e2293500
	float GetParameterValue(FName InName, out bool bValueFound);// 0x7b385d0 0x78e22935e0
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x7b384c4 0x78e22936c0

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x7b39e30 0x78e2291e40
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x7b39bd8 0x78e2291f20
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x7b39cd0 0x78e2292000
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x7b39b2c 0x78e22920e0
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0x7b39ed0 0x78e22921c0
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x7b393a8 0x78e22922a0
	static int GetMotionTrackingEnabledControllerCount();// 0x7b39dc8 0x78e2292380
	static int GetMaximumMotionTrackedControllerCount();// 0x7b39dfc 0x78e2292460
	static FName GetActiveTrackingSystemName();// 0x7b394a0 0x78e2292540
	static FName[] EnumerateMotionSources();// 0x7b394d4 0x78e2292620
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x7b3993c 0x78e2292700
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x7b39a34 0x78e22927e0
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x7b39890 0x78e22928c0
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x7b396c8 0x78e22929a0
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x7b397ac 0x78e2292a80
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x7b39584 0x78e2292b60
	static void DisableMotionTrackingOfAllControllers();// 0x7b3961c 0x78e2292c40
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x7b39630 0x78e2292d20

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10] 0x7875fc4680
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10] 0x7875fc4700
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10] 0x7875fc4780
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10] 0x7875fc4800
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10] 0x7875fc4880
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10] 0x7875fc4900
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10] 0x7875fc4980
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10] 0x7875fc4a00
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10] 0x7875fc4a80

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	static PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x7b3acc0 0x78e2295640
	static PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x7b3af20 0x78e2291d60

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10] 0x7875d2fb00
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10] 0x7875d2fb80
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8] 0x7875d2fc00
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x7b3b7d8 0x78e2295480
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x7b3b5c8 0x78e2295560

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowLoadingScreen();// 0x7b3c244 0x78e2295020
	static void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x7b3c47c 0x78e2295100
	static void HideLoadingScreen();// 0x7b3c230 0x78e22951e0
	static void ClearLoadingScreenSplashes();// 0x7b3c468 0x78e22952c0
	static void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x7b3c258 0x78e22953a0

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0x7b3eef4 0x78e2294bc0
	static bool IsStereoGazeDataAvailable();// 0x7b3f10c 0x78e2294ca0
	static bool IsEyeTrackerConnected();// 0x7b3f144 0x78e2294d80
	static bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0x7b3ef8c 0x78e2294e60
	static bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0x7b3f04c 0x78e2294f40

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0xc] 0x787596f800
	Vector LeftEyeDirection;//[Offset: 0xc, Size: 0xc] 0x787596f880
	Vector RightEyeOrigin;//[Offset: 0x18, Size: 0xc] 0x787596f900
	Vector RightEyeDirection;//[Offset: 0x24, Size: 0xc] 0x787596f980
	Vector FixationPoint;//[Offset: 0x30, Size: 0xc] 0x787596fa00
	float ConfidenceValue;//[Offset: 0x3c, Size: 0x4] 0x787596fa80

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0xc] 0x78759c0f00
	Vector GazeDirection;//[Offset: 0xc, Size: 0xc] 0x78759c0f80
	Vector FixationPoint;//[Offset: 0x18, Size: 0xc] 0x78759c1000
	float ConfidenceValue;//[Offset: 0x24, Size: 0x4] 0x78759c1080

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x670, Size: 0x10] 0x78e22b3900
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x680, Size: 0x10] 0x78e22b3980
	Guid GenerationGuid;//[Offset: 0x690, Size: 0x10] 0x78e22b3a00

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x81d3ff8 0x78e2297080
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x81d3eb4 0x78e2297160

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10] 0x78e22b6a80
	float Density;//[Offset: 0x38, Size: 0x4] 0x78e22b6b00
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4] 0x78e22b6b80
	float Radius;//[Offset: 0x40, Size: 0x4] 0x78e22b6c00
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78e22b6c80
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4] 0x78e22b6d00
	enum Scaling;//[Offset: 0x4c, Size: 0x1] 0x7875d41f00
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8] 0x78e22b6e00
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8] 0x78e22b6e80
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8] 0x78e22b6f00
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc] 0x78e22b6f80
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1] 0x78e22b7000
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4] 0x78e22b7080
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e22b7100
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8] 0x78e22b7180
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78e22b7200
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4] 0x78e22b7280
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1] 0x78e22b7300
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4] 0x78e22b7380
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8] 0x78e22b5300
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8] 0x78e22b5380
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10] 0x7875d41fa0
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4] 0x78e22b5480
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10] 0x7875d42040
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4] 0x78e22b5580
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8] 0x78e22b5600
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1] 0x78e22b5680
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc] 0x78e22b5700
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c] 0x78e22b5780
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc] 0x78e22b5800
	byte Mobility;//[Offset: 0x13c, Size: 0x1] 0x78e22b5880
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8] 0x78e22b5900
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1] 0x78e22b5980
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1] 0x78e22b5a00
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1] 0x78e22b5a80
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1] 0x78e22b5b00
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1] 0x78e22b5b80
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1] 0x78e22b5c00
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1] 0x78e22b5c80
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1] 0x78e22b5d00
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1] 0x78e22b5d80
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4] 0x78e22b5e00
	enum LightmapType;//[Offset: 0x150, Size: 0x1] 0x7875d420e0
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1] 0x78e22b5f00
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1] 0x78e22b5f80
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x151, Size: 0x1] 0x78e22b6000
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x150] 0x78e22b6080
	byte CustomNavigableGeometry;//[Offset: 0x2a8, Size: 0x1] 0x78e22b6100
	LightingChannels LightingChannels;//[Offset: 0x2a9, Size: 0x1] 0x78e22b6180
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2aa, Size: 0x1] 0x78e22b6200
	enum CustomDepthStencilWriteMask;//[Offset: 0x2ab, Size: 0x1] 0x7875d42180
	int CustomDepthStencilValue;//[Offset: 0x2ac, Size: 0x4] 0x78e22b6300
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4] 0x78e22b4280
	float CollisionRadius;//[Offset: 0x2b4, Size: 0x4] 0x78e22b4300
	float ShadeRadius;//[Offset: 0x2b8, Size: 0x4] 0x78e22b4380
	int NumSteps;//[Offset: 0x2bc, Size: 0x4] 0x78e22b4400
	float InitialSeedDensity;//[Offset: 0x2c0, Size: 0x4] 0x78e22b4480
	float AverageSpreadDistance;//[Offset: 0x2c4, Size: 0x4] 0x78e22b4500
	float SpreadVariance;//[Offset: 0x2c8, Size: 0x4] 0x78e22b4580
	int SeedsPerStep;//[Offset: 0x2cc, Size: 0x4] 0x78e22b4600
	int DistributionSeed;//[Offset: 0x2d0, Size: 0x4] 0x78e22b4680
	float MaxInitialSeedOffset;//[Offset: 0x2d4, Size: 0x4] 0x78e22b4700
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1] 0x78e22b4780
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1] 0x78e22b4800
	float MaxInitialAge;//[Offset: 0x2dc, Size: 0x4] 0x78e22b4880
	float MaxAge;//[Offset: 0x2e0, Size: 0x4] 0x78e22b4900
	float OverlapPriority;//[Offset: 0x2e4, Size: 0x4] 0x78e22b4980
	FloatInterval ProceduralScale;//[Offset: 0x2e8, Size: 0x8] 0x78e22b4a00
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x2f0, Size: 0x88] 0x78e22b4a80
	int ChangeCount;//[Offset: 0x378, Size: 0x4] 0x78e22b4b00
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1] 0x78e22b4b80
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1] 0x78e22b4c00
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1] 0x78e22b4c80
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1] 0x78e22b4d00
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37c, Size: 0x1] 0x78e22b4d80
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37c, Size: 0x1] 0x78e22b4e00
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37c, Size: 0x1] 0x78e22b4e80
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37c, Size: 0x1] 0x78e22b4f00
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37d, Size: 0x1] 0x78e22b4f80
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37d, Size: 0x1] 0x78e22b5000
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37d, Size: 0x1] 0x78e22b5080
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37d, Size: 0x1] 0x78e22b5100
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37d, Size: 0x1] 0x78e22b5180
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37d, Size: 0x1] 0x78e22b5200
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37d, Size: 0x1] 0x78e22b5280
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37d, Size: 0x1] 0x78e22b3200
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37e, Size: 0x1] 0x78e22b3280
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x380, Size: 0x10] 0x7875d42220
	int VirtualTextureCullMips;//[Offset: 0x390, Size: 0x4] 0x78e22b3380
	enum VirtualTextureRenderPassType;//[Offset: 0x394, Size: 0x1] 0x7875d422c0

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x78759c2080
	float MaskThreshold;//[Offset: 0x4, Size: 0x4] 0x78759c2100
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78759c0080

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x398, Size: 0x8] 0x7875d41e60
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1] 0x78e22b6a00

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x398, Size: 0x8] 0x78e22b6900
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x3a0, Size: 0x10] 0x7875d41d20
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x3b0, Size: 0x8] 0x7875d41dc0

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x78e22b7e00
	Vector TouchingActorEntryPosition;//[Offset: 0x238, Size: 0xc] 0x78e22b7e80
	Vector FoliageVelocity;//[Offset: 0x244, Size: 0xc] 0x78e22b7f00
	Vector FoliageForce;//[Offset: 0x250, Size: 0xc] 0x78e22b7f80
	Vector FoliagePosition;//[Offset: 0x25c, Size: 0xc] 0x78e22b8000
	float FoliageDamageImpulseScale;//[Offset: 0x268, Size: 0x4] 0x78e22b8080
	float FoliageTouchImpulseScale;//[Offset: 0x26c, Size: 0x4] 0x78e22b8100
	float FoliageStiffness;//[Offset: 0x270, Size: 0x4] 0x78e22b8180
	float FoliageStiffnessQuadratic;//[Offset: 0x274, Size: 0x4] 0x78e22b8200
	float FoliageDamping;//[Offset: 0x278, Size: 0x4] 0x78e22b8280
	float MaxDamageImpulse;//[Offset: 0x27c, Size: 0x4] 0x78e22b8300
	float MaxTouchImpulse;//[Offset: 0x280, Size: 0x4] 0x78e22b8380
	float MaxForce;//[Offset: 0x284, Size: 0x4] 0x78e22b8400
	float Mass;//[Offset: 0x288, Size: 0x4] 0x78e22b6380
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x81d6118 0x78e2296ec0

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x258, Size: 0x8] 0x78e22b7800

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x258, Size: 0x8] 0x78e22b9280

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8] 0x78e22b7600
	float TileOverlap;//[Offset: 0xb8, Size: 0x4] 0x78e22b7680
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8] 0x78e22b7700
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10] 0x78e22b7780

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4] 0x78e22b9400
	float TileSize;//[Offset: 0x2c, Size: 0x4] 0x78e22b9480
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4] 0x78e22b7400
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4] 0x78e22b7480
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10] 0x7875d41b40
	void Simulate(int NumSteps);// 0x81d7860 0x78e2296de0

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8] 0x78759c1f00
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8] 0x78759c1f80
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x78759c2000
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8] 0x787800bdc0

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8] 0x78e22b9300
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10] 0x7875d41aa0

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x10] 0x78759c1c00
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x78759c1c80
	float Age;//[Offset: 0x1c, Size: 0x4] 0x78759c1d00
	Vector Normal;//[Offset: 0x20, Size: 0xc] 0x78759c1d80
	float Scale;//[Offset: 0x2c, Size: 0x4] 0x78759c1e00
	FoliageType* Type;//[Offset: 0x30, Size: 0x8] 0x78759c1e80

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x220, Size: 0x8] 0x78e22b9200

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4d8, Size: 0x4] 0x78e22b9180

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x220, Size: 0x8] 0x78e22ba580
	Guid LandscapeGuid;//[Offset: 0x228, Size: 0x10] 0x78e22ba600
	IntPoint LandscapeSectionOffset;//[Offset: 0x238, Size: 0x8] 0x78e22ba680
	int MaxLODLevel;//[Offset: 0x240, Size: 0x4] 0x78e22ba700
	float LODDistanceFactor;//[Offset: 0x244, Size: 0x4] 0x78e22ba780
	byte LODFalloff;//[Offset: 0x248, Size: 0x1] 0x78e22ba800
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x24c, Size: 0x4] 0x78e22ba880
	float LOD0ScreenSize;//[Offset: 0x250, Size: 0x4] 0x78e22ba900
	float LOD0DistributionSetting;//[Offset: 0x254, Size: 0x4] 0x78e22ba980
	float LODDistributionSetting;//[Offset: 0x258, Size: 0x4] 0x78e22baa00
	float TessellationComponentScreenSize;//[Offset: 0x25c, Size: 0x4] 0x78e22baa80
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78e22bab00
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x264, Size: 0x4] 0x78e22bab80
	int OccluderGeometryLOD;//[Offset: 0x268, Size: 0x4] 0x78e22bac00
	int StaticLightingLOD;//[Offset: 0x26c, Size: 0x4] 0x78e22bac80
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x270, Size: 0x8] 0x78e22bad00
	float StreamingDistanceMultiplier;//[Offset: 0x278, Size: 0x4] 0x78e22bad80
	MaterialInterface* LandscapeMaterial;//[Offset: 0x280, Size: 0x8] 0x78e22bae00
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2a8, Size: 0x8] 0x78e22bae80
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b0, Size: 0x10] 0x7875d415a0
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78e22baf80
	byte MeshHolesMaxLod;//[Offset: 0x2c1, Size: 0x1] 0x78e22bb000
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2c8, Size: 0x10] 0x7875d41640
	int VirtualTextureNumLods;//[Offset: 0x2d8, Size: 0x4] 0x78e22bb100
	int VirtualTextureLodBias;//[Offset: 0x2dc, Size: 0x4] 0x78e22bb180
	enum VirtualTextureRenderPassType;//[Offset: 0x2e0, Size: 0x1] 0x7875d416e0
	float NegativeZBoundsExtension;//[Offset: 0x2e4, Size: 0x4] 0x78e22bb280
	float PositiveZBoundsExtension;//[Offset: 0x2e8, Size: 0x4] 0x78e22bb300
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f0, Size: 0x10] 0x7875d41780
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x300, Size: 0x10] 0x7875d41820
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x310, Size: 0x10] 0x7875d418c0
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1] 0x78e22bb500
	float StaticLightingResolution;//[Offset: 0x388, Size: 0x4] 0x78e22bb580
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1] 0x78e22b9500
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1] 0x78e22b9580
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1] 0x78e22b9600
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1] 0x78e22b9680
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1] 0x78e22b9700
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1] 0x78e22b9780
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1] 0x78e22b9800
	LightingChannels LightingChannels;//[Offset: 0x38d, Size: 0x1] 0x78e22b9880
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1] 0x78e22b9900
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1] 0x78e22b9980
	enum CustomDepthStencilWriteMask;//[Offset: 0x38f, Size: 0x1] 0x7875d41960
	int CustomDepthStencilValue;//[Offset: 0x390, Size: 0x4] 0x78e22b9a80
	float LDMaxDrawDistance;//[Offset: 0x394, Size: 0x4] 0x78e22b9b00
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x398, Size: 0x18] 0x78e22b9b80
	int CollisionMipLevel;//[Offset: 0x3b0, Size: 0x4] 0x78e22b9c00
	int SimpleCollisionMipLevel;//[Offset: 0x3b4, Size: 0x4] 0x78e22b9c80
	float CollisionThickness;//[Offset: 0x3b8, Size: 0x4] 0x78e22b9d00
	BodyInstance BodyInstance;//[Offset: 0x3c0, Size: 0x150] 0x78e22b9d80
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1] 0x78e22b9e00
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510, Size: 0x1] 0x78e22b9e80
	int ComponentSizeQuads;//[Offset: 0x514, Size: 0x4] 0x78e22b9f00
	int SubsectionSizeQuads;//[Offset: 0x518, Size: 0x4] 0x78e22b9f80
	int NumSubsections;//[Offset: 0x51c, Size: 0x4] 0x78e22ba000
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1] 0x78e22ba080
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1] 0x78e22ba100
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1] 0x78e22ba180
	enum NavigationGeometryGatheringMode;//[Offset: 0x522, Size: 0x1] 0x7875d41a00
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x523, Size: 0x1] 0x78e22ba280
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1] 0x78e22ba300
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x528, Size: 0x50] 0x7875b1bc80
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x8231974 0x78e2296440
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x8231a64 0x78e2296520
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x8231880 0x78e2296600
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x8231728 0x78e22966e0
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x8231f30 0x78e22967c0
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x8231b54 0x78e22968a0
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x8232088 0x78e2296980
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x8231fd8 0x78e2296a60
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x82321f0 0x78e2296b40
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x82322a0 0x78e2296c20
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x8232140 0x78e2296d00

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x448, Size: 0x10] 0x7875d42ae0
	LandscapeSplineSegment*[] Segments;//[Offset: 0x458, Size: 0x10] 0x7875d42b80
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x468, Size: 0x10] 0x7875d42c20
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x8235ad8 0x78e2298e40

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc] 0x78e22c1000
	Rotator Rotation;//[Offset: 0x34, Size: 0xc] 0x78e22c1080
	float Width;//[Offset: 0x40, Size: 0x4] 0x78e22bf800
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4] 0x78e22bf880
	float SideFalloff;//[Offset: 0x48, Size: 0x4] 0x78e22bf900
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4] 0x78e22bf980
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4] 0x78e22bfa00
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4] 0x78e22bfa80
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4] 0x78e22bfb00
	float EndFalloff;//[Offset: 0x5c, Size: 0x4] 0x78e22bfb80
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10] 0x7875d42d60
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x7875d42e00
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78e22bfd00
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8] 0x78e22bfd80

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8] 0x78759c4100
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1] 0x78759c4180

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18] 0x78e22c0b80
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18] 0x78e22c0c00
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10] 0x7875d429a0
	Box Bounds;//[Offset: 0x80, Size: 0x1c] 0x78e22c0d00
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10] 0x7875d42a40

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8] 0x78759c3b00
	float TangentLen;//[Offset: 0x8, Size: 0x4] 0x78759c3b80
	FName SocketName;//[Offset: 0xc, Size: 0x8] 0x78759c3c00

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc] 0x78759c3600
	Vector Left;//[Offset: 0xc, Size: 0xc] 0x78759c3680
	Vector Right;//[Offset: 0x18, Size: 0xc] 0x78759c3700
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc] 0x78759c3780
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc] 0x78759c3800
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc] 0x78759c3880
	Vector LayerRight;//[Offset: 0x48, Size: 0xc] 0x78759c3900
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc] 0x78759c3980
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc] 0x78759c3a00
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4] 0x78759c3a80

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8] 0x78e22bdd80
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8] 0x78e22bde00
	float Hardness;//[Offset: 0x38, Size: 0x4] 0x78e22bde80
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10] 0x78e22bdf00

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78759c2180
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78759c2200

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x448, Size: 0x4] 0x78e22bcc80
	int SectionBaseY;//[Offset: 0x44c, Size: 0x4] 0x78e22bcd00
	int ComponentSizeQuads;//[Offset: 0x450, Size: 0x4] 0x78e22bcd80
	int SubsectionSizeQuads;//[Offset: 0x454, Size: 0x4] 0x78e22bce00
	int NumSubsections;//[Offset: 0x458, Size: 0x4] 0x78e22bce80
	MaterialInterface* OverrideMaterial;//[Offset: 0x460, Size: 0x8] 0x78e22bcf00
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x468, Size: 0x8] 0x78e22bcf80
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x470, Size: 0x10] 0x7875d43800
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x480, Size: 0x10] 0x7875d438a0
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x490, Size: 0x10] 0x7875d43940
	int8[] LODIndexToMaterialIndex;//[Offset: 0x4a0, Size: 0x10] 0x7875d439e0
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4b0, Size: 0x10] 0x7875d43a80
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4c0, Size: 0x8] 0x78e22bd280
	Vector4 WeightmapScaleBias;//[Offset: 0x4d0, Size: 0x10] 0x78e22bd300
	float WeightmapSubsectionOffset;//[Offset: 0x4e0, Size: 0x4] 0x78e22bd380
	Vector4 HeightmapScaleBias;//[Offset: 0x4f0, Size: 0x10] 0x78e22bd400
	Box CachedLocalBox;//[Offset: 0x500, Size: 0x1c] 0x78e22bd480
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x51c, Size: 0x1c] 0x78e22bd500
	Texture2D* HeightmapTexture;//[Offset: 0x538, Size: 0x8] 0x78e22bd580
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x540, Size: 0x10] 0x7875d43b20
	Texture2D*[] WeightmapTextures;//[Offset: 0x550, Size: 0x10] 0x7875d43bc0
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x560, Size: 0x8] 0x78e22bb600
	Guid MapBuildDataId;//[Offset: 0x568, Size: 0x10] 0x78e22bb680
	Guid[] IrrelevantLights;//[Offset: 0x578, Size: 0x10] 0x7875d43c60
	int CollisionMipLevel;//[Offset: 0x588, Size: 0x4] 0x78e22bb780
	int SimpleCollisionMipLevel;//[Offset: 0x58c, Size: 0x4] 0x78e22bb800
	float NegativeZBoundsExtension;//[Offset: 0x590, Size: 0x4] 0x78e22bb880
	float PositiveZBoundsExtension;//[Offset: 0x594, Size: 0x4] 0x78e22bb900
	float StaticLightingResolution;//[Offset: 0x598, Size: 0x4] 0x78e22bb980
	int ForcedLOD;//[Offset: 0x59c, Size: 0x4] 0x78e22bba00
	int LODBias;//[Offset: 0x5a0, Size: 0x4] 0x78e22bba80
	Guid StateId;//[Offset: 0x5a4, Size: 0x10] 0x78e22bbb00
	Guid BakedTextureMaterialGuid;//[Offset: 0x5b4, Size: 0x10] 0x78e22bbb80
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5c8, Size: 0x8] 0x78e22bbc00
	byte MobileBlendableLayerMask;//[Offset: 0x5d0, Size: 0x1] 0x78e22bbc80
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5d8, Size: 0x8] 0x78e22bbd00
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5e0, Size: 0x10] 0x7875d43d00
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5f0, Size: 0x10] 0x7875d43da0
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x8229e9c 0x78e2295e20
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x8229c94 0x78e2295f00
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x8229d98 0x78e2295fe0

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4] 0x78759c1180
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8] 0x78759c1200

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x448, Size: 0x10] 0x7875d43580
	int SectionBaseX;//[Offset: 0x458, Size: 0x4] 0x78e22be380
	int SectionBaseY;//[Offset: 0x45c, Size: 0x4] 0x78e22be400
	int CollisionSizeQuads;//[Offset: 0x460, Size: 0x4] 0x78e22be480
	float CollisionScale;//[Offset: 0x464, Size: 0x4] 0x78e22be500
	int SimpleCollisionSizeQuads;//[Offset: 0x468, Size: 0x4] 0x78e22be580
	byte[] CollisionQuadFlags;//[Offset: 0x470, Size: 0x10] 0x7875d43620
	Guid HeightfieldGuid;//[Offset: 0x480, Size: 0x10] 0x78e22be680
	Box CachedLocalBox;//[Offset: 0x490, Size: 0x1c] 0x78e22be700
	LandscapeComponent* RenderComponent;//[Offset: 0x4ac, Size: 0x1c] 0x78e22bc680
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4d8, Size: 0x10] 0x7875d436c0
	LandscapeComponent* GetRenderComponent();// 0x822baa4 0x78e2295d40

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8] 0x78759c1400
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1] 0x78759c1480
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1] 0x78759c1500

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8] 0x78e22c0a00
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10] 0x78e22c0a80

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0x82283e4 0x78e22960c0
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x822857c 0x78e22961a0
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x82283f8 0x78e2296280
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x6d94ba8 0x78e2296360

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c] 0x78e22bdf80
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10] 0x78e22be000
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4] 0x78e22be080
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4] 0x78e22be100
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4] 0x78e22be180
	Vector DrawScale;//[Offset: 0x60, Size: 0xc] 0x78e22be200
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10] 0x7875d434e0

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x578, Size: 0x1c] 0x78e22c0b00

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x318, Size: 0x10] 0x7875d42f40
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1] 0x78e22be900
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1] 0x78e22be980
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1] 0x78e22bea00
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 0x1] 0x78e22bea80

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8] 0x78759c2280
	float TexelFactor;//[Offset: 0x8, Size: 0x4] 0x78759c2300

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x528, Size: 0x10] 0x78e22be800

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x220, Size: 0x8] 0x78e22be780

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x4d8, Size: 0x10] 0x78e22bfe80
	IntPoint[] ProxyComponentBases;//[Offset: 0x4e8, Size: 0x10] 0x7875d42ea0
	int8 ProxyLOD;//[Offset: 0x4f8, Size: 0x1] 0x78e22bff80

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4] 0x78e22bfe00

--------------------------------
Class: LandscapeSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10] 0x7875d45240

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8] 0x78759c3480
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8] 0x78759c3500
	ExpressionInput Input;//[Offset: 0x10, Size: 0x14] 0x78759c3580

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10] 0x7875d451a0
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10] 0x78e22c0900

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8] 0x78759c5200
	byte BlendType;//[Offset: 0x8, Size: 0x1] 0x78759c5280
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0x14] 0x78759c3200
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0x14] 0x78759c3280
	float PreviewWeight;//[Offset: 0x34, Size: 0x4] 0x78759c3300
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc] 0x78759c3380
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4] 0x78759c3400

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1] 0x78e22c0580
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1] 0x78e22c0600
	float MappingScale;//[Offset: 0x3c, Size: 0x4] 0x78e22c0680
	float MappingRotation;//[Offset: 0x40, Size: 0x4] 0x78e22c0700
	float MappingPanU;//[Offset: 0x44, Size: 0x4] 0x78e22c0780
	float MappingPanV;//[Offset: 0x48, Size: 0x4] 0x78e22c0800

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8] 0x78e22c0400
	float PreviewWeight;//[Offset: 0x44, Size: 0x4] 0x78e22c0480
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10] 0x78e22c0500

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0x14] 0x78e22c0180
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0x14] 0x78e22c0200
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78e22c0280
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1] 0x78e22c0300
	Guid ExpressionGUID;//[Offset: 0x70, Size: 0x10] 0x78e22c0380

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14] 0x78e22c1f80
	ExpressionInput Layer;//[Offset: 0x50, Size: 0x14] 0x78e22c2000
	FName ParameterName;//[Offset: 0x64, Size: 0x8] 0x78e22c2080
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4] 0x78e22c2100
	Vector ConstBase;//[Offset: 0x70, Size: 0xc] 0x78e22c0080
	Guid ExpressionGUID;//[Offset: 0x7c, Size: 0x10] 0x78e22c0100

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7875d45100

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8] 0x78759c5100
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14] 0x78759c5180

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x3c, Size: 0x10] 0x78e22c1e80

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedFixedRateCustomTimeStep.GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FrameRate;//[Offset: 0x28, Size: 0x8] 0x78e22c1e00

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1] 0x78e22c1900

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x8268960 0x78e2297860
	static FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x826842c 0x78e2297940
	static FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x826860c 0x78e2297a20
	static FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x82687f4 0x78e2297b00
	static FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x8268df4 0x78e2297be0
	static FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x826833c 0x78e2297cc0
	static bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x8268acc 0x78e2297da0
	static bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x8268be4 0x78e2297e80
	static FrameRate GetTimecodeFrameRate();// 0x82680f8 0x78e2297f60
	static Timecode GetTimecode();// 0x826812c 0x78e2298040
	static FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x826824c 0x78e2298120
	static FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x8268ca4 0x78e2298200
	static float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x8268ef0 0x78e22982e0
	static float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x8268fb0 0x78e22983c0
	static int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x8268198 0x78e22984a0
	static FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x826851c 0x78e2298580
	static FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x8268700 0x78e2298660

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e22c2280
	int FrameOffset;//[Offset: 0x2c, Size: 0x4] 0x78e22c2300

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x834ed50 0x78e22974e0
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x834ebc0 0x78e22975c0
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x834ec88 0x78e22976a0
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x834eaa4 0x78e2297780

--------------------------------
Class: MovieSceneDeterminismSource.Interface.Object

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieSceneEvaluationHook.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10] 0x7875d44b60

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18] 0x78759c5f00
	Object* Object;//[Offset: 0x18, Size: 0x8] 0x78759c5f80
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x78759c6000

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78e22c3700
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0x90] 0x78e22c3780

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7878005d80
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7876129500
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7876129580
	bool[] Values;//[Offset: 0x20, Size: 0x10] 0x7878004ca0

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneFloatDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8] 0x78e22c4e00

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x6d94ba8 0x78e2297400

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEvaluationHookSystem.MovieSceneEntitySystem.Object
	<MovieSceneEvaluationInstanceKey,MovieSceneEvaluationHookEventContainer> PendingEventsByRootInstance;//[Offset: 0x40, Size: 0x50] 0x7875b1b800

--------------------------------
Class: MovieSceneEvaluationInstanceKey

--------------------------------
Class: MovieSceneEvaluationHookEventContainer
	MovieSceneEvaluationHookEvent[] Events;//[Offset: 0x0, Size: 0x10] 0x787800d300

--------------------------------
Class: MovieSceneEvaluationHookEvent
	MovieSceneEvaluationHookComponent Hook;//[Offset: 0x0, Size: 0x20] 0x78759c8380

--------------------------------
Class: MovieSceneEvaluationHookComponent
	interface class None* Interface;//[Offset: 0x0, Size: 0x10] 0x78759c4e80

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8] 0x78e22c4980
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10] 0x7875d447a0
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10] 0x7875d44840
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10] 0x7875d448e0

--------------------------------
Class: MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bRequiresRangedHook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1] 0x78e22c4880
	bool bRequiresTriggerHooks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1] 0x78e22c4900

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSequenceActor.Interface.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7875d44660
	Guid ObjectGuid;//[Offset: 0xa0, Size: 0x10] 0x78e22c4700

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78e22c4580
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10] 0x7875d445c0

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8] 0x78e22c4500

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10] 0x7875d44520

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneEvalHookTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x90, Size: 0x10] 0x7875d44480

--------------------------------
Class: TestMovieSceneEvalHookSection.MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8] 0x78e22c6300
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78e22c4280
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8] 0x78e22c4300
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10] 0x7875d443e0

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8] 0x78759cbe80

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8] 0x78e22c6280

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50] 0x7875b1b740

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8] 0x78e22c6100

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8] 0x78e22c6080

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x83fe6cc 0x78e229a500
	static void K2_StartProfilingTimer();// 0x83fd524 0x78e229a5e0
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x83fdcd4 0x78e229a6c0
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x83fdb98 0x78e229a7a0
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x83fe458 0x78e229a880
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x83fd428 0x78e229a960
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x83fe114 0x78e229aa40
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x83fdfd4 0x78e229ab20
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x83fd538 0x78e229ac00
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x83fd964 0x78e229ace0

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10] 0x78759e2400
	float Range;//[Offset: 0x10, Size: 0x4] 0x78759dd080

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10] 0x78e22c7680
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10] 0x78e22c7700
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10] 0x78e22c7780
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10] 0x78e22c7800
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10] 0x78e22c7880
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x8403e0c 0x78e229a0a0
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x8403f0c 0x78e229a180
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x840400c 0x78e229a260
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x8404108 0x78e229a340
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x8404204 0x78e229a420

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: ByteChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x6d94ba8 0x78e2299fc0

--------------------------------
Class: IntegerChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10] 0x78e22c7400
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18] 0x78e22c7480
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x8536a28 0x78e2299e00
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x8536af4 0x78e2299ee0

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8] 0x78e22c9100
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8] 0x78e22c9180
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1] 0x7875d43f80
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1] 0x7875d44020
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1] 0x7875d440c0
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1] 0x7875d44160
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1] 0x7875d44200
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1] 0x7875d442a0

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x90, Size: 0x10] 0x7875d43ee0

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xa0] 0x78e22c8d80
	enum FrontAxisEnum;//[Offset: 0x1a8, Size: 0x1] 0x7875d466e0
	enum UpAxisEnum;//[Offset: 0x1a9, Size: 0x1] 0x7875d43e40
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1aa, Size: 0x1] 0x78e22c8f00
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1aa, Size: 0x1] 0x78e22c8f80
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1aa, Size: 0x1] 0x78e22c9000

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x48, Size: 0x8] 0x78e22c8d00

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78e22c8a00
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78e22c8a80
	MovieSceneFloatChannel Rotation;//[Offset: 0x2d0, Size: 0xa0] 0x78e22c8b00
	MovieSceneFloatChannel Scale;//[Offset: 0x4b0, Size: 0xa0] 0x78e22c8b80
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x690, Size: 0xa0] 0x78e22c8c00
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1] 0x78e22c8c80

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x78759dc680

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xb0] 0x78e22c8880
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x190, Size: 0x80] 0x78e22c8900
	FString[] ActorGuidStrings;//[Offset: 0x210, Size: 0x10] 0x7875d46640

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78759e1f00
	MovieSceneActorReferenceKey DefaultValue;//[Offset: 0x18, Size: 0x28] 0x78759de000
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10] 0x78759e1fa0

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18] 0x78759de080
	FName ComponentName;//[Offset: 0x18, Size: 0x8] 0x78759de100
	FName SocketName;//[Offset: 0x20, Size: 0x8] 0x78759de180

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8] 0x78e22c9f80
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4] 0x78e22ca000
	float StartOffset;//[Offset: 0xec, Size: 0x4] 0x78e22ca080
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4] 0x78e22ca100
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4] 0x78e22ca180
	float AudioVolume;//[Offset: 0xf8, Size: 0x4] 0x78e22ca200
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xa0] 0x78e22ca280
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1a0, Size: 0xa0] 0x78e22ca300
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x240, Size: 0xb0] 0x78e22ca380
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1] 0x78e22ca400
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1] 0x78e22ca480
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1] 0x78e22ca500
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2f8, Size: 0x8] 0x78e22c8480
	delegate OnQueueSubtitles;//[Offset: 0x300, Size: 0x10] 0x78e22c8500
	delegate OnAudioFinished;//[Offset: 0x310, Size: 0x10] 0x78e22c8580
	delegate OnAudioPlaybackPercent;//[Offset: 0x320, Size: 0x10] 0x78e22c8600
	void SetStartOffset(FrameNumber InStartOffset);// 0x8539ab8 0x78e2299a80
	void SetSound(SoundBase* InSound);// 0x8539b78 0x78e2299b60
	FrameNumber GetStartOffset();// 0x8539a9c 0x78e2299c40
	SoundBase* GetSound();// 0x8539b5c 0x78e2299d20

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x98, Size: 0x10] 0x7875d465a0

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneBytePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe8, Size: 0x98] 0x78e22c9e80

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x787800dbc0
	byte DefaultValue;//[Offset: 0x18, Size: 0x1] 0x78759c5c00
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x78759c5c80
	byte[] Values;//[Offset: 0x20, Size: 0x10] 0x787800dc60
	Enum* Enum;//[Offset: 0x30, Size: 0x8] 0x78759c5d80

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8] 0x78e22c9e00

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20] 0x78e22c9a80
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8] 0x78e22c9b00
	float PlayRate;//[Offset: 0x108, Size: 0x4] 0x78e22c9b80
	float PlayScale;//[Offset: 0x10c, Size: 0x4] 0x78e22c9c00
	float BlendInTime;//[Offset: 0x110, Size: 0x4] 0x78e22c9c80
	float BlendOutTime;//[Offset: 0x114, Size: 0x4] 0x78e22c9d00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1] 0x78e22c9d80

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8] 0x78759ddb00
	float PlayRate;//[Offset: 0x8, Size: 0x4] 0x78759ddb80
	float PlayScale;//[Offset: 0xc, Size: 0x4] 0x78759ddc00
	float BlendInTime;//[Offset: 0x10, Size: 0x4] 0x78759ddc80
	float BlendOutTime;//[Offset: 0x14, Size: 0x4] 0x78759ddd00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x78759ddd80

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x98, Size: 0x10] 0x7875d46500

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78e22c9680
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10] 0x78e22c9700
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18] 0x78e22c9780
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x30] 0x78e22c9800
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x78e22c9880
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x853c7b4 0x78e22998c0
	MovieSceneObjectBindingID GetCameraBindingID();// 0x853c884 0x78e22999a0

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78e22c9580
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7875d46460

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78e22cb480
	class CameraShakeBase* ShakeClass;//[Offset: 0x100, Size: 0x8] 0x7875d46320
	float PlayScale;//[Offset: 0x108, Size: 0x4] 0x78e22cb500
	enum PlaySpace;//[Offset: 0x10c, Size: 0x1] 0x7875d463c0
	Rotator UserDefinedPlaySpace;//[Offset: 0x110, Size: 0xc] 0x78e22c9500

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78759e1dc0
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78759dd880
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78759e1e60
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78759dd980

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x20] 0x78e22cb400

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10] 0x7875d46280

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0x88] 0x78e22cb300

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78759e1b40
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78759e1d20

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8] 0x78759e1be0
	float PlayScale;//[Offset: 0x8, Size: 0x4] 0x78759df600
	enum PlaySpace;//[Offset: 0xc, Size: 0x1] 0x78759e1c80
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc] 0x78759df700

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7875d461e0

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10] 0x7875d46140

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x158, Size: 0x10] 0x78e22cb000
	FText DisplayName;//[Offset: 0x168, Size: 0x18] 0x78e22cb080
	void SetShotDisplayName(FString InShotDisplayName);// 0x8544044 0x78e2299700
	FString GetShotDisplayName();// 0x8544158 0x78e22997e0

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe8, Size: 0xa0] 0x78e22cae00
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x188, Size: 0xa0] 0x78e22cae80
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x228, Size: 0xa0] 0x78e22caf00
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c8, Size: 0xa0] 0x78e22caf80

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x78e22cad80

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDeferredComponentMovementSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe8, Size: 0x98] 0x78e22cad00

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8] 0x78e22cac80

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28] 0x78e22cac00

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28] 0x78759df100

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8] 0x78759df000
	FieldPathProperty BoundObjectProperty;//[Size: 0x20] 0x78759df080

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78] 0x78e22cab00
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0x88] 0x78e22cab80

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10] 0x78759ed760

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4] 0x7875ae0080
	FName Value;//[Offset: 0x4, Size: 0x8] 0x7875ae0100

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78759e16e0
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78759e1780

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8] 0x78759ded00
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28] 0x78759ded80

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e22ca900
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1] 0x78e22ca980
	enum EventPosition;//[Offset: 0xa1, Size: 0x1] 0x7875d46000
	MovieSceneSection*[] Sections;//[Offset: 0xa8, Size: 0x10] 0x7875d460a0

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0x88] 0x78e22ca880

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10] 0x78759e1820
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10] 0x78759e18c0

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78e22ca700
	LinearColor FadeColor;//[Offset: 0x180, Size: 0x10] 0x78e22ca780
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1] 0x78e22ca800

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0] 0x78e22ca680

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneInitialValueSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe8, Size: 0x90] 0x78e22ca600

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x7878005e20
	int DefaultValue;//[Offset: 0x18, Size: 0x4] 0x787612b100
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x787612b180
	int[] Values;//[Offset: 0x20, Size: 0x10] 0x7878005ce0

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1] 0x7875d45c40
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10] 0x7875d45ce0
	void SetVisibility(enum InVisibility);// 0x854d8f4 0x78e2299380
	void SetLevelNames(out const FName[] InLevelNames);// 0x854d760 0x78e2299460
	enum GetVisibility();// 0x854d99c 0x78e2299540
	FName[] GetLevelNames();// 0x854d870 0x78e2299620

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7875d45ba0

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10] 0x7875d45b00

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0xa8, Size: 0x8] 0x78e22cc280

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xa8, Size: 0x4] 0x78e22cc200

--------------------------------
Class: MovieSceneMotionVectorSimulationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0xc0] 0x78e22cc180

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8] 0x787800cf40
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10] 0x787800cfe0
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10] 0x787800d080
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30] 0x78759c9400

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28] 0x78759c9300
	Object* HardPtr;//[Offset: 0x28, Size: 0x8] 0x78759c9380

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0xc8, Size: 0x8] 0x7875d45a60

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10] 0x7875d45600
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10] 0x7875d456a0
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10] 0x7875d45740
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10] 0x7875d457e0
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10] 0x7875d45880
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10] 0x7875d45920
	bool RemoveVectorParameter(FName InParameterName);// 0x8557280 0x78e229c1e0
	bool RemoveVector2DParameter(FName InParameterName);// 0x8557334 0x78e229c2c0
	bool RemoveTransformParameter(FName InParameterName);// 0x8557118 0x78e229c3a0
	bool RemoveScalarParameter(FName InParameterName);// 0x855749c 0x78e229c480
	bool RemoveColorParameter(FName InParameterName);// 0x85571cc 0x78e229c560
	bool RemoveBoolParameter(FName InParameterName);// 0x85573e8 0x78e229c640
	void GetParameterNames(out <FName> ParameterNames);// 0x8556fdc 0x78e229c720
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0x85577f4 0x78e229c800
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0x8557930 0x78e229c8e0
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0x8557550 0x78e229c9c0
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0x8557bac 0x78e22990e0
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0x85576b8 0x78e22991c0
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0x8557a68 0x78e22992a0

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875a10e80
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90] 0x7875a10f00

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875a10d00
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0] 0x7875a10d80

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x7875a11000
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x7875a11080
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78759df800

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78759df900
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0] 0x78759df980
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0] 0x78759dfa00
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0] 0x78759dfa80

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78759dfb80
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0] 0x78759dfc00
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0] 0x78759dfc80
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0] 0x78759dfd00
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0] 0x78759dfd80

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8] 0x78759dfe80
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0] 0x78759dff00
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0] 0x78759dff80
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0] 0x78759de780

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10] 0x7875d45560

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0x98] 0x78e22ccf00

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x98, Size: 0x10] 0x7875d454c0

--------------------------------
Class: MovieScenePiecewiseBoolBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseByteBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseEnumBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseIntegerBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0xc0] 0x78e22cce00

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xc8, Size: 0x4] 0x78e22ccd80

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0xd8] 0x78e22ce500
	AnimSequence* AnimSequence;//[Offset: 0x1b8, Size: 0x8] 0x78e22ce580
	AnimSequenceBase* Animation;//[Offset: 0x1c0, Size: 0x8] 0x78e22ce600
	float StartOffset;//[Offset: 0x1c8, Size: 0x4] 0x78e22ce680
	float EndOffset;//[Offset: 0x1cc, Size: 0x4] 0x78e22ce700
	float PlayRate;//[Offset: 0x1d0, Size: 0x4] 0x78e22cc680
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4, Size: 0x1] 0x78e22cc700
	FName SlotName;//[Offset: 0x1d8, Size: 0x8] 0x78e22cc780
	Vector StartLocationOffset;//[Offset: 0x1e0, Size: 0xc] 0x78e22cc800
	Rotator StartRotationOffset;//[Offset: 0x1ec, Size: 0xc] 0x78e22cc880
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1] 0x78e22cc900
	FName MatchedBoneName;//[Offset: 0x1fc, Size: 0x8] 0x78e22cc980
	Vector MatchedLocationOffset;//[Offset: 0x204, Size: 0xc] 0x78e22cca00
	Rotator MatchedRotationOffset;//[Offset: 0x210, Size: 0xc] 0x78e22cca80
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1] 0x78e22ccb00
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d, Size: 0x1] 0x78e22ccb80
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21e, Size: 0x1] 0x78e22ccc00
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21f, Size: 0x1] 0x78e22ccc80
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78e22ccd00

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8] 0x7875a10100
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4] 0x7875a10180
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4] 0x7875a10200
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4] 0x7875a10280
	float PlayRate;//[Offset: 0x14, Size: 0x4] 0x7875a10300
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875a10380
	FName SlotName;//[Offset: 0x1c, Size: 0x8] 0x7875a10400
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0] 0x7875a10480
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x7875a10500
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1] 0x7875a10580
	float StartOffset;//[Offset: 0xcc, Size: 0x4] 0x7875a10600
	float EndOffset;//[Offset: 0xd0, Size: 0x4] 0x7875a10680

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10] 0x7875d45420
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1] 0x78e22ce380
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0xb0, Size: 0x30] 0x78e22ce400
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78e22ce480

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xa0] 0x78e22ce280

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xa0] 0x78e22ce200

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10] 0x78759e3b20
	FString[] Values;//[Offset: 0x18, Size: 0x10] 0x78759e3bc0
	FString DefaultValue;//[Offset: 0x28, Size: 0x10] 0x7875a10880
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7875a10900

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe8, Size: 0xa0] 0x78e22ce100
	int ChannelsUsed;//[Offset: 0x368, Size: 0x4] 0x78e22ce180

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4] 0x78e22ce080

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10] 0x78e22cde80
	delegate OnFail;//[Offset: 0x40, Size: 0x10] 0x78e22cdf00
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x869ca54 0x78e229c100

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x86a7ca4 0x7875fe91c0
	PanelSlot* GetContentSlot();// 0x86a7d54 0x7875fe92a0
	Widget* GetContent();// 0x86a7c70 0x7875fe9380

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x11c, Size: 0x10] 0x78e22cd700
	byte HorizontalAlignment;//[Offset: 0x12c, Size: 0x1] 0x78e22cd780
	byte VerticalAlignment;//[Offset: 0x12d, Size: 0x1] 0x78e22cd800
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1] 0x78e22cd880
	float BlurStrength;//[Offset: 0x130, Size: 0x4] 0x78e22cd900
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1] 0x78e22cd980
	int BlurRadius;//[Offset: 0x138, Size: 0x4] 0x78e22cda00
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88] 0x78e22cda80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x869d360 0x78e229bae0
	void SetPadding(Margin InPadding);// 0x869d4b0 0x78e229bbc0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x869cfe0 0x78e229bca0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x869d408 0x78e229bd80
	void SetBlurStrength(float InStrength);// 0x869d158 0x78e229be60
	void SetBlurRadius(int InBlurRadius);// 0x869d208 0x78e229bf40
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x869d2b0 0x78e229c020

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22cf400
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22cf480
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22cf500
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x869dbfc 0x78e229b840
	void SetPadding(Margin InPadding);// 0x869dd4c 0x78e229b920
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x869dca4 0x78e229ba00

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x869e324 0x78e229b760

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x119, Size: 0x1] 0x78e22cfd00
	byte VerticalAlignment;//[Offset: 0x11a, Size: 0x1] 0x78e22cfd80
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11b, Size: 0x1] 0x78e22cfe00
	LinearColor ContentColorAndOpacity;//[Offset: 0x11c, Size: 0x10] 0x78e22cfe80
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x12c, Size: 0x10] 0x78e22cff00
	Margin Padding;//[Offset: 0x13c, Size: 0x10] 0x78e22cff80
	SlateBrush Background;//[Offset: 0x150, Size: 0x88] 0x78e22ce780
	delegate BackgroundDelegate;//[Offset: 0x1d8, Size: 0x10] 0x78e22ce800
	LinearColor BrushColor;//[Offset: 0x1e8, Size: 0x10] 0x78e22ce880
	delegate BrushColorDelegate;//[Offset: 0x1f8, Size: 0x10] 0x78e22ce900
	Vector2D DesiredSizeScale;//[Offset: 0x208, Size: 0x8] 0x78e22ce980
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x78e22cea00
	delegate OnMouseButtonDownEvent;//[Offset: 0x214, Size: 0x10] 0x78e22cea80
	delegate OnMouseButtonUpEvent;//[Offset: 0x224, Size: 0x10] 0x78e22ceb00
	delegate OnMouseMoveEvent;//[Offset: 0x234, Size: 0x10] 0x78e22ceb80
	delegate OnMouseDoubleClickEvent;//[Offset: 0x244, Size: 0x10] 0x78e22cec00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x869ece0 0x78e229adc0
	void SetPadding(Margin InPadding);// 0x869ee30 0x78e229aea0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x869ed88 0x78e229af80
	void SetDesiredSizeScale(Vector2D InScale);// 0x869e7f0 0x78e229b060
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x869eedc 0x78e229b140
	void SetBrushFromTexture(Texture2D* Texture);// 0x869e970 0x78e229b220
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x869e8c8 0x78e229b300
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x869ea18 0x78e229b3e0
	void SetBrushColor(LinearColor InBrushColor);// 0x869ec38 0x78e229b4c0
	void SetBrush(out const SlateBrush InBrush);// 0x869eac0 0x78e229b5a0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x869e894 0x78e229b680

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22cfa00
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22cfa80
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22cfb00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x869f7d0 0x78e229e4e0
	void SetPadding(Margin InPadding);// 0x869f920 0x78e229e5c0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x869f878 0x78e229e6a0

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x869fef4 0x78e229e400

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8] 0x78e22e0880
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278] 0x78e22e0900
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10] 0x78e22e0980
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10] 0x78e22e0a00
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1] 0x78e22e0a80
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1] 0x78e22e0b00
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1] 0x78e22e0b80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1] 0x78e22e0c00
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10] 0x78e22e0c80
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10] 0x78e22e0d00
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10] 0x78e22e0d80
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10] 0x78e22e0e00
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10] 0x78e22e0e80
	void SetTouchMethod(byte InTouchMethod);// 0x86a0684 0x78e229dde0
	void SetStyle(out const ButtonStyle InStyle);// 0x86a095c 0x78e229dec0
	void SetPressMethod(byte InPressMethod);// 0x86a05dc 0x78e229dfa0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x86a08b4 0x78e229e080
	void SetClickMethod(byte InClickMethod);// 0x86a072c 0x78e229e160
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x86a080c 0x78e229e240
	bool IsPressed();// 0x86a07d4 0x78e229e320

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22e0580
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22e0600
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22e0680
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86a10a0 0x78e229db40
	void SetPadding(Margin InPadding);// 0x86a11f0 0x78e229dc20
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86a1148 0x78e229dd00

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x86a17c4 0x78e229da60

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28] 0x78e22e1a00
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78e22e1a80
	int ZOrder;//[Offset: 0x64, Size: 0x4] 0x78e22e1b00
	void SetZOrder(int InZOrder);// 0x86a2080 0x78e229caa0
	void SetSize(Vector2D InSize);// 0x86a24e4 0x78e229cb80
	void SetPosition(Vector2D InPosition);// 0x86a25bc 0x78e229cc60
	void SetOffsets(Margin InOffset);// 0x86a2404 0x78e229cd40
	void SetMinimum(Vector2D InMinimumAnchors);// 0x86a1fa8 0x78e229ce20
	void SetMaximum(Vector2D InMaximumAnchors);// 0x86a1f04 0x78e229cf00
	void SetLayout(out const AnchorData InLayoutData);// 0x86a26cc 0x78e229cfe0
	void SetAutoSize(bool InbAutoSize);// 0x86a2160 0x78e229d0c0
	void SetAnchors(Anchors InAnchors);// 0x86a2320 0x78e229d1a0
	void SetAlignment(Vector2D InAlignment);// 0x86a2244 0x78e229d280
	int GetZOrder();// 0x86a204c 0x78e229d360
	Vector2D GetSize();// 0x86a24b0 0x78e229d440
	Vector2D GetPosition();// 0x86a2588 0x78e229d520
	Margin GetOffsets();// 0x86a23cc 0x78e229d600
	AnchorData GetLayout();// 0x86a2660 0x78e229d6e0
	bool GetAutoSize();// 0x86a2128 0x78e229d7c0
	Anchors GetAnchors();// 0x86a22e8 0x78e229d8a0
	Vector2D GetAlignment();// 0x86a2210 0x78e229d980

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10] 0x7875a11c00
	Anchors Anchors;//[Offset: 0x10, Size: 0x10] 0x7875a11c80
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8] 0x7875a11d00

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x119, Size: 0x1] 0x7875d47b80
	delegate CheckedStateDelegate;//[Offset: 0x11c, Size: 0x10] 0x78e22e2d00
	CheckBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x580] 0x78e22e2d80
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b0, Size: 0x8] 0x78e22e2e00
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6b8, Size: 0x8] 0x78e22e2e80
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c0, Size: 0x8] 0x78e22e2f00
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6c8, Size: 0x8] 0x78e22e2f80
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d0, Size: 0x8] 0x78e22e3000
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6d8, Size: 0x8] 0x78e22e3080
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e0, Size: 0x8] 0x78e22e3100
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6e8, Size: 0x8] 0x78e22e3180
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f0, Size: 0x8] 0x78e22e1100
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x6f8, Size: 0x8] 0x78e22e1180
	byte HorizontalAlignment;//[Offset: 0x700, Size: 0x1] 0x78e22e1200
	Margin Padding;//[Offset: 0x704, Size: 0x10] 0x78e22e1280
	SlateColor BorderBackgroundColor;//[Offset: 0x718, Size: 0x28] 0x78e22e1300
	byte ClickMethod;//[Offset: 0x740, Size: 0x1] 0x78e22e1380
	byte TouchMethod;//[Offset: 0x741, Size: 0x1] 0x78e22e1400
	byte PressMethod;//[Offset: 0x742, Size: 0x1] 0x78e22e1480
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x743, Size: 0x1] 0x78e22e1500
	delegate OnCheckStateChanged;//[Offset: 0x748, Size: 0x10] 0x78e22e1580
	void SetTouchMethod(byte InTouchMethod);// 0x86a31ac 0x78e229f900
	void SetPressMethod(byte InPressMethod);// 0x86a3104 0x78e229f9e0
	void SetIsChecked(bool InIsChecked);// 0x86a33a4 0x78e229fac0
	void SetClickMethod(byte InClickMethod);// 0x86a3254 0x78e229fba0
	void SetCheckedState(enum InCheckedState);// 0x86a32fc 0x78e229fc80
	bool IsPressed();// 0x86a34c0 0x78e229fd60
	bool IsChecked();// 0x86a3488 0x78e229fe40
	enum GetCheckedState();// 0x86a3454 0x78e229ff20

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x86a3c0c 0x78e229f820

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78e22e2780
	float Period;//[Offset: 0x10c, Size: 0x4] 0x78e22e2800
	float Radius;//[Offset: 0x110, Size: 0x4] 0x78e22e2880
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8] 0x78e22e2900
	SlateBrush Image;//[Offset: 0x120, Size: 0x88] 0x78e22e2980
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78e22e2a00
	void SetRadius(float InRadius);// 0x86a40c8 0x78e229f580
	void SetPeriod(float InPeriod);// 0x86a4170 0x78e229f660
	void SetNumberOfPieces(int InNumberOfPieces);// 0x86a4218 0x78e229f740

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x86a4830 0x78e229f3c0
	LinearColor GetLinearValue();// 0x86a47f8 0x78e229f4a0

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x108, Size: 0x10] 0x7875d47a40
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10] 0x78e22e2580
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1] 0x78e22e2600

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10] 0x7895c1c7c0
	FString SelectedOption;//[Offset: 0x118, Size: 0x10] 0x7875ff0900
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0] 0x7875fcf980
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8] 0x7875fce980
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10] 0x7875fcea00
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4] 0x7875fcea80
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1] 0x7875fceb00
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1] 0x7875fceb80
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x58] 0x7875fcf180
	SlateColor ForegroundColor;//[Offset: 0xd50, Size: 0x28] 0x7875fcf200
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1] 0x7875fcf280
	delegate OnGenerateWidgetEvent;//[Offset: 0xd7c, Size: 0x10] 0x7875fcf300
	delegate OnSelectionChanged;//[Offset: 0xd90, Size: 0x10] 0x7875fcf380
	delegate OnOpening;//[Offset: 0xda0, Size: 0x10] 0x7875fcf400
	void SetSelectedOption(FString Option);// 0x86a6f7c 0x7875fe84a0
	void SetSelectedIndex(const int Index);// 0x86a6ed4 0x7875fe8580
	bool RemoveOption(FString Option);// 0x86a726c 0x7875fe8660
	void RefreshOptions();// 0x86a7078 0x7875fe8740
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x6d94ba8 0x7875fe8820
	void OnOpeningEvent__DelegateSignature();// 0x6d94ba8 0x7875fe8900
	bool IsOpen();// 0x86a6d84 0x7875fe89e0
	FString GetSelectedOption();// 0x86a6e24 0x7875fe8ac0
	int GetSelectedIndex();// 0x86a6df0 0x7875fe8ba0
	int GetOptionCount();// 0x86a6dbc 0x7875fe8c80
	FString GetOptionAtIndex(int Index);// 0x86a70b4 0x7875fe8d60
	int FindOptionIndex(FString Option);// 0x86a71b0 0x7875fe8e40
	void ClearSelection();// 0x86a708c 0x7875fe8f20
	void ClearOptions();// 0x86a70a0 0x7875fe9000
	void AddOption(FString Option);// 0x86a732c 0x7875fe5720

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88] 0x7875fcfa00
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88] 0x7875fcfa80
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88] 0x7875fcfb00
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88] 0x7875fcfb80
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88] 0x7875fcfc00
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88] 0x7875fcfc80
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88] 0x7875fcfd00
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88] 0x7875fcfd80
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88] 0x7875fcfe00
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28] 0x7875fcfe80
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28] 0x7875fcff00
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88] 0x7875fcff80
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88] 0x7875fce780
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88] 0x7875fce800
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88] 0x7875fce880
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88] 0x7875fce900

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1] 0x7875d477c0
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8] 0x78e22e3a80
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10] 0x7875d47860
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8] 0x78e22e3b80
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1] 0x78e22e3c00
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1] 0x78e22e3c80
	int MaxElementSize;//[Offset: 0x134, Size: 0x4] 0x78e22e3d00
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x138, Size: 0x10] 0x78e22e3d80
	UserWidgetPool EntryWidgetPool;//[Offset: 0x158, Size: 0x80] 0x78e22e3e00
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0x86a9b08 0x78e229eda0
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x86a9bd0 0x78e229ee80
	int GetNumEntries();// 0x86a9c80 0x78e229ef60
	UserWidget*[] GetAllEntries();// 0x86a9cb4 0x78e229f040

--------------------------------
Class: RadialBoxSettings
	float StartingAngle;//[Offset: 0x0, Size: 0x4] 0x7875a11900
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7875a11980
	float AngleBetweenItems;//[Offset: 0x8, Size: 0x4] 0x7875a11a00
	float SectorCentralAngle;//[Offset: 0xc, Size: 0x4] 0x7875a11a80

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4] 0x7875a11300
	byte SizeRule;//[Offset: 0x4, Size: 0x1] 0x7875a11380

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10] 0x78759e38a0
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10] 0x78759e3940

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1d8, Size: 0x8] 0x7875d47680
	void Reset(bool bDeleteWidgets);// 0x86a9170 0x78e229ea20
	void RemoveEntry(UserWidget* EntryWidget);// 0x86a90c8 0x78e229eb00
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x86a8fe4 0x78e229ebe0
	UserWidget* BP_CreateEntry();// 0x86a9094 0x78e229ecc0

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x7875ff1200
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x7875ff1280
	FText HintText;//[Offset: 0x130, Size: 0x18] 0x7875ff1300
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10] 0x7875ff1380
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x220] 0x7875ff1680
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 0x8] 0x7875ff1700
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 0x8] 0x7875ff1780
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 0x8] 0x7875ff1800
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 0x8] 0x7875ff1880
	SlateFontInfo Font;//[Offset: 0x398, Size: 0x58] 0x7875ff1900
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 0x28] 0x7875ff1980
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x7875ff1a00
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1] 0x7875ff1a80
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 0x4] 0x7875ff1b00
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1] 0x7875ff1b80
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1] 0x7875ff1c00
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1] 0x7875ff1c80
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1] 0x7875ff1d00
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1] 0x7875ff1d80
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1] 0x7875ff1e00
	byte KeyboardType;//[Offset: 0x426, Size: 0x1] 0x7875ff1e80
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 0x1] 0x7875ff1f80
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 0x1] 0x7895c1cae0
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 0x1] 0x7895c1c9a0
	byte Justification;//[Offset: 0x42a, Size: 0x1] 0x7875ff2100
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 0x3] 0x7875ff0280
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10] 0x7875ff0300
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10] 0x7875ff0380
	void SetText(FText InText);// 0x86aa734 0x7875fe7da0
	void SetJustification(byte InJustification);// 0x86aa3a8 0x7875fe7e80
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x86aa450 0x7875fe7f60
	void SetIsPassword(bool InbIsPassword);// 0x86aa684 0x7875fe8040
	void SetHintText(FText InHintText);// 0x86aa500 0x7875fe8120
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x6d94ba8 0x7875fe8200
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x6d94ba8 0x7875fe82e0
	FText GetText();// 0x86aa8b8 0x7875fe83c0

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875ff1f00

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875ff0080
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875ff0100
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1] 0x7895c1ca40
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1] 0x7895c1c900

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18] 0x7875ff3600
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10] 0x7875ff3680
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f8] 0x7875ff4180
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 0x8] 0x7875ff4200
	FText HintText;//[Offset: 0x930, Size: 0x18] 0x7875ff2180
	delegate HintTextDelegate;//[Offset: 0x948, Size: 0x10] 0x7875ff2200
	SlateFontInfo Font;//[Offset: 0x958, Size: 0x58] 0x7875ff2280
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 0x10] 0x7875ff2300
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 0x10] 0x7875ff2380
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 0x10] 0x7875ff2400
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1] 0x7875ff2480
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1] 0x7875ff2500
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 0x4] 0x7875ff2580
	Margin Padding;//[Offset: 0x9e8, Size: 0x10] 0x7875ff2600
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1] 0x7875ff2680
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1] 0x7875ff2700
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1] 0x7875ff2780
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 0x1] 0x7875ff2800
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1] 0x7875ff2880
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1] 0x7875ff2900
	byte KeyboardType;//[Offset: 0x9fe, Size: 0x1] 0x7875ff2980
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 0x1] 0x7875ff2a00
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 0x1] 0x7895c1cb80
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 0x1] 0x7895c1cc20
	byte Justification;//[Offset: 0xa02, Size: 0x1] 0x7875ff2b80
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa03, Size: 0x3] 0x7875ff2c00
	delegate OnTextChanged;//[Offset: 0xa08, Size: 0x10] 0x7875ff2c80
	delegate OnTextCommitted;//[Offset: 0xa18, Size: 0x10] 0x7875ff2d00
	void SetText(FText InText);// 0x86ab678 0x7875fe7400
	void SetJustification(byte InJustification);// 0x86ab11c 0x7875fe74e0
	void SetIsReadOnly(bool bReadOnly);// 0x86ab2c0 0x7875fe75c0
	void SetIsPassword(bool bIsPassword);// 0x86ab210 0x7875fe76a0
	void SetHintText(FText InText);// 0x86ab4f4 0x7875fe7780
	void SetError(FText InError);// 0x86ab370 0x7875fe7860
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x6d94ba8 0x7875fe7940
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x6d94ba8 0x7875fe7a20
	bool HasError();// 0x86ab1c4 0x7875fe7b00
	FText GetText();// 0x86ab7fc 0x7875fe7be0
	void ClearError();// 0x86ab1fc 0x7875fe7cc0

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120] 0x78e22e5280
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88] 0x78e22e3200
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28] 0x78e22e3280
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1] 0x78e22e3300
	float MaxHeight;//[Offset: 0x2e4, Size: 0x4] 0x78e22e3380
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10] 0x78e22e3400
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10] 0x78e22e3480
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10] 0x78e22e3500
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8] 0x78e22e3580
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8] 0x78e22e3600
	void SetIsExpanded_Animated(bool IsExpanded);// 0x86ac170 0x78e229e780
	void SetIsExpanded(bool IsExpanded);// 0x86ac220 0x78e229e860
	bool GetIsExpanded();// 0x86ac2d0 0x78e229e940

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88] 0x7875968500
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88] 0x7875968580
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4] 0x7875968600

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x86ac7e4 0x78e22f1c80

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10] 0x7875d47540
	float[] RowFill;//[Offset: 0x130, Size: 0x10] 0x7875d475e0
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x86acc9c 0x78e22f19e0
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x86acd90 0x78e22f1ac0
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x86ace84 0x78e22f1ba0

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22e4400
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22e4480
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22e4500
	int Row;//[Offset: 0x4c, Size: 0x4] 0x78e22e4580
	int RowSpan;//[Offset: 0x50, Size: 0x4] 0x78e22e4600
	int Column;//[Offset: 0x54, Size: 0x4] 0x78e22e4680
	int ColumnSpan;//[Offset: 0x58, Size: 0x4] 0x78e22e4700
	int Layer;//[Offset: 0x5c, Size: 0x4] 0x78e22e4780
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8] 0x78e22e4800
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86aec9c 0x78e22f1200
	void SetRowSpan(int InRowSpan);// 0x86af088 0x78e22f12e0
	void SetRow(int InRow);// 0x86af130 0x78e22f13c0
	void SetPadding(Margin InPadding);// 0x86af1d8 0x78e22f14a0
	void SetNudge(Vector2D InNudge);// 0x86aedec 0x78e22f1580
	void SetLayer(int InLayer);// 0x86aee90 0x78e22f1660
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86aed44 0x78e22f1740
	void SetColumnSpan(int InColumnSpan);// 0x86aef38 0x78e22f1820
	void SetColumn(int InColumn);// 0x86aefe0 0x78e22f1900

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x86af970 0x78e22f1120

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78e22e6000
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8] 0x78e22e6080
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78e22e6100
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78e22e6180
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86aff68 0x78e22f0da0
	void SetSize(SlateChildSize InSize);// 0x86b00b8 0x78e22f0e80
	void SetPadding(Margin InPadding);// 0x86b016c 0x78e22f0f60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86b0010 0x78e22f1040

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88] 0x78e22e5400
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10] 0x78e22e5480
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10] 0x78e22e5500
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10] 0x78e22e5580
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1] 0x78e22e5600
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10] 0x78e22e5680
	void SetOpacity(float InOpacity);// 0x86b12b4 0x78e22f0160
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x86b135c 0x78e22f0240
	void SetBrushTintColor(SlateColor TintColor);// 0x86b1078 0x78e22f0320
	void SetBrushSize(Vector2D DesiredSize);// 0x86b1210 0x78e22f0400
	void SetBrushResourceObject(Object* ResourceObject);// 0x86b0fd0 0x78e22f04e0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x86b0a74 0x78e22f05c0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x86b0c9c 0x78e22f06a0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x86b083c 0x78e22f0780
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x86b0710 0x78e22f0860
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x86b09c4 0x78e22f0940
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x86b0b78 0x78e22f0a20
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x86b0da0 0x78e22f0b00
	void SetBrush(out const SlateBrush InBrush);// 0x86b0e50 0x78e22f0be0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x86b06dc 0x78e22f0cc0

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278] 0x7875ff4400
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x270] 0x7875ff4900
	InputChord SelectedKey;//[Offset: 0x5f0, Size: 0x20] 0x7875ff4980
	SlateFontInfo Font;//[Offset: 0x610, Size: 0x58] 0x7875ff4a00
	Margin Margin;//[Offset: 0x668, Size: 0x10] 0x7875ff4a80
	LinearColor ColorAndOpacity;//[Offset: 0x678, Size: 0x10] 0x7875ff4b00
	FText KeySelectionText;//[Offset: 0x688, Size: 0x18] 0x7875ff4b80
	FText NoKeySpecifiedText;//[Offset: 0x6a0, Size: 0x18] 0x7875ff4c00
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1] 0x7875ff4c80
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1] 0x7875ff4d00
	Key[] EscapeKeys;//[Offset: 0x6c0, Size: 0x10] 0x7895c1cd60
	delegate OnKeySelected;//[Offset: 0x6d0, Size: 0x10] 0x7875ff4e00
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6e0, Size: 0x10] 0x7875ff4e80
	void SetTextBlockVisibility(const enum InVisibility);// 0x86b1f28 0x7875fea420
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x86b2470 0x7875fea500
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x86b2168 0x7875fea5e0
	void SetKeySelectionText(FText InKeySelectionText);// 0x86b22ec 0x7875fea6c0
	void SetEscapeKeys(out const Key[] InKeys);// 0x86b1de0 0x7875fea7a0
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x86b20b8 0x7875fea880
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x86b2008 0x7875fea960
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x6d94ba8 0x7875feaa40
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x6d94ba8 0x7875feab20
	bool GetIsSelectingKey();// 0x86b1fd0 0x7875feac00

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x86b2cd0 0x78e22f0080

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e22e7280
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78e22e7300
	void SetCanCache(bool CanCache);// 0x86b3188 0x78e22f37a0
	void InvalidateCache();// 0x86b3270 0x78e22f3880
	bool GetCanCache();// 0x86b3238 0x78e22f3960

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x6d94ba8 0x78e22f3500
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x6d94ba8 0x78e22f35e0
	void BP_OnEntryReleased();// 0x6d94ba8 0x78e22f36c0

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	static bool IsListItemSelected(interface classNone UserListEntry);// 0x86b3f54 0x78e22f3260
	static bool IsListItemExpanded(interface classNone UserListEntry);// 0x86b3e88 0x78e22f3340
	static ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x86b3dc0 0x78e22f3420

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 0x8] 0x7875d47360
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 0x4] 0x78e22e6780
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1] 0x78e22e6800
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1] 0x78e22e6880
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 0x4] 0x78e22e6900
	delegate BP_OnEntryGenerated;//[Offset: 0x120, Size: 0x10] 0x78e22e6980
	delegate BP_OnEntryReleased;//[Offset: 0x130, Size: 0x10] 0x78e22e6a00
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 0x80] 0x78e22e6a80
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x86b6dcc 0x78e22f29a0
	void SetScrollOffset(const float InScrollOffset);// 0x86b6e74 0x78e22f2a80
	void SetScrollbarVisibility(enum InVisibility);// 0x86b6d24 0x78e22f2b60
	void ScrollToTop();// 0x86b6f30 0x78e22f2c40
	void ScrollToBottom();// 0x86b6f1c 0x78e22f2d20
	void RequestRefresh();// 0x86b6d10 0x78e22f2e00
	void RegenerateAllEntries();// 0x86b6f44 0x78e22f2ee0
	UserWidget*[] GetDisplayedEntryWidgets();// 0x86b6f58 0x78e22f2fc0

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x6d94ba8 0x78e22f3180

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x86b4aa4 0x78e22f30a0

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 0x1] 0x78e22e7400
	byte SelectionMode;//[Offset: 0x2d9, Size: 0x1] 0x78e22e7480
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 0x1] 0x7875d47040
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1] 0x78e22e7580
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1] 0x78e22e7600
	float EntrySpacing;//[Offset: 0x2e0, Size: 0x4] 0x78e22e7680
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x78e22e7700
	Object*[] ListItems;//[Offset: 0x2e8, Size: 0x10] 0x7875d470e0
	delegate BP_OnEntryInitialized;//[Offset: 0x308, Size: 0x10] 0x78e22e7800
	delegate BP_OnItemClicked;//[Offset: 0x318, Size: 0x10] 0x78e22e7880
	delegate BP_OnItemDoubleClicked;//[Offset: 0x328, Size: 0x10] 0x78e22e7900
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x338, Size: 0x10] 0x78e22e7980
	delegate BP_OnItemSelectionChanged;//[Offset: 0x348, Size: 0x10] 0x78e22e7a00
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x358, Size: 0x10] 0x78e22e7a80
	void SetSelectionMode(byte SelectionMode);// 0x86b59a8 0x78e22f4f40
	void SetSelectedIndex(int Index);// 0x86b5820 0x78e22f5020
	void ScrollIndexIntoView(int Index);// 0x86b58c8 0x78e22f5100
	void RemoveItem(Object* Item);// 0x86b5bf8 0x78e22f51e0
	void NavigateToIndex(int Index);// 0x86b5778 0x78e22f52c0
	bool IsRefreshPending();// 0x86b5970 0x78e22f53a0
	int GetNumItems();// 0x86b5b14 0x78e22f5480
	Object*[] GetListItems();// 0x86b5d48 0x78e22f5560
	Object* GetItemAt(int Index);// 0x86b5b48 0x78e22f5640
	int GetIndexForItem(Object* Item);// 0x86b5a64 0x78e22f1d60
	void ClearListItems();// 0x86b5a50 0x78e22f1e40
	void BP_SetSelectedItem(Object* Item);// 0x86b56d0 0x78e22f1f20
	void BP_SetListItems(out const Object*[] InListItems);// 0x86b51e8 0x78e22f2000
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x86b55d4 0x78e22f20e0
	void BP_ScrollItemIntoView(Object* Item);// 0x86b52bc 0x78e22f21c0
	void BP_NavigateToItem(Object* Item);// 0x86b5364 0x78e22f22a0
	bool BP_IsItemVisible(Object* Item);// 0x86b540c 0x78e22f2380
	bool BP_GetSelectedItems(out Object*[] Items);// 0x86b54c0 0x78e22f2460
	Object* BP_GetSelectedItem();// 0x86b51b4 0x78e22f2540
	int BP_GetNumItemsSelected();// 0x86b558c 0x78e22f2620
	void BP_ClearSelection();// 0x86b55c0 0x78e22f2700
	void BP_CancelScrollIntoView();// 0x86b52a8 0x78e22f27e0
	void AddItem(Object* Item);// 0x86b5ca0 0x78e22f28c0

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8] 0x7895c1a6a0
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10] 0x7875ff6e00
	delegate OnGetUserMenuContentEvent;//[Offset: 0x138, Size: 0x10] 0x7875ff6e80
	byte Placement;//[Offset: 0x148, Size: 0x1] 0x7875ff6f00
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1] 0x7875ff6f80
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1] 0x7875ff7000
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1] 0x7875ff7080
	delegate OnMenuOpenChanged;//[Offset: 0x150, Size: 0x10] 0x7875ff7100
	void ToggleOpen(bool bFocusOnOpen);// 0x86b91a4 0x7875fec2c0
	bool ShouldOpenDueToClick();// 0x86b9070 0x7875fec3a0
	void SetPlacement(byte InPlacement);// 0x86b9304 0x7875fec480
	void Open(bool bFocusMenu);// 0x86b90f4 0x7875fec560
	bool IsOpen();// 0x86b90a8 0x7875fec640
	bool HasOpenSubMenus();// 0x86b9004 0x7875fec720
	UserWidget* GetUserWidget__DelegateSignature();// 0x6d94ba8 0x7875fec800
	Vector2D GetMenuPosition();// 0x86b903c 0x7875fec8e0
	void FitInWindow(bool bFit);// 0x86b9254 0x7875fec9c0
	void Close();// 0x86b90e0 0x7875fe90e0

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x86b9ae4 0x78e22f4e60

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4] 0x78e22e9200
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xa0] 0x78e22e9280
	MovieSceneFloatChannel Rotation;//[Offset: 0x230, Size: 0xa0] 0x78e22e9300
	MovieSceneFloatChannel Scale;//[Offset: 0x2d0, Size: 0xa0] 0x78e22e9380
	MovieSceneFloatChannel Shear;//[Offset: 0x410, Size: 0xa0] 0x78e22e9400

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4] 0x7875a11b80

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe8, Size: 0xa0] 0x78e22e9000
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x188, Size: 0xa0] 0x78e22e9080
	MovieSceneFloatChannel RightCurve;//[Offset: 0x228, Size: 0xa0] 0x78e22e9100
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2c8, Size: 0xa0] 0x78e22e9180

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0xa8, Size: 0x10] 0x7875d46fa0
	FName TrackName;//[Offset: 0xb8, Size: 0x8] 0x78e22e8f80

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3] 0x7875ff6a00
	byte Justification;//[Offset: 0x10b, Size: 0x1] 0x7875ff6a80
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1] 0x7895c1aa60
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1] 0x7875ff6b80
	float WrapTextAt;//[Offset: 0x110, Size: 0x4] 0x7875ff6c00
	Margin Margin;//[Offset: 0x114, Size: 0x10] 0x7875ff6c80
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4] 0x7875ff6d00
	void SetJustification(byte InJustification);// 0x86d3a18 0x7875fec1e0

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7875ff7f00
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x7875ff7f80
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x7875ff8000
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x270] 0x7875ff8080
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x7875ff8100
	SlateFontInfo Font;//[Offset: 0x3e0, Size: 0x58] 0x7875ff8180
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1] 0x7875ff8200
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1] 0x7875ff8280
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1] 0x7875ff8300
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1] 0x7875ff8380
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1] 0x7875ff8400
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x43d, Size: 0x1] 0x7875ff6380
	enum VirtualKeyboardDismissAction;//[Offset: 0x43e, Size: 0x1] 0x7895c1a740
	delegate OnTextChanged;//[Offset: 0x440, Size: 0x10] 0x7875ff6480
	delegate OnTextCommitted;//[Offset: 0x450, Size: 0x10] 0x7875ff6500
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x86bbfc4 0x7875febae0
	void SetText(FText InText);// 0x86bc388 0x7875febbc0
	void SetIsReadOnly(bool bReadOnly);// 0x86bc084 0x7875febca0
	void SetHintText(FText InHintText);// 0x86bc134 0x7875febd80
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x6d94ba8 0x7875febe60
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x6d94ba8 0x7875febf40
	FText GetText();// 0x86bc50c 0x7875fec020
	FText GetHintText();// 0x86bc2b8 0x7875fec100

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x7875ff9300
	FText HintText;//[Offset: 0x140, Size: 0x18] 0x7875ff9380
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10] 0x7875ff9400
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f8] 0x7875ff9480
	TextBlockStyle TextStyle;//[Offset: 0x960, Size: 0x270] 0x7875ff7400
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1] 0x7875ff7480
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 0x1] 0x7875ff7500
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbd2, Size: 0x1] 0x7875ff7580
	enum VirtualKeyboardDismissAction;//[Offset: 0xbd3, Size: 0x1] 0x7895c1a7e0
	SlateWidgetStyleAsset* Style;//[Offset: 0xbd8, Size: 0x8] 0x7875ff7680
	SlateFontInfo Font;//[Offset: 0xbe0, Size: 0x58] 0x7875ff7700
	LinearColor ForegroundColor;//[Offset: 0xc38, Size: 0x10] 0x7875ff7780
	LinearColor BackgroundColor;//[Offset: 0xc48, Size: 0x10] 0x7875ff7800
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc58, Size: 0x10] 0x7875ff7880
	delegate OnTextChanged;//[Offset: 0xc68, Size: 0x10] 0x7875ff7900
	delegate OnTextCommitted;//[Offset: 0xc78, Size: 0x10] 0x7875ff7980
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x86bcd14 0x7875feb300
	void SetText(FText InText);// 0x86bd25c 0x7875feb3e0
	void SetIsReadOnly(bool bReadOnly);// 0x86bcdd4 0x7875feb4c0
	void SetHintText(FText InHintText);// 0x86bd008 0x7875feb5a0
	void SetError(FText InError);// 0x86bce84 0x7875feb680
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x6d94ba8 0x7875feb760
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x6d94ba8 0x7875feb840
	FText GetText();// 0x86bd3e0 0x7875feb920
	FText GetHintText();// 0x86bd18c 0x7875feba00

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x86be5d4 0x78e22f4d80

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78e22e8b00
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78e22e8b80
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78e22e8c00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86bec50 0x78e22f4ae0
	void SetPadding(Margin InPadding);// 0x86beda0 0x78e22f4bc0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86becf8 0x78e22f4ca0

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0] 0x78e22ea480
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8] 0x78e22ea500
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8] 0x78e22e8480
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8] 0x78e22e8500
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8] 0x78e22e8580
	float Percent;//[Offset: 0x2c8, Size: 0x4] 0x78e22e8600
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1] 0x78e22e8680
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1] 0x78e22e8700
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8] 0x78e22e8780
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10] 0x78e22e8800
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10] 0x78e22e8880
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10] 0x78e22e8900
	void SetPercent(float InPercent);// 0x86c027c 0x78e22f4840
	void SetIsMarquee(bool InbIsMarquee);// 0x86c0124 0x78e22f4920
	void SetFillColorAndOpacity(LinearColor InColor);// 0x86c01d4 0x78e22f4a00

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e22e9e00
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78e22e9e80
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78e22e9f00
	int Phase;//[Offset: 0x11c, Size: 0x4] 0x78e22e9f80
	int PhaseCount;//[Offset: 0x120, Size: 0x4] 0x78e22ea000
	MaterialInterface* EffectMaterial;//[Offset: 0x128, Size: 0x8] 0x78e22ea080
	FName TextureParameter;//[Offset: 0x130, Size: 0x8] 0x78e22ea100
	void SetTextureParameter(FName TextureParameter);// 0x86c0cc4 0x78e22f4300
	void SetRetainRendering(bool bInRetainRendering);// 0x86c0c14 0x78e22f43e0
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x86c0e5c 0x78e22f44c0
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x86c0d6c 0x78e22f45a0
	void RequestRender();// 0x86c0e48 0x78e22f4680
	MaterialInstanceDynamic* GetEffectMaterial();// 0x86c0e14 0x78e22f4760

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78e22eb480
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8] 0x78e22eb500
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10] 0x7875d46c80
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1] 0x78e22eb580
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 0x270] 0x78e22e9500
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 0x4] 0x78e22e9580
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 0x1] 0x7875d46d20
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 0x270] 0x78e22e9680
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 0x10] 0x7875d46dc0
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x86c3fe0 0x78e22f7080
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x86c3c7c 0x78e22f7160
	void SetText(out const FText InText);// 0x86c3d24 0x78e22f7240
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x86c4138 0x78e22f7320
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x86c3f20 0x78e22f3a40
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x86c41e0 0x78e22f3b20
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x86c44f4 0x78e22f3c00
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x86c4598 0x78e22f3ce0
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x86c4358 0x78e22f3dc0
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x86c4640 0x78e22f3ea0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x86c4088 0x78e22f3f80
	FText GetText();// 0x86c3e3c 0x78e22f4060
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x86c3bcc 0x78e22f4140
	void ClearAllDefaultStyleOverrides();// 0x86c3f0c 0x78e22f4220

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8] 0x78e22eb400

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e22eb000
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78e22eb080
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1] 0x78e22eb100
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1] 0x78e22eb180
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x86c58d8 0x78e22f6fa0

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e22ead80
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10] 0x78e22eae00
	byte HAlign;//[Offset: 0x4c, Size: 0x1] 0x78e22eae80
	byte VAlign;//[Offset: 0x4d, Size: 0x1] 0x78e22eaf00
	Margin Padding;//[Offset: 0x50, Size: 0x10] 0x78e22eaf80

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x119, Size: 0x1] 0x78e22ea980
	byte StretchDirection;//[Offset: 0x11a, Size: 0x1] 0x78e22eaa00
	float UserSpecifiedScale;//[Offset: 0x11c, Size: 0x4] 0x78e22eaa80
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78e22eab00
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x86c639c 0x78e22f6c20
	void SetStretchDirection(byte InStretchDirection);// 0x86c6444 0x78e22f6d00
	void SetStretch(byte InStretch);// 0x86c64ec 0x78e22f6de0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x86c62ec 0x78e22f6ec0

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22ea680
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22ea700
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22ea780
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86c6b28 0x78e22f6980
	void SetPadding(Margin InPadding);// 0x86c6c78 0x78e22f6a60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86c6bd0 0x78e22f6b40

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0] 0x78e22ec300
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8] 0x78e22ec380
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1] 0x78e22ec400
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1] 0x78e22ec480
	byte Orientation;//[Offset: 0x5e2, Size: 0x1] 0x78e22ec500
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8] 0x78e22ec580
	Margin Padding;//[Offset: 0x5ec, Size: 0x10] 0x78e22ec600
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x86c724c 0x78e22f68a0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228] 0x78e22ed080
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0] 0x78e22ed100
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8] 0x78e22ed180
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8] 0x78e22ed200
	byte Orientation;//[Offset: 0x828, Size: 0x1] 0x78e22ed280
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1] 0x7875d49020
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1] 0x7875d46780
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8] 0x78e22ed400
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10] 0x78e22ed480
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1] 0x78e22ed500
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1] 0x78e22ed580
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1] 0x78e22ed600
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1] 0x78e22ed680
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1] 0x7875d46820
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4] 0x78e22eb680
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1] 0x7875d468c0
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1] 0x78e22eb780
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4] 0x78e22eb800
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10] 0x78e22eb880
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x86c7bf0 0x78e22f58e0
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x86c7b48 0x78e22f59c0
	void SetScrollOffset(float NewScrollOffset);// 0x86c7a8c 0x78e22f5aa0
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x86c800c 0x78e22f5b80
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x86c7f5c 0x78e22f5c60
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x86c7ea8 0x78e22f5d40
	void SetOrientation(byte NewOrientation);// 0x86c80b4 0x78e22f5e20
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x86c815c 0x78e22f5f00
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x86c7c98 0x78e22f5fe0
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x86c7df8 0x78e22f60c0
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x86c7d48 0x78e22f61a0
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x86c7840 0x78e22f6280
	void ScrollToStart();// 0x86c79dc 0x78e22f6360
	void ScrollToEnd();// 0x86c79c8 0x78e22f6440
	float GetViewOffsetFraction();// 0x86c79f0 0x78e22f6520
	float GetScrollOffsetOfEnd();// 0x86c7a24 0x78e22f6600
	float GetScrollOffset();// 0x86c7a58 0x78e22f66e0
	void EndInertialScrolling();// 0x86c7b34 0x78e22f67c0

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22ecd80
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e22ece00
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e22ece80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86c8c38 0x78e22f9000
	void SetPadding(Margin InPadding);// 0x86c8d88 0x78e22f5720
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86c8ce0 0x78e22f5800

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 0x4] 0x78e22ee280
	float HeightOverride;//[Offset: 0x134, Size: 0x4] 0x78e22ee300
	float MinDesiredWidth;//[Offset: 0x138, Size: 0x4] 0x78e22ee380
	float MinDesiredHeight;//[Offset: 0x13c, Size: 0x4] 0x78e22ee400
	float MaxDesiredWidth;//[Offset: 0x140, Size: 0x4] 0x78e22ee480
	float MaxDesiredHeight;//[Offset: 0x144, Size: 0x4] 0x78e22ee500
	float MinAspectRatio;//[Offset: 0x148, Size: 0x4] 0x78e22ee580
	float MaxAspectRatio;//[Offset: 0x14c, Size: 0x4] 0x78e22ee600
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1] 0x78e22ee680
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1] 0x78e22ee700
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1] 0x78e22ec680
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1] 0x78e22ec700
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1] 0x78e22ec780
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1] 0x78e22ec800
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1] 0x78e22ec880
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1] 0x78e22ec900
	void SetWidthOverride(float InWidthOverride);// 0x86c9890 0x78e22f8200
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x86c9718 0x78e22f82e0
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x86c965c 0x78e22f83c0
	void SetMinAspectRatio(float InMinAspectRatio);// 0x86c9428 0x78e22f84a0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x86c95a0 0x78e22f8580
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x86c94e4 0x78e22f8660
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x86c9380 0x78e22f8740
	void SetHeightOverride(float InHeightOverride);// 0x86c97d4 0x78e22f8820
	void ClearWidthOverride();// 0x86c987c 0x78e22f8900
	void ClearMinDesiredWidth();// 0x86c9704 0x78e22f89e0
	void ClearMinDesiredHeight();// 0x86c9648 0x78e22f8ac0
	void ClearMinAspectRatio();// 0x86c936c 0x78e22f8ba0
	void ClearMaxDesiredWidth();// 0x86c958c 0x78e22f8c80
	void ClearMaxDesiredHeight();// 0x86c94d0 0x78e22f8d60
	void ClearMaxAspectRatio();// 0x86c9358 0x78e22f8e40
	void ClearHeightOverride();// 0x86c97c0 0x78e22f8f20

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e22edf80
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78e22ee000
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78e22ee080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86ca2b8 0x78e22f7f60
	void SetPadding(Margin InPadding);// 0x86ca408 0x78e22f8040
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86ca360 0x78e22f8120

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x86cb434 0x78e22fab20
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x86cb52c 0x78e22fac00
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x86cb624 0x78e22face0
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x86cb720 0x78e22f7400
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x86cac8c 0x78e22f74e0
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x86cab0c 0x78e22f75c0
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x86ca9e0 0x78e22f76a0
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x86cafd8 0x78e22f7780
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x86cba44 0x78e22f7860
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x86cbc34 0x78e22f7940
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x86cb98c 0x78e22f7a20
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0x86cb8d4 0x78e22f7b00
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x86cb81c 0x78e22f7be0
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x86cb1a4 0x78e22f7cc0
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x86cae58 0x78e22f7da0
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x86cbb3c 0x78e22f7e80

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10] 0x7875d48ee0
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10] 0x7875d48f80
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8] 0x78e22efe00
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8] 0x78e22efe80
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8] 0x78e22eff00

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8] 0x7875a11400
	Color Color;//[Offset: 0x8, Size: 0x4] 0x7875a11480
	Vector2D UV0;//[Offset: 0xc, Size: 0x8] 0x7875a11500
	Vector2D UV1;//[Offset: 0x14, Size: 0x8] 0x7875a11580
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8] 0x7875a11600
	Vector2D UV3;//[Offset: 0x24, Size: 0x8] 0x7875a11680
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8] 0x7875a11700
	Vector2D UV5;//[Offset: 0x34, Size: 0x8] 0x7875a11780

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x78e2300780
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x78e2300800
	float MinValue;//[Offset: 0x11c, Size: 0x4] 0x78e2300880
	float MaxValue;//[Offset: 0x120, Size: 0x4] 0x78e2300900
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340] 0x78e2300980
	byte Orientation;//[Offset: 0x468, Size: 0x1] 0x78e2300a00
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10] 0x78e2300a80
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10] 0x78e2300b00
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x78e2300b80
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1] 0x78e2300c00
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1] 0x78e2300c80
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1] 0x78e2300d00
	float StepSize;//[Offset: 0x490, Size: 0x4] 0x78e2300d80
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1] 0x78e2300e00
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10] 0x78e2300e80
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10] 0x78e2300f00
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10] 0x78e2300f80
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10] 0x78e2301000
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10] 0x78e2301080
	void SetValue(float InValue);// 0x86cf7a8 0x78e22fa260
	void SetStepSize(float InValue);// 0x86cf450 0x78e22fa340
	void SetSliderHandleColor(LinearColor InValue);// 0x86cf300 0x78e22fa420
	void SetSliderBarColor(LinearColor InValue);// 0x86cf3a8 0x78e22fa500
	void SetMinValue(float InValue);// 0x86cf700 0x78e22fa5e0
	void SetMaxValue(float InValue);// 0x86cf658 0x78e22fa6c0
	void SetLocked(bool InValue);// 0x86cf4f8 0x78e22fa7a0
	void SetIndentHandle(bool InValue);// 0x86cf5a8 0x78e22fa880
	float GetValue();// 0x86cf884 0x78e22fa960
	float GetNormalizedValue();// 0x86cf850 0x78e22faa40

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88] 0x7875968a80
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88] 0x7875968b00
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88] 0x7875968b80
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88] 0x7875968c00
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88] 0x7875968c80
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88] 0x7875968d00
	float BarThickness;//[Offset: 0x338, Size: 0x4] 0x7875968d80

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 0x8] 0x78e2300680
	void SetSize(Vector2D InSize);// 0x86d0070 0x78e22fa180

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4] 0x7875ff9600
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10] 0x7875ff9680
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8] 0x7875ff9a80
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8] 0x7875ff9b00
	int MinFractionalDigits;//[Offset: 0x410, Size: 0x4] 0x7875ff9b80
	int MaxFractionalDigits;//[Offset: 0x414, Size: 0x4] 0x7875ff9c00
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1] 0x7875ff9c80
	float Delta;//[Offset: 0x41c, Size: 0x4] 0x7875ff9d00
	float SliderExponent;//[Offset: 0x420, Size: 0x4] 0x7875ff9d80
	SlateFontInfo Font;//[Offset: 0x428, Size: 0x58] 0x7875ff9e00
	byte Justification;//[Offset: 0x480, Size: 0x1] 0x7875ff9e80
	float MinDesiredWidth;//[Offset: 0x484, Size: 0x4] 0x7875ff9f00
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1] 0x7875ff9f80
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1] 0x7875ffa000
	SlateColor ForegroundColor;//[Offset: 0x490, Size: 0x28] 0x7875ffa080
	delegate OnValueChanged;//[Offset: 0x4b8, Size: 0x10] 0x7875ffa100
	delegate OnValueCommitted;//[Offset: 0x4c8, Size: 0x10] 0x7875ffa180
	delegate OnBeginSliderMovement;//[Offset: 0x4d8, Size: 0x10] 0x7875ffa200
	delegate OnEndSliderMovement;//[Offset: 0x4e8, Size: 0x10] 0x7875ffa280
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8, Size: 0x1] 0x7875ffa300
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8, Size: 0x1] 0x7875ffa380
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f8, Size: 0x1] 0x7875ffa400
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f8, Size: 0x1] 0x7875ffa480
	float MinValue;//[Offset: 0x4fc, Size: 0x4] 0x7875ffa500
	float MaxValue;//[Offset: 0x500, Size: 0x4] 0x7875ff8480
	float MinSliderValue;//[Offset: 0x504, Size: 0x4] 0x7875ff8500
	float MaxSliderValue;//[Offset: 0x508, Size: 0x4] 0x7875ff8580
	void SetValue(float NewValue);// 0x86d0fa4 0x7875fed0c0
	void SetMinValue(float NewValue);// 0x86d0b4c 0x7875fed1a0
	void SetMinSliderValue(float NewValue);// 0x86d096c 0x7875fed280
	void SetMinFractionalDigits(int NewValue);// 0x86d0ec8 0x7875fed360
	void SetMaxValue(float NewValue);// 0x86d0a5c 0x7875fed440
	void SetMaxSliderValue(float NewValue);// 0x86d087c 0x7875fed520
	void SetMaxFractionalDigits(int NewValue);// 0x86d0dec 0x7875fed600
	void SetForegroundColor(SlateColor InForegroundColor);// 0x86d06d0 0x7875fed6e0
	void SetDelta(float NewValue);// 0x86d0c28 0x7875fed7c0
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x86d0d04 0x7875fed8a0
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x6d94ba8 0x7875fed980
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x6d94ba8 0x7875feda60
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x6d94ba8 0x7875fedb40
	float GetValue();// 0x86d104c 0x7875fedc20
	float GetMinValue();// 0x86d0bf4 0x7875fedd00
	float GetMinSliderValue();// 0x86d0a14 0x7875fedde0
	int GetMinFractionalDigits();// 0x86d0f70 0x7875fedec0
	float GetMaxValue();// 0x86d0b04 0x7875fedfa0
	float GetMaxSliderValue();// 0x86d0924 0x7875fee080
	int GetMaxFractionalDigits();// 0x86d0e94 0x7875fee160
	float GetDelta();// 0x86d0cd0 0x7875fee240
	bool GetAlwaysUsesDeltaSnap();// 0x86d0db4 0x7875fee320
	void ClearMinValue();// 0x86d0b38 0x7875fee400
	void ClearMinSliderValue();// 0x86d0958 0x7875fee4e0
	void ClearMaxValue();// 0x86d0a48 0x7875fee5c0
	void ClearMaxSliderValue();// 0x86d0868 0x7875fee6a0

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x86d1cc4 0x78e22f9fc0
	FString GetStringValue();// 0x86d1c14 0x78e22fa0a0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18] 0x78e2301900
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10] 0x78e2301980
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28] 0x78e2301a00
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10] 0x78e2301a80
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x58] 0x78e2301b00
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 0x88] 0x78e2301b80
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 0x8] 0x78e2301c00
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 0x10] 0x78e2301c80
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 0x10] 0x78e2301d00
	float MinDesiredWidth;//[Offset: 0x290, Size: 0x4] 0x78e2301d80
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1] 0x78e2301e00
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1] 0x78e2301e80
	enum TextTransformPolicy;//[Offset: 0x296, Size: 0x1] 0x7875d48da0
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1] 0x78e2301f80
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x86d255c 0x78e22f9460
	void SetText(FText InText);// 0x86d2298 0x78e22f9540
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x86d275c 0x78e22f9620
	void SetShadowOffset(Vector2D InShadowOffset);// 0x86d2bac 0x78e22f9700
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x86d2c50 0x78e22f97e0
	void SetOpacity(float InOpacity);// 0x86d2cf8 0x78e22f98c0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x86d26b4 0x78e22f99a0
	void SetFont(SlateFontInfo InFontInfo);// 0x86d2a10 0x78e22f9a80
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x86d2da0 0x78e22f9b60
	void SetAutoWrapText(bool InAutoTextWrap);// 0x86d2604 0x78e22f9c40
	FText GetText();// 0x86d2424 0x78e22f9d20
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x86d24f4 0x78e22f9e00
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x86d2528 0x78e22f9ee0

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4] 0x78e2301400
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1] 0x78e2301480
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1] 0x78e2301500
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1] 0x78e2301580
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8] 0x78e2301600
	SlateBrush Image;//[Offset: 0x118, Size: 0x88] 0x78e2301680
	void SetNumberOfPieces(int InNumberOfPieces);// 0x86d4048 0x78e22f90e0
	void SetAnimateVertically(bool bInAnimateVertically);// 0x86d3ee8 0x78e22f91c0
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x86d3e38 0x78e22f92a0
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x86d3f98 0x78e22f9380

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x368, Size: 0x4] 0x78e2303100
	float EntryWidth;//[Offset: 0x36c, Size: 0x4] 0x78e2303180
	enum TileAlignment;//[Offset: 0x370, Size: 0x1] 0x7875d48d00
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1] 0x78e2301180
	void SetEntryWidth(float NewWidth);// 0x86d46e8 0x78e22fc720
	void SetEntryHeight(float NewHeight);// 0x86d4790 0x78e22fc800
	float GetEntryWidth();// 0x86d46b0 0x78e22fc8e0
	float GetEntryHeight();// 0x86d46cc 0x78e22fc9c0

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x378, Size: 0x10] 0x78e2302f00
	delegate BP_OnItemExpansionChanged;//[Offset: 0x388, Size: 0x10] 0x78e2302f80
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0x86d68a4 0x78e22fc480
	void ExpandAll();// 0x86d6890 0x78e22fc560
	void CollapseAll();// 0x86d687c 0x78e22fc640

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x11c, Size: 0x10] 0x78e2302700
	float MinDesiredSlotWidth;//[Offset: 0x12c, Size: 0x4] 0x78e2302780
	float MinDesiredSlotHeight;//[Offset: 0x130, Size: 0x4] 0x78e2302800
	void SetSlotPadding(Margin InSlotPadding);// 0x86d7cc8 0x78e22fbf40
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x86d7c20 0x78e22fc020
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x86d7b78 0x78e22fc100
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x86d7a34 0x78e22fc1e0

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1] 0x78e2302300
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1] 0x78e2302380
	int Row;//[Offset: 0x3c, Size: 0x4] 0x78e2302400
	int Column;//[Offset: 0x40, Size: 0x4] 0x78e2302480
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86d83b0 0x78e22fbbc0
	void SetRow(int InRow);// 0x86d85a8 0x78e22fbca0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86d8458 0x78e22fbd80
	void SetColumn(int InColumn);// 0x86d8500 0x78e22fbe60

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x86e3780 0x78e22fbae0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8] 0x78e2303f00
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78e2303f80
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1] 0x78e2304000
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1] 0x78e2304080
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86e3e38 0x78e22fb760
	void SetSize(SlateChildSize InSize);// 0x86e3f88 0x78e22fb840
	void SetPadding(Margin InPadding);// 0x86e403c 0x78e22fb920
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86e3ee0 0x78e22fba00

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x11c, Size: 0x10] 0x78e2303b80
	Actor* Spawn(class Actor ActorClass);// 0x86e45ac 0x78e22fb220
	void SetViewRotation(Rotator Rotation);// 0x86e465c 0x78e22fb300
	void SetViewLocation(Vector Location);// 0x86e473c 0x78e22fb3e0
	Rotator GetViewRotation();// 0x86e4704 0x78e22fb4c0
	World* GetViewportWorld();// 0x86e481c 0x78e22fb5a0
	Vector GetViewLocation();// 0x86e47e4 0x78e22fb680

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x86e4eb8 0x78e22fb140

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10] 0x7875d489e0

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1] 0x78759e3800
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8] 0x7875a12c80
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8] 0x7875a12d00
	FName UserTag;//[Offset: 0x14, Size: 0x8] 0x7875a12d80

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10] 0x78e2304a80
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x86eac80 0x78e22fe240
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x86eaf38 0x78e22fe320

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x86eb664 0x78e22fe160

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x358, Size: 0x8] 0x78e2306200
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1] 0x78e2306280
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x368, Size: 0x10] 0x7875d48580
	WidgetAnimation*[] Animations;//[Offset: 0x378, Size: 0x10] 0x7875d48620
	FName[] NamedSlots;//[Offset: 0x388, Size: 0x10] 0x7875d486c0

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10] 0x7875a12980
	FName PropertyName;//[Offset: 0x10, Size: 0x8] 0x7875a12a00
	FName FunctionName;//[Offset: 0x18, Size: 0x8] 0x7875a12a80
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28] 0x7875a12b00
	enum Kind;//[Offset: 0x48, Size: 0x1] 0x78759e3760

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static EventReply UnlockMouse(out EventReply Reply);// 0x86ef1e4 0x7875fe5c60
	static EventReply Unhandled();// 0x86ef6cc 0x7875fe5d40
	static void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x86ec304 0x7875fe5e20
	static void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x86ec248 0x7875fe5f00
	static void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x86ec1a8 0x7875fe5fe0
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x86ef030 0x7875fe60c0
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x86eea50 0x7875fe61a0
	static void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x86f0578 0x7875fe6280
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x86f06a4 0x7875fe6360
	static void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x86f01dc 0x7875fe6440
	static void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x86f0274 0x7875fe6520
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x86f03f4 0x7875fe6600
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x86ec4d4 0x7875fe66e0
	static void SetFocusToGameViewport();// 0x86f01c8 0x7875fe67c0
	static void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x86ec65c 0x7875fe68a0
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x86ed7c4 0x7875fe6980
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x86ed610 0x7875fe6a60
	static void RestorePreviousWindowTitleBarState();// 0x86ec2f0 0x7875fe6b40
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0x86ef458 0x7875fe6c20
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x86eebac 0x7875fe6d00
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x6d94ba8 0x7875fe6de0
	static SlateBrush NoResourceBrush();// 0x86ed4e0 0x7875fe6ec0
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x86edfe8 0x7875fe6fa0
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x86edde0 0x7875fe7080
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x86ee1f0 0x7875fe7160
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x86ef2f8 0x7875fe7240
	static bool IsDragDropping();// 0x86ee3ac 0x7875fe7320
	static EventReply Handled();// 0x86ef73c 0x7875fe3a40
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x86ec7e4 0x7875fe3b20
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x86ecc9c 0x7875fe3c00
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x86eca5c 0x7875fe3ce0
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x86ec97c 0x7875fe3dc0
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x86eced8 0x7875fe3ea0
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x86ecbc0 0x7875fe3f80
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x86ed368 0x7875fe4060
	static DragDropOperation* GetDragDroppingContent();// 0x86ee378 0x7875fe4140
	static Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x86edaf0 0x7875fe4220
	static MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x86ed978 0x7875fe4300
	static Object* GetBrushResource(out const SlateBrush Brush);// 0x86edc68 0x7875fe43e0
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x86ed01c 0x7875fe44c0
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x86ed1b8 0x7875fe45a0
	static EventReply EndDragDrop(out EventReply Reply);// 0x86ee3e4 0x7875fe4680
	static void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x86ef7ac 0x7875fe4760
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0x86efa74 0x7875fe4840
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x86efc00 0x7875fe4920
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x86efdec 0x7875fe4a00
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x86f0000 0x7875fe4ae0
	static void DismissAllMenus();// 0x86ed354 0x7875fe4bc0
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x86ee4f8 0x7875fe4ca0
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x86ee7d4 0x7875fe4d80
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x86f07d8 0x7875fe4e60
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x86f0880 0x7875fe4f40
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x86eed14 0x7875fe5020
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x86ef56c 0x7875fe5100
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x86eee7c 0x7875fe51e0
	static void CancelDragDrop();// 0x86ee364 0x7875fe52c0

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x469, Size: 0x1] 0x7875d47cc0
	enum TimingPolicy;//[Offset: 0x46a, Size: 0x1] 0x7875d47d60
	class UserWidget* WidgetClass;//[Offset: 0x470, Size: 0x8] 0x7875d47e00
	IntPoint DrawSize;//[Offset: 0x478, Size: 0x8] 0x78e2307f80
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1] 0x78e2308000
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1] 0x78e2308080
	float RedrawTime;//[Offset: 0x484, Size: 0x4] 0x78e2308100
	IntPoint CurrentDrawSize;//[Offset: 0x490, Size: 0x8] 0x78e2308180
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1] 0x78e2308200
	Vector2D Pivot;//[Offset: 0x49c, Size: 0x8] 0x78e2308280
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1] 0x78e2308300
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1] 0x78e2308380
	enum WindowVisibility;//[Offset: 0x4a6, Size: 0x1] 0x7875d47ea0
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 0x1] 0x78e2306380
	LocalPlayer* OwnerPlayer;//[Offset: 0x4a8, Size: 0x8] 0x78e2306400
	LinearColor BackgroundColor;//[Offset: 0x4b0, Size: 0x10] 0x78e2306480
	LinearColor TintColorAndOpacity;//[Offset: 0x4c0, Size: 0x10] 0x78e2306500
	float OpacityFromTexture;//[Offset: 0x4d0, Size: 0x4] 0x78e2306580
	enum BlendMode;//[Offset: 0x4d4, Size: 0x1] 0x7875d47f40
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1] 0x78e2306680
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 0x1] 0x78e2306700
	BodySetup* BodySetup;//[Offset: 0x4d8, Size: 0x8] 0x78e2306780
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4e0, Size: 0x8] 0x78e2306800
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4e8, Size: 0x8] 0x78e2306880
	MaterialInterface* OpaqueMaterial;//[Offset: 0x4f0, Size: 0x8] 0x78e2306900
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x4f8, Size: 0x8] 0x78e2306980
	MaterialInterface* MaskedMaterial;//[Offset: 0x500, Size: 0x8] 0x78e2306a00
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x508, Size: 0x8] 0x78e2306a80
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x510, Size: 0x8] 0x78e2306b00
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x518, Size: 0x8] 0x78e2306b80
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1] 0x78e2306c00
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1] 0x78e2306c80
	FName SharedLayerName;//[Offset: 0x524, Size: 0x8] 0x78e2306d00
	int LayerZOrder;//[Offset: 0x52c, Size: 0x4] 0x78e2306d80
	enum GeometryMode;//[Offset: 0x530, Size: 0x1] 0x7875d47fe0
	float CylinderArcAngle;//[Offset: 0x534, Size: 0x4] 0x78e2306e80
	enum TickMode;//[Offset: 0x538, Size: 0x1] 0x7875d48080
	UserWidget* Widget;//[Offset: 0x560, Size: 0x8] 0x78e2306f80
	void SetWindowVisibility(enum InVisibility);// 0x86f26e4 0x78e22ff580
	void SetWindowFocusable(bool bInWindowFocusable);// 0x86f27a8 0x78e22ff660
	void SetWidgetSpace(enum NewSpace);// 0x86f29f4 0x78e22ff740
	void SetWidget(UserWidget* Widget);// 0x86f32e0 0x78e22ff820
	void SetTwoSided(const bool bWantTwoSided);// 0x86f2f28 0x78e22ff900
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x86f2d10 0x78e22ff9e0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x86f2e60 0x78e22ffac0
	void SetTickMode(enum InTickMode);// 0x86f263c 0x78e22ffba0
	void SetRedrawTime(float InRedrawTime);// 0x86f2ab4 0x78e22ffc80
	void SetPivot(out const Vector2D InPivot);// 0x86f2c3c 0x78e22ffd60
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x86f3238 0x78e22ffe40
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x86f316c 0x78e22fff20
	void SetGeometryMode(enum InGeometryMode);// 0x86f2934 0x78e22fcaa0
	void SetDrawSize(Vector2D Size);// 0x86f302c 0x78e22fcb80
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x86f2b74 0x78e22fcc60
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x86f2874 0x78e22fcd40
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x86f2db8 0x78e22fce20
	void RequestRenderUpdate();// 0x86f2ff4 0x78e22fcf00
	void RequestRedraw();// 0x86f3010 0x78e22fcfe0
	bool IsWidgetVisible();// 0x86f2604 0x78e22fd0c0
	enum GetWindowVisiblility();// 0x86f278c 0x78e22fd1a0
	bool GetWindowFocusable();// 0x86f2858 0x78e22fd280
	enum GetWidgetSpace();// 0x86f2a98 0x78e22fd360
	UserWidget* GetWidget();// 0x86f3390 0x78e22fd440
	UserWidget* GetUserWidgetObject();// 0x86f3434 0x78e22fd520
	bool GetTwoSided();// 0x86f2fd8 0x78e22fd600
	bool GetTickWhenOffscreen();// 0x86f2f0c 0x78e22fd6e0
	TextureRenderTarget2D* GetRenderTarget();// 0x86f3400 0x78e22fd7c0
	float GetRedrawTime();// 0x86f2b58 0x78e22fd8a0
	Vector2D GetPivot();// 0x86f2cf0 0x78e22fd980
	LocalPlayer* GetOwnerPlayer();// 0x86f3138 0x78e22fda60
	MaterialInstanceDynamic* GetMaterialInstance();// 0x86f33cc 0x78e22fdb40
	bool GetManuallyRedraw();// 0x86f321c 0x78e22fdc20
	enum GetGeometryMode();// 0x86f29d8 0x78e22fdd00
	Vector2D GetDrawSize();// 0x86f3104 0x78e22fdde0
	bool GetDrawAtDesiredSize();// 0x86f2c20 0x78e22fdec0
	float GetCylinderArcAngle();// 0x86f2918 0x78e22fdfa0
	Vector2D GetCurrentDrawSize();// 0x86f30d0 0x78e22fe080

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x1f8, Size: 0x10] 0x78e2308b80
	int VirtualUserIndex;//[Offset: 0x218, Size: 0x4] 0x78e2308c00
	int PointerIndex;//[Offset: 0x21c, Size: 0x4] 0x78e2308c80
	byte TraceChannel;//[Offset: 0x220, Size: 0x1] 0x78e2308d00
	float InteractionDistance;//[Offset: 0x224, Size: 0x4] 0x78e2308d80
	enum InteractionSource;//[Offset: 0x228, Size: 0x1] 0x7875d47c20
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1] 0x78e2308e80
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1] 0x78e2308f00
	float DebugSphereLineThickness;//[Offset: 0x22c, Size: 0x4] 0x78e2308f80
	float DebugLineThickness;//[Offset: 0x230, Size: 0x4] 0x78e2309000
	LinearColor DebugColor;//[Offset: 0x234, Size: 0x10] 0x78e2309080
	HitResult CustomHitResult;//[Offset: 0x2c0, Size: 0x88] 0x78e2309100
	Vector2D LocalHitLocation;//[Offset: 0x348, Size: 0x8] 0x78e2309180
	Vector2D LastLocalHitLocation;//[Offset: 0x350, Size: 0x8] 0x78e2309200
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x358, Size: 0x8] 0x78e2309280
	HitResult LastHitResult;//[Offset: 0x360, Size: 0x88] 0x78e2309300
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1] 0x78e2309380
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1] 0x78e2309400
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 0x1] 0x78e2309480
	void SetFocus(Widget* FocusWidget);// 0x86f66c4 0x78e22fe860
	void SetCustomHitResult(out const HitResult HitResult);// 0x86f676c 0x78e22fe940
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x86f6a5c 0x78e22fea20
	void ScrollWheel(float ScrollDelta);// 0x86f69ac 0x78e22feb00
	void ReleasePointerKey(Key Key);// 0x86f70e4 0x78e22febe0
	bool ReleaseKey(Key Key);// 0x86f6d60 0x78e22fecc0
	void PressPointerKey(Key Key);// 0x86f7270 0x78e22feda0
	bool PressKey(Key Key, bool bRepeat);// 0x86f6ef8 0x78e22fee80
	bool PressAndReleaseKey(Key Key);// 0x86f6bc8 0x78e22fef60
	bool IsOverInteractableWidget();// 0x86f6940 0x78e22ff040
	bool IsOverHitTestVisibleWidget();// 0x86f68d0 0x78e22ff120
	bool IsOverFocusableWidget();// 0x86f6908 0x78e22ff200
	HitResult GetLastHitResult();// 0x86f6870 0x78e22ff2e0
	WidgetComponent* GetHoveredWidgetComponent();// 0x86f6978 0x78e22ff3c0
	Vector2D Get2DHitLocation();// 0x86f683c 0x78e22ff4a0

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	static WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x86f7fa4 0x78e2310b00
	static WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x86f7efc 0x78e2310be0
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x86f82ec 0x78e2310cc0
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x86f8394 0x78e2310da0
	static SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x86f804c 0x78e2310e80
	static ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x86f8244 0x78e2310f60
	static ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x86f80f4 0x78e2311040
	static SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x86f819c 0x78e2311120
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x86f843c 0x78e2311200
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x86f84e4 0x78e23112e0
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0x86f858c 0x78e23113c0
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x86f8634 0x78e23114a0
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x86f86dc 0x78e2311580
	static void RemoveAllWidgets(Object* WorldContextObject);// 0x86f7e64 0x78e2311660
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x86f8c6c 0x78e2311740
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x86f8a68 0x78e2311820
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0x86f8b1c 0x78e2311900
	static float GetViewportScale(Object* WorldContextObject);// 0x86f8bc4 0x78e23119e0
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x86f89b4 0x78e2311ac0
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x86f8784 0x78e2311ba0
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x86f88d8 0x78e2311c80
	static Vector2D GetMousePositionOnPlatform();// 0x86f8980 0x78e22fe780

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e230bc80
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e230bd00
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4] 0x78e230bd80
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78e230be00
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78e230be80
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86fc888 0x78e2313180
	void SetPadding(Margin InPadding);// 0x86fcb30 0x78e2313260
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86fc930 0x78e2313340
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x86fc9d8 0x78e2313420
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x86fca80 0x78e2313500

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10] 0x78e230ab00
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1] 0x78e230ab80
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1] 0x78e230ac00
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86fa8cc 0x78e2310320
	void SetPadding(Margin InPadding);// 0x86faa1c 0x78e2310400
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86fa974 0x78e23104e0

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x11c, Size: 0x4] 0x78e230ae00
	void SetActiveWidgetIndex(int Index);// 0x86fa1ac 0x78e23105c0
	void SetActiveWidget(Widget* Widget);// 0x86fa0fc 0x78e23106a0
	Widget* GetWidgetAtIndex(int Index);// 0x86fa04c 0x78e2310780
	int GetNumWidgets();// 0x86fa290 0x78e2310860
	int GetActiveWidgetIndex();// 0x86fa25c 0x78e2310940
	Widget* GetActiveWidget();// 0x86fa018 0x78e2310a20

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1] 0x78e230a800
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1] 0x78e230a880
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86fb3e0 0x78e2310080
	void SetPadding(Margin InPadding);// 0x86fb530 0x78e2310160
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86fb488 0x78e2310240

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10] 0x78e230c600
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1] 0x78e230a580
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1] 0x78e230a600
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x86fbb1c 0x78e23137a0
	void SetPadding(Margin InPadding);// 0x86fbc6c 0x78e2313880
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x86fbbc4 0x78e2313960

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x11c, Size: 0x8] 0x78e230c180
	float WrapWidth;//[Offset: 0x124, Size: 0x4] 0x78e230c200
	float WrapSize;//[Offset: 0x128, Size: 0x4] 0x78e230c280
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1] 0x78e230c300
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1] 0x78e230c380
	byte Orientation;//[Offset: 0x12e, Size: 0x1] 0x78e230c400
	void SetInnerSlotPadding(Vector2D InPadding);// 0x86fc2f0 0x78e23135e0
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x86fc240 0x78e23136c0

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x220, Size: 0x4] 0x78e230b800
	float CraneYaw;//[Offset: 0x224, Size: 0x4] 0x78e230b880
	float CraneArmLength;//[Offset: 0x228, Size: 0x4] 0x78e230b900
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1] 0x78e230b980
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1] 0x78e230ba00
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8] 0x78e230ba80
	SceneComponent* CraneYawControl;//[Offset: 0x238, Size: 0x8] 0x78e230bb00
	SceneComponent* CranePitchControl;//[Offset: 0x240, Size: 0x8] 0x78e230bb80
	SceneComponent* CraneCameraMount;//[Offset: 0x248, Size: 0x8] 0x78e230bc00

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x220, Size: 0x4] 0x78e230d600
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1] 0x78e230d680
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 0x8] 0x78e230b600
	SplineComponent* RailSplineComponent;//[Offset: 0x230, Size: 0x8] 0x78e230b680
	SceneComponent* RailCameraMount;//[Offset: 0x238, Size: 0x8] 0x78e230b700
	SplineComponent* GetRailSplineComponent();// 0x8701258 0x78e23130a0

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7b0, Size: 0x50] 0x78e230d080
	CineCameraComponent* GetCineCameraComponent();// 0x87018d0 0x78e2312ee0

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875a14080
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875a14100
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4] 0x7875a14180
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28] 0x7875a14200
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc] 0x7875a12180
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1] 0x7875a12200

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7d0, Size: 0xc] 0x78e230d880
	CameraFilmbackSettings Filmback;//[Offset: 0x7dc, Size: 0xc] 0x78e230d900
	CameraLensSettings LensSettings;//[Offset: 0x7e8, Size: 0x18] 0x78e230d980
	CameraFocusSettings FocusSettings;//[Offset: 0x800, Size: 0x58] 0x78e230da00
	float CurrentFocalLength;//[Offset: 0x858, Size: 0x4] 0x78e230da80
	float CurrentAperture;//[Offset: 0x85c, Size: 0x4] 0x78e230db00
	float CurrentFocusDistance;//[Offset: 0x860, Size: 0x4] 0x78e230db80
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x870, Size: 0x10] 0x7875d4a2e0
	NamedLensPreset[] LensPresets;//[Offset: 0x880, Size: 0x10] 0x7875d4a380
	FString DefaultFilmbackPresetName;//[Offset: 0x890, Size: 0x10] 0x78e230dd00
	FString DefaultFilmbackPreset;//[Offset: 0x8a0, Size: 0x10] 0x78e230dd80
	FString DefaultLensPresetName;//[Offset: 0x8b0, Size: 0x10] 0x78e230de00
	float DefaultLensFocalLength;//[Offset: 0x8c0, Size: 0x4] 0x78e230de80
	float DefaultLensFStop;//[Offset: 0x8c4, Size: 0x4] 0x78e230df00
	void SetLensPresetByName(FString InPresetName);// 0x8702b60 0x78e2315480
	void SetFilmbackPresetByName(FString InPresetName);// 0x8702cc4 0x78e2315560
	void SetCurrentFocalLength(float InFocalLength);// 0x8702f7c 0x78e2315640
	float GetVerticalFieldOfView();// 0x8702f14 0x78e2311d60
	static NamedLensPreset[] GetLensPresetsCopy();// 0x8702930 0x78e2311e40
	FString GetLensPresetName();// 0x8702c14 0x78e2311f20
	float GetHorizontalFieldOfView();// 0x8702f48 0x78e2312000
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x8702a48 0x78e23120e0
	FString GetFilmbackPresetName();// 0x8702e64 0x78e23121c0
	FString GetDefaultFilmbackPresetName();// 0x8702d78 0x78e23122a0

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7875a13700
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18] 0x7875a13a80

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7875a13480
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc] 0x7875a13680

--------------------------------
Class: DummyEndpointSettings.AudioEndpointSettingsBase.Object

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	static float TrimAudioCache(float InMegabytesToFree);// 0x87bc480 0x78e2317080
	static SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x87bd9c0 0x78e2317160
	static void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x87bc2c0 0x78e2317240
	static void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x87bd4c4 0x78e2317320
	static void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x87bdc50 0x78e2313a40
	static void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x87bc3a0 0x78e2313b20
	static void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x87bd5a4 0x78e2313c00
	static void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0x87bdeac 0x78e2313ce0
	static void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x87bc798 0x78e2313dc0
	static void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x87bd800 0x78e2313ea0
	static void ReplaceSubmixEffect(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87be170 0x78e2313f80
	static void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87be2e8 0x78e2314060
	static void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x87be58c 0x78e2314140
	static void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87be7e4 0x78e2314220
	static void RemoveSubmixEffectAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x87be460 0x78e2314300
	static void RemoveSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87be6b8 0x78e23143e0
	static void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x87bc914 0x78e23144c0
	static void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87beae4 0x78e23145a0
	static void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x87bc5c0 0x78e2314680
	static void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x87bc528 0x78e2314760
	static void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x87bd8e0 0x78e2314840
	static SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x87bceb4 0x78e2314920
	static SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x87bd2a4 0x78e2314a00
	static SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x87bd088 0x78e2314ae0
	static bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0x87bc1cc 0x78e2314bc0
	static void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x87bcb6c 0x78e2314ca0
	static int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x87bc6a8 0x78e2314d80
	static void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x87bcd10 0x78e2314e60
	static void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x87be090 0x78e2314f40
	static void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0x87bdd80 0x78e2315020
	static void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0x87bea4c 0x78e2315100
	static int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87be910 0x78e23151e0
	static void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x87bca40 0x78e23152c0
	static void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x87bebc4 0x78e23153a0

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xf0, Size: 0x60] 0x78e2324c00
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x87c2f4c 0x78e2315720
	void SetExternalSubmix(SoundSubmix* Submix);// 0x87c3060 0x78e2315800
	void SetAudioBus(AudioBus* AudioBus);// 0x87c3108 0x78e23158e0
	void ResetKey();// 0x87c31b0 0x78e23159c0

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1] 0x78759e3080
	enum PeakMode;//[Offset: 0x1, Size: 0x1] 0x78759e3120
	enum LinkMode;//[Offset: 0x2, Size: 0x1] 0x78759e31c0
	float InputGainDb;//[Offset: 0x4, Size: 0x4] 0x7875a14880
	float ThresholdDb;//[Offset: 0x8, Size: 0x4] 0x7875a14900
	float Ratio;//[Offset: 0xc, Size: 0x4] 0x7875a14980
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4] 0x7875a14a00
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4] 0x7875a14a80
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4] 0x7875a14b00
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4] 0x7875a14b80
	enum KeySource;//[Offset: 0x20, Size: 0x1] 0x78759e3260
	AudioBus* ExternalAudioBus;//[Offset: 0x28, Size: 0x8] 0x7875a14c80
	SoundSubmix* ExternalSubmix;//[Offset: 0x30, Size: 0x8] 0x7875a14d00
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875a14d80
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7875a14e00
	bool bBypass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1] 0x7875a14e80
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1] 0x7875a14f00
	float KeyGainDb;//[Offset: 0x3c, Size: 0x4] 0x7875a14f80
	float OutputGainDb;//[Offset: 0x40, Size: 0x4] 0x7875a15000
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x44, Size: 0xc] 0x7875a15080
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x50, Size: 0xc] 0x7875a15280

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875a15100
	float Cutoff;//[Offset: 0x4, Size: 0x4] 0x7875a15180
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7875a15200

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10] 0x78e2324b00
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0x87c3be8 0x78e2319000

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10] 0x78759e2fe0

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4] 0x7875a14480
	float Bandwidth;//[Offset: 0x4, Size: 0x4] 0x7875a14500
	float GainDb;//[Offset: 0x8, Size: 0x4] 0x7875a14580
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1] 0x7875a14600

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40] 0x78e2324880
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x87c43b4 0x78e2318e40
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x87c44f0 0x78e2318f20

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a15d80
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4] 0x7875a15e00
	float GainHF;//[Offset: 0x8, Size: 0x4] 0x7875a15e80
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4] 0x7875a15f00
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875a15f80
	float LateDelay;//[Offset: 0x14, Size: 0x4] 0x7875a16000
	float DecayTime;//[Offset: 0x18, Size: 0x4] 0x7875a16080
	float Density;//[Offset: 0x1c, Size: 0x4] 0x7875a16100
	float Diffusion;//[Offset: 0x20, Size: 0x4] 0x7875a16180
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4] 0x7875a16200
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4] 0x7875a16280
	float LateGain;//[Offset: 0x2c, Size: 0x4] 0x7875a16300
	float Gain;//[Offset: 0x30, Size: 0x4] 0x7875a14280
	float WetLevel;//[Offset: 0x34, Size: 0x4] 0x7875a14300
	float DryLevel;//[Offset: 0x38, Size: 0x4] 0x7875a14380
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x7875a14400

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10] 0x7875d4b820

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8] 0x7875a15c80
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x7875a15d00

--------------------------------
Class: AssetRegistryHelpers.Object
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x884b4d4 0x78e231ac00
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x884aa34 0x78e231ace0
	static bool IsValid(out const AssetData InAssetData);// 0x884ba6c 0x78e2317400
	static bool IsUAsset(out const AssetData InAssetData);// 0x884b928 0x78e23174e0
	static bool IsRedirector(out const AssetData InAssetData);// 0x884b7e4 0x78e23175c0
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0x884b110 0x78e23176a0
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x884ad94 0x78e2317780
	static FString GetFullName(out const AssetData InAssetData);// 0x884b660 0x78e2317860
	static FString GetExportTextName(out const AssetData InAssetData);// 0x884af8c 0x78e2317940
	static class Object GetClass(out const AssetData InAssetData);// 0x884b394 0x78e2317a20
	static interface classNone GetAssetRegistry();// 0x884bd28 0x78e2317b00
	static Object* GetAsset(out const AssetData InAssetData);// 0x884b254 0x78e2317be0
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x884bbb0 0x78e2317cc0

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10] 0x78bfc65e20
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10] 0x78bfc65ec0
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10] 0x78bfc65f60
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10] 0x78bfc66000
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50] 0x78bfc660a0
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x78a8151c00
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1] 0x78a8151c80
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1] 0x78a8151d00

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8] 0x7875a15b80
	FString Value;//[Offset: 0x8, Size: 0x10] 0x7875a15c00

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForCompletion();// 0x884c9bc 0x78e2319a80
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x884cd20 0x78e2319b60
	void SearchAllAssets(bool bSynchronousSearch);// 0x884c9d8 0x78e2319c40
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan);// 0x884cbd8 0x78e2319d20
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0x884c804 0x78e2319e00
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0x884ca90 0x78e2319ee0
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x884cf30 0x78e2319fc0
	void PrioritizeSearchPath(FString PathToPrioritize);// 0x884c900 0x78e231a0a0
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0x884d3dc 0x78e231a180
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0x884d550 0x78e231a260
	bool IsLoadingAssets();// 0x884c7c4 0x78e231a340
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x884e284 0x78e231a420
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x884d140 0x78e231a500
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x884de2c 0x78e231a5e0
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x884e07c 0x78e231a6c0
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x884dc24 0x78e231a7a0
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x884da08 0x78e231a880
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x884d880 0x78e231a960
	void GetAllCachedPaths(out FString[] OutPathList);// 0x884d2e0 0x78e231aa40
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x884d6c4 0x78e231ab20

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a15900
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7875a15980
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7875a15a00
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7875a15a80
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7875a15b00

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	static bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x886db44 0x78e231ba00
	static bool NotEqual_TagTag(GameplayTag A, FString B);// 0x886ceb0 0x78e231bae0
	static bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x886cd1c 0x78e231bbc0
	static bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x886d790 0x78e231bca0
	static bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x886e8dc 0x78e231bd80
	static bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x886ec24 0x78e231be60
	static bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x886eac4 0x78e231bf40
	static GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x886d67c 0x78e231c020
	static GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x886e6d4 0x78e231c100
	static GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x886d254 0x78e231c1e0
	static GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x886d4cc 0x78e231c2c0
	static GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x886d598 0x78e231c3a0
	static bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0x886e084 0x78e231c480
	static bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x886e830 0x78e231c560
	static bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x886e498 0x78e231c640
	static bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x886e304 0x78e231c720
	static bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x886e170 0x78e231c800
	static bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x886d120 0x78e231c8e0
	static FName GetTagName(out const GameplayTag GameplayTag);// 0x886e77c 0x78e231c9c0
	static int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x886e604 0x78e23190e0
	static FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x886cc08 0x78e23191c0
	static FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x886cb14 0x78e23192a0
	static void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x886dd68 0x78e2319380
	static bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x886d8d0 0x78e2319460
	static bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x886e9d0 0x78e2319540
	static bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0x886d008 0x78e2319620
	static bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x886df2c 0x78e2319700
	static void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x886d3a8 0x78e23197e0
	static void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x886da10 0x78e23198c0
	static void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x886dc5c 0x78e23199a0

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4] 0x7875a16f80
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10] 0x78759e2ea0
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10] 0x78759e2f40
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x7875a17100
	FString AutoDescription;//[Offset: 0x38, Size: 0x10] 0x7875a17180

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x886ff50 0x78e231b680
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x886fd88 0x78e231b760
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x886fe6c 0x78e231b840
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x887000c 0x78e231b920

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10] 0x78e232c900
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8] 0x78e232c980
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48] 0x78e232ca00

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78e232c880

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78e232c800

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20] 0x78e232c780

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7875d4ab00

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7875d4aa60

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10] 0x7875d4a9c0

--------------------------------
Class: GameplayTagsManager.Object
	<FName,GameplayTagSource> TagSources;//[Offset: 0x160, Size: 0x50] 0x7875b1b5c0
	DataTable*[] GameplayTagTables;//[Offset: 0x230, Size: 0x10] 0x7875d4a920

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8] 0x7875a16c80
	enum SourceType;//[Offset: 0x8, Size: 0x1] 0x78759e2e00
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8] 0x7875a16d80
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8] 0x7875a16e00

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78e232e480
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7875d4a880

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8] 0x7875a16b80
	FString DevComment;//[Offset: 0x10, Size: 0x10] 0x7875a16c00

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10] 0x78e232e380
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10] 0x7875d4a7e0

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x7875a16b00

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e232dd80
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78e232de00
	bool ClearInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1] 0x78e232de80
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1] 0x78e232df00
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10] 0x78e232df80
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10] 0x7875d4ce00
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10] 0x7875d4a560
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10] 0x7875d4a600
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10] 0x7875d4a6a0
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4] 0x78e232e200
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4] 0x78e232e280
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10] 0x7875d4a740

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10] 0x7875a16900
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10] 0x78759e2cc0

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8] 0x7875a16e80
	FName NewTagName;//[Offset: 0x8, Size: 0x8] 0x7875a16f00

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10] 0x7875a16a00
	FString[] Owners;//[Offset: 0x10, Size: 0x10] 0x78759e2d60

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10] 0x78e232dc80
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8] 0x78e232dd00

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10] 0x7875d4cd60

--------------------------------
Class: MeshDescription.Object

--------------------------------
Class: PropertyAccess.Interface.Object

--------------------------------
Class: PropertyEventBroadcaster.Interface.Object

--------------------------------
Class: PropertyEventSubscriber.Interface.Object

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10] 0x7875d4dbc0
	Vector[] Normals;//[Offset: 0x38, Size: 0x10] 0x7875d4dc60
	uint32[] Indices;//[Offset: 0x48, Size: 0x10] 0x7875d4dd00
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10] 0x7875d4dda0
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10] 0x7875d4de40
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4] 0x78e2335000
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4] 0x78e2335080
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10] 0x7875d4dee0

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4] 0x7875a18d80
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2] 0x7875a18e00
	float BoneWeights;//[Offset: 0x1c, Size: 0x4] 0x7875a18e80

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10] 0x78e2334c00
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78e2334c80
	void SetFilePath(FString Path);// 0x894a5c4 0x78e2340cc0

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x894b1ac 0x78e2340a20
	static void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x894b33c 0x78e2340b00
	static void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x894b4cc 0x78e2340be0

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18] 0x7875a18680
	FString URL;//[Offset: 0x18, Size: 0x10] 0x7875a18700

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8] 0x78e2334700
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8] 0x78e2334780
	MediaTexture* GetMediaTexture();// 0x894bba8 0x78e2340860
	MediaPlayer* GetMediaPlayer();// 0x894bbdc 0x78e2340940

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8] 0x78e233c280

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10] 0x78e233c200

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78e233c080
	int FrameDelay;//[Offset: 0x8c, Size: 0x4] 0x78e233c100
	double TimeDelay;//[Offset: 0x90, Size: 0x8] 0x78e233c180

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10] 0x78e233bf80
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18] 0x78e233c000

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8] 0x78e233be80
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x30] 0x78e233bf00

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e233b780
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18] 0x78e233b800
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8] 0x78e233b880
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x8968890 0x78e23459c0

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14] 0x7875a44400
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8] 0x7875a44480
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18] 0x7875a44500
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x270, Size: 0x2] 0x7875a44680
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x278, Size: 0x8] 0x7875a44700
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x280, Size: 0x8] 0x7875a44780
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1] 0x7875a44800
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1] 0x7875a44880
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1] 0x7875a44900
	Object* DefaultInstanceData;//[Offset: 0x290, Size: 0x8] 0x7875a44980
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x298, Size: 0x8] 0x7875a44a00
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7875a44a80
	void ShowBurnin();// 0x8969834 0x7875a51580
	void SetSequence(LevelSequence* InSequence);// 0x8969940 0x7875a51660
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x8969890 0x7875a51740
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x8969564 0x7875a51820
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x89696bc 0x7875a51900
	void ResetBindings();// 0x8968fd8 0x7875a519e0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x8968fec 0x7875a51ac0
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x89690b4 0x7875a51ba0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x89691a4 0x7875a51c80
	void OnLevelSequenceLoaded__DelegateSignature();// 0x6d94ba8 0x78760be780
	LevelSequence* LoadSequence();// 0x89699e8 0x78760be860
	void HideBurnin();// 0x8969848 0x78760be940
	LevelSequencePlayer* GetSequencePlayer();// 0x896985c 0x78760bea20
	LevelSequence* GetSequence();// 0x8969a1c 0x78760beb00
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x8968e18 0x78760bebe0
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x8968f18 0x78760becc0
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x89692b8 0x78760beda0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x89693fc 0x78760bee80

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x4e8, Size: 0x10] 0x78e233c700
	CameraComponent* GetActiveCameraComponent();// 0x896cc70 0x78e2348ac0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x896cca8 0x78e2348ba0

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a44580
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1] 0x7875a44600

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8] 0x78e233d680
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8] 0x78e233b600
	void SetSettings(Object* InSettings);// 0x6d94ba8 0x78e2345800
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x896afc8 0x78e23458e0

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10] 0x7875a45680
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10] 0x7875a45700
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10] 0x7875a45780
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10] 0x7875a45800
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10] 0x7875a45880
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10] 0x7875a45900
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10] 0x7875a45980
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28] 0x7875a45a00
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc] 0x7875a45b80
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8] 0x7875a45c00
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4] 0x7875a45c80

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1] 0x7875a45a80
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8] 0x7875a45b00

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10] 0x7875d4f600

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10] 0x7875a46200
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18] 0x7875a46280
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875a46300
	bool bExportCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875a44280
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1] 0x7875a44300

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8] 0x78e233d080
	int SubSequenceID;//[Offset: 0x30, Size: 0x4] 0x78e233d100
	int MovieScenePlayerIndex;//[Offset: 0x34, Size: 0x4] 0x78e233d180
	void OnCreated();// 0x6d94ba8 0x78e2348c80
	MovieSceneSequence* GetSequence();// 0x896b5d0 0x78e2348d60
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x896b8c0 0x78e2348e40
	Object* GetBoundObject(MovieSceneObjectBindingID ObjectBinding);// 0x896b7f0 0x78e2348f20
	Actor*[] GetBoundActors(MovieSceneObjectBindingID ObjectBinding);// 0x896b6d4 0x78e2349000
	Actor* GetBoundActor(MovieSceneObjectBindingID ObjectBinding);// 0x896b604 0x78e2345720

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceProjectSettings.DeveloperSettings.Object
	bool bDefaultLockEngineToDisplayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e233e600
	FString DefaultDisplayRate;//[Offset: 0x40, Size: 0x10] 0x78e233e680
	FString DefaultTickResolution;//[Offset: 0x50, Size: 0x10] 0x78e233e700
	enum DefaultClockSource;//[Offset: 0x60, Size: 0x1] 0x7875d4efc0

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x228, Size: 0x8] 0x78e233e300
	MediaComponent* MediaComponent;//[Offset: 0x230, Size: 0x8] 0x78e233e380
	float ServerStartTimeSeconds;//[Offset: 0x238, Size: 0x4] 0x78e233e400
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0x896d680 0x78e2348660
	void Play();// 0x896d760 0x78e2348740
	void OnRep_ServerStartTimeSeconds();// 0x896d66c 0x78e2348820
	LevelSequenceActor* GetSequence();// 0x896d728 0x78e2348900
	MediaComponent* GetMediaComponent();// 0x896d744 0x78e23489e0

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1] 0x7875d4ee80
	bool IsCapturing();// 0x898a458 0x78e23484a0
	enum GetState();// 0x898a4a0 0x78e2348580

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10] 0x78e233e100

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10] 0x78e233dd80
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78e233de00
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78e233de80
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1] 0x78e233df00
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18] 0x78e233df80
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1] 0x78e233e000
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8] 0x78e233e080

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10] 0x78759e59c0

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4] 0x78e233dd00

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1] 0x78e233dc00
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1] 0x78e233dc80

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18] 0x78e233f780
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18] 0x78e233d700
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8] 0x78e233d780
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8] 0x78e233d800
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70] 0x78e233d880
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1] 0x78e233d900
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1] 0x78e233d980
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10] 0x78e233da00
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10] 0x78e233da80
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x8989328 0x78e2348120
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x8989280 0x78e2348200
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0x89893ec 0x78e23482e0
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0x89893d0 0x78e23483c0

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10] 0x7875a46a00
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8] 0x78759e5920
	FString OutputFormat;//[Offset: 0x18, Size: 0x10] 0x7875a46a80
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x7875a46b00
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x7875a46b80
	int HandleFrames;//[Offset: 0x2c, Size: 0x4] 0x7875a46c00
	FString MovieExtension;//[Offset: 0x30, Size: 0x10] 0x7875a46c80
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1] 0x7875a46d00
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8] 0x7875a46d80
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1] 0x7875a46e00
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8] 0x7875a46e80
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8] 0x7875a47000
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875a47080
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7875a47100
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1] 0x7875a47180
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1] 0x7875a47200
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x7875a47280
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1] 0x7875a47300
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1] 0x7875a47380
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1] 0x7875a45300
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4] 0x7875a45380

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4] 0x7875a46f00
	int ResY;//[Offset: 0x4, Size: 0x4] 0x7875a46f80

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1] 0x78e233f680
	Guid PrerequisiteActorId;//[Offset: 0x22c, Size: 0x10] 0x78e233f700

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	static bool IsCaptureInProgress();// 0x8989b34 0x78e2347cc0
	static int GetCaptureFrameNumber();// 0x8989ba0 0x78e2347da0
	static float GetCaptureElapsedTime();// 0x8989b6c 0x78e2347e80
	static MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0x8989b00 0x78e2347f60
	static MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0x8989acc 0x78e2348040

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8] 0x78e233ee00
	void StopCapturingFinalPixels();// 0x898b3d4 0x78e234a880
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0x898b3e8 0x78e234a960
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0x898b524 0x78e234aa40
	void OnWarmUp();// 0x6d94ba8 0x78e234ab20
	void OnTick();// 0x6d94ba8 0x78e234ac00
	void OnStartCapture();// 0x6d94ba8 0x78e234ace0
	bool OnSetup();// 0x898b6e0 0x78e2347400
	void OnPreTick();// 0x6d94ba8 0x78e23474e0
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x6d94ba8 0x78e23475c0
	void OnPauseCapture();// 0x6d94ba8 0x78e23476a0
	void OnFinalize();// 0x6d94ba8 0x78e2347780
	void OnCaptureFrame();// 0x6d94ba8 0x78e2347860
	bool OnCanFinalize();// 0x898b6a0 0x78e2347940
	void OnBeginFinalize();// 0x6d94ba8 0x78e2347a20
	FrameMetrics GetCurrentFrameMetrics();// 0x898b2a8 0x78e2347b00
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0x898b2c4 0x78e2347be0

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50] 0x7875a06340

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4] 0x7875a45400
	float FrameDelta;//[Offset: 0x4, Size: 0x4] 0x7875a45480
	int FrameNumber;//[Offset: 0x8, Size: 0x4] 0x7875a45500
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4] 0x7875a45580

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1] 0x7875d4eca0
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1] 0x78e233e900
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4] 0x78e233e980
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0x898c5ec 0x78e234a5e0
	FString GenerateFilenameForCurrentFrame();// 0x898c874 0x78e234a6c0
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0x898c924 0x78e234a7a0

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78e233e780
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4] 0x78e233e800

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e233fe80
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78e233ff00
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10] 0x7875d4ec00

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10] 0x78e24e7c20

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8] 0x7875b44600
	Timespan EndTime;//[Offset: 0x8, Size: 0x8] 0x7875b44680
	FString Text;//[Offset: 0x10, Size: 0x10] 0x7875b44700
	Vector2D Position;//[Offset: 0x20, Size: 0x8] 0x7875b44780

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8] 0x78e25df480
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50] 0x7875b1d0c0

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1] 0x78e25ded80
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78e25dee00
	uint32 AppID;//[Offset: 0x2c, Size: 0x4] 0x78e25dee80
	FString AppName;//[Offset: 0x30, Size: 0x10] 0x78e25def00
	FString BuildVersion;//[Offset: 0x40, Size: 0x10] 0x78e25def80
	FString LaunchExe;//[Offset: 0x50, Size: 0x10] 0x78e25df000
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10] 0x78e25df080
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50] 0x78e24ea2e0
	FString PrereqName;//[Offset: 0xc0, Size: 0x10] 0x78e25df180
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10] 0x78e25df200
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10] 0x78e25df280
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10] 0x78e24ea380
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10] 0x78e24ea420
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10] 0x78e24ea4c0

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10] 0x7875b46100
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14] 0x7875b46200
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10] 0x7875b32360
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10] 0x7875b32400
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7875b44400
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10] 0x7875b44480
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7875b44500
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1] 0x7875b44580

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1] 0x7875b46180

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7875b46280
	uint32 Offset;//[Offset: 0x10, Size: 0x4] 0x7875b46300
	uint32 Size;//[Offset: 0x14, Size: 0x4] 0x7875b44280

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10] 0x7875b45e80
	uint64 Hash;//[Offset: 0x10, Size: 0x8] 0x7875b45f00
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14] 0x7875b45f80
	int64 FileSize;//[Offset: 0x30, Size: 0x8] 0x7875b46000
	byte GroupNumber;//[Offset: 0x38, Size: 0x1] 0x7875b46080

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10] 0x7875b45d80
	FString Value;//[Offset: 0x10, Size: 0x10] 0x7875b45e00

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8] 0x78e25de900
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50] 0x7875b1d000
	ClothLODDataCommon[] LODData;//[Offset: 0xa0, Size: 0x10] 0x78e24ea060
	int[] LodMap;//[Offset: 0xb0, Size: 0x10] 0x78e24ea100
	FName[] UsedBoneNames;//[Offset: 0xc0, Size: 0x10] 0x78e24ea1a0
	int[] UsedBoneIndices;//[Offset: 0xd0, Size: 0x10] 0x78e24ea240
	int ReferenceBoneIndex;//[Offset: 0xe0, Size: 0x4] 0x78e25dec80
	ClothingAssetCustomData* CustomData;//[Offset: 0xe8, Size: 0x8] 0x78e25ded00

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xf8] 0x7875b46d00
	ClothCollisionData CollisionData;//[Offset: 0xf8, Size: 0x40] 0x7875b46d80
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1] 0x7875b46e00
	float SkinningKernelRadius;//[Offset: 0x13c, Size: 0x4] 0x7875b46e80

--------------------------------
Class: ClothPhysicalMeshData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10] 0x7875b31be0
	Vector[] Normals;//[Offset: 0x10, Size: 0x10] 0x7875b31c80
	uint32[] Indices;//[Offset: 0x20, Size: 0x10] 0x7875b31d20
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50] 0x7875b179c0
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10] 0x7875b31e60
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10] 0x7875b31f00
	int MaxBoneWeights;//[Offset: 0xa0, Size: 0x4] 0x7875b46980
	int NumFixedVerts;//[Offset: 0xa4, Size: 0x4] 0x7875b46a00
	uint32[] SelfCollisionIndices;//[Offset: 0xa8, Size: 0x10] 0x7875b31fa0
	float[] MaxDistances;//[Offset: 0xb8, Size: 0x10] 0x7875b32040
	float[] BackstopDistances;//[Offset: 0xc8, Size: 0x10] 0x7875b320e0
	float[] BackstopRadiuses;//[Offset: 0xd8, Size: 0x10] 0x7875b32180
	float[] AnimDriveMultipliers;//[Offset: 0xe8, Size: 0x10] 0x7875b32220

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10] 0x7875b31dc0

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10] 0x78759e4ac0
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10] 0x78759e4b60
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10] 0x78759e4de0
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10] 0x78759e4e80

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4] 0x7875a18f00
	float Radius;//[Offset: 0x4, Size: 0x4] 0x7875a18f80
	Vector LocalPosition;//[Offset: 0x8, Size: 0xc] 0x7875a19000

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4] 0x7875a19100

--------------------------------
Class: ClothCollisionPrim_Convex
	ClothCollisionPrim_ConvexFace[] Faces;//[Offset: 0x0, Size: 0x10] 0x78759e4ca0
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10] 0x78759e4d40
	int BoneIndex;//[Offset: 0x20, Size: 0x4] 0x7875a19400

--------------------------------
Class: ClothCollisionPrim_ConvexFace
	Plane Plane;//[Offset: 0x0, Size: 0x10] 0x7875a19200
	int[] Indices;//[Offset: 0x10, Size: 0x10] 0x78759e4c00

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0xc] 0x7875a17400
	Quat LocalRotation;//[Offset: 0x10, Size: 0x10] 0x7875a17480
	Vector HalfExtents;//[Offset: 0x20, Size: 0xc] 0x7875a17500
	int BoneIndex;//[Offset: 0x2c, Size: 0x4] 0x7875a17580

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8] 0x78e25de780
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xf8] 0x78e25de800
	ClothCollisionData CollisionData;//[Offset: 0x128, Size: 0x40] 0x78e25de880

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1] 0x78e24e9f20
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10] 0x78e25f0980
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10] 0x78e25f0a00
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10] 0x78e25f0a80
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10] 0x78e25f0b00
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4] 0x78e25f0b80
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4] 0x78e25f0c00
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4] 0x78e25f0c80
	Vector Damping;//[Offset: 0x78, Size: 0xc] 0x78e25f0d00
	float Friction;//[Offset: 0x84, Size: 0x4] 0x78e25f0d80
	float WindDragCoefficient;//[Offset: 0x88, Size: 0x4] 0x78e25f0e00
	float WindLiftCoefficient;//[Offset: 0x8c, Size: 0x4] 0x78e25f0e80
	Vector LinearDrag;//[Offset: 0x90, Size: 0xc] 0x78e25f0f00
	Vector AngularDrag;//[Offset: 0x9c, Size: 0xc] 0x78e25f0f80
	Vector LinearInertiaScale;//[Offset: 0xa8, Size: 0xc] 0x78e25f1000
	Vector AngularInertiaScale;//[Offset: 0xb4, Size: 0xc] 0x78e25f1080
	Vector CentrifugalInertiaScale;//[Offset: 0xc0, Size: 0xc] 0x78e25df800
	float SolverFrequency;//[Offset: 0xcc, Size: 0x4] 0x78e25df880
	float StiffnessFrequency;//[Offset: 0xd0, Size: 0x4] 0x78e25df900
	float GravityScale;//[Offset: 0xd4, Size: 0x4] 0x78e25df980
	Vector GravityOverride;//[Offset: 0xd8, Size: 0xc] 0x78e25dfa00
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x78e25dfa80
	float TetherStiffness;//[Offset: 0xe8, Size: 0x4] 0x78e25dfb00
	float TetherLimit;//[Offset: 0xec, Size: 0x4] 0x78e25dfb80
	float CollisionThickness;//[Offset: 0xf0, Size: 0x4] 0x78e25dfc00
	float AnimDriveSpringStiffness;//[Offset: 0xf4, Size: 0x4] 0x78e25dfc80
	float AnimDriveDamperStiffness;//[Offset: 0xf8, Size: 0x4] 0x78e25dfd00
	enum WindMethod;//[Offset: 0xfc, Size: 0x1] 0x78e24e9fc0
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x100, Size: 0x10] 0x78e25dfe00
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x110, Size: 0x10] 0x78e25dfe80
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x120, Size: 0x10] 0x78e25dff00
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x130, Size: 0x10] 0x78e25dff80

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7875b48180
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7875b48200
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7875b48280
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7875b48300

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4] 0x7875b47100
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4] 0x7875b47180
	float StretchLimit;//[Offset: 0x8, Size: 0x4] 0x7875b47200
	float CompressionLimit;//[Offset: 0xc, Size: 0x4] 0x7875b47280

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0x98a1ef8 0x78e25e4d80

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10] 0x78e24e9ca0
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10] 0x78e24e9d40
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10] 0x78e24e9de0
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10] 0x78e24e9e80

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10] 0x78e25f5280
	int StoreVersion;//[Offset: 0x38, Size: 0x4] 0x78e25f3200
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4] 0x78e25f3280
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4] 0x78e25f3300
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4] 0x78e25f3380
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10] 0x78e25f3400
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10] 0x78e25f3480
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4] 0x78e25f3500
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4] 0x78e25f3580
	byte InstallLocation;//[Offset: 0x70, Size: 0x1] 0x78e25f3600
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78e25f3680
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1] 0x78e25f3700
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1] 0x78e25f3780
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78e25f3800
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78e25f3880
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1] 0x78e25f3900
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1] 0x78e25f3980
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1] 0x78e25f3a00
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1] 0x78e25f3a80
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1] 0x78e25f3b00
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1] 0x78e25f3b80
	byte Orientation;//[Offset: 0x7c, Size: 0x1] 0x78e25f3c00
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4] 0x78e25f3c80
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1] 0x78e25f3d00
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1] 0x78e25f3d80
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1] 0x78e25f3e00
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1] 0x78e25f3e80
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1] 0x78e25f3f00
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78e25f3f80
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78e25f4000
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78e25f4080
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1] 0x78e25f4100
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1] 0x78e25f4180
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1] 0x78e25f4200
	FString[] ExtraManifestNodeTags;//[Offset: 0x90, Size: 0x10] 0x78e24e9700
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa0, Size: 0x10] 0x78e24e97a0
	FString ExtraApplicationSettings;//[Offset: 0xb0, Size: 0x10] 0x78e25f2280
	FString[] ExtraActivityNodeTags;//[Offset: 0xc0, Size: 0x10] 0x78e24e9840
	FString ExtraActivitySettings;//[Offset: 0xd0, Size: 0x10] 0x78e25f2380
	FString[] ExtraPermissions;//[Offset: 0xe0, Size: 0x10] 0x78e24e98e0
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78e25f2480
	byte[] PackageForOculusMobile;//[Offset: 0xf8, Size: 0x10] 0x78e24e9980
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1] 0x78e25f2580
	byte[] GoogleVRCaps;//[Offset: 0x110, Size: 0x10] 0x78e24e9a20
	bool bGoogleVRSustainedPerformance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1] 0x78e25f2680
	FString KeyStore;//[Offset: 0x128, Size: 0x10] 0x78e25f2700
	FString KeyAlias;//[Offset: 0x138, Size: 0x10] 0x78e25f2780
	FString KeyStorePassword;//[Offset: 0x148, Size: 0x10] 0x78e25f2800
	FString KeyPassword;//[Offset: 0x158, Size: 0x10] 0x78e25f2880
	bool bBuildForArmV7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x78e25f2900
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x78e25f2980
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1] 0x78e25f2a00
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1] 0x78e25f2a80
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1] 0x78e25f2b00
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1] 0x78e25f2b80
	byte ClangSanitizer;//[Offset: 0x16e, Size: 0x1] 0x78e25f2c00
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1] 0x78e25f2c80
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1] 0x78e25f2d00
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1] 0x78e25f2d80
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1] 0x78e25f2e00
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 0x1] 0x78e25f2e80
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1] 0x78e25f2f00
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1] 0x78e25f2f80
	FString GamesAppID;//[Offset: 0x178, Size: 0x10] 0x78e25f3000
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x188, Size: 0x10] 0x78e24e9ac0
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x198, Size: 0x10] 0x78e24e9b60
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1] 0x78e25f3180
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1] 0x78e25f1100
	FString AdMobAdUnitID;//[Offset: 0x1b0, Size: 0x10] 0x78e25f1180
	FString[] AdMobAdUnitIDs;//[Offset: 0x1c0, Size: 0x10] 0x78e24e9c00
	FString GooglePlayLicenseKey;//[Offset: 0x1d0, Size: 0x10] 0x78e25f1280
	FString GCMClientSenderID;//[Offset: 0x1e0, Size: 0x10] 0x78e25f1300
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1] 0x78e25f1380
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1] 0x78e25f1400
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1] 0x78e25f1480
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1] 0x78e25f1500
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1] 0x78e25f1580
	byte AndroidAudio;//[Offset: 0x1f5, Size: 0x1] 0x78e25f1600
	int AudioSampleRate;//[Offset: 0x1f8, Size: 0x4] 0x78e25f1680
	int AudioCallbackBufferFrameSize;//[Offset: 0x1fc, Size: 0x4] 0x78e25f1700
	int AudioNumBuffersToEnqueue;//[Offset: 0x200, Size: 0x4] 0x78e25f1780
	int AudioMaxChannels;//[Offset: 0x204, Size: 0x4] 0x78e25f1800
	int AudioNumSourceWorkers;//[Offset: 0x208, Size: 0x4] 0x78e25f1880
	FString SpatializationPlugin;//[Offset: 0x210, Size: 0x10] 0x78e25f1900
	FString ReverbPlugin;//[Offset: 0x220, Size: 0x10] 0x78e25f1980
	FString OcclusionPlugin;//[Offset: 0x230, Size: 0x10] 0x78e25f1a00
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x240, Size: 0x10] 0x78e25f1a80
	bool bUseAudioStreamCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78e25f1b00
	int CacheSizeKB;//[Offset: 0x254, Size: 0x4] 0x78e25f1b80
	int MaxChunkSizeOverrideKB;//[Offset: 0x258, Size: 0x4] 0x78e25f1c00
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78e25f1c80
	int SoundCueCookQualityIndex;//[Offset: 0x260, Size: 0x4] 0x78e25f1d00
	float MaxSampleRate;//[Offset: 0x264, Size: 0x4] 0x78e25f1d80
	float HighSampleRate;//[Offset: 0x268, Size: 0x4] 0x78e25f1e00
	float MedSampleRate;//[Offset: 0x26c, Size: 0x4] 0x78e25f1e80
	float LowSampleRate;//[Offset: 0x270, Size: 0x4] 0x78e25f1f00
	float MinSampleRate;//[Offset: 0x274, Size: 0x4] 0x78e25f1f80
	float CompressionQualityModifier;//[Offset: 0x278, Size: 0x4] 0x78e25f2000
	float AutoStreamingThreshold;//[Offset: 0x27c, Size: 0x4] 0x78e25f2080
	byte AndroidGraphicsDebugger;//[Offset: 0x280, Size: 0x1] 0x78e25f2100
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x288, Size: 0x10] 0x78e25f0080
	bool bEnableMaliPerfCounters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x78e25f0100
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1] 0x78e25f0180
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1] 0x78e25f0200
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 0x1] 0x78e25f0280
	float TextureFormatPriority_ETC2;//[Offset: 0x29c, Size: 0x4] 0x78e25f0300
	float TextureFormatPriority_DXT;//[Offset: 0x2a0, Size: 0x4] 0x78e25f0380
	float TextureFormatPriority_ASTC;//[Offset: 0x2a4, Size: 0x4] 0x78e25f0400
	FString SDKAPILevelOverride;//[Offset: 0x2a8, Size: 0x10] 0x78e25f0480
	FString NDKAPILevelOverride;//[Offset: 0x2b8, Size: 0x10] 0x78e25f0500
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x78e25f0580
	bool bEnableDomStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1] 0x78e25f0600

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7875b47780
	FString AchievementID;//[Offset: 0x10, Size: 0x10] 0x7875b47800

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10] 0x7875b47880
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10] 0x7875b47900

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7875a13280
	float DurationThreshold;//[Offset: 0x4, Size: 0x4] 0x7875a13300
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4] 0x7875a13380
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4] 0x7875a13400

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 0x8] 0x78e25f4c80
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 0x78] 0x78e25f4d00
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78e25f4d80
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78e25f4e00
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78e25f4e80
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78e25f4f00
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78e25f4f80
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78e25f5000
	enum RuntimeGeneration;//[Offset: 0x2a9, Size: 0x1] 0x78e24e95c0
	float ObservedPathsTickInterval;//[Offset: 0x2ac, Size: 0x4] 0x78e25f5100
	uint32 DataVersion;//[Offset: 0x2b0, Size: 0x4] 0x78e25f5180
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3c0, Size: 0x10] 0x78e24e9660

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8] 0x7875ae2c00
	Color Color;//[Offset: 0x38, Size: 0x4] 0x7875ae2c80
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc] 0x7875ae2d00
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8] 0x78759ed620
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28] 0x78759ed6c0

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10] 0x7875b47400
	int AreaID;//[Offset: 0x10, Size: 0x4] 0x7875b47480
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8] 0x7875b31a00

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8] 0x78e24eb500
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8] 0x78e24eb5a0
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8] 0x78e24eb640
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8] 0x78e24eb6e0
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8] 0x78e24eb780
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8] 0x78e24eb820
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8] 0x78e24eb8c0
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8] 0x78e24eb960
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8] 0x78e24e90c0
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8] 0x78e24e9160
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8] 0x78e24e9200
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8] 0x78e24e92a0
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8] 0x78e24e9340
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8] 0x78e24e93e0
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8] 0x78e24e9480
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8] 0x78e24e9520

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x1f8, Size: 0x18] 0x78e25f6000
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x210, Size: 0x8] 0x78e25f6080
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x218, Size: 0x8] 0x78e25f6100

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8] 0x7875b49480

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4] 0x78e25f5f00
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4] 0x78e25f5f80

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10] 0x78e25f5900
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10] 0x78e24eb280
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1] 0x78e25f5a00
	bool IsValid();// 0x9a1c940 0x78e25e4680
	bool IsStringPulled();// 0x9a1c908 0x78e25e4760
	bool IsPartial();// 0x9a1c978 0x78e25e4840
	float GetPathLength();// 0x9a1c9e4 0x78e25e4920
	float GetPathCost();// 0x9a1c9b0 0x78e25e4a00
	FString GetDebugString();// 0x9a1cbbc 0x78e25e4ae0
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x9a1ca18 0x78e25e4bc0
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x9a1cac0 0x78e25e4ca0

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10] 0x78e24eb1e0
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4] 0x78e25f5800
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4] 0x78e25f5880

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8] 0x7875b31960
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4] 0x7875b48a80
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4] 0x7875b48b00
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875b48b80
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1] 0x7875b48c00
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1] 0x7875b48c80

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875b48d00
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875b48d80
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875b48e00
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1] 0x7875b48e80
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1] 0x7875b48f00
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1] 0x7875b48f80
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1] 0x7875b49000
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1] 0x7875b49080
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1] 0x7875b49100
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1] 0x7875b49180
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1] 0x7875b49200
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1] 0x7875b49280
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1] 0x7875b49300
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1] 0x7875b49380
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1] 0x7875b49400
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1] 0x78c24ec200

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8] 0x78e25fa380
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8] 0x78e25fa400
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8] 0x78e25fa480
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28] 0x78e24ece00
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e25fa500
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1] 0x78e25f8480
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1] 0x78e25f8500
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1] 0x78e25f8580
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1] 0x78e25f8600
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1] 0x78e25f8680
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1] 0x78e25f8700
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78e25f8780
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1] 0x78e25f8800
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4] 0x78e25f8880
	enum DataGatheringMode;//[Offset: 0x70, Size: 0x1] 0x78e24ea560
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x74, Size: 0x4] 0x78e25f8980
	NavDataConfig[] SupportedAgents;//[Offset: 0x78, Size: 0x10] 0x78e24ea600
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x88, Size: 0x4] 0x78e25f8a80
	NavigationData*[] NavDataSet;//[Offset: 0x90, Size: 0x10] 0x78e24ea6a0
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xa0, Size: 0x10] 0x78e24ea740
	delegate OnNavDataRegisteredEvent;//[Offset: 0xc0, Size: 0x10] 0x78e25f8c00
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xd0, Size: 0x10] 0x78e25f8c80
	enum OperationMode;//[Offset: 0x1bc, Size: 0x1] 0x78e24ea7e0
	float DirtyAreasUpdateFreq;//[Offset: 0x15bc, Size: 0x4] 0x78e25f8d80
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x9a1e990 0x78e25e6b40
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x9a1dfb8 0x78e25e6c20
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x9a1e0a0 0x78e25e6d00
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x9a1eb88 0x78e25e6de0
	void SetGeometryGatheringMode(enum NewMode);// 0x9a1e8e8 0x78e25e6ec0
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x9a1eb74 0x78e25e6fa0
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x9a1ea38 0x78e25e7080
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x9a1e528 0x78e25e7160
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x9a1e6f8 0x78e25e7240
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x9a1ec30 0x78e25e7320
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x9a1e7a0 0x78e25e3a40
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x9a1fc44 0x78e25e3b20
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1fa1c 0x78e25e3c00
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1dd90 0x78e25e3ce0
	static bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1f7f4 0x78e25e3dc0
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x9a1f24c 0x78e25e3ea0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x9a1f2f8 0x78e25e3f80
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1e354 0x78e25e4060
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1e180 0x78e25e4140
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1f3a4 0x78e25e4220
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x9a1f5cc 0x78e25e4300
	static NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x9a1fe68 0x78e25e43e0
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x9a1f074 0x78e25e44c0
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x9a1ee58 0x78e25e45a0

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x258, Size: 0x4] 0x78e25faa00

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1] 0x78e25fa180
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1] 0x78e25fa200
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1] 0x78e25fa280
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1] 0x78e25fa300

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8] 0x78e25fb380
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x238, Size: 0x8] 0x78e25fb400
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1] 0x78e25fb480
	NavAgentProperties NavAgentProps;//[Offset: 0x248, Size: 0x30] 0x78e25fb500
	Vector QueryingExtent;//[Offset: 0x278, Size: 0xc] 0x78e25fb580
	NavigationData* MyNavData;//[Offset: 0x288, Size: 0x8] 0x78e25f9500
	Vector ProjectedLocation;//[Offset: 0x290, Size: 0xc] 0x78e25f9580
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1] 0x78e25f9600
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1] 0x78e25f9680
	float CostLimitFactor;//[Offset: 0x2a0, Size: 0x4] 0x78e25f9700
	float MinimumCostLimit;//[Offset: 0x2a4, Size: 0x4] 0x78e25f9780
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1] 0x78e25f9800
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 0x1] 0x78e25f9880
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 0x1] 0x78e25f9900
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 0x1] 0x78e25f9980
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 0x1] 0x78e25f9a00
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 0x1] 0x78e25f9a80
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a8, Size: 0x1] 0x78e25f9b00
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a8, Size: 0x1] 0x78e25f9b80
	byte CostDisplayMode;//[Offset: 0x2a9, Size: 0x1] 0x78e25f9c00
	Vector2D TextCanvasOffset;//[Offset: 0x2ac, Size: 0x8] 0x78e25f9c80
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1] 0x78e25f9d00
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b4, Size: 0x1] 0x78e25f9d80
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b4, Size: 0x1] 0x78e25f9e00
	float PathfindingTime;//[Offset: 0x2b8, Size: 0x4] 0x78e25f9e80
	float PathCost;//[Offset: 0x2bc, Size: 0x4] 0x78e25f9f00
	int PathfindingSteps;//[Offset: 0x2c0, Size: 0x4] 0x78e25f9f80
	NavigationTestingActor* OtherActor;//[Offset: 0x2c8, Size: 0x8] 0x78e25fa000
	class NavigationQueryFilter* FilterClass;//[Offset: 0x2d0, Size: 0x8] 0x78e24ecd60
	int ShowStepIndex;//[Offset: 0x2d8, Size: 0x4] 0x78e25fa080
	float OffsetFromCornersDistance;//[Offset: 0x2dc, Size: 0x4] 0x78e25fa100

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x450, Size: 0x10] 0x78e24eccc0

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1] 0x78e25fb180
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8] 0x78e25fb200
	void SetNavigationRelevancy(bool bRelevant);// 0x9a27498 0x78e25e6a60

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 0x4] 0x78e25faa80
	class NavArea* EnabledAreaClass;//[Offset: 0xf0, Size: 0x8] 0x78e24ecae0
	class NavArea* DisabledAreaClass;//[Offset: 0xf8, Size: 0x8] 0x78e24ecb80
	NavAgentSelector SupportedAgents;//[Offset: 0x100, Size: 0x4] 0x78e25fab00
	Vector LinkRelativeStart;//[Offset: 0x104, Size: 0xc] 0x78e25fab80
	Vector LinkRelativeEnd;//[Offset: 0x110, Size: 0xc] 0x78e25fac00
	byte LinkDirection;//[Offset: 0x11c, Size: 0x1] 0x78e25fac80
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1] 0x78e25fad00
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 0x1] 0x78e25fad80
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 0x1] 0x78e25fae00
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 0x1] 0x78e25fae80
	Vector ObstacleOffset;//[Offset: 0x120, Size: 0xc] 0x78e25faf00
	Vector ObstacleExtent;//[Offset: 0x12c, Size: 0xc] 0x78e25faf80
	class NavArea* ObstacleAreaClass;//[Offset: 0x138, Size: 0x8] 0x78e24ecc20
	float BroadcastRadius;//[Offset: 0x140, Size: 0x4] 0x78e25fb000
	float BroadcastInterval;//[Offset: 0x144, Size: 0x4] 0x78e25fb080
	byte BroadcastChannel;//[Offset: 0x148, Size: 0x1] 0x78e25fb100

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8] 0x78e24ec9a0
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc] 0x78e25fa900
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1] 0x78e25fa980
	void SetAreaClass(class NavArea NewAreaClass);// 0x9a265fc 0x78e25e6980

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x260, Size: 0x8] 0x78e24ec860
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78e25fa880
	void SetAreaClass(class NavArea NewAreaClass);// 0x9a26ba4 0x78e25e68a0

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x220, Size: 0x8] 0x78e25fa700
	enum OverridePolicy;//[Offset: 0x228, Size: 0x1] 0x78e24ec7c0
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 0x1] 0x78e25fa800

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1] 0x78e25fca00
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1] 0x78e25fca80
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x424, Size: 0x1] 0x78e25fcb00
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x424, Size: 0x1] 0x78e25fcb80
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x424, Size: 0x1] 0x78e25fcc00
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x424, Size: 0x1] 0x78e25fcc80
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x424, Size: 0x1] 0x78e25fcd00
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x424, Size: 0x1] 0x78e25fcd80
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x425, Size: 0x1] 0x78e25fce00
	bool bDrawPolygonFlags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x425, Size: 0x1] 0x78e25fce80
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x425, Size: 0x1] 0x78e25fcf00
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x425, Size: 0x1] 0x78e25fcf80
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x425, Size: 0x1] 0x78e25fd000
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x425, Size: 0x1] 0x78e25fd080
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x425, Size: 0x1] 0x78e25fd100
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x425, Size: 0x1] 0x78e25fd180
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x426, Size: 0x1] 0x78e25fd200
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x426, Size: 0x1] 0x78e25fd280
	float DrawOffset;//[Offset: 0x428, Size: 0x4] 0x78e25fd300
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1] 0x78e25fd380
	int TilePoolSize;//[Offset: 0x430, Size: 0x4] 0x78e25fd400
	float TileSizeUU;//[Offset: 0x434, Size: 0x4] 0x78e25fd480
	float CellSize;//[Offset: 0x438, Size: 0x4] 0x78e25fd500
	float CellHeight;//[Offset: 0x43c, Size: 0x4] 0x78e25fd580
	float AgentRadius;//[Offset: 0x440, Size: 0x4] 0x78e25fd600
	float AgentHeight;//[Offset: 0x444, Size: 0x4] 0x78e25fd680
	float AgentMaxSlope;//[Offset: 0x448, Size: 0x4] 0x78e25fb600
	float AgentMaxStepHeight;//[Offset: 0x44c, Size: 0x4] 0x78e25fb680
	float MinRegionArea;//[Offset: 0x450, Size: 0x4] 0x78e25fb700
	float MergeRegionSize;//[Offset: 0x454, Size: 0x4] 0x78e25fb780
	float MaxSimplificationError;//[Offset: 0x458, Size: 0x4] 0x78e25fb800
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x45c, Size: 0x4] 0x78e25fb880
	int TileNumberHardLimit;//[Offset: 0x460, Size: 0x4] 0x78e25fb900
	int PolyRefTileBits;//[Offset: 0x464, Size: 0x4] 0x78e25fb980
	int PolyRefNavPolyBits;//[Offset: 0x468, Size: 0x4] 0x78e25fba00
	int PolyRefSaltBits;//[Offset: 0x46c, Size: 0x4] 0x78e25fba80
	Vector NavMeshOriginOffset;//[Offset: 0x470, Size: 0xc] 0x78e25fbb00
	float DefaultDrawDistance;//[Offset: 0x47c, Size: 0x4] 0x78e25fbb80
	float DefaultMaxSearchNodes;//[Offset: 0x480, Size: 0x4] 0x78e25fbc00
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x484, Size: 0x4] 0x78e25fbc80
	byte RegionPartitioning;//[Offset: 0x488, Size: 0x1] 0x78e25fbd00
	byte LayerPartitioning;//[Offset: 0x489, Size: 0x1] 0x78e25fbd80
	int RegionChunkSplits;//[Offset: 0x48c, Size: 0x4] 0x78e25fbe00
	int LayerChunkSplits;//[Offset: 0x490, Size: 0x4] 0x78e25fbe80
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1] 0x78e25fbf00
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 0x1] 0x78e25fbf80
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 0x1] 0x78e25fc000
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 0x1] 0x78e25fc080
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 0x1] 0x78e25fc100
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 0x1] 0x78e25fc180
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 0x1] 0x78e25fc200
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x494, Size: 0x1] 0x78e25fc280
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 0x1] 0x78e25fc300
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 0x1] 0x78e25fc380
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 0x1] 0x78e25fc400
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 0x1] 0x78e25fc480
	float TileSetUpdateInterval;//[Offset: 0x498, Size: 0x4] 0x78e25fc500
	float HeuristicScale;//[Offset: 0x49c, Size: 0x4] 0x78e25fc580
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x4a0, Size: 0x4] 0x78e25fc600
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x9a28800 0x78e25e67c0

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8] 0x7875ffa980
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1] 0x7895c1a920
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8] 0x7875ffaa80
	void ReadyForActivation();// 0x9a31e58 0x7875fef900
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x6d94ba8 0x7875fef9e0
	void EndTask();// 0x9a31e44 0x7875fefac0

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	static GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x9a323bc 0x78e25e6600
	static GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x9a325bc 0x78e25e66e0

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4] 0x78e25fdf80
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1] 0x78e25fe000
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78e25fe080

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10] 0x78e25fe100
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10] 0x78e25fe180
	class Actor* ClassToSpawn;//[Offset: 0x98, Size: 0x8] 0x78e24ec360
	static GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x9a32f80 0x78e25e6360
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x9a32d74 0x78e25e6440
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x9a32e6c 0x78e25e6520

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10] 0x7875ffa780
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10] 0x7875ffa800

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10] 0x7875ffc600
	static GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0x9a33bd4 0x7875fef4a0
	void TaskDelayDelegate__DelegateSignature();// 0x6d94ba8 0x7875fef580

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1] 0x78e25fda80
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10] 0x78e24ebdc0
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10] 0x78e24ebe60
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10] 0x78e24ebf00
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10] 0x78e24ebfa0
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10] 0x78e25fdd00
	void OnRep_SimulatedTasks();// 0x9a34bb4 0x78e25e61a0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x9a34904 0x78e25e6280

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10] 0x78e25fd880
	delegate OnFail;//[Offset: 0x38, Size: 0x10] 0x78e25fd900
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x9af7d40 0x78e25e60c0

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4] 0x7875ffc480

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	static void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x9af8984 0x78e25e8c80
	static Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x9af8d4c 0x78e25e8d60
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x9af82b8 0x78e25e8e40
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x9af83a0 0x78e25e8f20
	static void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x9af8fac 0x78e25e9000
	static void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x9af8ac0 0x78e25e5720
	static bool IsValidAIRotation(Rotator Rotation);// 0x9af8780 0x78e25e5800
	static bool IsValidAILocation(Vector Location);// 0x9af88d8 0x78e25e58e0
	static bool IsValidAIDirection(Vector DirectionVector);// 0x9af882c 0x78e25e59c0
	static int GetNextNavLinkIndex(const Controller* Controller);// 0x9af8480 0x78e25e5aa0
	static Vector[] GetCurrentPathPoints(Controller* Controller);// 0x9af85d0 0x78e25e5b80
	static int GetCurrentPathIndex(const Controller* Controller);// 0x9af8528 0x78e25e5c60
	static NavigationPath* GetCurrentPath(Controller* Controller);// 0x9af86d8 0x78e25e5d40
	static BlackboardComponent* GetBlackboard(Actor* Target);// 0x9af8bfc 0x78e25e5e20
	static AIController* GetAIController(Actor* ControlledActor);// 0x9af8ca4 0x78e25e5f00
	static AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x9af912c 0x78e25e5fe0

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8] 0x78e2605680
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8] 0x78e2605700
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10] 0x78e24ef420
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10] 0x78e24ef4c0

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10] 0x78e24eed40
	BTService*[] Services;//[Offset: 0x68, Size: 0x10] 0x78e24eede0
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78e2608f80

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10] 0x78e2609000
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8] 0x78e2609080
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8] 0x78e2609100

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8] 0x7875b4a900
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8] 0x7875b4a980
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10] 0x7875b315a0
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10] 0x7875b31640

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10] 0x78e24ee840
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1] 0x78e260d900

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4] 0x78e260e480
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4] 0x78e260e500
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e260e580
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78e260e600

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1] 0x78e2608d00
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1] 0x78e2608d80

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1] 0x7875b4aa80
	uint16 Number;//[Offset: 0x2, Size: 0x2] 0x7875b4ab00

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8] 0x78e2609480
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10] 0x78e24eefc0
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e2607480

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8] 0x7875b4ac00
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8] 0x7875b4ac80
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1] 0x7875b4ad00

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8] 0x78e2607500
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8] 0x78e2607580
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8] 0x78e2607600
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10] 0x78e24ef060
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x9b1270c 0x78e25eb300
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x9b128fc 0x78e25eb3e0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x9b12614 0x78e25eb4c0
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x9b12f30 0x78e25eb5a0
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x9b12804 0x78e25eb680
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x9b12c48 0x78e25eb760
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x9b12b50 0x78e25eb840
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x9b12d40 0x78e25eb920
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x9b12e38 0x78e25eba00
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x9b12a50 0x78e25ebae0
	bool IsVectorValueSet(out const FName KeyName);// 0x9b12554 0x78e25ebbc0
	Vector GetValueAsVector(out const FName KeyName);// 0x9b130e8 0x78e25ebca0
	FString GetValueAsString(out const FName KeyName);// 0x9b13264 0x78e25ebd80
	Rotator GetValueAsRotator(out const FName KeyName);// 0x9b13028 0x78e25ebe60
	Object* GetValueAsObject(out const FName KeyName);// 0x9b1371c 0x78e25ebf40
	FName GetValueAsName(out const FName KeyName);// 0x9b131a8 0x78e25ec020
	int GetValueAsInt(out const FName KeyName);// 0x9b134e8 0x78e25ec100
	float GetValueAsFloat(out const FName KeyName);// 0x9b1342c 0x78e25ec1e0
	byte GetValueAsEnum(out const FName KeyName);// 0x9b135a4 0x78e25ec2c0
	class Object GetValueAsClass(out const FName KeyName);// 0x9b13660 0x78e25ec3a0
	bool GetValueAsBool(out const FName KeyName);// 0x9b1336c 0x78e25ec480
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x9b1232c 0x78e25ec560
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x9b12440 0x78e25ec640
	void ClearValue(out const FName KeyName);// 0x9b12278 0x78e25ec720

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8] 0x78e2605400
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8] 0x78e2605480
	void StopLogic(FString Reason);// 0x9b17600 0x78e25e91c0
	void StartLogic();// 0x9b176d8 0x78e25e92a0
	void RestartLogic();// 0x9b176bc 0x78e25e9380
	bool IsRunning();// 0x9b175c0 0x78e25e9460
	bool IsPaused();// 0x9b17580 0x78e25e9540

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1] 0x78e2601a80
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1] 0x78e2601b00
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1] 0x78e2601b80
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 0x1] 0x78e2601c00
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 0x1] 0x78e2601c80
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 0x1] 0x78e2601d00
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 0x1] 0x78e2601d80
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 0x8] 0x78e2601e00
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 0x8] 0x78e2601e80
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 0x8] 0x78e2601f00
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 0x8] 0x78e2601f80
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 0x8] 0x78e2602000
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 0x8] 0x78e2602080
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 0x8] 0x78e24ee2a0
	delegate ReceiveMoveCompleted;//[Offset: 0x310, Size: 0x10] 0x78e2602100
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x9afa388 0x78e25e7a20
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x9afa238 0x78e25e7b00
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x9af9dd0 0x78e25e7be0
	void SetMoveBlockDetection(bool bEnable);// 0x9afa550 0x78e25e7cc0
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x9afa494 0x78e25e7da0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x6d94ba8 0x78e25e7e80
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x9af9eb0 0x78e25e7f60
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x9afa6a4 0x78e25e8040
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x9afa978 0x78e25e8120
	void K2_SetFocus(Actor* NewFocus);// 0x9af9ff4 0x78e25e8200
	void K2_SetFocalPoint(Vector FP);// 0x9afa09c 0x78e25e82e0
	void K2_ClearFocus();// 0x9af9fac 0x78e25e83c0
	bool HasPartialPath();// 0x9afa638 0x78e25e84a0
	PathFollowingComponent* GetPathFollowingComponent();// 0x9af9e94 0x78e25e8580
	byte GetMoveStatus();// 0x9afa670 0x78e25e8660
	Vector GetImmediateMoveDestination();// 0x9afa600 0x78e25e8740
	Actor* GetFocusActor();// 0x9af9fc0 0x78e25e8820
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x9afa144 0x78e25e8900
	Vector GetFocalPoint();// 0x9afa200 0x78e25e89e0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x9af9e78 0x78e25e8ac0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x9afa2e0 0x78e25e8ba0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8] 0x78e2610680
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8] 0x78e2610700
	void OnNavDataRegistered(NavigationData* NavData);// 0x9b45ddc 0x78e25ee860
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x9b45ef0 0x78e25ee940
	Vector GetPathDestination();// 0x9b45e84 0x78e25eea20
	byte GetPathActionType();// 0x9b45ebc 0x78e25eeb00

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10] 0x78e24edb20
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8] 0x78e24edbc0
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8] 0x78e2603080
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10] 0x78e2603100
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10] 0x78e2603180
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10] 0x78e2601100
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x9afd47c 0x78e25eab20
	void RequestStimuliListenerUpdate();// 0x9afdb98 0x78e25eac00
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x9afdbac 0x78e25eace0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x9afd9b8 0x78e25e7400
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x9afdac4 0x78e25e74e0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9afd694 0x78e25e75c0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9afd7a0 0x78e25e76a0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x9afd8ac 0x78e25e7780
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x9afd578 0x78e25e7860
	void ForgetAll();// 0x9afdb84 0x78e25e7940

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4] 0x78e2605100
	float MaxAge;//[Offset: 0x2c, Size: 0x4] 0x78e2605180
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1] 0x78e2605200

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4] 0x78e2602680
	enum NotifyType;//[Offset: 0x2c, Size: 0x1] 0x78e24ed620
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1] 0x78e2602780
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1] 0x78e2602800
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8] 0x78e2602880

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10] 0x78e24ed6c0
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4] 0x78e2602980
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x9b0137c 0x78e25ea340
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x9b0145c 0x78e25ea420
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x9b0123c 0x78e25ea500
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x9b00f9c 0x78e25ea5e0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x9b01090 0x78e25ea6c0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8] 0x78e2602f00

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18] 0x78e2606180
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18] 0x78e2606200
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4] 0x78e2606280
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4] 0x78e2606300
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4] 0x78e2604280
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1] 0x78e2604300
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1] 0x78e2604380
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1] 0x78e2604400
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1] 0x78e2604480
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78e2604500
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1] 0x78e2604580
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1] 0x78e2604600
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1] 0x78e2604680
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1] 0x78e2604700
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8] 0x78e2604780
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8] 0x78e2604800
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8] 0x78e2604880
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10] 0x78e24ef560
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8] 0x78e2604980
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8] 0x78e2604a00
	void AILoggingVerbose();// 0x9b09564 0x78e25e97e0
	void AIIgnorePlayers();// 0x9b09580 0x78e25e98c0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4] 0x78e2606f00
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10] 0x78e24ef240
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10] 0x78e24ef2e0

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8] 0x7875b4af80
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8] 0x7875b4b000

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10] 0x78e24ef380
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8] 0x78e2607100
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x9b108f0 0x78e25ec8e0
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x9b10b30 0x78e25ec9c0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x9b109e8 0x78e25e90e0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10] 0x78e2631140
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10] 0x78e26311e0
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10] 0x78e2631280
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4] 0x78e2614200
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1] 0x78e2612180
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4] 0x78e2612200
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8] 0x78e2612280
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x9b38b94 0x78e2621580

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8] 0x7875b4c380

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8] 0x78e2611f80
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10] 0x78e24ee480

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8] 0x78e2613f80
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10] 0x78e26310a0

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10] 0x78e2611800
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8] 0x78e24eff60
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e2611880

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4] 0x78e2611900

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4] 0x78e2613600
	byte TestPurpose;//[Offset: 0x30, Size: 0x1] 0x78e2613680
	FString TestComment;//[Offset: 0x38, Size: 0x10] 0x78e2613700
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1] 0x78e2613780
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1] 0x78e2613800
	byte FilterType;//[Offset: 0x4a, Size: 0x1] 0x78e2613880
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38] 0x78e2613900
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38] 0x78e2613980
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38] 0x78e2613a00
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1] 0x78e2613a80
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1] 0x78e2613b00
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1] 0x78e2613b80
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1] 0x78e2631000
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38] 0x78e2613c80
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38] 0x78e2613d00
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38] 0x78e2613d80
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38] 0x78e2613e00
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1] 0x78e2613e80
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1] 0x78e2613f00

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x7875b49e00

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8] 0x7875b318c0

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8] 0x7875b49e80
	FName DataField;//[Offset: 0x18, Size: 0x8] 0x7875b49f00

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7875b49d80

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4] 0x7875ffbc80
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8] 0x7895c1b1e0
	int OptionIndex;//[Offset: 0x60, Size: 0x4] 0x7875ffbd00
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10] 0x7875ffbd80
	void SetNamedParam(FName ParamName, float Value);// 0x9b36908 0x7875feecc0
	Vector[] GetResultsAsLocations();// 0x9b369fc 0x7875feeda0
	Actor*[] GetResultsAsActors();// 0x9b36aac 0x7875feee80
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x9b36b5c 0x7875feef60
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x9b36c28 0x7875fef040
	float GetItemScore(int ItemIndex);// 0x9b36cf4 0x7875fef120
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x6d94ba8 0x7875fef200

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x9b45330 0x78e2620b00
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x9b44950 0x78e2620be0
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x9b447a4 0x78e2620cc0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9b44f64 0x78e2620da0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9b45154 0x78e2620e80
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9b44a84 0x78e2620f60
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x9b44cf4 0x78e2621040

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4] 0x7875ffb700
	float ExpirationAge;//[Offset: 0x4, Size: 0x4] 0x7875ffb780
	float Strength;//[Offset: 0x8, Size: 0x4] 0x7875ffb800
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc] 0x7875ffb880
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc] 0x7875ffb900
	FName Tag;//[Offset: 0x24, Size: 0x8] 0x7875ffb980
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1] 0x7875ffba00

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8] 0x7875b49b80
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10] 0x7875b31820
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1] 0x7875b49c80

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8] 0x78e2617580
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10] 0x78e2630380
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10] 0x78e2630420
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8] 0x78e2617700
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x9b48d48 0x78e2620080
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x9b48e94 0x78e2620160
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x9b48be8 0x78e2620240
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x9b48c98 0x78e2620320

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8] 0x78e2616880
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8] 0x78e2616900
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8] 0x78e2616980
	Object* Instigator;//[Offset: 0x40, Size: 0x8] 0x78e2616a00
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8] 0x78e2616a80
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1] 0x78e2616b00
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1] 0x78e2616b80
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1] 0x78e2616c00
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1] 0x78e2616c80
	byte GetActionPriority();// 0x9b46bd4 0x78e2620860
	void Finish(byte WithResult);// 0x9b46a34 0x78e2620940
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x9b46ae4 0x78e2620a20

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8] 0x7875b4cd80

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8] 0x7875b4cd00

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8] 0x78e2601880
	float FloatValue;//[Offset: 0x30, Size: 0x4] 0x78e2601900
	int IntValue;//[Offset: 0x34, Size: 0x4] 0x78e2601980
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78e2601a00

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4] 0x78e2601700
	float Max;//[Offset: 0x40, Size: 0x4] 0x78e2601780
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1] 0x78e2601800

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e2602f80
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10] 0x78e24ed940
	void UnregisterFromSense(class AISense SenseClass);// 0x9afe67c 0x78e25ea7a0
	void UnregisterFromPerceptionSystem();// 0x9afe724 0x78e25ea880
	void RegisterWithPerceptionSystem();// 0x9afe7e0 0x78e25ea960
	void RegisterForSense(class AISense SenseClass);// 0x9afe738 0x78e25eaa40

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8] 0x78e24ed260
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10] 0x78e24ed300
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10] 0x78e24ed3a0
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x6d94ba8 0x78e25e9d20
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x6d94ba8 0x78e25e9e00
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x6d94ba8 0x78e25e9ee0
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x6d94ba8 0x78e25e9fc0
	void K2_OnNewPawn(Pawn* NewPawn);// 0x6d94ba8 0x78e25ea0a0
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x9b02ff0 0x78e25ea180
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x9b030b0 0x78e25ea260

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78e24ed1c0
	static void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation, FName Tag);// 0x9b03c08 0x78e25e9c40

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4] 0x7875b49700
	Vector Location;//[Offset: 0x4, Size: 0xc] 0x7875b49780
	Vector HitLocation;//[Offset: 0x10, Size: 0xc] 0x7875b49800
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8] 0x7875b49880
	Actor* Instigator;//[Offset: 0x28, Size: 0x8] 0x7875b49900
	FName Tag;//[Offset: 0x30, Size: 0x8] 0x7875b49980

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10] 0x78e24ed120
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4] 0x78e2603980
	static void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x9b04480 0x78e25e9b60

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x4, Size: 0xc] 0x7875b4b580
	float Loudness;//[Offset: 0x10, Size: 0x4] 0x7875b49500
	float MaxRange;//[Offset: 0x14, Size: 0x4] 0x7875b49580
	Actor* Instigator;//[Offset: 0x18, Size: 0x8] 0x7875b49600
	FName Tag;//[Offset: 0x20, Size: 0x8] 0x7875b49680

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78e24ed080
	static void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x9b04cd4 0x78e25e99a0
	static void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x9b04e00 0x78e25e9a80

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8] 0x7875b4b480
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8] 0x7875b4b500

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4] 0x78e2603280
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4] 0x78e2603300
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8] 0x78e2603380
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4] 0x78e2603400
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4] 0x78e2603480
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4] 0x78e2603500

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78e24ecfe0

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x28, Size: 0x8] 0x7875b4b280
	Actor* Enemy;//[Offset: 0x30, Size: 0x8] 0x7875b4b300

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10] 0x78e24ecf40

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x10, Size: 0x8] 0x7875b4b180
	Actor* OtherActor;//[Offset: 0x18, Size: 0x8] 0x7875b4b200

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8] 0x78e24ecea0

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8] 0x78e24ef740

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8] 0x78e24ef6a0
	float HearingRange;//[Offset: 0x50, Size: 0x4] 0x78e2604f00
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4] 0x78e2604f80
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1] 0x78e2605000
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78e2605080

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1] 0x7875b49a00
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1] 0x7875b49a80
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1] 0x7875b49b00

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8] 0x78e24ef600
	float SightRadius;//[Offset: 0x50, Size: 0x4] 0x78e2604b80
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4] 0x78e2604c00
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4] 0x78e2604c80
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4] 0x78e2604d00
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4] 0x78e2604d80
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4] 0x78e2604e00
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4] 0x78e2604e80

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x38] 0x78e2604b00

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x30] 0x78e2604a80

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8] 0x78e2606100

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10] 0x78e2605a00
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10] 0x78e2605a80
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x40] 0x78e2605b00
	static AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0x9b0a2e4 0x78e25e9700

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8] 0x7875b4b080

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	static AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x9b0abbc 0x78e25e9620

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0x9b11e60 0x78e25ec800

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78e24eef20

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8] 0x78e2609300
	FString EnumName;//[Offset: 0x38, Size: 0x10] 0x78e2609380
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1] 0x78e2609400

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10] 0x78e2609200
	Enum* EnumType;//[Offset: 0x40, Size: 0x8] 0x78e2609280

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8] 0x78e24eee80

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10] 0x78e2609180

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1] 0x78e2608e00

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28] 0x78e2608c80

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10] 0x7875b316e0
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8] 0x7875b4ae00
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8] 0x7875b31780
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1] 0x7875b4ae80
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1] 0x7875b4af00

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4] 0x78e2608980
	float FloatValue;//[Offset: 0x8c, Size: 0x4] 0x78e2608a00
	FString StringValue;//[Offset: 0x90, Size: 0x10] 0x78e2608a80
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10] 0x78e2608b00
	byte OperationType;//[Offset: 0xb0, Size: 0x1] 0x78e2608b80
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1] 0x78e2608c00

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8] 0x78e2609a80
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8] 0x78e2609b00
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10] 0x78e24eeca0
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1] 0x78e2609c00
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1] 0x78e2609c80
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1] 0x78e2609d00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x78e25ee080
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x6d94ba8 0x78e25ee160
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ee240
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x6d94ba8 0x78e25ee320
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ee400
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x6d94ba8 0x78e25ee4e0
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ee5c0
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x6d94ba8 0x78e25ee6a0
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x6d94ba8 0x78e25eadc0
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x6d94ba8 0x78e25eaea0
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25eaf80
	bool PerformConditionCheck(Actor* OwnerActor);// 0x6d94ba8 0x78e25eb060
	bool IsDecoratorObserverActive();// 0x9b19d28 0x78e25eb140
	bool IsDecoratorExecutionActive();// 0x9b19d60 0x78e25eb220

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28] 0x78e2609880
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1] 0x78e24eec00
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20] 0x78e2609980
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10] 0x78e2609a00

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1] 0x78e2609700
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78e2609780
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78e2609800

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78e2609500
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78e2609580
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28] 0x78e2609600
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28] 0x78e2609680

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4] 0x78e260b580

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28] 0x78e260b380
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28] 0x78e260b400
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e260b480
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1] 0x78e260b500
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8] 0x78e24eeb60

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4] 0x78e260b080
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38] 0x78e260b100
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1] 0x78e24eeac0
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1] 0x78e260b200
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1] 0x78e260b280
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1] 0x78e260b300

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8] 0x78e24eea20

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4] 0x78e260ae00
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28] 0x78e260ae80
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28] 0x78e260af00
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e260af80
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78e260b000

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4] 0x78e260ac80
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x78e260ad00
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4] 0x78e260ad80

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78e260ab00
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78e260ab80
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78e260ac00

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8] 0x78e260a900
	float CooldownDuration;//[Offset: 0x64, Size: 0x4] 0x78e260a980
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78e260aa00
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78e260aa80

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4] 0x78e260a880

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	static void StopUsingExternalEvent(BTNode* NodeOwner);// 0x9b21a34 0x78e25efe40
	static void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x9b21acc 0x78e25eff20
	static void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x9b21f10 0x78e25ecaa0
	static void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x9b221b4 0x78e25ecb80
	static void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x9b21cb4 0x78e25ecc60
	static void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x9b22a10 0x78e25ecd40
	static void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x9b22064 0x78e25ece20
	static void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x9b22618 0x78e25ecf00
	static void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x9b224c4 0x78e25ecfe0
	static void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x9b2276c 0x78e25ed0c0
	static void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x9b228c0 0x78e25ed1a0
	static void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x9b22368 0x78e25ed280
	static BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x9b23860 0x78e25ed360
	static BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x9b237b8 0x78e25ed440
	static Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b22c7c 0x78e25ed520
	static FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b22eb0 0x78e25ed600
	static Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b22b60 0x78e25ed6e0
	static Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b236a0 0x78e25ed7c0
	static FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b22d98 0x78e25ed8a0
	static int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b23240 0x78e25ed980
	static float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b23128 0x78e25eda60
	static byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b23358 0x78e25edb40
	static class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b23470 0x78e25edc20
	static bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b2300c 0x78e25edd00
	static Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b23588 0x78e25edde0
	static void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b21e08 0x78e25edec0
	static void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x9b21bac 0x78e25edfa0

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28] 0x78e260e400

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8] 0x78e260da80
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8] 0x78e260db00
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1] 0x78e260db80
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1] 0x78e260dc00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x78e25ef660
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x6d94ba8 0x78e25ef740
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ef820
	void ReceiveSearchStart(Actor* OwnerActor);// 0x6d94ba8 0x78e25ef900
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ef9e0
	void ReceiveDeactivation(Actor* OwnerActor);// 0x6d94ba8 0x78e25efac0
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25efba0
	void ReceiveActivation(Actor* OwnerActor);// 0x6d94ba8 0x78e25efc80
	bool IsServiceActive();// 0x9b24fd8 0x78e25efd60

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1] 0x78e260da00

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48] 0x78e260d980

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8] 0x7875b4bd80
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10] 0x7875b33d00
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28] 0x7875b4c080
	byte RunMode;//[Offset: 0x40, Size: 0x1] 0x7875b4c100
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1] 0x7875b4c180

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7875b4be00
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7875b33c60
	float Value;//[Offset: 0xc, Size: 0x4] 0x7875b4bf00
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28] 0x7875b4bf80

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28] 0x78e260d800

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8] 0x78e260ee80
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8] 0x78e260ef00
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8] 0x78e260ef80
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1] 0x78e260f000
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x9b2666c 0x78e25eebe0
	void SetFinishOnMessage(FName MessageName);// 0x9b26760 0x78e25eecc0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x78e25eeda0
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x6d94ba8 0x78e25eee80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25eef60
	void ReceiveExecute(Actor* OwnerActor);// 0x6d94ba8 0x78e25ef040
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x78e25ef120
	void ReceiveAbort(Actor* OwnerActor);// 0x6d94ba8 0x78e25ef200
	bool IsTaskExecuting();// 0x9b26634 0x78e25ef2e0
	bool IsTaskAborting();// 0x9b265fc 0x78e25ef3c0
	void FinishExecute(bool bSuccess);// 0x9b2681c 0x78e25ef4a0
	void FinishAbort();// 0x9b26808 0x78e25ef580

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4] 0x7875b4b100

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1] 0x78e260ee00

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1] 0x78e260ed80

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4] 0x78e260ed00

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4] 0x78e260e780
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8] 0x78e24ee7a0
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4] 0x78e260e800
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1] 0x78e260e880
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1] 0x78e260e900
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1] 0x78e260e980
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1] 0x78e260ea00
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1] 0x78e260ea80
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1] 0x78e260eb00
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1] 0x78e260eb80
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1] 0x78e260ec00
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1] 0x78e260ec80

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1] 0x78e260fe80
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1] 0x78e260ff00
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1] 0x78e260ff80

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8] 0x78e260fc00
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1] 0x78e260fc80
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1] 0x78e260fd00
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8] 0x78e260fd80
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8] 0x78e260fe00

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8] 0x78e260fb80

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8] 0x78e260fb00

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4] 0x78e260fa80

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8] 0x78e260fa00

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8] 0x78e260f880
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8] 0x78e260f900
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8] 0x78e260f980

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8] 0x78e2610e00
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10] 0x78e24ee660
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10] 0x78e24ee700
	byte RunMode;//[Offset: 0xc0, Size: 0x1] 0x78e2610f80
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28] 0x78e2611000
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x78e2611080
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48] 0x78e260f800

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8] 0x7875b4ce80
	enum ParamType;//[Offset: 0x8, Size: 0x1] 0x7875b338a0
	float Value;//[Offset: 0xc, Size: 0x4] 0x7875b4cf80

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8] 0x78e2610c80
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78e2610d00
	float CooldownDuration;//[Offset: 0x78, Size: 0x4] 0x78e2610d80

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4] 0x78e2610b80
	float RandomDeviation;//[Offset: 0x70, Size: 0x4] 0x78e2610c00

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28] 0x78e2610b00

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x268, Size: 0xc] 0x78e2610580
	void SuspendCrowdSteering(bool bSuspend);// 0x9b2d774 0x78e25ee780

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8] 0x78e2612080
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10] 0x78e24ee520
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10] 0x78e24ee5c0
	int MaxAgents;//[Offset: 0x50, Size: 0x4] 0x78e2610100
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4] 0x78e2610180
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4] 0x78e2610200
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4] 0x78e2610280
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4] 0x78e2610300
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4] 0x78e2610380
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4] 0x78e2610400
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4] 0x78e2610480
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1] 0x78e2610500

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4] 0x7875b4c400
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4] 0x7875b4c480
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4] 0x7875b4c500
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4] 0x7875b4c580
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4] 0x7875b4c600
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4] 0x7875b4a580
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1] 0x7875b4a600
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1] 0x7875b4a680
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1] 0x7875b4a700
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1] 0x7875b4a780

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10] 0x7875b33da0
	float[] Radii;//[Offset: 0x10, Size: 0x10] 0x7875b31500

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x6d94ba8 0x78e26219e0
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x6d94ba8 0x78e2621ac0
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x6d94ba8 0x78e2621ba0
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x6d94ba8 0x78e2621c80

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8] 0x78e24efe20
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38] 0x78e2611700
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38] 0x78e2611780
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8] 0x78e24efec0

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18] 0x78e2611480
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8] 0x78e24efc40
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8] 0x78e24efce0
	Object* GetQuerier();// 0x9b3081c 0x78e2621660
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x6d94ba8 0x78e2621740
	void AddGeneratedVector(Vector GeneratedVector);// 0x9b308f8 0x78e2621820
	void AddGeneratedActor(Actor* GeneratedActor);// 0x9b30850 0x78e2621900

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10] 0x78e24efb00
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1] 0x78e2611380
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1] 0x78e2611400
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8] 0x78e24efba0

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x30] 0x78e2611280

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4] 0x7875b4d080
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8] 0x7875b33b20
	float ProjectDown;//[Offset: 0x10, Size: 0x4] 0x7875b4d100
	float ProjectUp;//[Offset: 0x14, Size: 0x4] 0x7875b4d180
	float ExtentX;//[Offset: 0x18, Size: 0x4] 0x7875b4d200
	float ExtentY;//[Offset: 0x1c, Size: 0x4] 0x7875b4d280
	float ExtentZ;//[Offset: 0x20, Size: 0x4] 0x7875b4d300
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4] 0x7875b4d380
	byte TraceChannel;//[Offset: 0x28, Size: 0x1] 0x7875b4d400
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1] 0x7875b4d480
	byte TraceShape;//[Offset: 0x2a, Size: 0x1] 0x7875b4d500
	byte TraceMode;//[Offset: 0x2b, Size: 0x1] 0x7875b4d580
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1] 0x7875b4d600
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1] 0x7875b4d680
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1] 0x7875b4b600
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1] 0x7875b4b680
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1] 0x7875b4b700
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1] 0x7875b4b780

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x80, Size: 0x38] 0x78e2613100
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xb8, Size: 0x38] 0x78e2613180
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf0, Size: 0x38] 0x78e2611100
	AIDataProviderFloatValue Range;//[Offset: 0x128, Size: 0x38] 0x78e2611180
	class EnvQueryContext* CenterActor;//[Offset: 0x160, Size: 0x8] 0x78e24efa60
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1] 0x78e2611200

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8] 0x78e24ef9c0

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x80, Size: 0x38] 0x78e2612d00
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xb8, Size: 0x38] 0x78e2612d80
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf0, Size: 0x38] 0x78e2612e00
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x128, Size: 0x38] 0x78e2612e80
	EnvDirection ArcDirection;//[Offset: 0x160, Size: 0x20] 0x78e2612f00
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x180, Size: 0x38] 0x78e2612f80
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1] 0x78e2613000
	class EnvQueryContext* Center;//[Offset: 0x1c0, Size: 0x8] 0x78e24ef920
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1] 0x78e2613080

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4] 0x7875b49d00

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8] 0x7875b33940
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8] 0x7875b339e0
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8] 0x7875b33a80
	byte DirMode;//[Offset: 0x18, Size: 0x1] 0x7875b4d000

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x80, Size: 0x38] 0x78e2612780
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78e2612800
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf0, Size: 0x38] 0x78e2612880
	enum PointOnCircleSpacingMethod;//[Offset: 0x128, Size: 0x1] 0x78e24ef7e0
	EnvDirection ArcDirection;//[Offset: 0x130, Size: 0x20] 0x78e2612980
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x150, Size: 0x38] 0x78e2612a00
	float AngleRadians;//[Offset: 0x188, Size: 0x4] 0x78e2612a80
	class EnvQueryContext* CircleCenter;//[Offset: 0x190, Size: 0x8] 0x78e24ef880
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1] 0x78e2612b00
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a0, Size: 0x38] 0x78e2612b80
	EnvTraceData TraceData;//[Offset: 0x1d8, Size: 0x30] 0x78e2612c00
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78e2612c80

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x80, Size: 0x38] 0x78e2612680
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xb8, Size: 0x38] 0x78e2612700
	class EnvQueryContext* GenerateAround;//[Offset: 0xf0, Size: 0x8] 0x78e2631460

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0xf8, Size: 0x38] 0x78e2612580
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x130, Size: 0x8] 0x78e26313c0
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x138, Size: 0x38] 0x78e2612600

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78e2613580
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8] 0x78e2630f60

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20] 0x78e2613380
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20] 0x78e2613400
	enum TestMode;//[Offset: 0x238, Size: 0x1] 0x78e2630ec0
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78e2613500

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48] 0x78e2615280
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78e2613200
	enum TagsToMatch;//[Offset: 0x241, Size: 0x1] 0x78e2630e20
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20] 0x78e2613300

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f4, Size: 0x1c] 0x78e2615200

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4] 0x7875b4b800
	float ExtentY;//[Offset: 0x4, Size: 0x4] 0x7875b4b880
	float ExtentZ;//[Offset: 0x8, Size: 0x4] 0x7875b4b900
	Vector ShapeOffset;//[Offset: 0xc, Size: 0xc] 0x7875b4b980
	byte OverlapChannel;//[Offset: 0x18, Size: 0x1] 0x7875b4ba00
	byte OverlapShape;//[Offset: 0x19, Size: 0x1] 0x7875b4ba80
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1] 0x7875b4bb00
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1] 0x7875b4bb80
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a, Size: 0x1] 0x7875b4bc00

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1] 0x78e2615080
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8] 0x78e2630ce0
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38] 0x78e2615100
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38] 0x78e2615180
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8] 0x78e2630d80

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38] 0x78e2615000

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x30] 0x78e2614f80

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x30] 0x78e2614d80
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x228, Size: 0x38] 0x78e2614e00
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x260, Size: 0x38] 0x78e2614e80
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x298, Size: 0x38] 0x78e2614f00
	class EnvQueryContext* Context;//[Offset: 0x2d0, Size: 0x8] 0x78e2630c40

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8] 0x78e2630b00
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8] 0x78e2630ba0
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1] 0x78e2614d00

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x4c0, Size: 0x8] 0x78e2614680
	EnvNamedValue[] QueryParams;//[Offset: 0x4c8, Size: 0x10] 0x78e2630920
	AIDynamicParam[] QueryConfig;//[Offset: 0x4d8, Size: 0x10] 0x78e26309c0
	float TimeLimitPerStep;//[Offset: 0x4e8, Size: 0x4] 0x78e2614800
	int StepToDebugDraw;//[Offset: 0x4ec, Size: 0x4] 0x78e2614880
	enum HighlightMode;//[Offset: 0x4f0, Size: 0x1] 0x78e2630a60
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f1, Size: 0x1] 0x78e2614980
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f1, Size: 0x1] 0x78e2614a00
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f1, Size: 0x1] 0x78e2614a80
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f1, Size: 0x1] 0x78e2614b00
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4f1, Size: 0x1] 0x78e2614b80
	byte QueryingMode;//[Offset: 0x4f2, Size: 0x1] 0x78e2614c00
	NavAgentProperties NavAgentProperties;//[Offset: 0x4f8, Size: 0x30] 0x78e2614c80

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x250, Size: 0x8] 0x78e2614600

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x230, Size: 0x10] 0x78e26307e0
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x240, Size: 0x10] 0x78e2630880
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x250, Size: 0x8] 0x78e2616280
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1] 0x78e2616300
	delegate OnSmartLinkReached;//[Offset: 0x260, Size: 0x10] 0x78e2614280
	void SetSmartLinkEnabled(bool bEnabled);// 0x9b43f7c 0x78e2621120
	void ResumePathFollowing(Actor* Agent);// 0x9b44064 0x78e2621200
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x6d94ba8 0x78e26212e0
	bool IsSmartLinkEnabled();// 0x9b4402c 0x78e26213c0
	bool HasMovingAgents();// 0x9b43f44 0x78e26214a0

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x78e2620400
	void ActionStart(Pawn* ControlledPawn);// 0x6d94ba8 0x78e26204e0
	void ActionResume(Pawn* ControlledPawn);// 0x6d94ba8 0x78e26205c0
	void ActionPause(Pawn* ControlledPawn);// 0x6d94ba8 0x78e26206a0
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x6d94ba8 0x78e2620780

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x90, Size: 0x8] 0x78e2618100
	Vector GoalLocation;//[Offset: 0x98, Size: 0xc] 0x78e2618180
	float AcceptableRadius;//[Offset: 0xa4, Size: 0x4] 0x78e2618200
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa8, Size: 0x8] 0x78e2630560
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1] 0x78e2618280
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1] 0x78e2618300
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1] 0x78e2618380
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1] 0x78e2618400
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1] 0x78e2616380
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1] 0x78e2616400
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1] 0x78e2616480

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x90, Size: 0x8] 0x78e2617f80
	PawnAction* RecentActionCopy;//[Offset: 0x98, Size: 0x8] 0x78e2618000
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1] 0x78e2618080

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x90, Size: 0x10] 0x78e26304c0
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1] 0x78e2617e80
	PawnAction* RecentActionCopy;//[Offset: 0xa8, Size: 0x8] 0x78e2617f00

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x90, Size: 0x4] 0x78e2617d80

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb0, Size: 0x4] 0x7875ffca80
	float LOSHearingThreshold;//[Offset: 0xb4, Size: 0x4] 0x7875ffcb00
	float SightRadius;//[Offset: 0xb8, Size: 0x4] 0x7875ffcb80
	float SensingInterval;//[Offset: 0xbc, Size: 0x4] 0x7875ffcc00
	float HearingMaxSoundAge;//[Offset: 0xc0, Size: 0x4] 0x7875ffcc80
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1] 0x7875ffcd00
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1] 0x7875ffcd80
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1] 0x7875ffce00
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1] 0x7875ffce80
	delegate OnSeePawn;//[Offset: 0xd0, Size: 0x10] 0x7875ffcf00
	delegate OnHearNoise;//[Offset: 0xe0, Size: 0x10] 0x7875ffcf80
	float PeripheralVisionAngle;//[Offset: 0xf0, Size: 0x4] 0x7875ffd000
	float PeripheralVisionCosine;//[Offset: 0xf4, Size: 0x4] 0x7875ffd080
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x9b4968c 0x78760b1900
	void SetSensingInterval(const float NewSensingInterval);// 0x9b49744 0x78760b19e0
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x9b495dc 0x78760b1ac0
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x6d94ba8 0x78760b1ba0
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x6d94ba8 0x78760b1c80
	float GetPeripheralVisionCosine();// 0x9b495a4 0x7875fee780
	float GetPeripheralVisionAngle();// 0x9b495c0 0x7875fee860

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object
	static HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0x9b52b28 0x78e2623960

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8] 0x7875ffe400
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8] 0x7875ffe480
	Vector Location;//[Offset: 0x10, Size: 0xc] 0x7875ffe500
	Vector Normal;//[Offset: 0x1c, Size: 0xc] 0x7875ffe580
	Vector AccumulatedImpulse;//[Offset: 0x28, Size: 0xc] 0x7875ffe600
	Vector Velocity;//[Offset: 0x34, Size: 0xc] 0x7875ffe680
	Vector OtherVelocity;//[Offset: 0x40, Size: 0xc] 0x7875ffe700
	Vector AngularVelocity;//[Offset: 0x4c, Size: 0xc] 0x7875ffc680
	Vector OtherAngularVelocity;//[Offset: 0x58, Size: 0xc] 0x7875ffc700
	float Mass;//[Offset: 0x64, Size: 0x4] 0x7875ffc800
	float OtherMass;//[Offset: 0x68, Size: 0x4] 0x7875ffc780

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18] 0x78e2618880

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x220, Size: 0x8] 0x78e2618800

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x448, Size: 0x8] 0x78e261b580
	bool bIsWorldField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1] 0x78e2619500
	bool bIsChaosField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1] 0x78e2619580
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x458, Size: 0x10] 0x78e2630240
	FieldObjectCommands ConstructionCommands;//[Offset: 0x468, Size: 0x30] 0x78e2619680
	FieldObjectCommands BufferCommands;//[Offset: 0x498, Size: 0x30] 0x78e2619700
	void ResetFieldSystem();// 0x9b5d0f4 0x78e2622e00
	void RemovePersistentFields();// 0x9b5d28c 0x78e2622ee0
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0x9b5d784 0x78e2622fc0
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0x9b5d5a8 0x78e26230a0
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0x9b5dc34 0x78e2623180
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0x9b5d95c 0x78e2623260
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0x9b5daec 0x78e2623340
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x9b5d424 0x78e2623420
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0x9b5dd7c 0x78e2623500
	void AddPersistentField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x9b5d2a0 0x78e26235e0
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x9b5d108 0x78e26236c0

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldObjectCommands
	FName[] TargetNames;//[Offset: 0x0, Size: 0x10] 0x7875b33620
	FieldNodeBase*[] RootNodes;//[Offset: 0x10, Size: 0x10] 0x7875b336c0
	FieldSystemMetaData*[] MetaDatas;//[Offset: 0x20, Size: 0x10] 0x7875b33760

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object
	int Iterations;//[Offset: 0xb0, Size: 0x4] 0x78e261b400
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0x9b5ec68 0x78e2622d20

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object
	byte ResolutionType;//[Offset: 0xb0, Size: 0x1] 0x78e261b280
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0x9b5f1ec 0x78e2622c40

--------------------------------
Class: FieldSystemMetaDataFilter.FieldSystemMetaData.ActorComponent.Object
	byte FilterType;//[Offset: 0xb0, Size: 0x1] 0x78e261b100
	FieldSystemMetaDataFilter* SetMetaDataFilterType(byte FilterType);// 0x9b5f770 0x78e2622b60

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	int Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261af80
	UniformInteger* SetUniformInteger(int Magnitude);// 0x9b60b74 0x78e2622a80

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb0, Size: 0x4] 0x78e261aa00
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x78e261aa80
	int InteriorValue;//[Offset: 0xc0, Size: 0x4] 0x78e261ab00
	int ExteriorValue;//[Offset: 0xc4, Size: 0x4] 0x78e261ab80
	byte SetMaskCondition;//[Offset: 0xc8, Size: 0x1] 0x78e261ac00
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0x9b61100 0x78e26229a0

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261a880
	UniformScalar* SetUniformScalar(float Magnitude);// 0x9b617c0 0x78e26228c0

--------------------------------
Class: WaveScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261c280
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x78e261c300
	float Wavelength;//[Offset: 0xc0, Size: 0x4] 0x78e261c380
	float Period;//[Offset: 0xc4, Size: 0x4] 0x78e261c400
	byte Function;//[Offset: 0xc8, Size: 0x1] 0x78e261c480
	byte Falloff;//[Offset: 0xc9, Size: 0x1] 0x78e261c500
	WaveScalar* SetWaveScalar(float Magnitude, Vector Position, float Wavelength, float Period, float Time, byte Function, byte Falloff);// 0x9b61d50 0x78e26227e0

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261bb00
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78e261bb80
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78e261bc00
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78e261bc80
	float Radius;//[Offset: 0xc0, Size: 0x4] 0x78e261bd00
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x78e261bd80
	byte Falloff;//[Offset: 0xd0, Size: 0x1] 0x78e261be00
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0x9b624b8 0x78e2622700

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261d380
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78e261d400
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78e261d480
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78e261d500
	float Distance;//[Offset: 0xc0, Size: 0x4] 0x78e261d580
	Vector Position;//[Offset: 0xc4, Size: 0xc] 0x78e261d600
	Vector Normal;//[Offset: 0xd0, Size: 0xc] 0x78e261d680
	byte Falloff;//[Offset: 0xdc, Size: 0x1] 0x78e261b600
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector Position, Vector Normal, byte Falloff);// 0x9b62c20 0x78e2622620

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261cd00
	float MinRange;//[Offset: 0xb4, Size: 0x4] 0x78e261cd80
	float MaxRange;//[Offset: 0xb8, Size: 0x4] 0x78e261ce00
	float Default;//[Offset: 0xbc, Size: 0x4] 0x78e261ce80
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x78e261cf00
	byte Falloff;//[Offset: 0xf0, Size: 0x1] 0x78e261cf80
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0x9b633e4 0x78e2622540

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb0, Size: 0x4] 0x78e261c980
	float MaxRange;//[Offset: 0xb4, Size: 0x4] 0x78e261ca00
	Transform Transform;//[Offset: 0xc0, Size: 0x30] 0x78e261ca80
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0x9b63b64 0x78e2622460

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261c700
	Vector Direction;//[Offset: 0xb4, Size: 0xc] 0x78e261c780
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0x9b64210 0x78e2622380

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261e580
	Vector Position;//[Offset: 0xb4, Size: 0xc] 0x78e261e600
	RadialVector* SetRadialVector(float Magnitude, Vector Position);// 0x9b647e8 0x78e26222a0

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261e400
	RandomVector* SetRandomVector(float Magnitude);// 0x9b64dc0 0x78e26221c0

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4] 0x78e261df80
	FieldNodeBase* RightField;//[Offset: 0xb8, Size: 0x8] 0x78e261e000
	FieldNodeBase* LeftField;//[Offset: 0xc0, Size: 0x8] 0x78e261e080
	byte Operation;//[Offset: 0xc8, Size: 0x1] 0x78e261e100
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* LeftField, const FieldNodeBase* RightField, byte Operation);// 0x9b65350 0x78e26220e0

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	FieldNodeFloat* FloatField;//[Offset: 0xb0, Size: 0x8] 0x78e261de00
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0x9b659c8 0x78e2622000

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8] 0x78e261dc80
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0x9b65f54 0x78e2621f20

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object
	FieldNodeBase* Culling;//[Offset: 0xb0, Size: 0x8] 0x78e261d900
	FieldNodeBase* Field;//[Offset: 0xb8, Size: 0x8] 0x78e261d980
	byte Operation;//[Offset: 0xc0, Size: 0x1] 0x78e261da00
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0x9b664e0 0x78e2621e40

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0x9b66b04 0x78e2621d60

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1] 0x78e261eb80
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1] 0x78e261ec00
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1] 0x78e261ec80
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x1f4, Size: 0x18] 0x78e261ed00
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x20c, Size: 0x18] 0x78e261ed80
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x224, Size: 0x18] 0x78e261ee00
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x240, Size: 0x50] 0x78e2632680
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x290, Size: 0x50] 0x78e2632720
	delegate OnCollisionEvents;//[Offset: 0x2e0, Size: 0x10] 0x78e261ef80
	delegate OnBreakingEvents;//[Offset: 0x2f0, Size: 0x10] 0x78e261f000
	delegate OnTrailingEvents;//[Offset: 0x300, Size: 0x10] 0x78e261f080
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0x9b91b28 0x78e2624ae0
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0x9b91d30 0x78e2624bc0
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0x9b91c2c 0x78e2624ca0
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0x9b9207c 0x78e2624d80
	void SetTrailingEventEnabled(bool bIsEnabled);// 0x9b91e6c 0x78e2624e60
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0x9b921fc 0x78e2624f40
	void SetCollisionEventEnabled(bool bIsEnabled);// 0x9b91fcc 0x78e2625020
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0x9b9213c 0x78e2625100
	void SetBreakingEventEnabled(bool bIsEnabled);// 0x9b91f1c 0x78e26251e0
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x9b922bc 0x78e26252c0
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x9b9240c 0x78e26253a0
	bool IsEventListening();// 0x9b91e34 0x78e2625480
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x9b92364 0x78e2625560
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x9b924b4 0x78e2625640

--------------------------------
Class: ChaosCollisionEventRequestSettings
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4] 0x7875b4e400
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7875b4e480
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7875b4e500
	float MinImpulse;//[Offset: 0xc, Size: 0x4] 0x7875b4e580
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7875b4e600
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7875b334e0

--------------------------------
Class: ChaosBreakingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x7875b4e700
	float MinRadius;//[Offset: 0x4, Size: 0x4] 0x7875b4c680
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7875b4c700
	float MinMass;//[Offset: 0xc, Size: 0x4] 0x7875b4c780
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7875b4c800
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7875b33580

--------------------------------
Class: ChaosTrailingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4] 0x7875b4e100
	float MinMass;//[Offset: 0x4, Size: 0x4] 0x7875b4e180
	float MinSpeed;//[Offset: 0x8, Size: 0x4] 0x7875b4e200
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4] 0x7875b4e280
	float MaxDistance;//[Offset: 0x10, Size: 0x4] 0x7875b4e300
	enum SortMethod;//[Offset: 0x14, Size: 0x1] 0x7875b33440

--------------------------------
Class: ChaosTrailingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875ffdb00
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x7875ffdb80
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x7875ffdc00
	float Mass;//[Offset: 0x24, Size: 0x4] 0x7875ffdc80
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x7875ffdd00

--------------------------------
Class: ChaosCollisionEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875ffe000
	Vector Normal;//[Offset: 0xc, Size: 0xc] 0x7875ffe080
	Vector Velocity1;//[Offset: 0x18, Size: 0xc] 0x7875ffe100
	Vector Velocity2;//[Offset: 0x24, Size: 0xc] 0x7875ffe180
	float Mass1;//[Offset: 0x30, Size: 0x4] 0x7875ffe200
	float Mass2;//[Offset: 0x34, Size: 0x4] 0x7875ffe280
	Vector Impulse;//[Offset: 0x38, Size: 0xc] 0x7875ffe300

--------------------------------
Class: ChaosBreakingEventData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x7875ffde00
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x7875ffde80
	float Mass;//[Offset: 0x18, Size: 0x4] 0x7875ffdf00

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x220, Size: 0x8] 0x78e261e880
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x228, Size: 0x8] 0x78e261e900
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0x9b93bcc 0x78e2624a00

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x478, Size: 0x8] 0x78760ed700
	GeometryCollection* RestCollection;//[Offset: 0x560, Size: 0x8] 0x78760ed780
	FieldSystemActor*[] InitializationFields;//[Offset: 0x568, Size: 0x10] 0x7895c1f2e0
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1] 0x78760ed880
	enum ObjectType;//[Offset: 0x580, Size: 0x1] 0x7895c1ee80
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1] 0x78760ed980
	int ClusterGroupIndex;//[Offset: 0x584, Size: 0x4] 0x78760eda00
	int MaxClusterLevel;//[Offset: 0x588, Size: 0x4] 0x78760eda80
	float[] DamageThreshold;//[Offset: 0x590, Size: 0x10] 0x7895c1ef20
	enum ClusterConnectionType;//[Offset: 0x5a0, Size: 0x1] 0x7895c1ede0
	int CollisionGroup;//[Offset: 0x5a4, Size: 0x4] 0x78760edc00
	float CollisionSampleFraction;//[Offset: 0x5a8, Size: 0x4] 0x78760edc80
	float LinearEtherDrag;//[Offset: 0x5ac, Size: 0x4] 0x78760edd00
	float AngularEtherDrag;//[Offset: 0x5b0, Size: 0x4] 0x78760edd80
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x5b8, Size: 0x8] 0x78760ede00
	enum InitialVelocityType;//[Offset: 0x5c0, Size: 0x1] 0x7895c1ed40
	Vector InitialLinearVelocity;//[Offset: 0x5c4, Size: 0xc] 0x78760edf00
	Vector InitialAngularVelocity;//[Offset: 0x5d0, Size: 0xc] 0x78760edf80
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x5e0, Size: 0x8] 0x78760ee000
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x5e8, Size: 0x50] 0x78760ec980
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x638, Size: 0x10] 0x78760eca00
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x648, Size: 0x10] 0x78760eca80
	delegate OnChaosBreakEvent;//[Offset: 0x670, Size: 0x10] 0x78760ecb00
	float DesiredCacheTime;//[Offset: 0x680, Size: 0x4] 0x78760ecb80
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1] 0x78760ecc00
	delegate OnChaosPhysicsCollision;//[Offset: 0x688, Size: 0x10] 0x78760ecc80
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1] 0x78760ecd00
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1] 0x78760ecd80
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1] 0x78760ece00
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69b, Size: 0x1] 0x78760ece80
	int ReplicationAbandonClusterLevel;//[Offset: 0x69c, Size: 0x4] 0x78760ecf00
	GeometryCollectionRepData RepData;//[Offset: 0x6a0, Size: 0x18] 0x78760ecf80
	BodySetup* DummyBodySetup;//[Offset: 0x8c8, Size: 0x8] 0x78760ed000
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0x9b94cfc 0x78760b82e0
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x6d94ba8 0x78760b83c0
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0x9b94c38 0x78760b84a0
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x6d94ba8 0x78760b8580
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0x6d94ba8 0x78760b8660
	void NetAbandonCluster(int TransformIndex);// 0x9b94b88 0x78760b8740
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x9b94dac 0x78760b8820
	void ApplyKinematicField(float Radius, Vector Position);// 0x9b94f30 0x78760b8900

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1] 0x7895c1eca0
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8] 0x78760ee100
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4] 0x78760ee180
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1] 0x78760ee200
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1] 0x78760ee280
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4] 0x78760ee300
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x78760ee380
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4] 0x78760ee400
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4] 0x78760ee480
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78760ee500
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78760ee580
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4] 0x78760ee600
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1] 0x78760ee680
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4] 0x78760ee700
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4] 0x78760ec680
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78760ec700
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1] 0x78760ec780
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4] 0x78760ec800
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4] 0x78760ec880
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4] 0x78760ec900

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10] 0x78e261ff80
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8] 0x78e261e780
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10] 0x78e261e800

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10] 0x787800a740

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10] 0x787800cc20
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10] 0x787800ccc0
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10] 0x787800cd60
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10] 0x787800ce00
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10] 0x787800a560
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10] 0x787800a600
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50] 0x787800a6a0
	float Timestamp;//[Offset: 0xb0, Size: 0x4] 0x787596bc80

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x787596cf80
	Vector AccumulatedImpulse;//[Offset: 0xc, Size: 0xc] 0x787596d000
	Vector Normal;//[Offset: 0x18, Size: 0xc] 0x787596d080
	Vector Velocity1;//[Offset: 0x24, Size: 0xc] 0x787596d100
	Vector Velocity2;//[Offset: 0x30, Size: 0xc] 0x787596d180
	Vector AngularVelocity1;//[Offset: 0x3c, Size: 0xc] 0x787596d200
	Vector AngularVelocity2;//[Offset: 0x48, Size: 0xc] 0x787596d280
	float Mass1;//[Offset: 0x54, Size: 0x4] 0x787596d300
	float Mass2;//[Offset: 0x58, Size: 0x4] 0x787596d380
	int ParticleIndex;//[Offset: 0x5c, Size: 0x4] 0x787596d400
	int LevelsetIndex;//[Offset: 0x60, Size: 0x4] 0x787596d480
	int ParticleIndexMesh;//[Offset: 0x64, Size: 0x4] 0x787596d500
	int LevelsetIndexMesh;//[Offset: 0x68, Size: 0x4] 0x787596d580

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x787596d680
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x787596b600
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x787596b680
	float Mass;//[Offset: 0x24, Size: 0x4] 0x787596b700
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x787596b780
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x787596b800

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0xc] 0x787596b900
	Vector Velocity;//[Offset: 0xc, Size: 0xc] 0x787596b980
	Vector AngularVelocity;//[Offset: 0x18, Size: 0xc] 0x787596ba00
	float Mass;//[Offset: 0x24, Size: 0x4] 0x787596ba80
	int ParticleIndex;//[Offset: 0x28, Size: 0x4] 0x787596bb00
	int ParticleIndexMesh;//[Offset: 0x2c, Size: 0x4] 0x787596bb80

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8] 0x78e2641a00
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8] 0x78e2641a80

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x220, Size: 0x1] 0x78e2641b00
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x228, Size: 0x18] 0x78e2641b80
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1] 0x78e2641c00
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1] 0x78e2641c80
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242, Size: 0x1] 0x78e2641d00
	enum HideGeometry;//[Offset: 0x243, Size: 0x1] 0x78e26325e0
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1] 0x78e2641e00
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1] 0x78e2641e80
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1] 0x78e2641f00
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 0x1] 0x78e2641f80
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x78e2642000
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1] 0x78e2642080
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1] 0x78e2642100
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1] 0x78e2640080
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1] 0x78e2640100
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1] 0x78e2640180
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1] 0x78e2640200
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1] 0x78e2640280
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78e2640300
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x78e2640380
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x78e2640400
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1] 0x78e2640480
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1] 0x78e2640500
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1] 0x78e2640580
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 0x1] 0x78e2640600
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x257, Size: 0x1] 0x78e2640680
	int SingleFaceIndex;//[Offset: 0x258, Size: 0x4] 0x78e2640700
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1] 0x78e2640780
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1] 0x78e2640800
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1] 0x78e2640880
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 0x1] 0x78e2640900
	float PointThickness;//[Offset: 0x260, Size: 0x4] 0x78e2640980
	float LineThickness;//[Offset: 0x264, Size: 0x4] 0x78e2640a00
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1] 0x78e2640a80
	float TextScale;//[Offset: 0x26c, Size: 0x4] 0x78e2640b00
	float NormalScale;//[Offset: 0x270, Size: 0x4] 0x78e2640b80
	float AxisScale;//[Offset: 0x274, Size: 0x4] 0x78e2640c00
	float ArrowScale;//[Offset: 0x278, Size: 0x4] 0x78e2640c80
	Color RigidBodyIdColor;//[Offset: 0x27c, Size: 0x4] 0x78e2640d00
	float RigidBodyTransformScale;//[Offset: 0x280, Size: 0x4] 0x78e2640d80
	Color RigidBodyCollisionColor;//[Offset: 0x284, Size: 0x4] 0x78e2640e00
	Color RigidBodyInertiaColor;//[Offset: 0x288, Size: 0x4] 0x78e2640e80
	Color RigidBodyVelocityColor;//[Offset: 0x28c, Size: 0x4] 0x78e2640f00
	Color RigidBodyForceColor;//[Offset: 0x290, Size: 0x4] 0x78e2640f80
	Color RigidBodyInfoColor;//[Offset: 0x294, Size: 0x4] 0x78e2641000
	Color TransformIndexColor;//[Offset: 0x298, Size: 0x4] 0x78e2641080
	float TransformScale;//[Offset: 0x29c, Size: 0x4] 0x78e261f800
	Color LevelColor;//[Offset: 0x2a0, Size: 0x4] 0x78e261f880
	Color ParentColor;//[Offset: 0x2a4, Size: 0x4] 0x78e261f900
	float ConnectivityEdgeThickness;//[Offset: 0x2a8, Size: 0x4] 0x78e261f980
	Color GeometryIndexColor;//[Offset: 0x2ac, Size: 0x4] 0x78e261fa00
	float GeometryTransformScale;//[Offset: 0x2b0, Size: 0x4] 0x78e261fa80
	Color BoundingBoxColor;//[Offset: 0x2b4, Size: 0x4] 0x78e261fb00
	Color FaceColor;//[Offset: 0x2b8, Size: 0x4] 0x78e261fb80
	Color FaceIndexColor;//[Offset: 0x2bc, Size: 0x4] 0x78e261fc00
	Color FaceNormalColor;//[Offset: 0x2c0, Size: 0x4] 0x78e261fc80
	Color SingleFaceColor;//[Offset: 0x2c4, Size: 0x4] 0x78e261fd00
	Color VertexColor;//[Offset: 0x2c8, Size: 0x4] 0x78e261fd80
	Color VertexIndexColor;//[Offset: 0x2cc, Size: 0x4] 0x78e261fe00
	Color VertexNormalColor;//[Offset: 0x2d0, Size: 0x4] 0x78e261fe80
	BillboardComponent* SpriteComponent;//[Offset: 0x2d8, Size: 0x8] 0x78e261ff00

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4] 0x7875b4df80
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8] 0x7875b4e000
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8] 0x7875b4e080

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x220, Size: 0x8] 0x78e2642b80
	Material* RayMarchMaterial;//[Offset: 0x228, Size: 0x8] 0x78e2642c00
	float SurfaceTolerance;//[Offset: 0x230, Size: 0x4] 0x78e2642c80
	float Isovalue;//[Offset: 0x234, Size: 0x4] 0x78e2642d00
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1] 0x78e2642d80
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1] 0x78e2642e00

--------------------------------
Class: SkeletalMeshSimulationComponent.ActorComponent.Object
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xb8, Size: 0x8] 0x78e2644200
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xc0, Size: 0x8] 0x78e2642180
	PhysicsAsset* OverridePhysicsAsset;//[Offset: 0xc8, Size: 0x8] 0x78e2642200
	bool bSimulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1] 0x78e2642280
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1] 0x78e2642300
	enum ObjectType;//[Offset: 0xd2, Size: 0x1] 0x78e2631f00
	float Density;//[Offset: 0xd4, Size: 0x4] 0x78e2642400
	float MinMass;//[Offset: 0xd8, Size: 0x4] 0x78e2642480
	float MaxMass;//[Offset: 0xdc, Size: 0x4] 0x78e2642500
	enum CollisionType;//[Offset: 0xe0, Size: 0x1] 0x78e2631fa0
	float ImplicitShapeParticlesPerUnitArea;//[Offset: 0xe4, Size: 0x4] 0x78e2642600
	int ImplicitShapeMinNumParticles;//[Offset: 0xe8, Size: 0x4] 0x78e2642680
	int ImplicitShapeMaxNumParticles;//[Offset: 0xec, Size: 0x4] 0x78e2642700
	int MinLevelSetResolution;//[Offset: 0xf0, Size: 0x4] 0x78e2642780
	int MaxLevelSetResolution;//[Offset: 0xf4, Size: 0x4] 0x78e2642800
	int CollisionGroup;//[Offset: 0xf8, Size: 0x4] 0x78e2642880
	enum InitialVelocityType;//[Offset: 0xfc, Size: 0x1] 0x78e2632040
	Vector InitialLinearVelocity;//[Offset: 0x100, Size: 0xc] 0x78e2642980
	Vector InitialAngularVelocity;//[Offset: 0x10c, Size: 0xc] 0x78e2642a00
	delegate OnChaosPhysicsCollision;//[Offset: 0x118, Size: 0x10] 0x78e2642a80
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x6d94ba8 0x78e2624920

--------------------------------
Class: StaticMeshSimulationComponent.ActorComponent.Object
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x78e2643980
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1] 0x78e2643a00
	enum ObjectType;//[Offset: 0xba, Size: 0x1] 0x78e2631be0
	float Mass;//[Offset: 0xbc, Size: 0x4] 0x78e2643b00
	enum CollisionType;//[Offset: 0xc0, Size: 0x1] 0x78e2631c80
	enum ImplicitType;//[Offset: 0xc1, Size: 0x1] 0x78e2631d20
	int MinLevelSetResolution;//[Offset: 0xc4, Size: 0x4] 0x78e2643c80
	int MaxLevelSetResolution;//[Offset: 0xc8, Size: 0x4] 0x78e2643d00
	enum InitialVelocityType;//[Offset: 0xcc, Size: 0x1] 0x78e2631dc0
	Vector InitialLinearVelocity;//[Offset: 0xd0, Size: 0xc] 0x78e2643e00
	Vector InitialAngularVelocity;//[Offset: 0xdc, Size: 0xc] 0x78e2643e80
	float DamageThreshold;//[Offset: 0xe8, Size: 0x4] 0x78e2643f00
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0xf0, Size: 0x8] 0x78e2643f80
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0xf8, Size: 0x8] 0x78e2644000
	delegate OnChaosPhysicsCollision;//[Offset: 0x100, Size: 0x10] 0x78e2644080
	PrimitiveComponent*[] SimulatedComponents;//[Offset: 0x120, Size: 0x10] 0x78e2631e60
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0x6d94ba8 0x78e2624760
	void ForceRecreatePhysicsState();// 0x9b9745c 0x78e2624840

--------------------------------
Class: InputBehavior.Object

--------------------------------
Class: AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisAngleGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: InteractiveGizmo.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x30, Size: 0x8] 0x78e2643900

--------------------------------
Class: InputBehaviorSet.Object
	BehaviorInfo[] Behaviors;//[Offset: 0x28, Size: 0x10] 0x78e2631a00

--------------------------------
Class: BehaviorInfo
	InputBehavior* Behavior;//[Offset: 0x0, Size: 0x8] 0x7875b4d880

--------------------------------
Class: AxisAngleGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78e2643280
	interface class None* AngleSource;//[Offset: 0x58, Size: 0x10] 0x78e2643300
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78e2643380
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78e2643400
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78e2643480
	Vector RotationOrigin;//[Offset: 0x8c, Size: 0xc] 0x78e2643500
	Vector RotationAxis;//[Offset: 0x98, Size: 0xc] 0x78e2643580
	Vector RotationPlaneX;//[Offset: 0xa4, Size: 0xc] 0x78e2643600
	Vector RotationPlaneY;//[Offset: 0xb0, Size: 0xc] 0x78e2643680
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78e2643700
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78e2643780
	float InteractionStartAngle;//[Offset: 0xd4, Size: 0x4] 0x78e2643800
	float InteractionCurAngle;//[Offset: 0xd8, Size: 0x4] 0x78e2643880

--------------------------------
Class: AxisPositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: AxisPositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78e2644d00
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78e2644d80
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78e2644e00
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78e2644e80
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78e2644f00
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78e2644f80
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78e2645000
	Vector InteractionAxis;//[Offset: 0x98, Size: 0xc] 0x78e2645080
	Vector InteractionStartPoint;//[Offset: 0xa4, Size: 0xc] 0x78e2645100
	Vector InteractionCurPoint;//[Offset: 0xb0, Size: 0xc] 0x78e2645180
	float InteractionStartParameter;//[Offset: 0xbc, Size: 0x4] 0x78e2645200
	float InteractionCurParameter;//[Offset: 0xc0, Size: 0x4] 0x78e2645280
	float ParameterSign;//[Offset: 0xc4, Size: 0x4] 0x78e2643200

--------------------------------
Class: GizmoConstantAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78e2644c00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78e2644c80

--------------------------------
Class: GizmoConstantFrameAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78e2644a00
	Vector Direction;//[Offset: 0x3c, Size: 0xc] 0x78e2644a80
	Vector TangentX;//[Offset: 0x48, Size: 0xc] 0x78e2644b00
	Vector TangentY;//[Offset: 0x54, Size: 0xc] 0x78e2644b80

--------------------------------
Class: GizmoWorldAxisSource.Object
	Vector Origin;//[Offset: 0x30, Size: 0xc] 0x78e2644900
	int AxisIndex;//[Offset: 0x3c, Size: 0x4] 0x78e2644980

--------------------------------
Class: GizmoComponentAxisSource.Object
	SceneComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78e2644780
	int AxisIndex;//[Offset: 0x38, Size: 0x4] 0x78e2644800
	bool bLocalAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1] 0x78e2644880

--------------------------------
Class: InteractiveToolPropertySet.Object
	InteractiveToolPropertySet* CachedProperties;//[Offset: 0x38, Size: 0x8] 0x78e2644680
	bool bIsPropertySetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x78e2644700

--------------------------------
Class: BrushBaseProperties.InteractiveToolPropertySet.Object
	float BrushSize;//[Offset: 0x60, Size: 0x4] 0x78e2644300
	bool bSpecifyRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1] 0x78e2644380
	float BrushRadius;//[Offset: 0x68, Size: 0x4] 0x78e2644400
	float BrushStrength;//[Offset: 0x6c, Size: 0x4] 0x78e2644480
	float BrushFalloffAmount;//[Offset: 0x70, Size: 0x4] 0x78e2644500
	bool bShowStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78e2644580
	bool bShowFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78e2644600

--------------------------------
Class: InteractiveTool.Object
	InputBehaviorSet* InputBehaviors;//[Offset: 0x48, Size: 0x8] 0x78e2646300
	Object*[] ToolPropertyObjects;//[Offset: 0x50, Size: 0x10] 0x78e2631b40

--------------------------------
Class: SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object

--------------------------------
Class: BaseBrushTool.MeshSurfacePointTool.SingleSelectionTool.InteractiveTool.Object
	BrushBaseProperties* BrushProperties;//[Offset: 0xc0, Size: 0x8] 0x78e2646080
	bool bInBrushStroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1] 0x78e2646100
	float WorldToLocalScale;//[Offset: 0xcc, Size: 0x4] 0x78e2646180
	BrushStampData LastBrushStamp;//[Offset: 0xd0, Size: 0xa8] 0x78e2646200
	class BrushBaseProperties* PropertyClass;//[Offset: 0x188, Size: 0x28] 0x78e2631aa0
	BrushStampIndicator* BrushStampIndicator;//[Offset: 0x1b0, Size: 0x8] 0x78e2646280

--------------------------------
Class: BrushStampData

--------------------------------
Class: BrushStampIndicator.InteractiveGizmo.Object
	float BrushRadius;//[Offset: 0x38, Size: 0x4] 0x78e2645980
	float BrushFalloff;//[Offset: 0x3c, Size: 0x4] 0x78e2645a00
	Vector BrushPosition;//[Offset: 0x40, Size: 0xc] 0x78e2645a80
	Vector BrushNormal;//[Offset: 0x4c, Size: 0xc] 0x78e2645b00
	bool bDrawIndicatorLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e2645b80
	bool bDrawRadiusCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1] 0x78e2645c00
	int SampleStepCount;//[Offset: 0x5c, Size: 0x4] 0x78e2645c80
	LinearColor LineColor;//[Offset: 0x60, Size: 0x10] 0x78e2645d00
	float LineThickness;//[Offset: 0x70, Size: 0x4] 0x78e2645d80
	bool bDepthTested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x78e2645e00
	bool bDrawSecondaryLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1] 0x78e2645e80
	float SecondaryLineThickness;//[Offset: 0x78, Size: 0x4] 0x78e2645f00
	LinearColor SecondaryLineColor;//[Offset: 0x7c, Size: 0x10] 0x78e2645f80
	PrimitiveComponent* AttachedComponent;//[Offset: 0x90, Size: 0x8] 0x78e2646000

--------------------------------
Class: BrushStampIndicatorBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool bUpdateModifiersDuringDrag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1] 0x78e2645900

--------------------------------
Class: LocalClickDragInputBehavior.ClickDragInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: ClickDragTool.InteractiveTool.Object

--------------------------------
Class: InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoActor.InternalToolFrameworkActor.Actor.Object

--------------------------------
Class: GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LinearColor Color;//[Offset: 0x448, Size: 0x10] 0x78e2645680
	float HoverSizeMultiplier;//[Offset: 0x458, Size: 0x4] 0x78e2645700
	float PixelHitDistanceThreshold;//[Offset: 0x45c, Size: 0x4] 0x78e2645780
	void UpdateWorldLocalState(bool bWorldIn);// 0x9bcce2c 0x78e26245a0
	void UpdateHoverState(bool bHoveringIn);// 0x9bcceec 0x78e2624680

--------------------------------
Class: GizmoArrowComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Direction;//[Offset: 0x468, Size: 0xc] 0x78e2645480
	float Gap;//[Offset: 0x474, Size: 0x4] 0x78e2645500
	float Length;//[Offset: 0x478, Size: 0x4] 0x78e2645580
	float Thickness;//[Offset: 0x47c, Size: 0x4] 0x78e2645600

--------------------------------
Class: GizmoBoxComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Origin;//[Offset: 0x468, Size: 0xc] 0x78e2647280
	Quat Rotation;//[Offset: 0x480, Size: 0x10] 0x78e2647300
	Vector Dimensions;//[Offset: 0x490, Size: 0xc] 0x78e2647380
	float LineThickness;//[Offset: 0x49c, Size: 0x4] 0x78e2645300
	bool bRemoveHiddenLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1] 0x78e2645380
	bool bEnableAxisFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1] 0x78e2645400

--------------------------------
Class: GizmoCircleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x468, Size: 0xc] 0x78e2646f80
	float Radius;//[Offset: 0x474, Size: 0x4] 0x78e2647000
	float Thickness;//[Offset: 0x478, Size: 0x4] 0x78e2647080
	int NumSides;//[Offset: 0x47c, Size: 0x4] 0x78e2647100
	bool bViewAligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1] 0x78e2647180
	bool bOnlyAllowFrontFacingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1] 0x78e2647200

--------------------------------
Class: GizmoTransformSource.Interface.Object
	void SetTransform(out const Transform NewTransform);// 0x9bcddb8 0x78e26243e0
	Transform GetTransform();// 0x9bcde9c 0x78e26244c0

--------------------------------
Class: GizmoAxisSource.Interface.Object
	bool HasTangentVectors();// 0x9bce524 0x78e2624060
	void GetTangentVectors(out Vector TangentXOut, out Vector TangentYOut);// 0x9bce420 0x78e2624140
	Vector GetOrigin();// 0x9bce5a4 0x78e2624220
	Vector GetDirection();// 0x9bce564 0x78e2624300

--------------------------------
Class: GizmoClickTarget.Interface.Object
	void UpdateHoverState(bool bHovering);// 0x9bcead8 0x78e2623f80

--------------------------------
Class: GizmoStateTarget.Interface.Object
	void EndUpdate();// 0x9bcefa0 0x78e2623dc0
	void BeginUpdate();// 0x9bcefbc 0x78e2623ea0

--------------------------------
Class: GizmoFloatParameterSource.Interface.Object
	void SetParameter(float NewValue);// 0x9bcf444 0x78e2623a40
	float GetParameter();// 0x9bcf510 0x78e2623b20
	void EndModify();// 0x9bcf428 0x78e2623c00
	void BeginModify();// 0x9bcf4f4 0x78e2623ce0

--------------------------------
Class: GizmoVec2ParameterSource.Interface.Object
	void SetParameter(out const Vector2D NewValue);// 0x9bcfa50 0x78e2627080
	Vector2D GetParameter();// 0x9bcfb24 0x78e2627160
	void EndModify();// 0x9bcfa34 0x78e2627240
	void BeginModify();// 0x9bcfb08 0x78e2627320

--------------------------------
Class: GizmoLineHandleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector Normal;//[Offset: 0x468, Size: 0xc] 0x78e2646680
	float HandleSize;//[Offset: 0x474, Size: 0x4] 0x78e2646700
	float Thickness;//[Offset: 0x478, Size: 0x4] 0x78e2646780
	Vector Direction;//[Offset: 0x47c, Size: 0xc] 0x78e2646800
	float Length;//[Offset: 0x488, Size: 0x4] 0x78e2646880
	bool bImageScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1] 0x78e2646900

--------------------------------
Class: GizmoRectangleComponent.GizmoBaseComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DirectionX;//[Offset: 0x468, Size: 0xc] 0x78e2648380
	Vector DirectionY;//[Offset: 0x474, Size: 0xc] 0x78e2648400
	float OffsetX;//[Offset: 0x480, Size: 0x4] 0x78e2646380
	float OffsetY;//[Offset: 0x484, Size: 0x4] 0x78e2646400
	float LengthX;//[Offset: 0x488, Size: 0x4] 0x78e2646480
	float LengthY;//[Offset: 0x48c, Size: 0x4] 0x78e2646500
	float Thickness;//[Offset: 0x490, Size: 0x4] 0x78e2646580
	byte SegmentFlags;//[Offset: 0x494, Size: 0x1] 0x78e2646600

--------------------------------
Class: GizmoLambdaHitTarget.Object

--------------------------------
Class: GizmoComponentHitTarget.Object
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 0x8] 0x78e2648300

--------------------------------
Class: InputBehaviorSource.Interface.Object

--------------------------------
Class: InputRouter.Object
	bool bAutoInvalidateOnHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78e2648100
	bool bAutoInvalidateOnCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x78e2648180
	InputBehaviorSet* ActiveInputBehaviors;//[Offset: 0x38, Size: 0x8] 0x78e2648200

--------------------------------
Class: InteractionMechanic.Object

--------------------------------
Class: InteractiveGizmoManager.Object
	ActiveGizmo[] ActiveGizmos;//[Offset: 0x30, Size: 0x10] 0x78e2631960
	<FString,InteractiveGizmoBuilder*> GizmoBuilders;//[Offset: 0x58, Size: 0x50] 0x7875b1cdc0

--------------------------------
Class: ActiveGizmo

--------------------------------
Class: ToolContextTransactionProvider.Interface.Object

--------------------------------
Class: InteractiveToolManager.Object
	InteractiveTool* ActiveLeftTool;//[Offset: 0x30, Size: 0x8] 0x78e2647d80
	InteractiveTool* ActiveRightTool;//[Offset: 0x38, Size: 0x8] 0x78e2647e00
	<FString,InteractiveToolBuilder*> ToolBuilders;//[Offset: 0x90, Size: 0x50] 0x7875b1cd00

--------------------------------
Class: ToolFrameworkComponent.Interface.Object

--------------------------------
Class: InteractiveToolsContext.Object
	InputRouter* InputRouter;//[Offset: 0x58, Size: 0x8] 0x78e2647c00
	InteractiveToolManager* ToolManager;//[Offset: 0x60, Size: 0x8] 0x78e2647c80
	InteractiveGizmoManager* GizmoManager;//[Offset: 0x68, Size: 0x8] 0x78e2647d00
	class InteractiveToolManager* ToolManagerClass;//[Offset: 0x70, Size: 0x28] 0x78e26318c0

--------------------------------
Class: IntervalGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	GizmoLineHandleComponent* UpIntervalComponent;//[Offset: 0x220, Size: 0x8] 0x78e2647a80
	GizmoLineHandleComponent* DownIntervalComponent;//[Offset: 0x228, Size: 0x8] 0x78e2647b00
	GizmoLineHandleComponent* ForwardIntervalComponent;//[Offset: 0x230, Size: 0x8] 0x78e2647b80

--------------------------------
Class: IntervalGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: IntervalGizmo.InteractiveGizmo.Object
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x38, Size: 0x8] 0x78e2647780
	TransformProxy* TransformProxy;//[Offset: 0x50, Size: 0x8] 0x78e2647800
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x58, Size: 0x10] 0x78e2631780
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x68, Size: 0x10] 0x78e2631820
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x90, Size: 0x8] 0x78e2647980
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x98, Size: 0x8] 0x78e2647a00

--------------------------------
Class: GizmoTransformChangeStateTarget.Object
	interface class None* TransactionManager;//[Offset: 0x50, Size: 0x10] 0x78e264b200

--------------------------------
Class: TransformProxy.Object
	bool bRotatePerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1] 0x78e264be80
	bool bSetPivotMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1] 0x78e264bf00
	Transform SharedTransform;//[Offset: 0x90, Size: 0x30] 0x78e264bf80
	Transform InitialSharedTransform;//[Offset: 0xc0, Size: 0x30] 0x78e264c000

--------------------------------
Class: GizmoBaseFloatParameterSource.Object

--------------------------------
Class: GizmoAxisIntervalParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* FloatParameterSource;//[Offset: 0x48, Size: 0x10] 0x78e2647600
	float MinParameter;//[Offset: 0x58, Size: 0x4] 0x78e2647680
	float MaxParameter;//[Offset: 0x5c, Size: 0x4] 0x78e2647700

--------------------------------
Class: KeyAsModifierInputBehavior.InputBehavior.Object

--------------------------------
Class: MeshSurfacePointToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: MouseHoverBehavior.InputBehavior.Object

--------------------------------
Class: MultiClickSequenceInputBehavior.AnyButtonInputBehavior.InputBehavior.Object

--------------------------------
Class: MultiSelectionTool.InteractiveTool.Object

--------------------------------
Class: GizmoLocalFloatParameterSource.GizmoBaseFloatParameterSource.Object
	float Value;//[Offset: 0x48, Size: 0x4] 0x78e2647500
	GizmoFloatParameterChange LastChange;//[Offset: 0x4c, Size: 0x8] 0x78e2647580

--------------------------------
Class: GizmoFloatParameterChange
	float InitialValue;//[Offset: 0x0, Size: 0x4] 0x7875b4d780
	float CurrentValue;//[Offset: 0x4, Size: 0x4] 0x7875b4d800

--------------------------------
Class: GizmoBaseVec2ParameterSource.Object

--------------------------------
Class: GizmoLocalVec2ParameterSource.GizmoBaseVec2ParameterSource.Object
	Vector2D Value;//[Offset: 0x48, Size: 0x8] 0x78e2647400
	GizmoVec2ParameterChange LastChange;//[Offset: 0x50, Size: 0x10] 0x78e2647480

--------------------------------
Class: GizmoVec2ParameterChange
	Vector2D InitialValue;//[Offset: 0x0, Size: 0x8] 0x7875b4f780
	Vector2D CurrentValue;//[Offset: 0x8, Size: 0x8] 0x7875b4d700

--------------------------------
Class: GizmoAxisTranslationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78e2649180
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78e2649200
	float Parameter;//[Offset: 0xb0, Size: 0x4] 0x78e2649280
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78e2649300
	Vector CurTranslationAxis;//[Offset: 0xbc, Size: 0xc] 0x78e2649380
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78e2649400
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78e2649480

--------------------------------
Class: GizmoPlaneTranslationParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78e2648d00
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78e2648d80
	Vector2D Parameter;//[Offset: 0xb0, Size: 0x8] 0x78e2648e00
	GizmoVec2ParameterChange LastChange;//[Offset: 0xb8, Size: 0x10] 0x78e2648e80
	Vector CurTranslationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78e2648f00
	Vector CurTranslationNormal;//[Offset: 0xd4, Size: 0xc] 0x78e2648f80
	Vector CurTranslationAxisX;//[Offset: 0xe0, Size: 0xc] 0x78e2649000
	Vector CurTranslationAxisY;//[Offset: 0xec, Size: 0xc] 0x78e2649080
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78e2649100

--------------------------------
Class: GizmoAxisRotationParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78e2648980
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78e2648a00
	float Angle;//[Offset: 0xb0, Size: 0x4] 0x78e2648a80
	GizmoFloatParameterChange LastChange;//[Offset: 0xb4, Size: 0x8] 0x78e2648b00
	Vector CurRotationAxis;//[Offset: 0xbc, Size: 0xc] 0x78e2648b80
	Vector CurRotationOrigin;//[Offset: 0xc8, Size: 0xc] 0x78e2648c00
	Transform InitialTransform;//[Offset: 0xe0, Size: 0x30] 0x78e2648c80

--------------------------------
Class: GizmoUniformScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78e2648480
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78e2648500
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78e2648580
	Vector2D Parameter;//[Offset: 0x6c, Size: 0x8] 0x78e2648600
	GizmoVec2ParameterChange LastChange;//[Offset: 0x74, Size: 0x10] 0x78e2648680
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78e2648700
	Vector CurScaleNormal;//[Offset: 0x90, Size: 0xc] 0x78e2648780
	Vector CurScaleAxisX;//[Offset: 0x9c, Size: 0xc] 0x78e2648800
	Vector CurScaleAxisY;//[Offset: 0xa8, Size: 0xc] 0x78e2648880
	Transform InitialTransform;//[Offset: 0xc0, Size: 0x30] 0x78e2648900

--------------------------------
Class: GizmoAxisScaleParameterSource.GizmoBaseFloatParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78e264a180
	interface class None* TransformSource;//[Offset: 0x58, Size: 0x10] 0x78e264a200
	float ScaleMultiplier;//[Offset: 0x68, Size: 0x4] 0x78e264a280
	float Parameter;//[Offset: 0x6c, Size: 0x4] 0x78e264a300
	GizmoFloatParameterChange LastChange;//[Offset: 0x70, Size: 0x8] 0x78e264a380
	Vector CurScaleAxis;//[Offset: 0x78, Size: 0xc] 0x78e264a400
	Vector CurScaleOrigin;//[Offset: 0x84, Size: 0xc] 0x78e264a480
	Transform InitialTransform;//[Offset: 0x90, Size: 0x30] 0x78e264a500

--------------------------------
Class: GizmoPlaneScaleParameterSource.GizmoBaseVec2ParameterSource.Object
	interface class None* AxisSource;//[Offset: 0x90, Size: 0x10] 0x78e2649c80
	interface class None* TransformSource;//[Offset: 0xa0, Size: 0x10] 0x78e2649d00
	float ScaleMultiplier;//[Offset: 0xb0, Size: 0x4] 0x78e2649d80
	Vector2D Parameter;//[Offset: 0xb4, Size: 0x8] 0x78e2649e00
	GizmoVec2ParameterChange LastChange;//[Offset: 0xbc, Size: 0x10] 0x78e2649e80
	Vector CurScaleOrigin;//[Offset: 0xcc, Size: 0xc] 0x78e2649f00
	Vector CurScaleNormal;//[Offset: 0xd8, Size: 0xc] 0x78e2649f80
	Vector CurScaleAxisX;//[Offset: 0xe4, Size: 0xc] 0x78e264a000
	Vector CurScaleAxisY;//[Offset: 0xf0, Size: 0xc] 0x78e264a080
	Transform InitialTransform;//[Offset: 0x100, Size: 0x30] 0x78e264a100

--------------------------------
Class: PlanePositionGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: PlanePositionGizmo.InteractiveGizmo.Object
	interface class None* AxisSource;//[Offset: 0x48, Size: 0x10] 0x78e264b500
	interface class None* ParameterSource;//[Offset: 0x58, Size: 0x10] 0x78e264b580
	interface class None* HitTarget;//[Offset: 0x68, Size: 0x10] 0x78e2649500
	interface class None* StateTarget;//[Offset: 0x78, Size: 0x10] 0x78e2649580
	bool bEnableSignedAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1] 0x78e2649600
	bool bFlipX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1] 0x78e2649680
	bool bFlipY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1] 0x78e2649700
	bool bInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1] 0x78e2649780
	Vector InteractionOrigin;//[Offset: 0x8c, Size: 0xc] 0x78e2649800
	Vector InteractionNormal;//[Offset: 0x98, Size: 0xc] 0x78e2649880
	Vector InteractionAxisX;//[Offset: 0xa4, Size: 0xc] 0x78e2649900
	Vector InteractionAxisY;//[Offset: 0xb0, Size: 0xc] 0x78e2649980
	Vector InteractionStartPoint;//[Offset: 0xbc, Size: 0xc] 0x78e2649a00
	Vector InteractionCurPoint;//[Offset: 0xc8, Size: 0xc] 0x78e2649a80
	Vector2D InteractionStartParameter;//[Offset: 0xd4, Size: 0x8] 0x78e2649b00
	Vector2D InteractionCurParameter;//[Offset: 0xdc, Size: 0x8] 0x78e2649b80
	Vector2D ParameterSigns;//[Offset: 0xe4, Size: 0x8] 0x78e2649c00

--------------------------------
Class: SelectionSet.Object

--------------------------------
Class: MeshSelectionSet.SelectionSet.Object
	int[] Vertices;//[Offset: 0x40, Size: 0x10] 0x78e2631500
	int[] Edges;//[Offset: 0x50, Size: 0x10] 0x78e26315a0
	int[] Faces;//[Offset: 0x60, Size: 0x10] 0x78e2631640
	int[] Groups;//[Offset: 0x70, Size: 0x10] 0x78e26316e0

--------------------------------
Class: SingleClickInputBehavior.AnyButtonInputBehavior.InputBehavior.Object
	bool HitTestOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x78e264b280

--------------------------------
Class: SingleClickToolBuilder.InteractiveToolBuilder.Object

--------------------------------
Class: SingleClickTool.InteractiveTool.Object

--------------------------------
Class: GizmoNilStateTarget.Object

--------------------------------
Class: GizmoLambdaStateTarget.Object

--------------------------------
Class: GizmoObjectModifyStateTarget.Object

--------------------------------
Class: TransformGizmoActor.GizmoActor.InternalToolFrameworkActor.Actor.Object
	PrimitiveComponent* TranslateX;//[Offset: 0x220, Size: 0x8] 0x78e264aa00
	PrimitiveComponent* TranslateY;//[Offset: 0x228, Size: 0x8] 0x78e264aa80
	PrimitiveComponent* TranslateZ;//[Offset: 0x230, Size: 0x8] 0x78e264ab00
	PrimitiveComponent* TranslateYZ;//[Offset: 0x238, Size: 0x8] 0x78e264ab80
	PrimitiveComponent* TranslateXZ;//[Offset: 0x240, Size: 0x8] 0x78e264ac00
	PrimitiveComponent* TranslateXY;//[Offset: 0x248, Size: 0x8] 0x78e264ac80
	PrimitiveComponent* RotateX;//[Offset: 0x250, Size: 0x8] 0x78e264ad00
	PrimitiveComponent* RotateY;//[Offset: 0x258, Size: 0x8] 0x78e264ad80
	PrimitiveComponent* RotateZ;//[Offset: 0x260, Size: 0x8] 0x78e264ae00
	PrimitiveComponent* UniformScale;//[Offset: 0x268, Size: 0x8] 0x78e264ae80
	PrimitiveComponent* AxisScaleX;//[Offset: 0x270, Size: 0x8] 0x78e264af00
	PrimitiveComponent* AxisScaleY;//[Offset: 0x278, Size: 0x8] 0x78e264af80
	PrimitiveComponent* AxisScaleZ;//[Offset: 0x280, Size: 0x8] 0x78e264b000
	PrimitiveComponent* PlaneScaleYZ;//[Offset: 0x288, Size: 0x8] 0x78e264b080
	PrimitiveComponent* PlaneScaleXZ;//[Offset: 0x290, Size: 0x8] 0x78e264b100
	PrimitiveComponent* PlaneScaleXY;//[Offset: 0x298, Size: 0x8] 0x78e264b180

--------------------------------
Class: TransformGizmoBuilder.InteractiveGizmoBuilder.Object

--------------------------------
Class: TransformGizmo.InteractiveGizmo.Object
	TransformProxy* ActiveTarget;//[Offset: 0x40, Size: 0x8] 0x78e264c080
	bool bSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x78e264c100
	bool bGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1] 0x78e264c180
	Vector ExplicitGridSize;//[Offset: 0x4c, Size: 0xc] 0x78e264c200
	bool bRotationGridSizeIsExplicit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x78e264c280
	Rotator ExplicitRotationGridSize;//[Offset: 0x5c, Size: 0xc] 0x78e264c300
	bool bSnapToWorldRotGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1] 0x78e264c380
	bool bUseContextCoordinateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x78e264c400
	enum CurrentCoordinateSystem;//[Offset: 0x6c, Size: 0x4] 0x78e2633bc0
	PrimitiveComponent*[] ActiveComponents;//[Offset: 0x100, Size: 0x10] 0x78e2633c60
	PrimitiveComponent*[] NonuniformScaleComponents;//[Offset: 0x110, Size: 0x10] 0x78e2633d00
	InteractiveGizmo*[] ActiveGizmos;//[Offset: 0x120, Size: 0x10] 0x78e2633da0
	GizmoConstantFrameAxisSource* CameraAxisSource;//[Offset: 0x140, Size: 0x8] 0x78e264a580
	GizmoComponentAxisSource* AxisXSource;//[Offset: 0x148, Size: 0x8] 0x78e264a600
	GizmoComponentAxisSource* AxisYSource;//[Offset: 0x150, Size: 0x8] 0x78e264a680
	GizmoComponentAxisSource* AxisZSource;//[Offset: 0x158, Size: 0x8] 0x78e264a700
	GizmoComponentAxisSource* UnitAxisXSource;//[Offset: 0x160, Size: 0x8] 0x78e264a780
	GizmoComponentAxisSource* UnitAxisYSource;//[Offset: 0x168, Size: 0x8] 0x78e264a800
	GizmoComponentAxisSource* UnitAxisZSource;//[Offset: 0x170, Size: 0x8] 0x78e264a880
	GizmoTransformChangeStateTarget* StateTarget;//[Offset: 0x178, Size: 0x8] 0x78e264a900
	GizmoScaledTransformSource* ScaledTransformSource;//[Offset: 0x180, Size: 0x8] 0x78e264a980

--------------------------------
Class: GizmoScaledTransformSource.GizmoBaseTransformSource.Object
	interface class None* ChildTransformSource;//[Offset: 0x48, Size: 0x10] 0x78e264bd00

--------------------------------
Class: GizmoBaseTransformSource.Object

--------------------------------
Class: GizmoComponentWorldTransformSource.GizmoBaseTransformSource.Object
	SceneComponent* Component;//[Offset: 0x48, Size: 0x8] 0x78e264bd80
	bool bModifyComponentOnTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78e264be00

--------------------------------
Class: GizmoTransformProxyTransformSource.GizmoBaseTransformSource.Object
	TransformProxy* Proxy;//[Offset: 0x48, Size: 0x8] 0x78e264bc80

--------------------------------
Class: UTCSwipeToMoveComponent_C.UTCComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 0x8] 0x783141fd00
	Vector Previous Location;//[Offset: 0x1a0, Size: 0xc] 0x783141fc80
	Vector Current Delta;//[Offset: 0x1ac, Size: 0xc] 0x783141fc00
	Vector Target Delta;//[Offset: 0x1b8, Size: 0xc] 0x783141fb80
	delegate On Delta X Changed;//[Offset: 0x1c8, Size: 0x10] 0x783141fb00
	delegate On Delta Y Changed;//[Offset: 0x1d8, Size: 0x10] 0x783141fa80
	delegate On Pressed;//[Offset: 0x1e8, Size: 0x10] 0x783141fa00
	delegate On Released;//[Offset: 0x1f8, Size: 0x10] 0x783141f980
	delegate On Delta Location Changed;//[Offset: 0x208, Size: 0x10] 0x783141f900
	float Speed;//[Offset: 0x218, Size: 0x4] 0x783141f880
	UTCDebugWidget_C* Debug Widget;//[Offset: 0x220, Size: 0x8] 0x783141f800
	bool Enable Interpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1] 0x7831301080
	float Interpolation Speed;//[Offset: 0x22c, Size: 0x4] 0x7831301000
	void Recalculate Delta(Vector Current Location, out Vector Target Delta, out Vector Current Delta, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue);// 0x6d94ba8 0x78e3e27780
	void ReceiveBeginPlay();// 0x6d94ba8 0x78e3e27860
	void On Event Touch Moved(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e27940
	void On Event Touch Released(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e27a20
	void On Event Touch Pressed(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e27b00
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x78e3e27be0
	void ExecuteUbergraph_UTCSwipeToMoveComponent(int EntryPoint, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Vector CallFunc_Recalculate_Delta_Target_Delta, Vector CallFunc_Recalculate_Delta_Current_Delta, Vector CallFunc_Recalculate_Delta_Target_Delta, Vector CallFunc_Recalculate_Delta_Current_Delta, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_SelectVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NotEqual_VectorVector_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, UTCDebugWidget_C* CallFunc_Create_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x78e3e27cc0
	void On Delta Location Changed__DelegateSignature(Vector Value);// 0x6d94ba8 0x78e3e27da0
	void On Released__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e27e80
	void On Pressed__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e27f60
	void On Delta Y Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78e3e28120
	void On Delta X Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78e3e282e0

--------------------------------
Class: UTCComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8] 0x783141d280
	int Priority;//[Offset: 0xb8, Size: 0x4] 0x783141d200
	int Max Fingers Count;//[Offset: 0xbc, Size: 0x4] 0x783141d180
	bool Use Bounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1] 0x783141d100
	Vector2D Bounds Origin;//[Offset: 0xc4, Size: 0x8] 0x783141d080
	Vector2D Bounds Size;//[Offset: 0xcc, Size: 0x8] 0x783141d000
	bool Bounds In Percentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1] 0x783141cf80
	int Actual Viewport Size X;//[Offset: 0xd8, Size: 0x4] 0x783141cf00
	Vector2D Bounds Origin (%);//[Offset: 0xdc, Size: 0x8] 0x783141ce80
	Vector2D Bounds Size (%);//[Offset: 0xe4, Size: 0x8] 0x783141ce00
	int Actual Viewport Size Y;//[Offset: 0xec, Size: 0x4] 0x783141cd80
	bool Is In Bounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1] 0x783141cd00
	Vector[] Locations;//[Offset: 0xf8, Size: 0x10] 0x782e49e700
	byte[] Fingers;//[Offset: 0x108, Size: 0x10] 0x782e49e660
	Vector Screen Up Vector;//[Offset: 0x118, Size: 0xc] 0x783141cb80
	bool Owner is Pawn or Controller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1] 0x783141cb00
	bool Is Possessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1] 0x783141ca80
	Vector Screen Right Vector;//[Offset: 0x128, Size: 0xc] 0x783141ca00
	delegate OnViewportSizeChanged;//[Offset: 0x138, Size: 0x10] 0x783141c980
	int Temp Viewport Size X;//[Offset: 0x148, Size: 0x4] 0x783141c900
	int Temp Viewport Size Y;//[Offset: 0x14c, Size: 0x4] 0x783141c880
	bool Check Network Connection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1] 0x783141c800
	delegate OnNetworkConnected;//[Offset: 0x158, Size: 0x10] 0x783141c780
	bool Enable Debug Drawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1] 0x783141c700
	bool Rectangular (by greater value);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1] 0x783141c680
	UserWidget* Background Widget;//[Offset: 0x170, Size: 0x8] 0x783141e700
	bool BGW Hide if Pawn Unpossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1] 0x783141e680
	bool BGW Use Bounds Size and Origin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1] 0x783141e600
	Vector2D BGW Force Size;//[Offset: 0x17c, Size: 0x8] 0x783141e580
	bool BGW Size In Percent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1] 0x783141e500
	bool BGW Rectangular Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1] 0x783141e480
	Vector2D BGW Force Origin;//[Offset: 0x188, Size: 0x8] 0x783141e400
	bool BGW Origin In Percent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1] 0x783141e380
	void Setup Background by Size and Origin(class UserWidget Widget Class, bool Hide if pawn Unpossessed, Vector2D Origin, bool Origin In Percent, Vector2D Size, bool Size In Percent, bool Rectangular (by greater value of Size));// 0x6d94ba8 0x78e3e21d60
	void Setup Background by Bounds(class UserWidget Background Widget Class, bool Hide if pawn Unpossessed);// 0x6d94ba8 0x78e3e21e40
	Vector2D Get Screen Size By Size In Percents(Vector2D InVec, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6d94ba8 0x78e3e21f20
	void Setup Background Widget(class UserWidget Background Widget Class, bool Hide if pawn Unpossessed, bool Use Bounds Size and Origin, Vector2D Origin (if you're not using bounds), bool Origin In Percent, Vector2D Size (if you're not using bounds), bool Size In Percent, bool Rectangular (by greater value of Size), UserWidget* CallFunc_Create_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Possessed_By_PC, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Locally_Controlled, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UserWidget CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue);// 0x6d94ba8 0x78e3e22000
	void Update Background Widget(bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, Vector2D CallFunc_Get_Screen_Size_By_Size_In_Percents_ReturnValue, Vector2D K2Node_Select_Default, Vector2D CallFunc_Get_Screen_Size_By_Size_In_Percents_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D K2Node_Select_Default, float CallFunc_FMax_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D K2Node_Select_Default, Vector2D K2Node_Select_Default, Vector2D K2Node_Select_Default, float CallFunc_GetViewportScale_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x6d94ba8 0x78e3e220e0
	void Is Player Controller Loaded(out bool Is Loaded, Actor* CallFunc_GetOwner_ReturnValue, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, Controller* K2Node_DynamicCast_As___, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x78e3e221c0
	void Is Pawn Possessed By PC(out bool Is Possessed, out bool Is Locally Controlled, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Possessed_By_PC, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Locally_Controlled);// 0x6d94ba8 0x78e3e222a0
	void Get Is Pawn Possessed by PC(out bool Is Possessed By PC, out bool Is Locally Controlled, Actor* CallFunc_GetOwner_ReturnValue, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocalController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x78e3e22380
	void Filter By Active(out UTCComponent_C*[] UTCComponents, out UTCComponent_C*[] Active Components, UTCComponent_C*[] Active UTC Components, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_IsActive_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x6d94ba8 0x78e3e22540
	void Get FingerIndex and Location by index(int Index, out Vector Location, out byte FingerIndex, out bool Is Valid, byte CallFunc_Array_Get_Item, Vector CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x78e3e22620
	void On Viewport Size Is Changed();// 0x6d94ba8 0x78e3e22700
	bool Is Finger Slots Available(int CallFunc_Get_Fingers_Length_Length, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x78e3e227e0
	void Setup Bounds(bool Is Enabled, Vector2D Bounds Origin, Vector2D Bounds Size, bool In Percent, bool Rect (by greater value));// 0x6d94ba8 0x78e3e228c0
	void Filter By Bounds(out UTCComponent_C*[] UTC Components, Vector Location, out UTCComponent_C*[] In Bounds, out UTCComponent_C*[] W/out Bounds, out UTCComponent_C*[] Both, UTCComponent_C*[] Both Local, UTCComponent_C*[] W/out Bounds Local, UTCComponent_C*[] In Bounds Local, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_Check_Bounds_In_Bounds, bool CallFunc_Check_Bounds_W_out_Bounds, bool CallFunc_Check_Bounds_In_Bounds_by_X, bool CallFunc_Check_Bounds_In_Bounds_by_Y, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x6d94ba8 0x78e3e229a0
	void Sort By Priority(out UTCComponent_C*[] UTC Components, out UTCComponent_C*[] W/ Higher Priority, UTCComponent_C*[] W/ Higher Priority Local, int Higher Priority, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, UTCComponent_C* CallFunc_Array_Get_Item, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x78e3e22a80
	void Is Finger Location Exists(byte Finger Index, out bool Result, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x6d94ba8 0x78e3e22b60
	void Get Fingers Length(out int Length, int CallFunc_Array_Length_ReturnValue);// 0x6d94ba8 0x78e3e22c40
	void Update Finger Location(byte Finger Index, Vector New Location, int CallFunc_Array_Find_ReturnValue);// 0x6d94ba8 0x78e3e22d20
	void Remove Finger Location(byte Finger Index, int CallFunc_Array_Find_ReturnValue);// 0x6d94ba8 0x78e3e22e00
	void Add Finger Location(byte Finger Index, Vector Location, out bool Result, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x78e3e22ee0
	void Check Is Viewport Size Changed(out bool Result, bool Is Changed, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x78e3e22fc0
	void Update Bounds In Percent(bool Is Viewport Size Changed, bool ___bool_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FMax_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D K2Node_Select_Default);// 0x6d94ba8 0x78e3e230a0
	bool Is Bounding Enabled(float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x78e3e23180
	void Check Bounds(Vector Location, out bool In Bounds, out bool W/out Bounds, out bool In Bounds by X, out bool In Bounds by Y, bool Without Bounds, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Is_Bounding_Enabled_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x78e3e23260
	void On Event Touch Released(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e23340
	void On Event Touch Moved(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e23420
	void On Event Touch Pressed(Vector Location, byte FingerIndex, bool CallFunc_Add_Finger_Location_Result);// 0x6d94ba8 0x78e3e23500
	void On Pawn Unpossesed(Controller* Old Controller, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Array_Get_Item, byte CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x78e3e235e0
	void On Pawn Possesed(Controller* New Controller, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x78e3e236c0
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x78e3e237a0
	void ReceiveBeginPlay();// 0x6d94ba8 0x78e3e23880
	void Disable Network Connection Checking();// 0x6d94ba8 0x78e3e23960
	void ExecuteUbergraph_UTCComponent(int EntryPoint, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, float K2Node_Event_DeltaSeconds, bool CallFunc_Check_Is_Viewport_Size_Changed_Result, bool CallFunc_Is_Pawn_Possessed_By_PC_Is_Possessed, bool CallFunc_Is_Pawn_Possessed_By_PC_Is_Locally_Controlled, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_Check_Is_Viewport_Size_Changed_Result, Pawn*[] CallFunc_GetAllActorsOfClass_OutActors, Pawn* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UTCComponent_C*[] CallFunc_K2_GetComponentsByClass_ReturnValue, UTCComponent_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Is_Player_Controller_Loaded_Is_Loaded);// 0x6d94ba8 0x78e3e20080
	void OnNetworkConnected__DelegateSignature();// 0x6d94ba8 0x78e3e20240
	void OnViewportSizeChanged__DelegateSignature(Vector2D Previous Size, Vector2D Updated Size);// 0x6d94ba8 0x78e3e20400

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: UTCDebugWidget_C.UserWidget.Widget.Visual.Object
	Vector2D Bound Size;//[Offset: 0x260, Size: 0x8] 0x7831411280
	Vector2D Bounds Origin;//[Offset: 0x268, Size: 0x8] 0x7831411200
	void Draw Radial Shape(out PaintContext Context, Vector2D Center, float Radius, int Segments, LinearColor Color, float Angle, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int ___int_Variable, float CallFunc_Sin_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Cos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Sin_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Cos_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue);// 0x6d94ba8 0x78e3e20860
	void Draw Bounding Box(out PaintContext Context, Vector2D Location, Vector2D Size, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, const Vector2D[] K2Node_MakeArray_Array);// 0x6d94ba8 0x78e3e20a20
	void OnPaint(out PaintContext Context);// 0x6d94ba8 0x78e3e20be0

--------------------------------
Class: WB_Intro_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7836887800
	WidgetAnimation* IntroAnimation;//[Offset: 0x268, Size: 0x8] 0x7836887880
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7836887900
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7836887980
	void Construct();// 0x6d94ba8 0x78358b76a0
	void 自定义事件                                                                                     (bool IsSign);// 0x6d94ba8 0x78358b75c0
	void 自定义事件                                                                                     (bool IsAntiAddiction);// 0x6d94ba8 0x78358baea0
	void ExecuteUbergraph_WB_Intro(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, TapSDK* CallFunc_GetTapSDK_ReturnValue, bool K2Node_CustomEvent_IsSign, bool K2Node_CustomEvent_IsAntiAddiction);// 0x6d94ba8 0x78358bace0

--------------------------------
Class: Loge_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8] 0x783688d500
	void ReceiveBeginPlay();// 0x6d94ba8 0x78358b7a20
	void ExecuteUbergraph_Loge(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_Intro_C* CallFunc_Create_ReturnValue);// 0x6d94ba8 0x78358b7940

--------------------------------
Class: WB_ServerSlot_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830acac80
	TextBlock* ServerName;//[Offset: 0x268, Size: 0x8] 0x7830acac00
	Button* ServerSlotButton;//[Offset: 0x270, Size: 0x8] 0x7830acab80
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8] 0x7830acab00
	FName NameOfTheServer;//[Offset: 0x280, Size: 0x8] 0x7830acaa80
	float MaxPlayers;//[Offset: 0x288, Size: 0x4] 0x7830acaa00
	float CurrentPlayers;//[Offset: 0x28c, Size: 0x4] 0x7830aca980
	BlueprintSessionResult SessionToJoin;//[Offset: 0x290, Size: 0x108] 0x7830aca900
	WB_JoinServerMenu_C* JoinServerWB;//[Offset: 0x398, Size: 0x8] 0x7830aca880
	int ServerPing;//[Offset: 0x3a0, Size: 0x4] 0x7830aca800
	FText GetServerPing(int CallFunc_GetPingInMs_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x78342714a0
	FText GetServerName(FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_LeftChop_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue);// 0x6d94ba8 0x7834271580
	FText GetServerCurrentPlayers(int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6d94ba8 0x7834271660
	void BndEvt__ServerSlotButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7834271740
	void BndEvt__ServerSlotButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7834271900
	void BndEvt__ServerSlotButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7834271ac0
	void ExecuteUbergraph_WB_ServerSlot(int EntryPoint, int CallFunc_GetCurrentPlayers_ReturnValue, int CallFunc_GetMaxPlayers_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x7834271ba0

--------------------------------
Class: WB_JoinServerMenu_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834159f00
	CircularThrobber* CircularThrobber;//[Offset: 0x268, Size: 0x8] 0x7834159e80
	Button* JoinServer;//[Offset: 0x270, Size: 0x8] 0x7834159e00
	TextBlock* JoinText;//[Offset: 0x278, Size: 0x8] 0x7834159d80
	Button* Return;//[Offset: 0x280, Size: 0x8] 0x7834159d00
	TextBlock* ReturnText;//[Offset: 0x288, Size: 0x8] 0x7834159c80
	Button* SearchButton;//[Offset: 0x290, Size: 0x8] 0x7834159c00
	TextBlock* SearchText;//[Offset: 0x298, Size: 0x8] 0x7834159b80
	VerticalBox* ServerList;//[Offset: 0x2a0, Size: 0x8] 0x7834159b00
	SizeBox* SizeBox;//[Offset: 0x2a8, Size: 0x8] 0x7834159a80
	int MaxSeachResults;//[Offset: 0x2b0, Size: 0x4] 0x7834159a00
	BlueprintSessionResult[] SessionsFound;//[Offset: 0x2b8, Size: 0x10] 0x783450c540
	WB_ServerSlot_C* WB_ServerSlot;//[Offset: 0x2c8, Size: 0x8] 0x7834159900
	BlueprintSessionResult SessionToJoin;//[Offset: 0x2d0, Size: 0x108] 0x7834159880
	bool bSearching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1] 0x7834159800
	bool bLAN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1] 0x7834159780
	WB_ServerSlot_C*[] ServerSlots;//[Offset: 0x3e0, Size: 0x10] 0x783450c4a0
	LinearColor HoveredColor;//[Offset: 0x3f0, Size: 0x10] 0x7834159680
	LinearColor HoveredTextColor;//[Offset: 0x400, Size: 0x10] 0x7834159600
	LinearColor ButtonColor;//[Offset: 0x410, Size: 0x10] 0x7834159580
	LinearColor TextColor;//[Offset: 0x420, Size: 0x10] 0x7834159500
	void ResetServerSlots(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, WB_ServerSlot_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_RemoveChild_ReturnValue);// 0x6d94ba8 0x782d942ee0
	bool GetNotSearching(bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x782d942fc0
	enum GetVisivilityIsSearching();// 0x6d94ba8 0x782d9430a0
	bool GetbSessionIsSet(FString CallFunc_GetServerName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x782d943180
	void OnFailure_6BA0CF164A37C86CE5618D95145A6EFE(out const BlueprintSessionResult[] Results);// 0x6d94ba8 0x782d943260
	void OnSuccess_6BA0CF164A37C86CE5618D95145A6EFE(out const BlueprintSessionResult[] Results);// 0x6d94ba8 0x782d943340
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d943420
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d943500
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_6_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x782d9435e0
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_7_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x782d9436c0
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_8_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x782d9437a0
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_9_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x782d943880
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_18_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d943960
	void BndEvt__SearchButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x783019c2c0
	void BndEvt__SearchButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x782d940080
	void UnselectServer();// 0x6d94ba8 0x782d940160
	void OnButtonHovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782d940320
	void OnButtonUnhovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782d9404e0
	void ExecuteUbergraph_WB_JoinServerMenu(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_ServerSlot_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, BlueprintSessionResult[] ___struct_Variable, BlueprintSessionResult CallFunc_Array_Get_Item, int CallFunc_GetPingInMs_ReturnValue, FString CallFunc_GetServerName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int CallFunc_GetMaxPlayers_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_GetCurrentPlayers_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, const BlueprintSessionResult[] K2Node_CustomEvent_Results, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BlueprintSessionResult[] K2Node_CustomEvent_Results, FindSessionsCallbackProxy* CallFunc_FindSessions_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, WB_ServerSlot_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, delegate K2Node_CreateDelegate_OutputDelegate);// 0x6d94ba8 0x782d9405c0

--------------------------------
Class: FPS_GameInstance_C.GameInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1a8, Size: 0x8] 0x783430fd00
	WB_LoadingScreen_C* LoadingScreenRef;//[Offset: 0x1b0, Size: 0x8] 0x783430fc80
	WB_HostServerMenu_C* HostMenuRef;//[Offset: 0x1b8, Size: 0x8] 0x783430fc00
	int MaxPlayer;//[Offset: 0x1c0, Size: 0x4] 0x783430fb80
	WB_SettingsMenu_C* SettingsMenuRef;//[Offset: 0x1c8, Size: 0x8] 0x783430fb00
	WB_JoinServerMenu_C* JoinMenuRef;//[Offset: 0x1d0, Size: 0x8] 0x783430fa80
	WB_Gameplay_C* GameplayWidgetRef;//[Offset: 0x1d8, Size: 0x8] 0x783430fa00
	WB_InGameMenu_C* InGameMenuRef;//[Offset: 0x1e0, Size: 0x8] 0x783430f980
	float AudioVolume;//[Offset: 0x1e8, Size: 0x4] 0x783430f900
	Object* EndGameRef;//[Offset: 0x1f0, Size: 0x8] 0x783430f880
	WB_PlayerScores_C* PlayerScoresWidgetRef;//[Offset: 0x1f8, Size: 0x8] 0x783430f800
	BlueprintSessionResult[] SessionsFound;//[Offset: 0x200, Size: 0x10] 0x78500639e0
	WBP_LPSP_Menu_Main_C* MainMenu;//[Offset: 0x210, Size: 0x8] 0x7834361000
	bool bGameWithBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1] 0x7834360f80
	bool bAllowFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1] 0x7834360f00
	int TeamABots;//[Offset: 0x21c, Size: 0x4] 0x7834360e80
	int TeamBBots;//[Offset: 0x220, Size: 0x4] 0x7834360e00
	WB_EndGameScores_C* EndGameScoresRef;//[Offset: 0x228, Size: 0x8] 0x7834360d80
	WB_KilledBy_C* KilledByWidgetRef;//[Offset: 0x230, Size: 0x8] 0x7834360d00
	int TeamAMatchesWon;//[Offset: 0x238, Size: 0x4] 0x7834360c80
	int TeamBMatchesWon;//[Offset: 0x23c, Size: 0x4] 0x7834360c00
	int PointsToWin;//[Offset: 0x240, Size: 0x4] 0x7834360b80
	FPS_SaveGame_C* SaveGame;//[Offset: 0x248, Size: 0x8] 0x7834360b00
	FString[] Permissions;//[Offset: 0x250, Size: 0x10] 0x7850063940
	byte AILevel;//[Offset: 0x260, Size: 0x1] 0x7834360a00
	int WeaponSelect;//[Offset: 0x264, Size: 0x4] 0x7834360980
	byte WeaponSelectType;//[Offset: 0x268, Size: 0x1] 0x7834360900
	float WeaponSelectOffer;//[Offset: 0x26c, Size: 0x4] 0x7834360880
	delegate BindCoinChange;//[Offset: 0x270, Size: 0x10] 0x7834360800
	void ADDCoin(int Num, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782d9490e0
	void SetDeviceType(int ___int_Variable, int ___int_Variable, int ___int_Variable, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, int K2Node_Select_Default, FString K2Node_Select_Default);// 0x6d94ba8 0x782d9491c0
	void TravelErrorToString(byte Travel Error, out FString OutString, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue);// 0x6d94ba8 0x782d9492a0
	void NetErrorToString(byte Failure Type, out FString NewParam, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue);// 0x6d94ba8 0x782d949380
	void OnFailure_FEB1A1304CDE2ED6CC6C06A948930758();// 0x6d94ba8 0x782d949460
	void OnSuccess_FEB1A1304CDE2ED6CC6C06A948930758();// 0x6d94ba8 0x782d949540
	void OnFailure_5662C0584E0AE12FB90219B012FE5C60();// 0x6d94ba8 0x782d949620
	void OnSuccess_5662C0584E0AE12FB90219B012FE5C60();// 0x6d94ba8 0x782d949700
	void OnFailure_0D19A16F44C56A4718464D9D398B0538();// 0x6d94ba8 0x782d9497e0
	void OnSuccess_0D19A16F44C56A4718464D9D398B0538();// 0x6d94ba8 0x782d9498c0
	void ShowMainMenu();// 0x6d94ba8 0x782d9499a0
	void Host Server(int Players, FName MapName, bool bLAN);// 0x6d94ba8 0x782d949a80
	void JoinServer(BlueprintSessionResult SessionToJoin);// 0x6d94ba8 0x782d949b60
	void ShowLoadingScreen();// 0x6d94ba8 0x782d949c40
	void ShowHostMenu();// 0x6d94ba8 0x782d949e00
	void ShowJoinMenu();// 0x6d94ba8 0x782d949ee0
	void ShowSettingsMenu(bool bInGame);// 0x6d94ba8 0x782d949fc0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x6d94ba8 0x782d94a0a0
	void HandleTravelError(byte FailureType);// 0x6d94ba8 0x782d94a180
	void DestroySessionCaller(PlayerController* PlayerController);// 0x6d94ba8 0x782d94a260
	void ShowGameplayWidget();// 0x6d94ba8 0x782d94a340
	void ShowIngameMenu();// 0x6d94ba8 0x782d94a420
	void ChangeVolume(float AudioVolume, SoundClass* Sound Class);// 0x6d94ba8 0x782d94a500
	void ShowEndGameMenu(bool WinnerTeam, float TimeForNextMatch);// 0x6d94ba8 0x782d94a5e0
	void ShowPlayerScores();// 0x6d94ba8 0x782d94a6c0
	void ShowErrorMessageMenu(FString ErrorMessage);// 0x6d94ba8 0x782d94a7a0
	void ShowSearchMenu();// 0x6d94ba8 0x782d94a880
	void ShowCantFindGameMenu();// 0x6d94ba8 0x782d94a960
	void HidePlayerScores();// 0x6d94ba8 0x782d94aa40
	void CloseIngame Menu();// 0x6d94ba8 0x782d94ab20
	void CreateSinglePlayerGame();// 0x6d94ba8 0x782d94ac00
	void DeathMatchShowEndgame(float TimeForNextMatch);// 0x6d94ba8 0x782d94ace0
	void CreateKilledByWidget(FText KillerName, float KillerHealth, byte KillerClass, const DamageType* DamageType);// 0x6d94ba8 0x782d947400
	void ResetGlobalScore();// 0x6d94ba8 0x782d9474e0
	void AddPoints(bool bTeam);// 0x6d94ba8 0x782d9475c0
	void CheckScores();// 0x6d94ba8 0x782d9476a0
	void ChangeMap();// 0x6d94ba8 0x782d947780
	void ResetMap();// 0x6d94ba8 0x782d947860
	void ReceiveInit();// 0x6d94ba8 0x782d947940
	void GameSave();// 0x6d94ba8 0x782d947a20
	void 自定义事件                                                                                     (out const FString[] Permissions, out const bool[] GrantResults);// 0x6d94ba8 0x78e262c560
	void ExecuteUbergraph_FPS_GameInstance(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable, WBP_LPSP_Menu_Main_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_Players, FName K2Node_CustomEvent_MapName, bool K2Node_CustomEvent_bLAN, BlueprintSessionResult K2Node_CustomEvent_SessionToJoin, int CallFunc_GetCurrentPlayers_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, WB_LoadingScreen_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_HostServerMenu_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_JoinServerMenu_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, CreateSessionCallbackProxy* CallFunc_CreateSession_ReturnValue, JoinSessionCallbackProxy* CallFunc_JoinSession_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_bInGame, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable, WB_SettingsMenu_C* CallFunc_Create_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Array_Index_Variable, byte K2Node_Event_FailureType, bool K2Node_Event_bIsServer, bool CallFunc_IsValid_ReturnValue, FString CallFunc_NetErrorToString_NewParam, byte K2Node_Event_FailureType, FString CallFunc_TravelErrorToString_OutString, PlayerController* K2Node_CustomEvent_PlayerController, DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_Gameplay_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_InGameMenu_C* CallFunc_Create_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_AudioVolume, SoundClass* K2Node_CustomEvent_Sound_Class, bool CallFunc_IsInViewport_ReturnValue, bool K2Node_CustomEvent_WinnerTeam, float K2Node_CustomEvent_TimeForNextMatch, float CallFunc_FClamp_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_EndGameScores_C* CallFunc_Create_ReturnValue, RecordSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, int ___int_Loop_Counter_Variable, interface classNone CallFunc_LoadSubsystemData_self_CastInput, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_PlayerScores_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, RecordSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, interface classNone K2Node_DynamicCast_AsVehicle_Subsystem_Interface, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, FString K2Node_CustomEvent_ErrorMessage, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_ErrorMesagge_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_SearchGame_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_CantFindAnyGame_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_TimeForNextMatch, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_EndGameScoresDeathMath_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText K2Node_CustomEvent_KillerName, float K2Node_CustomEvent_KillerHealth, byte K2Node_CustomEvent_KillerClass, const DamageType* K2Node_CustomEvent_DamageType, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_KilledBy_C* CallFunc_Create_ReturnValue, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_bTeam, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, FPS_SaveGame_C* CallFunc_SpawnObject_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_SaveGame_ReturnValue, bool CallFunc_CheckPermission_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const FString[] K2Node_CustomEvent_Permissions, const bool[] K2Node_CustomEvent_GrantResults, AndroidPermissionCallbackProxy* CallFunc_AcquirePermissions_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, Object* CallFunc_LoadGame_SaveData, bool CallFunc_LoadGame_ReturnValue, FPS_SaveGame_C* K2Node_DynamicCast_AsFPS_Save_Game, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d947e80
	void BindCoinChange__DelegateSignature(int Old, int New);// 0x6d94ba8 0x782d948040

--------------------------------
Class: WB_LoadingScreen_C.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock;//[Offset: 0x260, Size: 0x8] 0x7834157e00
	TextBlock* TextBlock;//[Offset: 0x268, Size: 0x8] 0x7834157d80
	byte State;//[Offset: 0x270, Size: 0x1] 0x7834157d00

--------------------------------
Class: WB_HostServerMenu_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834b40980
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x7834b40900
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x7834b40880
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x7834b40800
	Button* Button;//[Offset: 0x280, Size: 0x8] 0x7834b40780
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x7834b40700
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x7834b40680
	Button* Button;//[Offset: 0x298, Size: 0x8] 0x7834b40600
	CheckBox* FriendlyFireCheckBox;//[Offset: 0x2a0, Size: 0x8] 0x7834b40580
	Button* HiddeFps;//[Offset: 0x2a8, Size: 0x8] 0x7834b40500
	HorizontalBox* HorizontalBox;//[Offset: 0x2b0, Size: 0x8] 0x7834b40480
	HorizontalBox* HorizontalBox;//[Offset: 0x2b8, Size: 0x8] 0x7834b40400
	HorizontalBox* HorizontalBox;//[Offset: 0x2c0, Size: 0x8] 0x7834b40380
	HorizontalBox* HorizontalBox_Map;//[Offset: 0x2c8, Size: 0x8] 0x7834b40300
	HorizontalBox* HorizontalBox_Mode;//[Offset: 0x2d0, Size: 0x8] 0x7834b40280
	Image* Image;//[Offset: 0x2d8, Size: 0x8] 0x7834b40200
	Image* Image;//[Offset: 0x2e0, Size: 0x8] 0x7834b40180
	Image* Image;//[Offset: 0x2e8, Size: 0x8] 0x7834b40100
	Image* Image;//[Offset: 0x2f0, Size: 0x8] 0x7834b40080
	Image* Image;//[Offset: 0x2f8, Size: 0x8] 0x7834b42100
	Image* Image;//[Offset: 0x300, Size: 0x8] 0x7834b42080
	Image* Image;//[Offset: 0x308, Size: 0x8] 0x7834b42000
	Button* LessABots;//[Offset: 0x310, Size: 0x8] 0x7834b41f80
	Button* LessBBots;//[Offset: 0x318, Size: 0x8] 0x7834b41f00
	Button* LessPlayersButton;//[Offset: 0x320, Size: 0x8] 0x7834b41e80
	Button* MoreABots;//[Offset: 0x328, Size: 0x8] 0x7834b41e00
	Button* MoreBBots;//[Offset: 0x330, Size: 0x8] 0x7834b41d80
	Button* MorePlayersButton;//[Offset: 0x338, Size: 0x8] 0x7834b41d00
	Button* Return;//[Offset: 0x340, Size: 0x8] 0x7834b41c80
	TextBlock* ReturnText;//[Offset: 0x348, Size: 0x8] 0x7834b41c00
	Button* ShowFps;//[Offset: 0x350, Size: 0x8] 0x7834b41b80
	Button* ShowFps;//[Offset: 0x358, Size: 0x8] 0x7834b41b00
	Button* StartGame;//[Offset: 0x360, Size: 0x8] 0x7834b41a80
	TextBlock* StartGameText;//[Offset: 0x368, Size: 0x8] 0x7834b41a00
	TextBlock* TextBlock;//[Offset: 0x370, Size: 0x8] 0x7834b41980
	TextBlock* TextBlock;//[Offset: 0x378, Size: 0x8] 0x7834b41900
	TextBlock* TextBlock;//[Offset: 0x380, Size: 0x8] 0x7834b41880
	TextBlock* TextBlock;//[Offset: 0x388, Size: 0x8] 0x7834b41800
	TextBlock* TextBlock;//[Offset: 0x390, Size: 0x8] 0x7834b41780
	TextBlock* TextBlock;//[Offset: 0x398, Size: 0x8] 0x7834b41700
	TextBlock* TextBlock;//[Offset: 0x3a0, Size: 0x8] 0x7834b41680
	int MaxPlayers;//[Offset: 0x3a8, Size: 0x4] 0x7834b41600
	int MapIndex;//[Offset: 0x3ac, Size: 0x4] 0x7834b41580
	bool bLAN;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1] 0x7834b41500
	int TeamBBots;//[Offset: 0x3b4, Size: 0x4] 0x7834b41480
	int TeamABots;//[Offset: 0x3b8, Size: 0x4] 0x7834b41400
	bool bUseBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1] 0x7834b41380
	LinearColor HoveredColor;//[Offset: 0x3c0, Size: 0x10] 0x7834b41300
	LinearColor HoveredTextColor;//[Offset: 0x3d0, Size: 0x10] 0x7834b41280
	LinearColor ButtonColor;//[Offset: 0x3e0, Size: 0x10] 0x7834b41200
	LinearColor TextColor;//[Offset: 0x3f0, Size: 0x10] 0x7834b41180
	int MaxNumberOfBots;//[Offset: 0x400, Size: 0x4] 0x7834b41100
	bool bFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1] 0x7834b43180
	int MapIndex1;//[Offset: 0x408, Size: 0x4] 0x7834b43100
	int ModeIndex;//[Offset: 0x40c, Size: 0x4] 0x7834b43080
	BST_SelectMode[] ModeMap;//[Offset: 0x410, Size: 0x10] 0x7850067900
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x420, Size: 0x8] 0x7834b42f80
	SlateColor GetColorAndOpacity(bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SlateColor K2Node_Select_Default);// 0x6d94ba8 0x7831201e40
	SlateColor GetColorAndOpacity(bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SlateColor K2Node_Select_Default);// 0x6d94ba8 0x783120c8e0
	SlateColor GetColorAndOpacity(bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SlateColor K2Node_Select_Default);// 0x6d94ba8 0x782e87e4e0
	enum GetVisibilityNotDM(byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x783120c800
	FText GetNumberOfBotsText(byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x783120adc0
	FText GetTeamBBots(FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x7831360be0
	FText GetTeamABots(FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x7831365aa0
	FText GetMapName(byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x7835097160
	FText GetMaxPlayers(FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782d94b4c0
	bool GetLessPlayersButtonIsEnabled(bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782d94b840
	bool GetMorePlayersButtonIsEnabled(bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782d94b680
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x783509dc20
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x783509d6e0
	void BndEvt__LessPlayersButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x783509d8a0
	void BndEvt__MorePlayersButton_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78350990e0
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_6_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be5fe0
	void BndEvt__HostServer_K2Node_ComponentBoundEvent_7_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be4140
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_8_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be4060
	void BndEvt__GoBack_K2Node_ComponentBoundEvent_9_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be5100
	void PlaySoundEffect();// 0x6d94ba8 0x7831be5480
	void PlaySoundLow();// 0x6d94ba8 0x7831be52c0
	void BndEvt__MoreABots_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be5640
	void BndEvt__MoreBBots_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be5560
	void BndEvt__LessBBots_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be2b60
	void BndEvt__LessABots_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be2000
	void BndEvt__FriendlyFireCheckBox_K2Node_ComponentBoundEvent_24_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x6d94ba8 0x7831be1e40
	void OnButtonHovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x7831be1f20
	void OnButtonUnhovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x78343b3960
	void CheckNumberOfBots();// 0x6d94ba8 0x78343b0320
	void Construct();// 0x6d94ba8 0x78343b0080
	void RefButton();// 0x6d94ba8 0x78343b04e0
	void SetAIButton();// 0x6d94ba8 0x78343b0860
	void BndEvt__WB_HostServerMenu_Button_142_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7836a09000
	void BndEvt__WB_HostServerMenu_Button_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78316d3180
	void BndEvt__WB_HostServerMenu_Button_1_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78316d3340
	void BndEvt__WB_HostServerMenu_Button_2_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78316d22a0
	void BndEvt__WB_SinglePlayerGame_Button_3_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78343b3b20
	void BndEvt__WB_SinglePlayerGame_Button_4_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7830b89a80
	void BndEvt__WB_SinglePlayerGame_Button_5_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x787058c2c0
	void BndEvt__WB_SinglePlayerGame_ShowFps_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831367320
	void BndEvt__WB_SinglePlayerGame_ShowFps_1_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d945560
	void BndEvt__WB_SinglePlayerGame_HiddeFps_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x783019c020
	void ExecuteUbergraph_WB_HostServerMenu(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int ___int_Variable, bool K2Node_ComponentBoundEvent_bIsChecked, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, int ___int_Array_Index_Variable, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BST_SelectMode CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Widget*[] CallFunc_GetAllChildren_ReturnValue, int ___int_Variable, Widget* CallFunc_Array_Get_Item, Button* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, LinearColor CallFunc_SelectColor_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, Button* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, LinearColor CallFunc_SelectColor_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, LinearColor CallFunc_SelectColor_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue);// 0x6d94ba8 0x782d941d60

--------------------------------
Class: BST_SelectMode
	byte ModeType_17_563474BE48879C9B5FBC58B7AC89C32A;//[Offset: 0x0, Size: 0x1] 0x7833f29900
	Texture* Image_11_2BF1515E46F6B30A760B0CBCE78DBCB1;//[Offset: 0x8, Size: 0x8] 0x7833f29880
	BST_LevelInfo[] Level_13_5BF22B0A436C8DAF94EB9C9E031FA017;//[Offset: 0x10, Size: 0x10] 0x782e4942a0

--------------------------------
Class: BST_LevelInfo
	FString Level_2_AEF37DD641116B374D5BFD92F36580E2;//[Offset: 0x0, Size: 0x10] 0x7833f29a00
	Texture* Image_7_B8563FB1486942AED5CAD2ABADDFF7E5;//[Offset: 0x10, Size: 0x8] 0x7833f29980

--------------------------------
Class: WB_SettingsMenu_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834352780
	Button* AcceptButton;//[Offset: 0x268, Size: 0x8] 0x7834352700
	TextBlock* AcceptText;//[Offset: 0x270, Size: 0x8] 0x7834352680
	Slider* AmbientVolumeSlider;//[Offset: 0x278, Size: 0x8] 0x7834352600
	Button* ApplyButton;//[Offset: 0x280, Size: 0x8] 0x7834352580
	Button* ApplyResolutionSettingsButton;//[Offset: 0x288, Size: 0x8] 0x7834352500
	TextBlock* ApplyText;//[Offset: 0x290, Size: 0x8] 0x7834352480
	Button* AudioButton;//[Offset: 0x298, Size: 0x8] 0x7834352400
	Button* AudioButton;//[Offset: 0x2a0, Size: 0x8] 0x7834352380
	Button* AudioButton;//[Offset: 0x2a8, Size: 0x8] 0x7834352300
	TextBlock* AudioText;//[Offset: 0x2b0, Size: 0x8] 0x7834352280
	TextBlock* AudioText;//[Offset: 0x2b8, Size: 0x8] 0x7834352200
	TextBlock* AudioText;//[Offset: 0x2c0, Size: 0x8] 0x7834352180
	Button* BackButton;//[Offset: 0x2c8, Size: 0x8] 0x7834354200
	TextBlock* BackText;//[Offset: 0x2d0, Size: 0x8] 0x7834354180
	Slider* CharacterVolumeSlider;//[Offset: 0x2d8, Size: 0x8] 0x7834354100
	Slider* CharacterVolumeSlider;//[Offset: 0x2e0, Size: 0x8] 0x7834354080
	Slider* CharacterVolumeSlider;//[Offset: 0x2e8, Size: 0x8] 0x7834354000
	Button* DisableHDR;//[Offset: 0x2f0, Size: 0x8] 0x7834353f80
	Button* DontApplyResolutionSettings;//[Offset: 0x2f8, Size: 0x8] 0x7834353f00
	Button* DynamicResolutionNo;//[Offset: 0x300, Size: 0x8] 0x7834353e80
	Button* DynamicResolutionYes;//[Offset: 0x308, Size: 0x8] 0x7834353e00
	Button* EnableHDR;//[Offset: 0x310, Size: 0x8] 0x7834353d80
	HorizontalBox* HDRHB;//[Offset: 0x318, Size: 0x8] 0x7834353d00
	Button* HiddeFps;//[Offset: 0x320, Size: 0x8] 0x7834353c80
	Button* HiddeFps;//[Offset: 0x328, Size: 0x8] 0x7834353c00
	Button* HiddeFps;//[Offset: 0x330, Size: 0x8] 0x7834353b80
	Button* HiddeFps;//[Offset: 0x338, Size: 0x8] 0x7834353b00
	Button* HiddeFps;//[Offset: 0x340, Size: 0x8] 0x7834353a80
	Button* HiddeFps;//[Offset: 0x348, Size: 0x8] 0x7834353a00
	Button* HiddeFps;//[Offset: 0x350, Size: 0x8] 0x7834353980
	Button* HiddeFps;//[Offset: 0x358, Size: 0x8] 0x7834353900
	Image* Image;//[Offset: 0x360, Size: 0x8] 0x7834353880
	Image* Image;//[Offset: 0x368, Size: 0x8] 0x7834353800
	Image* Image;//[Offset: 0x370, Size: 0x8] 0x7834353780
	Image* Image;//[Offset: 0x378, Size: 0x8] 0x7834353700
	Image* Image;//[Offset: 0x380, Size: 0x8] 0x7834353680
	Image* Image;//[Offset: 0x388, Size: 0x8] 0x7834353600
	Image* Image;//[Offset: 0x390, Size: 0x8] 0x7834353580
	Image* Image;//[Offset: 0x398, Size: 0x8] 0x7834353500
	Image* Image;//[Offset: 0x3a0, Size: 0x8] 0x7834353480
	Image* Image;//[Offset: 0x3a8, Size: 0x8] 0x7834353400
	Image* Image;//[Offset: 0x3b0, Size: 0x8] 0x7834353380
	Image* Image;//[Offset: 0x3b8, Size: 0x8] 0x7834353300
	Image* Image;//[Offset: 0x3c0, Size: 0x8] 0x7834353280
	Image* Image;//[Offset: 0x3c8, Size: 0x8] 0x7834353200
	Image* Image;//[Offset: 0x3d0, Size: 0x8] 0x7834355280
	Image* Image;//[Offset: 0x3d8, Size: 0x8] 0x7834355200
	Image* Image;//[Offset: 0x3e0, Size: 0x8] 0x7834355180
	Image* Image;//[Offset: 0x3e8, Size: 0x8] 0x7834355100
	Image* Image;//[Offset: 0x3f0, Size: 0x8] 0x7834355080
	Image* Image;//[Offset: 0x3f8, Size: 0x8] 0x7834355000
	Image* Image;//[Offset: 0x400, Size: 0x8] 0x7834354f80
	Image* Image;//[Offset: 0x408, Size: 0x8] 0x7834354f00
	VerticalBox* InputActionsHB;//[Offset: 0x410, Size: 0x8] 0x7834354e80
	CheckBox* InverHorizontalAxis;//[Offset: 0x418, Size: 0x8] 0x7834354e00
	CheckBox* InvertVerticalAxis;//[Offset: 0x420, Size: 0x8] 0x7834354d80
	Button* LessAntiAliasing;//[Offset: 0x428, Size: 0x8] 0x7834354d00
	Button* LessAudioQuality;//[Offset: 0x430, Size: 0x8] 0x7834354c80
	Button* LessFoliage;//[Offset: 0x438, Size: 0x8] 0x7834354c00
	Button* LessFrameLimit;//[Offset: 0x440, Size: 0x8] 0x7834354b80
	Button* LessOverallQuality;//[Offset: 0x448, Size: 0x8] 0x7834354b00
	Button* LessPostProcessing;//[Offset: 0x450, Size: 0x8] 0x7834354a80
	Button* LessShadowQuality;//[Offset: 0x458, Size: 0x8] 0x7834354a00
	Button* LessTextureQuality;//[Offset: 0x460, Size: 0x8] 0x7834354980
	Button* LessViewDistance;//[Offset: 0x468, Size: 0x8] 0x7834354900
	Button* LessVisualEffects;//[Offset: 0x470, Size: 0x8] 0x7834354880
	Slider* MasterVolumeSlider;//[Offset: 0x478, Size: 0x8] 0x7834354800
	Button* MoreAntiAliasing;//[Offset: 0x480, Size: 0x8] 0x7834354780
	Button* MoreAudioQuality;//[Offset: 0x488, Size: 0x8] 0x7834354700
	Button* MoreFoliage;//[Offset: 0x490, Size: 0x8] 0x7834354680
	Button* MoreFrameLimit;//[Offset: 0x498, Size: 0x8] 0x7834354600
	Button* MoreOverallQuality;//[Offset: 0x4a0, Size: 0x8] 0x7834354580
	Button* MorePostProcessing;//[Offset: 0x4a8, Size: 0x8] 0x7834354500
	Button* MoreShadowQuality;//[Offset: 0x4b0, Size: 0x8] 0x7834354480
	Button* MoreTextureQuality;//[Offset: 0x4b8, Size: 0x8] 0x7834354400
	Button* MoreViewDistance;//[Offset: 0x4c0, Size: 0x8] 0x7834354380
	Button* MoreVisualEffects;//[Offset: 0x4c8, Size: 0x8] 0x7834354300
	Button* MouseKeyboardButton;//[Offset: 0x4d0, Size: 0x8] 0x7834354280
	TextBlock* MouseKeyboardText;//[Offset: 0x4d8, Size: 0x8] 0x7834356300
	Slider* MouseSnsitivitySlider;//[Offset: 0x4e0, Size: 0x8] 0x7834356280
	Slider* MusicVolumeSlider;//[Offset: 0x4e8, Size: 0x8] 0x7834356200
	Slider* MusicVolumeSlider;//[Offset: 0x4f0, Size: 0x8] 0x7834356180
	WidgetSwitcher* OptionsWidgetSwitcher;//[Offset: 0x4f8, Size: 0x8] 0x7834356100
	Button* ResetDefaultsButton;//[Offset: 0x500, Size: 0x8] 0x7834356080
	TextBlock* ResetText;//[Offset: 0x508, Size: 0x8] 0x7834356000
	Slider* ResolutionScaleSlider;//[Offset: 0x510, Size: 0x8] 0x7834355f80
	Button* ShowFps;//[Offset: 0x518, Size: 0x8] 0x7834355f00
	Button* ShowFps;//[Offset: 0x520, Size: 0x8] 0x7834355e80
	Button* ShowFps;//[Offset: 0x528, Size: 0x8] 0x7834355e00
	Button* ShowFps;//[Offset: 0x530, Size: 0x8] 0x7834355d80
	Button* ShowFps;//[Offset: 0x538, Size: 0x8] 0x7834355d00
	Button* ShowFps;//[Offset: 0x540, Size: 0x8] 0x7834355c80
	Button* ShowFps;//[Offset: 0x548, Size: 0x8] 0x7834355c00
	Button* ShowFps;//[Offset: 0x550, Size: 0x8] 0x7834355b80
	Button* ShowFps;//[Offset: 0x558, Size: 0x8] 0x7834355b00
	SizeBox* SizeBox;//[Offset: 0x560, Size: 0x8] 0x7834355a80
	TextBlock* TextBlock;//[Offset: 0x568, Size: 0x8] 0x7834355a00
	TextBlock* TextBlock;//[Offset: 0x570, Size: 0x8] 0x7834355980
	TextBlock* TextBlock;//[Offset: 0x578, Size: 0x8] 0x7834355900
	TextBlock* TextBlock;//[Offset: 0x580, Size: 0x8] 0x7834355880
	TextBlock* TextBlock;//[Offset: 0x588, Size: 0x8] 0x7834355800
	TextBlock* TextBlock;//[Offset: 0x590, Size: 0x8] 0x7834355780
	TextBlock* TextBlock;//[Offset: 0x598, Size: 0x8] 0x7834355700
	TextBlock* TextBlock;//[Offset: 0x5a0, Size: 0x8] 0x7834355680
	TextBlock* TextBlock;//[Offset: 0x5a8, Size: 0x8] 0x7834355600
	TextBlock* TextBlock;//[Offset: 0x5b0, Size: 0x8] 0x7834355580
	TextBlock* TextBlock;//[Offset: 0x5b8, Size: 0x8] 0x7834355500
	TextBlock* TextBlock;//[Offset: 0x5c0, Size: 0x8] 0x7834355480
	TextBlock* TextBlock;//[Offset: 0x5c8, Size: 0x8] 0x7834355400
	TextBlock* TextBlock;//[Offset: 0x5d0, Size: 0x8] 0x7834355380
	TextBlock* TextBlock;//[Offset: 0x5d8, Size: 0x8] 0x7834355300
	TextBlock* TextBlock;//[Offset: 0x5e0, Size: 0x8] 0x7834357380
	TextBlock* TextBlock;//[Offset: 0x5e8, Size: 0x8] 0x7834357300
	TextBlock* TextBlock;//[Offset: 0x5f0, Size: 0x8] 0x7834357280
	TextBlock* TextBlock;//[Offset: 0x5f8, Size: 0x8] 0x7834357200
	TextBlock* TextBlock;//[Offset: 0x600, Size: 0x8] 0x7834357180
	TextBlock* TextBlock;//[Offset: 0x608, Size: 0x8] 0x7834357100
	TextBlock* TextBlock;//[Offset: 0x610, Size: 0x8] 0x7834357080
	TextBlock* TextBlock;//[Offset: 0x618, Size: 0x8] 0x7834357000
	TextBlock* TextBlock;//[Offset: 0x620, Size: 0x8] 0x7834356f80
	TextBlock* TextBlock;//[Offset: 0x628, Size: 0x8] 0x7834356f00
	Button* VideoGraphicsButton;//[Offset: 0x630, Size: 0x8] 0x7834356e80
	TextBlock* VideoGrphicsText;//[Offset: 0x638, Size: 0x8] 0x7834356e00
	Button* VSyncNo;//[Offset: 0x640, Size: 0x8] 0x7834356d80
	Button* VSyncYes;//[Offset: 0x648, Size: 0x8] 0x7834356d00
	Slider* WeaponVolumeSlider;//[Offset: 0x650, Size: 0x8] 0x7834356c80
	Slider* ZoomSensitibitySlider;//[Offset: 0x658, Size: 0x8] 0x7834356c00
	FPS_SaveGame_C* SaveGameRef;//[Offset: 0x660, Size: 0x8] 0x7834356b80
	float FrameLimit;//[Offset: 0x668, Size: 0x4] 0x7834356b00
	bool bShowResolutionWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1] 0x7834356a80
	float MasterVolume;//[Offset: 0x670, Size: 0x4] 0x7834356a00
	float MusicVolume;//[Offset: 0x674, Size: 0x4] 0x7834356980
	float CharactersVolume;//[Offset: 0x678, Size: 0x4] 0x7834356900
	float AmbientVolume;//[Offset: 0x67c, Size: 0x4] 0x7834356880
	float WeaponVolume;//[Offset: 0x680, Size: 0x4] 0x7834356800
	bool bFps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1] 0x7834356780
	WB_KeyRemap_C*[] InputArray;//[Offset: 0x688, Size: 0x10] 0x783450d3a0
	bool bHorizontalInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1] 0x7834356680
	bool bVerticalInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1] 0x7834356600
	LinearColor HoveredColor;//[Offset: 0x69c, Size: 0x10] 0x7834356580
	LinearColor HoveredTextColor;//[Offset: 0x6ac, Size: 0x10] 0x7834356500
	LinearColor ButtonColor;//[Offset: 0x6bc, Size: 0x10] 0x7834356480
	LinearColor TextColor;//[Offset: 0x6cc, Size: 0x10] 0x7834356400
	float MouseSensitivity;//[Offset: 0x6dc, Size: 0x4] 0x7834356380
	float ZoomSensitivity;//[Offset: 0x6e0, Size: 0x4] 0x7834358400
	bool bInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4, Size: 0x1] 0x7834358380
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x6e8, Size: 0x8] 0x7834358300
	void NewFunction();// 0x6d94ba8 0x782e22eda0
	FText Get_ADSMouseSnsitivitySlider_ToolTipText(float CallFunc_GetValue_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6d94ba8 0x782e22ee80
	bool Get_ResetDefaultsButton_bIsEnabled(int CallFunc_GetActiveWidgetIndex_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e22ef60
	FText GetViewDistance(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22f040
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply CallFunc_Handled_ReturnValue, Key CallFunc_GetKey_ReturnValue, FText CallFunc_Key_GetDisplayName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x6d94ba8 0x782e22f120
	FText GetMouseSnsitivitySliderToolTipText(float CallFunc_GetValue_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x6d94ba8 0x782e22f200
	enum GetResolutionWindowVisibility();// 0x6d94ba8 0x782e22f2e0
	FText GetHDRHBToolTipText(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool CallFunc_SupportsHDRDisplayOutput_ReturnValue);// 0x6d94ba8 0x782e22f3c0
	bool GetHDRHBIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool CallFunc_SupportsHDRDisplayOutput_ReturnValue);// 0x6d94ba8 0x782e22f4a0
	bool GetLessOverallQualityIsEnabled(bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x782e22f580
	bool GetMoreOverallQualityIsEnabled(bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x782e22f660
	FText GetOverallQuality(byte ___byte_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText K2Node_Select_Default);// 0x6d94ba8 0x782e22f740
	FText GetFullscreenMode(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte CallFunc_GetFullscreenMode_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e22f820
	FText GetResolutionScaleSliderToolTipText(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_GetResolutionScaleInformationEx_CurrentScaleNormalized, float CallFunc_GetResolutionScaleInformationEx_CurrentScaleValue, float CallFunc_GetResolutionScaleInformationEx_MinScaleValue, float CallFunc_GetResolutionScaleInformationEx_MaxScaleValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x782e22f900
	float GetResolutionScaleSliderValue();// 0x6d94ba8 0x782e22f9e0
	bool GetLessFrameLimitIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_GetFrameRateLimit_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e22fac0
	bool GetMoreFrameLimitIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_GetFrameRateLimit_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e22fba0
	FText GetFrameRateLimit(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_GetFrameRateLimit_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e22fc80
	bool GetLessAudioQualityIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAudioQualityLevel_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22fd60
	bool GetMoreAudioQualityIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAudioQualityLevel_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22fe40
	FText GetAudioQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAudioQualityLevel_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22ff20
	bool GetMoreVisualEffectsIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22caa0
	bool GetLessVisualEffectsIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22cb80
	FText GetVisualEffectsQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22cc60
	bool GetLessViewDistanceIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22cd40
	bool GetMoreViewDistancebIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22ce20
	FText GetFoliageQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22cf00
	bool GetLessFoliageIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22cfe0
	bool GetMoreFoliageIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d0c0
	bool GetLessPostProcessingIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d1a0
	bool GetMorePostProcessingIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d280
	FText GetPostProcessingQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22d360
	FText GetAntiAliasingQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22d440
	bool GetLessAntiAliasingIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d520
	bool GetMoreAntiAliasingIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d600
	bool GetLessTextureQualityIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d6e0
	bool GetMoreTextureQualityIsEnabled(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d7c0
	FText GetTextureQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22d8a0
	bool GetLessShadowQualityIsEnable(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e22d980
	bool GetMoreShadowQualityIsEnable(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e22da60
	void GetSettingLevelText(int SettingLevel, out FText SettingLevelText, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e22db40
	FText GetShadowQuality(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, FText CallFunc_GetSettingLevelText_SettingLevelText);// 0x6d94ba8 0x782e22dc20
	void SetButtonBackGround(Button* Button, bool bPressed, LinearColor CallFunc_SelectColor_ReturnValue);// 0x6d94ba8 0x782e22dd00
	void BndEvt__ReturnToMainMenuButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22dde0
	void BndEvt__MouseKeyboardButton_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22dec0
	void BndEvt__VideoGraphicsButton_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22dfa0
	void BndEvt__AudioButton_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e080
	void Construct();// 0x6d94ba8 0x782e22e160
	void BndEvt__DynamicResolutionYes_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e240
	void BndEvt__DynamicResolutionNo_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e320
	void InitialSetup();// 0x6d94ba8 0x782e22e400
	void BndEvt__AcceptButton_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e4e0
	void BndEvt__VSyncYes_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e5c0
	void BndEvt__VSyncNo_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22e6a0
	void BndEvt__ApplyButton_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22adc0
	void BndEvt__MoreShadowQuality_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22aea0
	void BndEvt__LessShadowQuality_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22af80
	void BndEvt__MoreTextureQuality_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b060
	void BndEvt__LessTextureQuality_K2Node_ComponentBoundEvent_16_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b140
	void BndEvt__MoreAntiAliasing_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b220
	void BndEvt__LessAntiAliasing_K2Node_ComponentBoundEvent_18_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b300
	void BndEvt__MorePostProcessing_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b3e0
	void BndEvt__LessPostProcessing_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b4c0
	void BndEvt__MoreFoliage_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b5a0
	void BndEvt__LessFoliage_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b680
	void BndEvt__LessViewDistance_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b760
	void BndEvt__MoreViewDistance_K2Node_ComponentBoundEvent_24_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b840
	void BndEvt__MoreVisualEffects_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22b920
	void BndEvt__LessVisualEffects_K2Node_ComponentBoundEvent_26_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22ba00
	void BndEvt__ResetDefaultsButton_K2Node_ComponentBoundEvent_27_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22bae0
	void BndEvt__LessAudioQuality_K2Node_ComponentBoundEvent_28_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22bbc0
	void BndEvt__MoreAudioQuality_K2Node_ComponentBoundEvent_29_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22bca0
	void BndEvt__MoreFrameLimit_K2Node_ComponentBoundEvent_30_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22bd80
	void BndEvt__LessFrameLimit_K2Node_ComponentBoundEvent_31_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22be60
	void BndEvt__ResolutionScaleSlider_K2Node_ComponentBoundEvent_32_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22bf40
	void BndEvt__MoreOverallQuality_K2Node_ComponentBoundEvent_36_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22c020
	void BndEvt__LessOverallQuality_K2Node_ComponentBoundEvent_37_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22c100
	void BndEvt__EnableHDR_K2Node_ComponentBoundEvent_38_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22c1e0
	void BndEvt__DisableHDR_K2Node_ComponentBoundEvent_39_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22c2c0
	void BndEvt__ApplyResolutionSettingsButton_K2Node_ComponentBoundEvent_33_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22c3a0
	void ApplyNoResolutionSettingsOnly();// 0x6d94ba8 0x782e22c480
	void ApplySettings();// 0x6d94ba8 0x782e22c560
	void BndEvt__DontApplyResolutionSettings_K2Node_ComponentBoundEvent_40_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22a880
	void ReturnToGame();// 0x6d94ba8 0x782e22c640
	void BndEvt__MouseSnsitivitySlider_K2Node_ComponentBoundEvent_41_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22c720
	void BndEvt__MouseSnsitivitySlider_K2Node_ComponentBoundEvent_42_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e22c800
	void LoadInputSettings();// 0x6d94ba8 0x782e22c8e0
	void BndEvt__Slider_0_K2Node_ComponentBoundEvent_43_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22c9c0
	void LoadSettings();// 0x6d94ba8 0x782e2290e0
	void SetVolumeSliders();// 0x6d94ba8 0x782e2291c0
	void BndEvt__MusicVolumeSlider_K2Node_ComponentBoundEvent_44_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e2292a0
	void BndEvt__CharacterVolumeSlider_K2Node_ComponentBoundEvent_45_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e229380
	void BndEvt__AmbientVolumeSlider_K2Node_ComponentBoundEvent_46_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e229460
	void BndEvt__WeaponVolumeSlider_K2Node_ComponentBoundEvent_47_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e229540
	void SetPlayerSettings();// 0x6d94ba8 0x782e229620
	void BndEvt__AmbientVolumeSlider_K2Node_ComponentBoundEvent_48_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e229700
	void BndEvt__CharacterVolumeSlider_K2Node_ComponentBoundEvent_49_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e2297e0
	void BndEvt__MasterVolumeSlider_K2Node_ComponentBoundEvent_50_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e2298c0
	void BndEvt__MusicVolumeSlider_K2Node_ComponentBoundEvent_52_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e2299a0
	void BndEvt__WeaponVolumeSlider_K2Node_ComponentBoundEvent_53_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e229a80
	void BndEvt__ShowFps_K2Node_ComponentBoundEvent_54_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e229b60
	void BndEvt__HiddeFps_K2Node_ComponentBoundEvent_55_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e229c40
	void OnKeyPressed(FString Key);// 0x6d94ba8 0x782e229d20
	void LoadSettingsWidget();// 0x6d94ba8 0x782e229e00
	void BndEvt__InvertVerticalAxis_K2Node_ComponentBoundEvent_9_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x6d94ba8 0x782e229ee0
	void BndEvt__InverHorizontalAxis_K2Node_ComponentBoundEvent_10_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x6d94ba8 0x782e229fc0
	void UpdateAxisMapping();// 0x6d94ba8 0x782e22a0a0
	void OnButtonHovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782e22a180
	void OnButtonUnhovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782e22a260
	void Update Selected();// 0x6d94ba8 0x782e22a340
	void BndEvt__ADSMouseSnsitivitySlider_K2Node_ComponentBoundEvent_69_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22a420
	void BndEvt__WB_SettingsMenu_AudioButton_1_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22a500
	void BndEvt__WB_SettingsMenu_MusicVolumeSlider_1_K2Node_ComponentBoundEvent_70_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e22a5e0
	void BndEvt__WB_SettingsMenu_MusicVolumeSlider_1_K2Node_ComponentBoundEvent_71_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22a6c0
	void BndEvt__WB_SettingsMenu_CharacterVolumeSlider_1_K2Node_ComponentBoundEvent_72_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e22a7a0
	void BndEvt__WB_SettingsMenu_CharacterVolumeSlider_1_K2Node_ComponentBoundEvent_73_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e22a960
	void BndEvt__WB_SettingsMenu_ShowFps_1_K2Node_ComponentBoundEvent_74_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22aa40
	void BndEvt__WB_SettingsMenu_HiddeFps_1_K2Node_ComponentBoundEvent_75_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22ab20
	void BndEvt__WB_SettingsMenu_ShowFps_2_K2Node_ComponentBoundEvent_76_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22ac00
	void BndEvt__WB_SettingsMenu_HiddeFps_2_K2Node_ComponentBoundEvent_77_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e22ace0
	void BndEvt__WB_SettingsMenu_AudioButton_2_K2Node_ComponentBoundEvent_78_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7830199380
	void Destruct();// 0x6d94ba8 0x782e227400
	void BndEvt__WB_SettingsMenu_ShowFps_3_K2Node_ComponentBoundEvent_34_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e2274e0
	void BndEvt__WB_SettingsMenu_HiddeFps_3_K2Node_ComponentBoundEvent_35_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e2275c0
	void BndEvt__WB_SettingsMenu_CharacterVolumeSlider_2_K2Node_ComponentBoundEvent_79_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x782e2276a0
	void BndEvt__WB_SettingsMenu_CharacterVolumeSlider_2_K2Node_ComponentBoundEvent_80_OnMouseCaptureEndEvent__DelegateSignature();// 0x6d94ba8 0x782e227780
	void BndEvt__WB_SettingsMenu_ShowFps_4_K2Node_ComponentBoundEvent_81_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e227860
	void BndEvt__WB_SettingsMenu_ShowFps_5_K2Node_ComponentBoundEvent_82_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e227940
	void BndEvt__WB_SettingsMenu_HiddeFps_4_K2Node_ComponentBoundEvent_83_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e227a20
	void RefFire();// 0x6d94ba8 0x782e227b00
	void 刷新陀螺仪                                                                                     ();// 0x6d94ba8 0x782e227be0
	void 开镜                                                                                              ();// 0x6d94ba8 0x782e227cc0
	void 阴影                                                                                              ();// 0x6d94ba8 0x782e227da0
	void BndEvt__WB_SettingsMenu_ShowFps_6_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e227f60
	void BndEvt__WB_SettingsMenu_HiddeFps_5_K2Node_ComponentBoundEvent_56_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e228040
	void 瞄准                                                                                              ();// 0x6d94ba8 0x782e228120
	void BndEvt__WB_SettingsMenu_ShowFps_7_K2Node_ComponentBoundEvent_57_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e228200
	void BndEvt__WB_SettingsMenu_HiddeFps_6_K2Node_ComponentBoundEvent_58_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e2282e0
	void 陀螺仪反向                                                                                     ();// 0x6d94ba8 0x782e2283c0
	void BndEvt__WB_SettingsMenu_ShowFps_8_K2Node_ComponentBoundEvent_59_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e2284a0
	void BndEvt__WB_SettingsMenu_HiddeFps_7_K2Node_ComponentBoundEvent_60_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e228660
	void 视角滑动                                                                                        ();// 0x6d94ba8 0x782e228820
	void ExecuteUbergraph_WB_SettingsMenu(int EntryPoint, bool ___bool_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool ___bool_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Variable, int ___int_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Variable, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, int CallFunc_GetTextureQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Subtract_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Variable, int CallFunc_GetFoliageQuality_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_GetFoliageQuality_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, bool ___bool_Variable, int CallFunc_Add_IntInt_ReturnValue, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_GetAudioQualityLevel_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetAudioQualityLevel_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_GetFrameRateLimit_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_GetFrameRateLimit_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_ComponentBoundEvent_Value, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int ___int_Variable, float CallFunc_GetResolutionScaleInformationEx_CurrentScaleNormalized, float CallFunc_GetResolutionScaleInformationEx_CurrentScaleValue, float CallFunc_GetResolutionScaleInformationEx_MinScaleValue, float CallFunc_GetResolutionScaleInformationEx_MaxScaleValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int ___int_Loop_Counter_Variable, float CallFunc_FClamp_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_FClamp_ReturnValue, int ___int_Variable, float ___float_Variable, int ___int_Variable, float CallFunc_FClamp_ReturnValue, WB_CusUI_C* CallFunc_Create_ReturnValue, float CallFunc_FClamp_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte ___byte_Variable, int ___int_Variable, int ___int_Variable, int ___int_Variable, byte ___byte_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte ___byte_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, bool ___bool_Variable, bool ___bool_Variable, float K2Node_ComponentBoundEvent_Value, InputSettings* CallFunc_GetInputSettings_ReturnValue, FName[] CallFunc_GetActionNames_ActionNames, InputAxisKeyMapping[] CallFunc_GetAxisMappingByName_OutMappings, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_FClamp_ReturnValue, WB_KeyRemap_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool ___bool_Variable, float K2Node_ComponentBoundEvent_Value, bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool ___bool_Variable, int ___int_Variable, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, bool ___bool_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool ___bool_Variable, FString K2Node_CustomEvent_Key, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, bool ___bool_Variable, int CallFunc_Array_AddUnique_ReturnValue, WB_KeyRemap_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Variable, InputSettings* CallFunc_GetInputSettings_ReturnValue, InputActionKeyMapping[] CallFunc_GetActionMappingByName_OutMappings, bool K2Node_ComponentBoundEvent_bIsChecked, InputActionKeyMapping CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, InputSettings* CallFunc_GetInputSettings_ReturnValue, bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, float CallFunc_GetValue_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, byte ___byte_Variable, byte ___byte_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, int ___int_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, float K2Node_Select_Default, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, InputAxisKeyMapping K2Node_MakeStruct_InputAxisKeyMapping, float K2Node_ComponentBoundEvent_Value, int CallFunc_GetActiveWidgetIndex_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, SaveGameStructure K2Node_MakeStruct_SaveGameStructure, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, byte ___byte_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, byte ___byte_Variable, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, byte ___byte_Variable, byte ___byte_Variable, byte ___byte_Variable, int ___int_Variable, byte ___byte_Variable, int ___int_Variable, WB_Gameplay_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, byte ___byte_Variable, WB_Gameplay_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, float K2Node_ComponentBoundEvent_Value, byte K2Node_Select_Default, byte K2Node_Select_Default, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default, TextBlock* K2Node_Select_Default, Button* K2Node_Select_Default, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default);// 0x6d94ba8 0x782e228900

--------------------------------
Class: FPS_SaveGame_C.SaveGame.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8] 0x785010a680
	SaveGameStructure PlayerSettings;//[Offset: 0x30, Size: 0x30] 0x785010a600
	float 不开镜灵敏度                                                                                  ;//[Offset: 0x60, Size: 0x4] 0x785010a580
	float 开镜灵敏度                                                                                     ;//[Offset: 0x64, Size: 0x4] 0x785010c600
	byte  画质                                                                                             ;//[Offset: 0x68, Size: 0x1] 0x785010c580
	bool 开火特效                                                                                        ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1] 0x785010c500
	bool 阴影                                                                                              ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1] 0x785010c480
	bool CusUi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1] 0x785010c400
	byte 陀螺仪开启                                                                                     ;//[Offset: 0x6c, Size: 0x1] 0x785010c380
	float 陀螺仪灵敏度                                                                                  ;//[Offset: 0x70, Size: 0x4] 0x785010c300
	bool 开火开镜                                                                                        ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1] 0x785010c280
	BP_PainSaveData_C*[] PaintData;//[Offset: 0x78, Size: 0x10] 0x7850060600
	BP_WeaponSaveData_C*[] Weapon;//[Offset: 0x88, Size: 0x10] 0x7850060560
	BP_SetLeftFire_C* LeftFire;//[Offset: 0x98, Size: 0x8] 0x785010c100
	BP_SetRightFire_C* Right;//[Offset: 0xa0, Size: 0x8] 0x785010c080
	BP_SetJump_C* Jump;//[Offset: 0xa8, Size: 0x8] 0x785010c000
	BP_SetReload_C* Reload;//[Offset: 0xb0, Size: 0x8] 0x785010bf80
	BP_SetAim_C* Aim;//[Offset: 0xb8, Size: 0x8] 0x785010bf00
	BP_SetCrouch_C* Crouch;//[Offset: 0xc0, Size: 0x8] 0x785010be80
	BP_SetMelee_C* Melee;//[Offset: 0xc8, Size: 0x8] 0x785010be00
	BP_SetShow_C* Show;//[Offset: 0xd0, Size: 0x8] 0x785010bd80
	BP_SetGrenade_C* Grenade;//[Offset: 0xd8, Size: 0x8] 0x785010bd00
	int Coin;//[Offset: 0xe0, Size: 0x4] 0x785010bc80
	bool 瞄准长按                                                                                        ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 0x1] 0x785010bc00
	bool  按钮滑动                                                                                       ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 0x1] 0x785010bb80
	bool 陀螺仪反向                                                                                     ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 0x1] 0x785010bb00
	void Init();// 0x6d94ba8 0x782d944140
	void RefButton();// 0x6d94ba8 0x782d944300
	void ExecuteUbergraph_FPS_SaveGame(int EntryPoint, int ___int_Loop_Counter_Variable, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, BP_PainSaveData_C* CallFunc_SpawnObject_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, BS_WeaponData CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_WeaponSaveData_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetLeftFire_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRightFire_C* CallFunc_SpawnObject_ReturnValue, BP_SetJump_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BS_PaintData1 CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_SetReload_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetAim_C* CallFunc_SpawnObject_ReturnValue, BP_SetCrouch_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetMelee_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetShow_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetGrenade_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetLeftFire_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRightFire_C* CallFunc_SpawnObject_ReturnValue, int ___int_Loop_Counter_Variable, BP_SetJump_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetReload_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetAim_C* CallFunc_SpawnObject_ReturnValue, BP_SetCrouch_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetMelee_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetShow_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetGrenade_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782d9443e0

--------------------------------
Class: BP_PainSaveData_C.WorldObject.Object
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x783455b500
	BS_PaintData1 Data;//[Offset: 0x30, Size: 0x28] 0x783455b480

--------------------------------
Class: BS_PaintData1
	int Index_12_B5D6BA234C10977AA7237C81B814975B;//[Offset: 0x0, Size: 0x4] 0x783022a400
	MaterialInstance* material_9_711188804A7C58A2B914D7A91D2CB955;//[Offset: 0x8, Size: 0x8] 0x783022a380
	byte Tpye_15_94A0A1AC4C24CAEF6A7440B18415F3BD;//[Offset: 0x10, Size: 0x1] 0x783022a300
	PaperSprite* Image_5_0150E83F4DE6B09CB3FB6E8358F82032;//[Offset: 0x18, Size: 0x8] 0x783022a280
	byte Level_8_64CC9258407442CE24A81DA47478A783;//[Offset: 0x20, Size: 0x1] 0x783022a200

--------------------------------
Class: BP_WeaponSaveData_C.WorldObject.Object
	BS_WeaponData Data;//[Offset: 0x28, Size: 0x30] 0x7834314d80
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1] 0x7834314f00
	int CurSkin;//[Offset: 0x5c, Size: 0x4] 0x7834314e80

--------------------------------
Class: BS_WeaponData
	int Index_19_1DE2033A4C1B6953AC1E6ABAA886BFEC;//[Offset: 0x0, Size: 0x4] 0x7834315280
	class BP_LPSP_WEP_C* Class_4_8C98357148FD02C81681D78820CD4E0C;//[Offset: 0x8, Size: 0x8] 0x783450b820
	PaperSprite* WeaponImage_30_23A035454E8101EBAB83C3AFF75CC017;//[Offset: 0x10, Size: 0x8] 0x7834315200
	int InitSkin_9_CF6F4364451D83022E378C89EDA5451F;//[Offset: 0x18, Size: 0x4] 0x7834315180
	byte Type_12_A9E8E392418571DEBD4E559177C245FE;//[Offset: 0x1c, Size: 0x1] 0x7834315100
	byte Level_15_9FA6429B4DA24E66DBF979BEE077B386;//[Offset: 0x1d, Size: 0x1] 0x7834315080
	float Damage_24_9E86668A48A0A14349C65FA367E366A5;//[Offset: 0x20, Size: 0x4] 0x7834315000
	Vector AimOffset_27_FDFA40FE4B1DF67059785AB62C7489C0;//[Offset: 0x24, Size: 0xc] 0x7834314f80

--------------------------------
Class: BP_LPSP_WEP_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7834519f00
	SceneComponent* Socket Muzzle1;//[Offset: 0x228, Size: 0x8] 0x7834519e80
	BP_LPSP_WEP_Attachment_C* SMesh Muzzle1;//[Offset: 0x230, Size: 0x8] 0x7834519e00
	SceneComponent* Pivot Scope1;//[Offset: 0x238, Size: 0x8] 0x7834519d80
	SceneComponent* Socket Scope1;//[Offset: 0x240, Size: 0x8] 0x7834519d00
	BP_LPSP_WEP_Attachment_C* SMesh Scope1;//[Offset: 0x248, Size: 0x8] 0x7834519c80
	SceneComponent* Socket Scope;//[Offset: 0x250, Size: 0x8] 0x7834519c00
	BP_LPSP_WEP_Attachment_C* SMesh Scope;//[Offset: 0x258, Size: 0x8] 0x7834519b80
	BP_LPSP_WEP_Attachment_C* SMesh Magazine1;//[Offset: 0x260, Size: 0x8] 0x7834519b00
	SceneComponent* Socket Magazine1;//[Offset: 0x268, Size: 0x8] 0x7834519a80
	SkeletalMeshComponent* SkeletalMesh_TP;//[Offset: 0x270, Size: 0x8] 0x7834519a00
	BP_LPSP_WEP_Body_C* SMeshWeapon_FP;//[Offset: 0x278, Size: 0x8] 0x7834519980
	SceneComponent* Root;//[Offset: 0x280, Size: 0x8] 0x7834519900
	SceneComponent* Pivot Scope;//[Offset: 0x288, Size: 0x8] 0x7834519880
	SceneComponent* Socket Muzzle;//[Offset: 0x290, Size: 0x8] 0x7834519800
	SceneComponent* Socket Grip;//[Offset: 0x298, Size: 0x8] 0x7834519780
	SceneComponent* Socket Laser;//[Offset: 0x2a0, Size: 0x8] 0x7834519700
	SceneComponent* Socket Magazine;//[Offset: 0x2a8, Size: 0x8] 0x7834519680
	SceneComponent* Socket Default;//[Offset: 0x2b0, Size: 0x8] 0x7834519600
	BP_LPSP_WEP_Attachment_C* SMesh Magazine;//[Offset: 0x2b8, Size: 0x8] 0x7834519580
	BP_LPSP_WEP_Attachment_C* SMesh Ironsights;//[Offset: 0x2c0, Size: 0x8] 0x7834519500
	BP_LPSP_WEP_Attachment_C* SMesh Laser;//[Offset: 0x2c8, Size: 0x8] 0x783451b580
	BP_LPSP_WEP_Attachment_C* SMesh Grip;//[Offset: 0x2d0, Size: 0x8] 0x783451b500
	BP_LPSP_WEP_Attachment_C* SMesh Muzzle;//[Offset: 0x2d8, Size: 0x8] 0x783451b480
	float TLine_Scale_Attachments_Down_Scale_AD51C11E4F060FEE1A8F648936FE9E51;//[Offset: 0x2e0, Size: 0x4] 0x783451b400
	byte TLine_Scale_Attachments_Down__Direction_AD51C11E4F060FEE1A8F648936FE9E51;//[Offset: 0x2e4, Size: 0x1] 0x783451b380
	TimelineComponent* TLine Scale Attachments Down;//[Offset: 0x2e8, Size: 0x8] 0x783451b300
	float TLine_Scale_Attachments_Up_Scale_C3CDF135425B50C57826A8B272279BFF;//[Offset: 0x2f0, Size: 0x4] 0x783451b280
	byte TLine_Scale_Attachments_Up__Direction_C3CDF135425B50C57826A8B272279BFF;//[Offset: 0x2f4, Size: 0x1] 0x783451b200
	TimelineComponent* TLine Scale Attachments Up;//[Offset: 0x2f8, Size: 0x8] 0x783451b180
	bool Debug Components;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1] 0x783451b100
	DataTableRowHandle Row Handle Settings Physical Weapon;//[Offset: 0x308, Size: 0x10] 0x783451b080
	DataTableRowHandle Row Handle Settings Physical Attachments;//[Offset: 0x318, Size: 0x10] 0x783451b000
	DataTableRowHandle Row Handle Weapon Information;//[Offset: 0x328, Size: 0x10] 0x783451af80
	DataTableRowHandle Row Handle Settings Ironsights;//[Offset: 0x338, Size: 0x10] 0x783451af00
	DataTableRowHandle Row Handle Settings Magazine;//[Offset: 0x348, Size: 0x10] 0x783451ae80
	DataTableRowHandle Weapon Preset Row Handle;//[Offset: 0x358, Size: 0x10] 0x783451ae00
	SPreset Weapon Preset Override;//[Offset: 0x368, Size: 0x50] 0x783451ad80
	SPreset Weapon Preset;//[Offset: 0x3b8, Size: 0x50] 0x783451ad00
	SInformation Weapon Information;//[Offset: 0x408, Size: 0xa8] 0x783451ac80
	DataTableRowHandle Scope Mesh Row Handle;//[Offset: 0x4b0, Size: 0x10] 0x783451ac00
	SScope Scope Settings;//[Offset: 0x4c0, Size: 0xe0] 0x783451ab80
	DataTableRowHandle Scope Settings Row Handle;//[Offset: 0x5a0, Size: 0x10] 0x783451ab00
	DataTableRowHandle Laser Mesh Row Handle;//[Offset: 0x5b0, Size: 0x10] 0x783451aa80
	SLaser Laser Settings;//[Offset: 0x5c0, Size: 0x20] 0x783451aa00
	DataTableRowHandle Laser Settings Row Handle;//[Offset: 0x5e0, Size: 0x10] 0x783451a980
	DataTableRowHandle Grip Mesh Row Handle;//[Offset: 0x5f0, Size: 0x10] 0x783451a900
	SGrip Grip Settings;//[Offset: 0x600, Size: 0x1] 0x783451a880
	DataTableRowHandle Grip Settings Row Handle;//[Offset: 0x608, Size: 0x10] 0x783451a800
	SMagazine Magazine Settings;//[Offset: 0x618, Size: 0x58] 0x783451a780
	SMuzzle Muzzle Settings;//[Offset: 0x670, Size: 0x38] 0x783451a700
	PointLightComponent* Light Point Muzzle Flash;//[Offset: 0x6a8, Size: 0x8] 0x783451a680
	SpotLightComponent* Light Spot Flashlight;//[Offset: 0x6b0, Size: 0x8] 0x783451a600
	StaticMeshComponent* Static Mesh Lasersight Beam;//[Offset: 0x6b8, Size: 0x8] 0x783451a580
	DataTableRowHandle Muzzle Mesh Row Handle;//[Offset: 0x6c0, Size: 0x10] 0x783451c600
	DataTableRowHandle Muzzle Settings Row Handle;//[Offset: 0x6d0, Size: 0x10] 0x783451c580
	SWeaponSettings Weapon Settings;//[Offset: 0x6e0, Size: 0xf8] 0x783451c500
	SAbilities Player Character Abilities;//[Offset: 0x7d8, Size: 0x680] 0x783451c480
	SSkin Skin;//[Offset: 0xe58, Size: 0x250] 0x783451c400
	DataTableRowHandle Skin Row Handle;//[Offset: 0x10a8, Size: 0x10] 0x783451c380
	SAnimationSettings Settings Animation;//[Offset: 0x10c0, Size: 0x280] 0x783451c300
	SIronsights Settings Ironsights;//[Offset: 0x1340, Size: 0x20] 0x783451c280
	FName Socket Name Scope;//[Offset: 0x1360, Size: 0x8] 0x783451c200
	FName Socket Name Grip;//[Offset: 0x1368, Size: 0x8] 0x783451c180
	Transform Weapon Offset;//[Offset: 0x1370, Size: 0x30] 0x783451c100
	SLasersight Settings Lasersight;//[Offset: 0x13a0, Size: 0x40] 0x783451c080
	SFlashlight Settings Flashlight;//[Offset: 0x13e0, Size: 0x28] 0x783451c000
	float Spread Multiplier;//[Offset: 0x1408, Size: 0x4] 0x783451bf80
	float Movement Spread;//[Offset: 0x140c, Size: 0x4] 0x783451bf00
	MaterialInstanceDynamic* Dot Material Dynamic;//[Offset: 0x1410, Size: 0x8] 0x783451be80
	DecalComponent* Decal;//[Offset: 0x1418, Size: 0x8] 0x783451be00
	SceneCaptureComponent2D* Scene Capture Scope;//[Offset: 0x1420, Size: 0x8] 0x783451bd80
	bool Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 0x1] 0x783451bd00
	bool Slide Racked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1429, Size: 0x1] 0x783451bc80
	bool Slide Racked Visually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142a, Size: 0x1] 0x783451bc00
	bool Laser On;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142b, Size: 0x1] 0x783451bb80
	bool Laser Turned On;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142c, Size: 0x1] 0x783451bb00
	bool Hidden Magazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142d, Size: 0x1] 0x783451ba80
	bool Hidden Magazine Visually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142e, Size: 0x1] 0x783451ba00
	bool Can Be Picked Up;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142f, Size: 0x1] 0x783451b980
	bool Show Attachment Muzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 0x1] 0x783451b900
	bool Show Attachment Grip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1431, Size: 0x1] 0x783451b880
	bool Show Attachment Scope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1432, Size: 0x1] 0x783451b800
	bool Show Attachment Laser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1433, Size: 0x1] 0x783451b780
	bool Show Attachment Ironsights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 0x1] 0x783451b700
	bool Show Attachment Magazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1435, Size: 0x1] 0x783451b680
	int Shot Count;//[Offset: 0x1438, Size: 0x4] 0x783451b600
	int Calculation;//[Offset: 0x143c, Size: 0x4] 0x783451d680
	int Ammunition Current;//[Offset: 0x1440, Size: 0x4] 0x783451d600
	byte Bolt State;//[Offset: 0x1444, Size: 0x1] 0x783451d580
	<FName,MaterialInstance*> Material Map Invisible;//[Offset: 0x1448, Size: 0x50] 0x783d304d80
	MaterialInterface*[] Materials Default Magazine;//[Offset: 0x1498, Size: 0x10] 0x78345036c0
	BP_LPSP_WEP_Attachment_C*[] Components Attachments;//[Offset: 0x14a8, Size: 0x10] 0x7834503620
	AudioComponent* Audio Component Playing;//[Offset: 0x14b8, Size: 0x8] 0x783451d300
	bool Is Locally Controlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 0x1] 0x783451d280
	float Damage;//[Offset: 0x14c4, Size: 0x4] 0x783451d200
	int Skip;//[Offset: 0x14c8, Size: 0x4] 0x783451d180
	MaterialInstance*[] SkipArray;//[Offset: 0x14d0, Size: 0x10] 0x7834503580
	Vector AimOffset;//[Offset: 0x14e0, Size: 0xc] 0x783451d080
	void Get Interaction Type(out byte Type);// 0x6d94ba8 0x782e5d6600
	void On Set Can Interact(bool Value);// 0x6d94ba8 0x782e5d66e0
	bool Can Interact();// 0x6d94ba8 0x782e5d67c0
	byte Get Ammunition Type();// 0x6d94ba8 0x782e5d68a0
	FName Get Socket Name Scope();// 0x6d94ba8 0x782e5d6980
	DataTable* Get Sounds();// 0x6d94ba8 0x782e5d6a60
	float Get Spread Multiplier();// 0x6d94ba8 0x782e5d6b40
	SWeaponSettings Get Weapon Settings();// 0x6d94ba8 0x782e5d6c20
	bool Is Showing Scope();// 0x6d94ba8 0x782e5d6d00
	bool Is Showing Ironsights();// 0x6d94ba8 0x782e5d6de0
	void On Montage Stop(byte View Mode, FName Name, float Blend Time, AnimMontage* Montage, byte ___byte_Variable, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, AnimMontage* K2Node_Select_Default);// 0x6d94ba8 0x782e5d6ec0
	void On Stop Audio Playing(bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d6fa0
	void On Spawn Attachment Components(int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, StaticMeshComponent* CallFunc_AddComponent_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, PointLightComponent* CallFunc_AddComponent_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, SpotLightComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Transform CallFunc_MakeTransform_ReturnValue, SceneCaptureComponent2D* CallFunc_AddComponent_ReturnValue);// 0x6d94ba8 0x782e5d7080
	void On Swap Attachment Laser(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d7160
	void On Swap Attachment Grip(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d7240
	void On Swap Attachment Scope(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d7320
	void On Swap Attachment Muzzle(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d3a40
	void On Laser Toggle(bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue);// 0x6d94ba8 0x782e5d3b20
	void On Reset Visual Ammunition(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d3c00
	void On Skin Set(SSkin Value, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Body, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Iron_Sights, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Magzine, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Muzzle, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Scope, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Laser, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Grip, DataTableRowHandle CallFunc_Break_Skin_To_Arrays_Row_Handle_Laser_Light, DataTableRowHandle CallFunc_Break_Skin_To_Arrays_Row_Handle_Flash_Light);// 0x6d94ba8 0x782e5d3ce0
	void On Swap Attachment Magazine(DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e5d3dc0
	void On Swap Attachment Ironsights(DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e5d3ea0
	void On Change Settings Physical Attachments(DataTableRowHandle Value, SPhysical Physical, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_LPSP_WEP_Attachment_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x6d94ba8 0x782e5d3f80
	void On Change Settings Physical Body(DataTableRowHandle Value, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x6d94ba8 0x782e5d4060
	void On Set Hidden Magazine Visually(bool Value);// 0x6d94ba8 0x782e5d4140
	void On Set Hidden Magazine(bool Value);// 0x6d94ba8 0x782e5d4220
	void On Set Slide Racked(bool Value);// 0x6d94ba8 0x782e5d4300
	void On Set Laser Turned On(bool Value);// 0x6d94ba8 0x782e5d43e0
	void On Set Movement Spread(float Value);// 0x6d94ba8 0x782e5d44c0
	void On Set Shot Count(int Value);// 0x6d94ba8 0x782e5d45a0
	void On Set Bolt State(byte Value);// 0x6d94ba8 0x782e5d4680
	void On Aiming Set(bool Value);// 0x6d94ba8 0x782e5d4760
	void On Aiming Start(int ___int_Array_Index_Variable, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, int ___int_Loop_Counter_Variable, MaterialInterface* CallFunc_Array_Get_Item, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d4840
	void On Aiming Stop(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d4920
	void On Laser Turn Off();// 0x6d94ba8 0x782e5d4a00
	void On Laser Turn On();// 0x6d94ba8 0x782e5d4ae0
	void On Spawn Casing(float Offset, float Impulse Multiplier, bool Randomize Initial Rotation, BP_LPSP_Casing_C* Casing, Transform Eject Socket Transform, bool ___bool_Variable, bool CallFunc_IsValidClass_ReturnValue, Vector CallFunc_GetActorScale3D_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_RandomRotator_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, Rotator K2Node_Select_Default, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_Casing_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x782e5d4bc0
	void On Montage Stop All(float Blend Time, AnimInstance* CallFunc_GetAnimInstance_ReturnValue);// 0x6d94ba8 0x782e5d4ca0
	void On Change Settings Physical(DataTableRowHandle Row Handle, SPhysical Value, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_LPSP_WEP_Attachment_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d4d80
	void On Fire Projectile(Rotator Facing Rotation, HitResult Hit Result, Vector CallFunc_MakeVector_ReturnValue, bool ___bool_Variable, bool ___bool_Variable, float ___float_Variable, bool ___bool_Variable, Vector CallFunc_MakeVector_ReturnValue, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, float ___float_Variable, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetActorScale3D_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_RandomFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Vector CallFunc_GetActorScale3D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_RandomFloat_ReturnValue, float ___float_Variable, Vector CallFunc_GetSocketLocation_ReturnValue, float ___float_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_Select_Default, bool CallFunc_IsValidClass_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float ___float_Variable, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float ___float_Variable, float ___float_Variable, float ___float_Variable, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector K2Node_Select_Default, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_RandomUnitVectorInEllipticalConeInDegrees_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_LPSP_Projectile_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, const Actor*[] K2Node_MakeArray_Array, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, Rotator CallFunc_Get_Facing_Rotation_Value, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, byte ___byte_Variable, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float K2Node_Select_Default, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, float K2Node_Select_Default, Vector CallFunc_Subtract_VectorVector_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, float K2Node_Select_Default, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_RandomUnitVectorInEllipticalConeInDegrees_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, float K2Node_Select_Default, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, BP_LPSP_Projectile_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, byte ___byte_Variable, int ___int_Variable, float K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetActorScale3D_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable, SceneComponent* K2Node_Select_Default, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, int CallFunc_Random_Integer_In_Vector_Range_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d4e60
	void On Ammunition Set(int Amount);// 0x6d94ba8 0x782e5d4f40
	bool Is Hidden Magazine();// 0x6d94ba8 0x782e5d5020
	bool Is Slide Racked();// 0x6d94ba8 0x782e5d5100
	bool Is Hidden Magazine Visually();// 0x6d94ba8 0x782e5d51e0
	bool Is Laser Turned On();// 0x6d94ba8 0x782e5d52c0
	byte Get Bolt State();// 0x6d94ba8 0x782e5d53a0
	FText Get Weapon Name();// 0x6d94ba8 0x782e5d5480
	StaticMeshComponent* Get Static Mesh Grip();// 0x6d94ba8 0x782e5d5560
	DataTableRowHandle Get Attachment Handle Ironsights();// 0x6d94ba8 0x782e5d5640
	DataTableRowHandle Get Attachment Handle Magazine();// 0x6d94ba8 0x782e5d1d60
	void Get Attachment Handles Laser(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d1e40
	void Get Attachment Handles Grip(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d1f20
	void Get Attachment Handles Scope(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d2000
	void Get Attachment Handles Muzzle(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782e5d20e0
	SSkin Get Skin();// 0x6d94ba8 0x782e5d21c0
	SMovement Get Character Settings Movement(SMovement CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d22a0
	void Set Slide Racked Visually(bool Value);// 0x6d94ba8 0x782e5d2380
	bool Is Slide Racked Visually();// 0x6d94ba8 0x782e5d2460
	Texture2D* Get Icon Ironsights();// 0x6d94ba8 0x782e5d2540
	Texture2D* Get Icon Laser(STexture CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d2620
	Texture2D* Get Icon Grip(STexture CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d2700
	Texture2D* Get Icon Scope(STexture CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d27e0
	SLaser Get Laser Settings();// 0x6d94ba8 0x782e5d28c0
	Transform Get Offset();// 0x6d94ba8 0x782e5d29a0
	StaticMeshComponent* Get Static Mesh Ironsights();// 0x6d94ba8 0x782e5d2a80
	SkeletalMeshComponent* Get Static Mesh Body();// 0x6d94ba8 0x782e5d2b60
	StaticMeshComponent* Get Static Mesh Scope();// 0x6d94ba8 0x782e5d2c40
	SScope Get Settings Scope();// 0x6d94ba8 0x782e5d2d20
	SAnimationSettings Get Settings Animation();// 0x6d94ba8 0x782e5d2e00
	StaticMeshComponent* Get Static Mesh Magazine();// 0x6d94ba8 0x782e5d2ee0
	StaticMeshComponent* Get Static Mesh Muzzle();// 0x6d94ba8 0x782e5d2fc0
	class UserWidget Get Widget Class Crosshair();// 0x6d94ba8 0x782e5d30a0
	Texture2D* Get Icon Muzzle(bool CallFunc_IsValid_ReturnValue, STexture CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x6d94ba8 0x782e5d3180
	Texture2D* Get Icon Magazine();// 0x6d94ba8 0x782e5d3260
	Texture2D* Get Icon Body(STexture CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d3340
	DataTable* Get Character Animation Poses();// 0x6d94ba8 0x782e5d3420
	DataTable* Get Character Animation Montages();// 0x6d94ba8 0x782e5d3500
	SWeaponSettings Get Settings Weapon();// 0x6d94ba8 0x782e5d35e0
	SAbilities Get Character Abilities();// 0x6d94ba8 0x782e5d36c0
	int Get Ammunition Total();// 0x6d94ba8 0x782e5d37a0
	bool Is Full Of Ammunition(bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d3880
	int Get Ammunition Current();// 0x6d94ba8 0x782e5d3960
	bool Is Out Of Ammunition(bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d0080
	void Update Is Locally Controlled(Actor* CallFunc_GetOwner_ReturnValue, Character* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x6d94ba8 0x782e5d0160
	void Finalize Attachment Change(MaterialInterface* CallFunc_GetMaterial_ReturnValue);// 0x6d94ba8 0x782e5d0240
	void Try Load Loadout(BPSG_LPSP_Loadout_C* Save Object, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPSG_LPSP_Loadout_C* K2Node_DynamicCast_AsBPSG_LPSP_Loadout, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e5d0320
	void Save Loadout(BPSG_LPSP_Loadout_C* Save Object, bool CallFunc_SaveGameToSlot_ReturnValue, BPSG_LPSP_Loadout_C* CallFunc_CreateSaveGameObject_ReturnValue);// 0x6d94ba8 0x782e5d0400
	void Update Scope From Name(FName Name, bool CallFunc_EqualEqual_NameName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e5d04e0
	void Set All Components Field Of View Alpha(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MeshComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, MeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d05c0
	void Set Component Field Of View Alpha(MeshComponent* Component, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d06a0
	void Set Attachments Scale(float Scale, Vector Scale Vector, Vector CallFunc_Conv_FloatToVector_ReturnValue);// 0x6d94ba8 0x782e5d0780
	void Equip Random Laser(FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e5d0860
	void Equip Random Grip(FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e87cb80
	void Equip Random Muzzle(FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e5d0940
	void Equip Random Scope(FName Name, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex);// 0x6d94ba8 0x782e5d0a20
	void Equip Skin From Random Preset(SPreset Preset, bool CallFunc_IsValid_ReturnValue, SSkin CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, SPreset CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x6d94ba8 0x782e5d0b00
	void Randomize Preset(SPreset Preset, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_EqualEqual_NameName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, SSkin CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_IsValid_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, SPreset CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e5d0be0
	void Try Hide Magazine(bool Hide, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, SPhysical CallFunc_Get_Settings_Physical_Value, SPhysical CallFunc_Get_Settings_Physical_Value);// 0x6d94ba8 0x782e5d0cc0
	void Weapon Drop(Vector Impulse, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, float CallFunc_GetMass_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e5d0da0
	void Set Skin (out MaterialInstance*[] Body, out MaterialInstance*[] Iron Sights, out MaterialInstance*[] Magazine, out MaterialInstance*[] Muzzle, out MaterialInstance*[] Scope, out MaterialInstance*[] Laser, out MaterialInstance*[] Grip, DataTableRowHandle Row Handle Laser Light, DataTableRowHandle Row Handle Flash light, SSkin SkinSet Names, SSkin Combined Skin, SSkin CallFunc_Material_Arrays_To_SSkin_SSkin, Actor* CallFunc_GetOwner_ReturnValue, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x6d94ba8 0x782e5d0e80
	void Swap Attachment Scope (DataTableRowHandle Scope Mesh Row Handle, DataTableRowHandle Scope Settings Row Handle, bool CallFunc_IsValid_ReturnValue, SScope CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, SMesh CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x6d94ba8 0x782e5d0f60
	void Swap Attachment Grip (DataTableRowHandle Grip Settings Row Handle, DataTableRowHandle Grip Mesh Row Handle, bool CallFunc_IsValid_ReturnValue, SGrip CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, SMesh CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1040
	void Swap Attachment Muzzle (DataTableRowHandle Muzzle Settings Row Handle, DataTableRowHandle Muzzle Mesh Row Handle, SMuzzle CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, SMesh CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1120
	void Swap Attachment Laser(DataTableRowHandle Laser Mesh Row Handle, DataTableRowHandle Laser Settings Row Handle, SLaser CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, SMesh CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1200
	void Make Skin Map From Old Map(<FName,MaterialInstance*> Names In Map Form, out MaterialInstance*[] Materials, out <FName,MaterialInstance*> Return Map, FName[] CallFunc_Map_Keys_Keys, <FName,MaterialInstance*> CallFunc_Make_Map_From_Arrays_Return_Map);// 0x6d94ba8 0x782e5d12e0
	void Make Map From Arrays(out MaterialInstance*[] Materials, out FName[] Names, out <FName,MaterialInstance*> Return Map, <FName,MaterialInstance*> Map, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, MaterialInstance* CallFunc_Array_Get_Item, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d13c0
	void Update Socket Attachments();// 0x6d94ba8 0x782e5d14a0
	void Update Lasersight Properties(HitResult Result, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotFromX_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, const Actor*[] ___object_Variable, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);// 0x6d94ba8 0x782e5d1580
	void Disable Laser(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1660
	void Scope Render Target Disable(bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1740
	void Scope Render Target Enable(bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d1820
	void Get Ironsights Scope Settings(SScope CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e5d19e0
	void Try Update Ammunition Visual(int CallFunc_GetNumMaterials_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, int ___int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, MaterialInterface* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d1ac0
	void Update Ammunition Current(bool Fill, int Amount, bool CallFunc_Is_Out_Of_Ammunition_ReturnValue, int CallFunc_Get_Ammunition_Total_ReturnValue, int CallFunc_Get_Ammunition_Total_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue);// 0x6d94ba8 0x782e5d1ba0
	void Update Materials From Skin(bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue, SLasersight CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue, SFlashlight CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool ___bool_Variable, <FName,MaterialInstance*> K2Node_Select_Default, <FName,MaterialInstance*> K2Node_Select_Default, <FName,MaterialInstance*> K2Node_Select_Default, <FName,MaterialInstance*> K2Node_Select_Default, <FName,MaterialInstance*> K2Node_Select_Default, <FName,MaterialInstance*> K2Node_Select_Default);// 0x6d94ba8 0x782e5d1c80
	void Update Skin(SPreset Preset Value, out bool Updated, DataTableRowHandle Row Handle, SSkin CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e87e780
	void Try Update Attachment Grip(SPreset Preset, out bool Updated, DataTableRowHandle Row Handle Settings, DataTableRowHandle Row Handle Mesh, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue);// 0x6d94ba8 0x782e87e860
	void Try Update Attachment Muzzle(SPreset Preset, out bool Updated, DataTableRowHandle Row Handle Mesh, DataTableRowHandle Row Handle Settings, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_IsValid_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue);// 0x6d94ba8 0x782e87e940
	void Try Update Attachment Laser(SPreset Preset, out bool Updated, DataTableRowHandle Row Handle Settings, DataTableRowHandle Row Handle Mesh, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue);// 0x6d94ba8 0x782e87ea20
	void Try Update Attachment Scope(SPreset Preset, out bool Updated, DataTableRowHandle Row Handle Settings, DataTableRowHandle Row Handle Mesh, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue);// 0x6d94ba8 0x782e87eb00
	void Try Update Attachment Magazine(bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SMagazine CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x6d94ba8 0x782e87ebe0
	void Try Update Attachment Ironsights(bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, SIronsights CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e87ecc0
	void UserConstructionScript(SWeaponSettings CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SInformation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, SPreset CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, SAbilities CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_LPSP_WEP_Attachment_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Try_Update_Attachment_Muzzle_Updated, bool CallFunc_Try_Update_Attachment_Muzzle_Updated, bool CallFunc_Update_Skin_Updated, bool CallFunc_Update_Skin_Updated, bool CallFunc_Try_Update_Attachment_Grip_Updated, bool CallFunc_Try_Update_Attachment_Grip_Updated, bool CallFunc_Try_Update_Attachment_Laser_Updated, bool CallFunc_Try_Update_Attachment_Laser_Updated, bool CallFunc_Try_Update_Attachment_Scope_Updated, bool CallFunc_Try_Update_Attachment_Scope_Updated, bool CallFunc_IsValid_ReturnValue, SAnimationSettings CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_LPSP_WEP_Attachment_C*[] CallFunc_K2_GetComponentsByClass_ReturnValue);// 0x6d94ba8 0x782e87eda0
	void TLine Scale Attachments Down__FinishedFunc();// 0x6d94ba8 0x782e87ee80
	void TLine Scale Attachments Down__UpdateFunc();// 0x6d94ba8 0x782e87ef60
	void TLine Scale Attachments Up__FinishedFunc();// 0x6d94ba8 0x782e87f040
	void TLine Scale Attachments Up__UpdateFunc();// 0x6d94ba8 0x782e87f120
	void OnNotifyEnd_274CFDCB4AD8D37AF50B67BDCD519F52(FName NotifyName);// 0x6d94ba8 0x782e87f200
	void OnNotifyBegin_274CFDCB4AD8D37AF50B67BDCD519F52(FName NotifyName);// 0x6d94ba8 0x782e87f2e0
	void OnInterrupted_274CFDCB4AD8D37AF50B67BDCD519F52(FName NotifyName);// 0x6d94ba8 0x782e87f3c0
	void OnBlendOut_274CFDCB4AD8D37AF50B67BDCD519F52(FName NotifyName);// 0x6d94ba8 0x782e87f4a0
	void OnCompleted_274CFDCB4AD8D37AF50B67BDCD519F52(FName NotifyName);// 0x6d94ba8 0x782e87f580
	void Event Multicast On Set Skin Set(out const MaterialInstance*[] Body Map, out const MaterialInstance*[] Iron Sights, out const MaterialInstance*[] Magazine, out const MaterialInstance*[] Muzzle, out const MaterialInstance*[] Scope, out const MaterialInstance*[] Laser, out const MaterialInstance*[] Grip, DataTableRowHandle Row Handle Laser, DataTableRowHandle Row Handle FlashLight, SSkin Skin Set Names);// 0x6d94ba8 0x782e87f660
	void Event Server Set Skin(out const MaterialInstance*[] Body, out const MaterialInstance*[] Iron Sights, out const MaterialInstance*[] Magazine, out const MaterialInstance*[] Muzzle, out const MaterialInstance*[] Scope, out const MaterialInstance*[] Laser, out const MaterialInstance*[] Grip, const DataTableRowHandle Row Handle Laser, DataTableRowHandle Row Handle Flash light, SSkin Skin Set Names);// 0x6d94ba8 0x782e87f740
	void Event Server On Destroy Weapon();// 0x6d94ba8 0x782e87f820
	void Event Multicast Set Scope (DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e87f900
	void Event Server Set Scope (DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e87f9e0
	void Event Multicast On Weapon Drop (Vector Throw Impulse);// 0x6d94ba8 0x782e87fac0
	void Event Multicast On Set Hidden Magazine (bool Value);// 0x6d94ba8 0x782e87fba0
	void Event Server On Set Hidden Magazine (bool Value);// 0x6d94ba8 0x782e87fc80
	void Event Mulitcast On Swap Attachments Ironsights (DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e87fd60
	void Event Server On Swap Attachments Ironsights (DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e87fe40
	void Event Multicast On Swap Attachments Magzaine (DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e87ff20
	void Event Multicast On Set Slide Racked (bool Value);// 0x6d94ba8 0x7830199ee0
	void Event Multicast On Swap Attachment Laser (DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e87caa0
	void Event Multicast On Swap Attachment Muzzle (DataTableRowHandle Muzzle Settings Row Handle, DataTableRowHandle Muzzle Mesh Row Handle);// 0x6d94ba8 0x782e87cc60
	void Event Multicast On Swap Attachment Grip (DataTableRowHandle Grip Settings Row Handle, DataTableRowHandle Grip Mesh Row Handle);// 0x6d94ba8 0x782e87cd40
	void Event Multicast On Set Bolt State (byte Bolt State);// 0x6d94ba8 0x782e87ce20
	void Event Server On Swap Attachments Magzine (DataTableRowHandle Row Handle);// 0x6d94ba8 0x782e87cf00
	void Event Server On Set Slide Racked (bool Value);// 0x6d94ba8 0x782e87cfe0
	void Event Server On Swap Attachment Laser(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782e87d0c0
	void Event Server On Swap Attachment Muzzle (DataTableRowHandle Muzzle Settings Row Handle, DataTableRowHandle Muzzle Mesh Row Handle);// 0x6d94ba8 0x782e87d1a0
	void Event Server On Swap Attachment Grip (DataTableRowHandle Grip Settings Row Handle, DataTableRowHandle Grip Mesh Row Handle);// 0x6d94ba8 0x782e87d280
	void On Character Jumped();// 0x6d94ba8 0x782e87d360
	void On Character Landed();// 0x6d94ba8 0x782e87d440
	void Event Server On Set Bolt State(byte Bolt State);// 0x6d94ba8 0x782e87d520
	void Event Server On Ammunition Set (int Count);// 0x6d94ba8 0x782e87d600
	void Event Multicast On Set Laser Turned On (bool Laser);// 0x6d94ba8 0x782e87d6e0
	void Event Server On Set Laser Turned On (bool Laser);// 0x6d94ba8 0x782e87d7c0
	void On Update();// 0x6d94ba8 0x782e87d8a0
	void On Equipped();// 0x6d94ba8 0x782e87d980
	void On Unequipped();// 0x6d94ba8 0x782e87da60
	void On Update Ammunition(bool Fill, int Amount);// 0x6d94ba8 0x782e87db40
	void On Montage Play(FName Name, bool First Person);// 0x6d94ba8 0x782e87dc20
	void On Randomize Preset();// 0x6d94ba8 0x782e87dde0
	void On Interacted(Pawn* Interaction Owner);// 0x6d94ba8 0x782e87dfa0
	void On Save Loadout();// 0x6d94ba8 0x782e87e160
	void On Equip Saved Loadout();// 0x6d94ba8 0x7836a020e0
	void Event On Flash Muzzle Light();// 0x6d94ba8 0x782e872380
	void Destroy Weapon From Server();// 0x6d94ba8 0x782e872460
	void On Weapon Drop(Vector Throw Impulse);// 0x6d94ba8 0x782e872540
	void ReceiveBeginPlay();// 0x6d94ba8 0x782e872620
	void RefSkin(int Skin);// 0x6d94ba8 0x782e8727e0
	void Des();// 0x6d94ba8 0x782e8729a0
	void ExecuteUbergraph_BP_LPSP_WEP(int EntryPoint, DataTableRowHandle K2Node_CustomEvent_Mesh, DataTableRowHandle K2Node_CustomEvent_Settings, DataTableRowHandle K2Node_CustomEvent_Mesh, DataTableRowHandle K2Node_CustomEvent_Settings, Vector K2Node_CustomEvent_Throw_Impulse, bool K2Node_CustomEvent_Value, bool K2Node_CustomEvent_Value, DataTableRowHandle K2Node_CustomEvent_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Row_Handle, const MaterialInstance*[] K2Node_CustomEvent_Body, const MaterialInstance*[] K2Node_CustomEvent_Iron_Sights, const MaterialInstance*[] K2Node_CustomEvent_Magazine, const MaterialInstance*[] K2Node_CustomEvent_Muzzle, const MaterialInstance*[] K2Node_CustomEvent_Scope, const MaterialInstance*[] K2Node_CustomEvent_Laser, const MaterialInstance*[] K2Node_CustomEvent_Grip, const DataTableRowHandle K2Node_CustomEvent_Row_Handle_Laser, DataTableRowHandle K2Node_CustomEvent_Row_Handle_Flash_Light, SSkin K2Node_CustomEvent_Skin_Set_Names, DataTableRowHandle K2Node_CustomEvent_Row_Handle, bool K2Node_CustomEvent_Value, DataTableRowHandle K2Node_CustomEvent_Mesh, DataTableRowHandle K2Node_CustomEvent_Settings, DataTableRowHandle K2Node_CustomEvent_Muzzle_Settings_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Muzzle_Mesh_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Grip_Settings_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Grip_Mesh_Row_Handle, byte K2Node_CustomEvent_Bolt_State, DataTableRowHandle K2Node_CustomEvent_Row_Handle, bool K2Node_CustomEvent_Value, DataTableRowHandle K2Node_CustomEvent_Mesh, DataTableRowHandle K2Node_CustomEvent_Settings, DataTableRowHandle K2Node_CustomEvent_Muzzle_Settings_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Muzzle_Mesh_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Grip_Settings_Row_Handle, DataTableRowHandle K2Node_CustomEvent_Grip_Mesh_Row_Handle, byte K2Node_CustomEvent_Bolt_State, int K2Node_CustomEvent_Count, bool K2Node_CustomEvent_Laser, bool K2Node_CustomEvent_Laser, const MaterialInstance*[] K2Node_CustomEvent_Body_Map, const MaterialInstance*[] K2Node_CustomEvent_Iron_Sights, const MaterialInstance*[] K2Node_CustomEvent_Magazine, const MaterialInstance*[] K2Node_CustomEvent_Muzzle, const MaterialInstance*[] K2Node_CustomEvent_Scope, const MaterialInstance*[] K2Node_CustomEvent_Laser, const MaterialInstance*[] K2Node_CustomEvent_Grip, DataTableRowHandle K2Node_CustomEvent_Row_Handle_Laser, DataTableRowHandle K2Node_CustomEvent_Row_Handle_FlashLight, SSkin K2Node_CustomEvent_Skin_Set_Names, float ___float_Variable, bool ___bool_Variable, bool K2Node_Event_Fill, int K2Node_Event_Amount, bool ___bool_Variable, FName K2Node_Event_Name, bool K2Node_Event_First_Person, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Get_Sound_From_Data_Table_Is_Valid, SSound CallFunc_Get_Sound_From_Data_Table_Sound_Cue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, float ___float_Variable, bool ___bool_Variable, bool ___bool_Variable, AnimMontage* K2Node_Select_Default, Pawn* K2Node_Event_Interaction_Owner, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int ___int_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetTimelineLength_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, int ___int_Array_Index_Variable, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, DecalComponent* CallFunc_SpawnDecalAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetTimelineLength_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector K2Node_Event_Throw_Impulse, Actor* CallFunc_GetOwner_ReturnValue, Character* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, SceneComponent*[] CallFunc_GetChildrenComponents_Children, int K2Node_CustomEvent_Skin, SceneComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, MaterialInstance* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInterface*[] CallFunc_GetMaterials_ReturnValue);// 0x6d94ba8 0x782e872b60

--------------------------------
Class: SWeaponSettings
	bool BoltAction_15_B2E58F064276EC85D61B3FB74A2020D3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7830638c00
	bool CycledReload_7_F53F019D46185B64AAFD0E9AE400B379;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x7830638b80
	bool CanReloadFull_9_05C456E244697E23BAC3A2AFBE9D6F04;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x7830638b00
	bool AutoReloadOnEmpty_12_1FB3A313421CD5C7AFE55D842ABAC2EE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1] 0x7830638a80
	bool AutoReloadOnEmptyFire_13_1BCAEC23470C70B4AE0ECF87C9E9246F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1] 0x7830638a00
	bool CanActionBoltWhileAiming_3_6B5FD0CA4F6DEF6B76CD348735A44C6E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1] 0x7830638980
	byte FireMode_18_0CF069554E52AB4689ED56B5D6EBAC61;//[Offset: 0x6, Size: 0x1] 0x7830638900
	float FireRate_23_E20161D54B32F0E3261533A5DFFE0129;//[Offset: 0x8, Size: 0x4] 0x7830638880
	float FireRateEmpty_24_359517264BA5660BDFA262B094F9F095;//[Offset: 0xc, Size: 0x4] 0x7830638800
	int BurstCount_29_62E640674FB51046F70BFA9F37713A22;//[Offset: 0x10, Size: 0x4] 0x7830638780
	float BurstTimeBetween_28_60F05C994DD85F2F635A638B02488B62;//[Offset: 0x14, Size: 0x4] 0x7830638700
	float SpreadYaw_36_D8895EEE4F484CD6D63B1BA0A3630F7E;//[Offset: 0x18, Size: 0x4] 0x7830638680
	float SpreadPitch_41_7E870D114598B0F668A75C99CC3884DF;//[Offset: 0x1c, Size: 0x4] 0x7830638600
	float SpreadAimingMultiplier_44_4680AC154E49F04238ABFB941D1D7718;//[Offset: 0x20, Size: 0x4] 0x7830638580
	SRecoil RecoilProperties_90_2DFB4FCA46CBF5267D5A778557FB2E9F;//[Offset: 0x28, Size: 0xc0] 0x7830638500
	CurveFloat* SpreadCurve_84_6869A98644AD5FFCF85A11A75770F78E;//[Offset: 0xe8, Size: 0x8] 0x7830638480
	ForceFeedbackEffect* ForceFeedbackEffect_88_95C8B6F1423B90EDF16114BE5E682AF5;//[Offset: 0xf0, Size: 0x8] 0x783063a500

--------------------------------
Class: SRecoil
	SRecoilStates RecoilStatesViewmodel_7_CA8F668047B1A2677EB3D9BE8D7AA63F;//[Offset: 0x0, Size: 0x60] 0x7830639080
	SRecoilStates RecoilStatesCamera_8_A4B879DE48F156302922BC9809128326;//[Offset: 0x60, Size: 0x60] 0x7830639000

--------------------------------
Class: SRecoilStates
	SRecoilState RecoilStateStanding_6_A4A4433B4BCF7E14D36A8EA7FE3C1C10;//[Offset: 0x0, Size: 0x30] 0x7830639180
	SRecoilState RecoilStateAiming_5_44E9ADE440F4A063DB974F881CA17883;//[Offset: 0x30, Size: 0x30] 0x7830639100

--------------------------------
Class: SRecoilState
	CurveVector* LocationCurve_12_6980D47D4F2BE53E3EE3F88B08BBEA69;//[Offset: 0x0, Size: 0x8] 0x7830639480
	SSpringInterpVector LocationInterpolation_14_078D96424A693704FE9D9A803AC87E05;//[Offset: 0x8, Size: 0xc] 0x7830639400
	float LocationMultiplier_16_98984B454FE58E304F7687A987473FAA;//[Offset: 0x14, Size: 0x4] 0x7830639380
	CurveVector* RotationCurve_13_5932F77749EFC655CD6F48A4D05F01F9;//[Offset: 0x18, Size: 0x8] 0x7830639300
	SSpringInterpVector RotationInterpolation_15_8E6BB6D846BA36DFC7A5A893C4998E96;//[Offset: 0x20, Size: 0xc] 0x7830639280
	float RotationMultiplier_17_E76714064C018A788F921BAF2BF4F65F;//[Offset: 0x2c, Size: 0x4] 0x7830639200

--------------------------------
Class: SSpringInterpVector
	float Stiffness_2_F221239E4E9D1E7922AF0A8EE6E74885;//[Offset: 0x0, Size: 0x4] 0x7830637680
	float CriticalDampingFactor_4_B7096E4F4BB46B8BAAFAA297C9D1879E;//[Offset: 0x4, Size: 0x4] 0x7830637600
	float Mass_6_852D91AF40014622E29904BD89B99612;//[Offset: 0x8, Size: 0x4] 0x7830637580

--------------------------------
Class: DataTableRowHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 0x8] 0x7875a89b00
	FName RowName;//[Offset: 0x8, Size: 0x8] 0x7875a89b80

--------------------------------
Class: SSkin
	<FName,MaterialInstance*> MaterialMapBody_36_498E99F74ADF8EB469E4E6A06B3589FC;//[Offset: 0x0, Size: 0x50] 0x783ef79f40
	<FName,MaterialInstance*> MaterialMapIronsights_49_5E36B2744DCF6B7A3D5236BAA5DF8DC4;//[Offset: 0x50, Size: 0x50] 0x78705e2bc0
	<FName,MaterialInstance*> MaterialMapMagazine_41_ED703B284BCCB745316B73AD90D6D688;//[Offset: 0xa0, Size: 0x50] 0x78705eae40
	<FName,MaterialInstance*> MaterialMapMuzzle_47_E1BB6BAC4ED86D892E17BE8A7D2A0202;//[Offset: 0xf0, Size: 0x50] 0x78705e9e80
	<FName,MaterialInstance*> MaterialMapScope_51_5AAD316941C69A3BDEB444AAC22B0503;//[Offset: 0x140, Size: 0x50] 0x783ef7a300
	<FName,MaterialInstance*> MaterialMapLaser_53_5514D48E4FF69E73234E2190190E576E;//[Offset: 0x190, Size: 0x50] 0x78705ec880
	<FName,MaterialInstance*> MaterialMapGrip_55_A08F25B14A25094AACF171845FBF40D8;//[Offset: 0x1e0, Size: 0x50] 0x783ef7a480
	DataTableRowHandle RowHandleSettingsLasersight_63_21F3AB2D41B81B6AC687B588BACF64E5;//[Offset: 0x230, Size: 0x10] 0x7830639d80
	DataTableRowHandle RowHandleSettingsFlashlight_65_757C5A0C40566FD90BA58A84465A1468;//[Offset: 0x240, Size: 0x10] 0x7830639d00

--------------------------------
Class: SPhysical
	CollisionProfileName CollisionProfileName_7_C01ED5254BF80E629E9C989B301AB081;//[Offset: 0x0, Size: 0x8] 0x783063d480
	bool SimulatePhysics_11_2073693147123794C22FAC9D45595C47;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x783063d400
	bool CastShadow_1_6E890F88430DA623E2044DB891A63CC1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x783063d380
	bool Visible_17_58D72F1B469A46724E87A8B7D91453B9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1] 0x783063d300
	bool HiddenInGame_15_45F32A6944FC771F913FE2B50E040855;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1] 0x783063d280
	bool ReceivesDecals_19_CD8BED8D407A2AE23FEC31AA1E5D5191;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1] 0x783063d200
	bool RenderCustomDepth_21_DA4865DB4F828E47505C0CB808BBD489;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1] 0x783063d180

--------------------------------
Class: BP_LPSP_WEP_Attachment_C.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_LPSP_Casing_C.LPSPCasing.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8] 0x78404c7780
	ProjectileMovementComponent* Projectile Movement;//[Offset: 0x258, Size: 0x8] 0x78404c7700
	void ApplyImpulse(Vector Direction, const Vector Strength);// 0x6d94ba8 0x782edb6c20
	void ReceiveBeginPlay();// 0x6d94ba8 0x782edb6ec0
	void ExecuteUbergraph_BP_LPSP_Casing(int EntryPoint, float CallFunc_GetGameTimeSinceCreation_ReturnValue, bool CallFunc_ShouldUpdateScale_ReturnValue, float CallFunc_GetDestroyDelay_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector K2Node_Event_Direction, const Vector K2Node_Event_Strength, Vector CallFunc_VEase_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue);// 0x6d94ba8 0x782edb6d00

--------------------------------
Class: BP_BaseAI_Pawn_C.BP_LPSP_PCH_Random_C.BP_LPSP_PCH_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1938, Size: 0x8] 0x785010ba80
	AIPerceptionComponent* AIPerception;//[Offset: 0x1940, Size: 0x8] 0x785010ba00
	FName Location;//[Offset: 0x1948, Size: 0x8] 0x785010b980
	FName Enemy;//[Offset: 0x1950, Size: 0x8] 0x785010b900
	float BotWeaponSpread;//[Offset: 0x1958, Size: 0x4] 0x785010b880
	float DamageToDo;//[Offset: 0x195c, Size: 0x4] 0x785010b800
	class BP_BaseWeapon_C[] Weapons;//[Offset: 0x1960, Size: 0x10] 0x7850060420
	DamageType* DamageType;//[Offset: 0x1970, Size: 0x8] 0x785010b780
	Actor* DmgCauser;//[Offset: 0x1978, Size: 0x8] 0x785010b700
	bool SelfInficted ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1980, Size: 0x1] 0x785010b680
	TimerHandle NewVar_1;//[Offset: 0x1988, Size: 0x8] 0x785010b600
	Actor* Actor;//[Offset: 0x1990, Size: 0x8] 0x785010d680
	AIController* Play Con;//[Offset: 0x1998, Size: 0x8] 0x785010d600
	Controller* InstigatorController;//[Offset: 0x19a0, Size: 0x8] 0x785010d580
	float Return Value Y (Pitch);//[Offset: 0x19a8, Size: 0x4] 0x785010d500
	bool HeadShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ac, Size: 0x1] 0x785010d480
	Vector NewVar;//[Offset: 0x19b0, Size: 0xc] 0x785010d400
	void BotShoot();// 0x6d94ba8 0x7830196c20
	void ReceiveBeginPlay();// 0x6d94ba8 0x7830196d00
	void ReceivePossessed(Controller* NewController);// 0x6d94ba8 0x7830196de0
	void Focus(Actor* Actor, AIController* playCon);// 0x6d94ba8 0x7830196ec0
	void 自定义事件                                                                                     ();// 0x6d94ba8 0x7830196fa0
	void AiAim(bool Aim?);// 0x6d94ba8 0x7830197080
	void On_Death(BP_LPSP_PCH_C* Dead_Actor, PlayerController* Instigator, Controller* Instigator Controller, float KillerHP, const DamageType* DmgType);// 0x6d94ba8 0x7830197160
	void Shoot();// 0x6d94ba8 0x7830197240
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x7830197320
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x7830193f80
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x6d94ba8 0x7830194140
	void 自定义事件                                                                                     ();// 0x6d94ba8 0x7830194300
	void ExecuteUbergraph_BP_BaseAI_Pawn(int EntryPoint, bool CallFunc_IsFalling_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, float ___float_Variable, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float ___float_Variable, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte ___byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, Controller* K2Node_Event_NewController, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_StringToText_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, Actor* K2Node_CustomEvent_Actor, AIController* K2Node_CustomEvent_playCon, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Aim_, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_LPSP_PCH_C* K2Node_Event_Dead_Actor, PlayerController* K2Node_Event_Instigator, Controller* K2Node_Event_Instigator_Controller, float K2Node_Event_KillerHP, const DamageType* K2Node_Event_DmgType, Rotator CallFunc_FindLookAtRotation_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, const HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_HitLocation, Vector K2Node_Event_HitNormal, PrimitiveComponent* K2Node_Event_HitComponent, FName K2Node_Event_BoneName, Vector K2Node_Event_ShotFromDirection, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, const HitResult K2Node_Event_HitInfo, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float ___float_Variable, float K2Node_Select_Default, SceneComponent*[] CallFunc_GetChildrenComponents_Children, GameInstance* CallFunc_GetGameInstance_ReturnValue, SceneComponent* CallFunc_Array_Get_Item, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_NotEqualExactly_VectorVector_ReturnValue, HitResult CallFunc_K2_AddActorLocalOffset_SweepHitResult);// 0x6d94ba8 0x78301943e0

--------------------------------
Class: BP_LPSP_PCH_Random_C.BP_LPSP_PCH_C.Character.Pawn.Actor.Object

--------------------------------
Class: BP_LPSP_PCH_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c0, Size: 0x8] 0x7833c86c00
	StaticMeshComponent* Backpack Mesh;//[Offset: 0x4c8, Size: 0x8] 0x7833c86b80
	SceneComponent* Backpack Socket;//[Offset: 0x4d0, Size: 0x8] 0x7833c86b00
	StaticMeshComponent* Goggles;//[Offset: 0x4d8, Size: 0x8] 0x7833c86a80
	StaticMeshComponent* Headset;//[Offset: 0x4e0, Size: 0x8] 0x7833c86a00
	StaticMeshComponent* Helmet;//[Offset: 0x4e8, Size: 0x8] 0x7833c86980
	SceneComponent* Head Socket;//[Offset: 0x4f0, Size: 0x8] 0x7833c86900
	SpringArmComponent* Spring Arm;//[Offset: 0x4f8, Size: 0x8] 0x7833c86880
	WidgetComponent* PlayerTagWidget;//[Offset: 0x500, Size: 0x8] 0x7833c86800
	HealthComponent_C* HealthComponent;//[Offset: 0x508, Size: 0x8] 0x7833c86780
	CameraComponent* Camera;//[Offset: 0x510, Size: 0x8] 0x7833c86700
	SkeletalMeshComponent* Skeletal Mesh Arms;//[Offset: 0x518, Size: 0x8] 0x7833c86680
	SceneComponent* Root Cosmetics;//[Offset: 0x520, Size: 0x8] 0x7833c86600
	SceneComponent* Socket Hand Right;//[Offset: 0x528, Size: 0x8] 0x7833c86580
	SceneComponent* Socket Hand Left;//[Offset: 0x530, Size: 0x8] 0x7833c86500
	StaticMeshComponent* SMesh Headset;//[Offset: 0x538, Size: 0x8] 0x7833c86480
	StaticMeshComponent* SMesh Helmet;//[Offset: 0x540, Size: 0x8] 0x7833c86400
	StaticMeshComponent* SMesh Knife;//[Offset: 0x548, Size: 0x8] 0x7833c86380
	StaticMeshComponent* SMesh Goggles;//[Offset: 0x550, Size: 0x8] 0x7833c88400
	Vector TLine_Viewmodel_Fall_Rotation_D5AEB472435E7E4DC2F913AD8E8626A4;//[Offset: 0x558, Size: 0xc] 0x7833c88380
	Vector TLine_Viewmodel_Fall_Location_D5AEB472435E7E4DC2F913AD8E8626A4;//[Offset: 0x564, Size: 0xc] 0x7833c88300
	byte TLine_Viewmodel_Fall__Direction_D5AEB472435E7E4DC2F913AD8E8626A4;//[Offset: 0x570, Size: 0x1] 0x7833c88280
	TimelineComponent* TLine Viewmodel Fall;//[Offset: 0x578, Size: 0x8] 0x7833c88200
	Vector TLine_Viewmodel_Land_Rotation_53B68F6E4B0F79A938DCF8974BAF4571;//[Offset: 0x580, Size: 0xc] 0x7833c88180
	Vector TLine_Viewmodel_Land_Location_53B68F6E4B0F79A938DCF8974BAF4571;//[Offset: 0x58c, Size: 0xc] 0x7833c88100
	byte TLine_Viewmodel_Land__Direction_53B68F6E4B0F79A938DCF8974BAF4571;//[Offset: 0x598, Size: 0x1] 0x7833c88080
	TimelineComponent* TLine Viewmodel Land;//[Offset: 0x5a0, Size: 0x8] 0x7833c88000
	Vector TLine_Camera_Jump_Rotation_F8C2FC8D41A17784AE0A09AEDB47F7BF;//[Offset: 0x5a8, Size: 0xc] 0x7833c87f80
	byte TLine_Camera_Jump__Direction_F8C2FC8D41A17784AE0A09AEDB47F7BF;//[Offset: 0x5b4, Size: 0x1] 0x7833c87f00
	TimelineComponent* TLine Camera Jump;//[Offset: 0x5b8, Size: 0x8] 0x7833c87e80
	Vector TLine_Camera_Land_Rotation_3643FC2247E80BB722EAE5A6200CF2A5;//[Offset: 0x5c0, Size: 0xc] 0x7833c87e00
	byte TLine_Camera_Land__Direction_3643FC2247E80BB722EAE5A6200CF2A5;//[Offset: 0x5cc, Size: 0x1] 0x7833c87d80
	TimelineComponent* TLine Camera Land;//[Offset: 0x5d0, Size: 0x8] 0x7833c87d00
	Vector TLine_Viewmodel_Jump_Rotation_82FABE554CBB5954E5A2488FF7F22840;//[Offset: 0x5d8, Size: 0xc] 0x7833c87c80
	Vector TLine_Viewmodel_Jump_Location_82FABE554CBB5954E5A2488FF7F22840;//[Offset: 0x5e4, Size: 0xc] 0x7833c87c00
	byte TLine_Viewmodel_Jump__Direction_82FABE554CBB5954E5A2488FF7F22840;//[Offset: 0x5f0, Size: 0x1] 0x7833c87b80
	TimelineComponent* TLine Viewmodel Jump;//[Offset: 0x5f8, Size: 0x8] 0x7833c87b00
	Vector TLine_Breathing_Loop_Value_EDBD1A8846D8C3FB26D146BFD93E220D;//[Offset: 0x600, Size: 0xc] 0x7833c87a80
	byte TLine_Breathing_Loop__Direction_EDBD1A8846D8C3FB26D146BFD93E220D;//[Offset: 0x60c, Size: 0x1] 0x7833c87a00
	TimelineComponent* TLine Breathing Loop;//[Offset: 0x610, Size: 0x8] 0x7833c87980
	float TLine_Reset_Camera_Alpha_DFF6A5DB4D303B9A86E1A09A653DA466;//[Offset: 0x618, Size: 0x4] 0x7833c87900
	byte TLine_Reset_Camera__Direction_DFF6A5DB4D303B9A86E1A09A653DA466;//[Offset: 0x61c, Size: 0x1] 0x7833c87880
	TimelineComponent* TLine Reset Camera;//[Offset: 0x620, Size: 0x8] 0x7833c87800
	bool Begin Play;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1] 0x7833c87780
	bool Holding Aim Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1] 0x7833c87700
	bool Holding Fire Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62a, Size: 0x1] 0x7833c87680
	float Speed Multiplier Horizontal;//[Offset: 0x62c, Size: 0x4] 0x7833c87600
	float Speed Multiplier Backwards;//[Offset: 0x630, Size: 0x4] 0x7833c87580
	float Maximum Running Angle;//[Offset: 0x634, Size: 0x4] 0x7833c87500
	bool Allow Running While Crouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1] 0x7833c87480
	class UserWidget* Widget Class Interface;//[Offset: 0x640, Size: 0x8] 0x7850061460
	bool Show Tutorial Text;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 0x1] 0x7833c87400
	bool Holding Run Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x649, Size: 0x1] 0x7833c89480
	bool Holding Reload Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64a, Size: 0x1] 0x7833c89400
	bool Holding Inspect Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64b, Size: 0x1] 0x7833c89380
	bool Holding Jump Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1] 0x7833c89300
	bool Holding Crouch Key;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1] 0x7833c89280
	Vector Last Position;//[Offset: 0x650, Size: 0xc] 0x7833c89200
	float Move Distance;//[Offset: 0x65c, Size: 0x4] 0x7833c89180
	float Footstep Distance;//[Offset: 0x660, Size: 0x4] 0x7833c89100
	int Shot Count;//[Offset: 0x664, Size: 0x4] 0x7833c89080
	SoundCue* Sound Cue Aiming Start;//[Offset: 0x668, Size: 0x8] 0x7833c89000
	SoundCue* Sound Cue Aiming Stop;//[Offset: 0x670, Size: 0x8] 0x7833c88f80
	SoundCue* Sound Cue Land;//[Offset: 0x678, Size: 0x8] 0x7833c88f00
	SoundCue* Sound Cue Footstep;//[Offset: 0x680, Size: 0x8] 0x7833c88e80
	float Previous Burst Time;//[Offset: 0x688, Size: 0x4] 0x7833c88e00
	float Previous Shot Time;//[Offset: 0x68c, Size: 0x4] 0x7833c88d80
	MaterialInterface* Character Material;//[Offset: 0x690, Size: 0x8] 0x7833c88d00
	bool Show Helmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1] 0x7833c88c80
	bool Show Headset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1] 0x7833c88c00
	bool Show Goggles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1] 0x7833c88b80
	bool Third Person;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69b, Size: 0x1] 0x7833c88b00
	bool Left Hand Mode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1] 0x7833c88a80
	Vector2D Montage Play Rate Range Fire;//[Offset: 0x6a0, Size: 0x8] 0x7833c88a00
	Vector2D Montage Play Rate Range Melee Attack;//[Offset: 0x6a8, Size: 0x8] 0x7833c88980
	Vector2D Montage Play Rate Range Grenade Throw;//[Offset: 0x6b0, Size: 0x8] 0x7833c88900
	bool Unlimited Ammo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1] 0x7833c88880
	float Default Sensitivity Multiplier;//[Offset: 0x6bc, Size: 0x4] 0x7833c88800
	float Control Rotation Interp Speed;//[Offset: 0x6c0, Size: 0x4] 0x7833c88780
	float Free Look Fly Speed;//[Offset: 0x6c4, Size: 0x4] 0x7833c88700
	float Free Look Running Fly Speed;//[Offset: 0x6c8, Size: 0x4] 0x7833c88680
	float Free Look Vertical Fly Speed;//[Offset: 0x6cc, Size: 0x4] 0x7833c88600
	float Free Look Control Rotation Interp Speed;//[Offset: 0x6d0, Size: 0x4] 0x7833c88580
	class BP_LPSP_PROJ_Grenade_C* Grenade Class;//[Offset: 0x6d8, Size: 0x8] 0x78500613c0
	bool Unlimited Grenades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1] 0x7833c88500
	float Animation State;//[Offset: 0x6e4, Size: 0x4] 0x7833c88480
	Rotator Smooth Control Rotation;//[Offset: 0x6e8, Size: 0xc] 0x7833c8a500
	Rotator Proxy Control Rotation;//[Offset: 0x6f4, Size: 0xc] 0x7833c8a480
	Rotator Replicated Control Rotation;//[Offset: 0x700, Size: 0xc] 0x7833c8a400
	float Current Control Rotation Interp Speed;//[Offset: 0x70c, Size: 0x4] 0x7833c8a380
	float Montage Play Rate Melee Attack;//[Offset: 0x710, Size: 0x4] 0x7833c8a300
	float Montage Play Rate Grenade Throw;//[Offset: 0x714, Size: 0x4] 0x7833c8a280
	Vector2D Grenade Throw Force Range;//[Offset: 0x718, Size: 0x8] 0x7833c8a200
	float Montage Play Rate Fire;//[Offset: 0x720, Size: 0x4] 0x7833c8a180
	bool Initial Unholster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1] 0x7833c8a100
	float Initial Unholster Delay;//[Offset: 0x728, Size: 0x4] 0x7833c8a080
	bool Landing Debug Velocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1] 0x7833c8a000
	float Landing Minimum Velocity;//[Offset: 0x730, Size: 0x4] 0x7833c89f80
	class CameraShakeBase* Landing Shake;//[Offset: 0x738, Size: 0x8] 0x7850061320
	CurveFloat* Landing Amplitude Curve;//[Offset: 0x740, Size: 0x8] 0x7833c89f00
	Actor* Actor Weapon;//[Offset: 0x748, Size: 0x8] 0x7833c89e80
	FPS_GameInstance_C* Game Instance;//[Offset: 0x750, Size: 0x8] 0x7833c89e00
	int Field Of View Default;//[Offset: 0x758, Size: 0x4] 0x7833c89d80
	float Field Of View Multiplier Running;//[Offset: 0x75c, Size: 0x4] 0x7833c89d00
	float Sensitivity Multiplier;//[Offset: 0x760, Size: 0x4] 0x7833c89c80
	Vector2D Look;//[Offset: 0x764, Size: 0x8] 0x7833c89c00
	bool Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1] 0x7833c89b80
	Vector2D Movement;//[Offset: 0x770, Size: 0x8] 0x7833c89b00
	bool Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1] 0x7833c89a80
	GameplayTagContainer Ability Tags;//[Offset: 0x780, Size: 0x20] 0x7833c89a00
	AnimMontage* Montage Melee Attack;//[Offset: 0x7a0, Size: 0x8] 0x7833c89980
	AnimMontage* Montage Melee Attack Additive;//[Offset: 0x7a8, Size: 0x8] 0x7833c89900
	byte Holster State;//[Offset: 0x7b0, Size: 0x1] 0x7833c89880
	AnimMontage* Montage Grenade Throw;//[Offset: 0x7b8, Size: 0x8] 0x7833c89800
	AnimMontage* Montage Grenade Throw Additive;//[Offset: 0x7c0, Size: 0x8] 0x7833c89780
	Vector First Person View Offset;//[Offset: 0x7c8, Size: 0xc] 0x7833c89700
	SAbilities Abilities;//[Offset: 0x7d8, Size: 0x680] 0x7833c89680
	SWeaponSettings Settings Weapon;//[Offset: 0xe58, Size: 0xf8] 0x7833c89600
	DataTable* Data Table Animations;//[Offset: 0xf50, Size: 0x8] 0x7833c89580
	bool Randomize Starting Weapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 0x1] 0x7833c89500
	class Actor* Weapon Equipped At Start;//[Offset: 0xf60, Size: 0x8] 0x7850061280
	int Weapon Inventory Capacity;//[Offset: 0xf68, Size: 0x4] 0x7833c8b580
	class Actor[] Weapon Inventory;//[Offset: 0xf70, Size: 0x10] 0x78500611e0
	Actor*[] Weapon Inventory References;//[Offset: 0xf80, Size: 0x10] 0x78500610a0
	Actor*[] Weapon Inventory References Equipped;//[Offset: 0xf90, Size: 0x10] 0x7850061000
	int Weapon Inventory Index;//[Offset: 0xfa0, Size: 0x4] 0x7833c8b400
	UserWidget* Widget Crosshair;//[Offset: 0xfa8, Size: 0x8] 0x7833c8b380
	SScope Weapon Settings Scope;//[Offset: 0xfb0, Size: 0xe0] 0x7833c8b300
	SLaser Weapon Settings Laser;//[Offset: 0x1090, Size: 0x20] 0x7833c8b280
	SMovement Settings Movement;//[Offset: 0x10b0, Size: 0x38] 0x7833c8b200
	HitResult Hit Result Interaction Trace;//[Offset: 0x10e8, Size: 0x88] 0x7833c8b180
	bool Pickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1170, Size: 0x1] 0x7833c8b100
	Actor* Actor Pickup;//[Offset: 0x1178, Size: 0x8] 0x7833c8b080
	Actor* Swap;//[Offset: 0x1180, Size: 0x8] 0x7833c8b000
	bool Can Pick Up Weapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 0x1] 0x7833c8af80
	float Pick Up Range;//[Offset: 0x118c, Size: 0x4] 0x7833c8af00
	SGameAbility Game Ability Interact;//[Offset: 0x1190, Size: 0x80] 0x7833c8ae80
	SGameAbility Game Ability Switch Weapon;//[Offset: 0x1210, Size: 0x80] 0x7833c8ae00
	float Play Rate Weapon Swapping;//[Offset: 0x1290, Size: 0x4] 0x7833c8ad80
	bool Fully Holstered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1294, Size: 0x1] 0x7833c8ad00
	float Play Rate Weapon Swapping Unholster;//[Offset: 0x1298, Size: 0x4] 0x7833c8ac80
	bool Can Drop Weapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129c, Size: 0x1] 0x7833c8ac00
	float Weapon Dropping Force;//[Offset: 0x12a0, Size: 0x4] 0x7833c8ab80
	Vector Weapon Dropping Location Offset;//[Offset: 0x12a4, Size: 0xc] 0x7833c8ab00
	DataTable* Data Table Weapon Sounds;//[Offset: 0x12b0, Size: 0x8] 0x7833c8aa80
	bool Last Is Hidden Magazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b8, Size: 0x1] 0x7833c8aa00
	SoundCue* Sound Cue Pick Up;//[Offset: 0x12c0, Size: 0x8] 0x7833c8a980
	int Switching Index;//[Offset: 0x12c8, Size: 0x4] 0x7833c8a900
	SGameAbility Switching Ability;//[Offset: 0x12d0, Size: 0x80] 0x7833c8a880
	Actor* Actor Weapon Dropped;//[Offset: 0x1350, Size: 0x8] 0x7833c8a800
	AnimMontage* Montage Active Reload;//[Offset: 0x1358, Size: 0x8] 0x7833c8a780
	bool Weapons Loaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1] 0x7833c8a700
	bool Begin Play Weapon Set;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1361, Size: 0x1] 0x7833c8a680
	Vector Recoil Current Rotation;//[Offset: 0x1364, Size: 0xc] 0x7833c8a600
	VectorSpringState Spring State Camera Recoil;//[Offset: 0x1370, Size: 0x18] 0x7833c8a580
	bool Can Lean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 0x1] 0x7833c8c600
	bool Can Corner Peek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1389, Size: 0x1] 0x7833c8c580
	float Corner Peek Division;//[Offset: 0x138c, Size: 0x4] 0x7833c8c500
	Vector Leaning Camera Offset Location;//[Offset: 0x1390, Size: 0xc] 0x7833c8c480
	Vector Leaning Camera Offset Rotation;//[Offset: 0x139c, Size: 0xc] 0x7833c8c400
	float Leaning Target;//[Offset: 0x13a8, Size: 0x4] 0x7833c8c380
	Vector Current Leaning Location;//[Offset: 0x13ac, Size: 0xc] 0x7833c8c300
	Vector Current Leaning Rotation;//[Offset: 0x13b8, Size: 0xc] 0x7833c8c280
	FloatSpringState Spring State Leaning Alpha;//[Offset: 0x13c4, Size: 0x8] 0x7833c8c200
	float Leaning Alpha;//[Offset: 0x13cc, Size: 0x4] 0x7833c8c180
	float Location Camera Up;//[Offset: 0x13d0, Size: 0x4] 0x7833c8c100
	bool Leaning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d4, Size: 0x1] 0x7833c8c080
	float Leaning Previous;//[Offset: 0x13d8, Size: 0x4] 0x7833c8c000
	bool Leaning Switched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13dc, Size: 0x1] 0x7833c8bf80
	bool Lowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13dd, Size: 0x1] 0x7833c8bf00
	bool Lowered Pressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13de, Size: 0x1] 0x7833c8be80
	bool Holding Fire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13df, Size: 0x1] 0x7833c8be00
	<byte,int> Ammunition Pool Starting;//[Offset: 0x13e0, Size: 0x50] 0x783d6a0b80
	<byte,int> Ammunition Pool Current;//[Offset: 0x1430, Size: 0x50] 0x783d6ab980
	<byte,int> Ammunition Pool Max;//[Offset: 0x1480, Size: 0x50] 0x783d6ae200
	byte Weapon Ammunition Type;//[Offset: 0x14d0, Size: 0x1] 0x7833c8ba80
	bool Show Reload Prompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d1, Size: 0x1] 0x7833c8ba00
	bool Camera Unlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d2, Size: 0x1] 0x7833c8b980
	Rotator Camera Unlocked Start Rotation;//[Offset: 0x14d4, Size: 0xc] 0x7833c8b900
	float Alpha Weapon Lag Look;//[Offset: 0x14e0, Size: 0x4] 0x7833c8b880
	bool Can Randomize Weapon Presets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e4, Size: 0x1] 0x7833c8b800
	float Randomization Duration;//[Offset: 0x14e8, Size: 0x4] 0x7833c8b780
	bool Foward Blocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ec, Size: 0x1] 0x7833c8b700
	bool Automatically Leaning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ed, Size: 0x1] 0x7833c8b680
	float Leaning Target Pressed;//[Offset: 0x14f0, Size: 0x4] 0x7833c8b600
	bool Leaning Pressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f4, Size: 0x1] 0x7833c8d680
	float Avoidance Distance;//[Offset: 0x14f8, Size: 0x4] 0x7833c8d600
	Vector Breathing Loop;//[Offset: 0x14fc, Size: 0xc] 0x7833c8d580
	Vector Breathing Loop Aiming;//[Offset: 0x1508, Size: 0xc] 0x7833c8d500
	float Explicit Time;//[Offset: 0x1514, Size: 0x4] 0x7833c8d480
	SFreeLook Settings Camera Unlocking;//[Offset: 0x1518, Size: 0x28] 0x7833c8d400
	Vector Recoil Target Rotation;//[Offset: 0x1540, Size: 0xc] 0x7833c8d380
	InputMappingContext* Mapping Context;//[Offset: 0x1550, Size: 0x8] 0x7833c8d300
	SBreathing Settings Camera Breathing;//[Offset: 0x1558, Size: 0x48] 0x7833c8d280
	SRecoilState Current Camera Recoil State;//[Offset: 0x15a0, Size: 0x30] 0x7833c8d200
	int Running Out Of Ammo Division;//[Offset: 0x15d0, Size: 0x4] 0x7833c8d180
	float Current Recoil Pitch;//[Offset: 0x15d4, Size: 0x4] 0x7833c8d100
	float Return Recoil Pitch;//[Offset: 0x15d8, Size: 0x4] 0x7833c8d080
	SCurveVector Viewmodel Jump Location Curve;//[Offset: 0x15e0, Size: 0x10] 0x7833c8d000
	SSpringInterpVector Viewmodel Jump Location Spring;//[Offset: 0x15f0, Size: 0xc] 0x7833c8cf80
	SCurveVector Viewmodel Jump Rotation Curve;//[Offset: 0x1600, Size: 0x10] 0x7833c8cf00
	VectorSpringState Viewmodel Jumping Location Spring State;//[Offset: 0x1610, Size: 0x18] 0x7833c8ce80
	VectorSpringState Viewmodel Jumping Rotation Spring State;//[Offset: 0x1628, Size: 0x18] 0x7833c8ce00
	SSpringInterpVector Viewmodel Jump Rotation Spring;//[Offset: 0x1640, Size: 0xc] 0x7833c8cd80
	SCurveVector Viewmodel Land Location Curve;//[Offset: 0x1650, Size: 0x10] 0x7833c8cd00
	SSpringInterpVector Viewmodel Land Location Spring;//[Offset: 0x1660, Size: 0xc] 0x7833c8cc80
	SCurveVector Viewmodel Land Rotation Curve;//[Offset: 0x1670, Size: 0x10] 0x7833c8cc00
	VectorSpringState Viewmodel Landing Location Spring State;//[Offset: 0x1680, Size: 0x18] 0x7833c8cb80
	VectorSpringState Viewmodel Landing Rotation Spring State;//[Offset: 0x1698, Size: 0x18] 0x7833c8cb00
	Vector Viewmodel Fall Location;//[Offset: 0x16b0, Size: 0xc] 0x7833c8ca80
	VectorSpringState Viewmodel Fall Location Spring State;//[Offset: 0x16bc, Size: 0x18] 0x7833c8ca00
	VectorSpringState Viewmodel Fall Rotation Spring State;//[Offset: 0x16d4, Size: 0x18] 0x7833c8c980
	SSpringInterpVector Viewmodel Land Rotation Spring;//[Offset: 0x16ec, Size: 0xc] 0x7833c8c900
	SCurveVector Viewmodel Fall Location Curve;//[Offset: 0x16f8, Size: 0x10] 0x7833c8c880
	SSpringInterpVector Viewmodel Fall Location Spring;//[Offset: 0x1708, Size: 0xc] 0x7833c8c800
	SCurveVector Viewmodel Fall Rotation Curve;//[Offset: 0x1718, Size: 0x10] 0x7833c8c780
	Vector Viewmodel Fall Location Target;//[Offset: 0x1728, Size: 0xc] 0x7833c8c700
	Vector Viewmodel Fall Rotation Target;//[Offset: 0x1734, Size: 0xc] 0x7833c8c680
	Vector Jumping Rotation Camera;//[Offset: 0x1740, Size: 0xc] 0x7833c8e700
	Vector Landing Rotation Camera;//[Offset: 0x174c, Size: 0xc] 0x7833c8e680
	VectorSpringState Camera Jump Rotation Spring State;//[Offset: 0x1758, Size: 0x18] 0x7833c8e600
	SCurveVector Camera Jump Rotation Curve;//[Offset: 0x1770, Size: 0x10] 0x7833c8e580
	SSpringInterpVector Camera Jump Spring;//[Offset: 0x1780, Size: 0xc] 0x7833c8e500
	VectorSpringState Camera Landing Rotation Spring State;//[Offset: 0x178c, Size: 0x18] 0x7833c8e480
	SCurveVector Camera Land Rotation Curve;//[Offset: 0x17a8, Size: 0x10] 0x7833c8e400
	Vector Jumping Rotation Camera Target;//[Offset: 0x17b8, Size: 0xc] 0x7833c8e380
	Vector Landing Rotation Camera Target;//[Offset: 0x17c4, Size: 0xc] 0x7833c8e300
	Vector Viewmodel Jumping Location Target;//[Offset: 0x17d0, Size: 0xc] 0x7833c8e280
	Vector Viewmodel Jumping Rotation Target;//[Offset: 0x17dc, Size: 0xc] 0x7833c8e200
	Vector Viewmodel Landing Location Target;//[Offset: 0x17e8, Size: 0xc] 0x7833c8e180
	Vector Viewmodel Landing Rotation Target;//[Offset: 0x17f4, Size: 0xc] 0x7833c8e100
	float Landing Velocity Multiplier;//[Offset: 0x1800, Size: 0x4] 0x7833c8e080
	SSpringInterpVector Camera Land Spring;//[Offset: 0x1804, Size: 0xc] 0x7833c8e000
	SSpringInterpVector Viewmodel Fall Rotation Spring;//[Offset: 0x1810, Size: 0xc] 0x7833c8df80
	SViemodelAnimatedOffsets Viewmodel Animated Offsets;//[Offset: 0x181c, Size: 0x48] 0x7833c8df00
	bool Inspecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1864, Size: 0x1] 0x7833c8de80
	bool Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1865, Size: 0x1] 0x7833c8de00
	bool CapturingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1866, Size: 0x1] 0x7833c8dd80
	byte PointId;//[Offset: 0x1867, Size: 0x1] 0x7833c8dd00
	bool bAimingAtAlly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1868, Size: 0x1] 0x7833c8dc80
	bool AimingAtEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1869, Size: 0x1] 0x7833c8dc00
	FText PlayerName;//[Offset: 0x1870, Size: 0x18] 0x7833c8db80
	bool Dead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1888, Size: 0x1] 0x7833c8db00
	bool bCarringFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1889, Size: 0x1] 0x7833c8da80
	BP_BaseFlag_C* FlagRef;//[Offset: 0x1890, Size: 0x8] 0x7833c8da00
	BaseCharacterPC_C* ControllerRef;//[Offset: 0x1898, Size: 0x8] 0x7833c8d980
	float On Hit Damage;//[Offset: 0x18a0, Size: 0x4] 0x7833c8d900
	DamageType* On Hit Damage Type;//[Offset: 0x18a8, Size: 0x8] 0x7833c8d880
	BaseCharacterPC_C* Any Damage Instigator;//[Offset: 0x18b0, Size: 0x8] 0x7833c8d800
	Actor* Damage Causer;//[Offset: 0x18b8, Size: 0x8] 0x7833c8d780
	Controller* InstigatorController;//[Offset: 0x18c0, Size: 0x8] 0x7833c8d700
	bool bSelfInficted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 0x1] 0x7833c8f780
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x18d0, Size: 0x8] 0x7833c8f700
	float CurX;//[Offset: 0x18d8, Size: 0x4] 0x7833c8f680
	float CurY;//[Offset: 0x18dc, Size: 0x4] 0x7833c8f600
	<byte,Vector> FingerLocation;//[Offset: 0x18e0, Size: 0x50] 0x783d6a7480
	int AIWeaponSelect;//[Offset: 0x1930, Size: 0x4] 0x7833c8f480
	void Get Trace Parameters(out Vector Location, out Vector Direction, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue);// 0x6d94ba8 0x78301913c0
	void Is Using Gamepad(out bool Value, PlayerController* CallFunc_GetPlayerController_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Using_Gamepad_Value);// 0x6d94ba8 0x78301914a0
	void Can Trace Interaction(out bool Value, bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x7830191580
	void Get Interact Vectors(out Vector Location, out Vector Forward, Vector CallFunc_Get_Forward_Rotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x6d94ba8 0x7830191660
	void Get Clamps(out bool Use Default, out SClamps Value, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector2D CallFunc_Add_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DFloat_ReturnValue, SClamps K2Node_MakeStruct_SClamps);// 0x6d94ba8 0x7830191740
	enum Should Show Crosshair(bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x7830191820
	void Get Viewmodel Animated Offsets(out SViemodelAnimatedOffsets Offsets);// 0x6d94ba8 0x7830191900
	void Get Holster State(out byte State);// 0x6d94ba8 0x78301919e0
	void Get Recoil State Weapon(out SRecoilState Value, bool ___bool_Variable, SRecoilState K2Node_Select_Default);// 0x6d94ba8 0x7830191ac0
	void Get Recoil State Camera(out SRecoilState Value, bool ___bool_Variable, SRecoilState K2Node_Select_Default);// 0x6d94ba8 0x7830191ba0
	void Get Breathing Loop Aiming(out Vector Value);// 0x6d94ba8 0x7830191c80
	void Get Breathing Loop(out Vector Value);// 0x6d94ba8 0x782e7ee780
	void Get Explicit Time Breathing(out float Value);// 0x6d94ba8 0x782e7ee860
	void Is Lowered(out bool Value);// 0x6d94ba8 0x782e7ee940
	void Has Leaning Switched(out bool Value);// 0x6d94ba8 0x782e7eea20
	void Is Leaning(out bool Value);// 0x6d94ba8 0x782e7eeb00
	void Get Leaning Alpha(out float Value);// 0x6d94ba8 0x782e7eebe0
	void Get Ammunition Prompt(out FText Text, out SlateColor Color, bool CallFunc_Is_Out_Of_Weapon_Ammunition_Type_Is_Out, bool CallFunc_Is_Low_On_Ammo_Is_Low, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x782e7eecc0
	void Get Component Interactor(out BPAC_LPSP_Interactor_C* Component);// 0x6d94ba8 0x782e7eeda0
	void Get Facing Rotation(out Rotator Value, Rotator CallFunc_Get_Added_Rotations_Value, Rotator CallFunc_Add_Rotators_Value);// 0x6d94ba8 0x782e7eee80
	void Get Alpha Weapon Lag Look(out float Value);// 0x6d94ba8 0x782e7eef60
	void Should Show Ammunition Prompt(out bool Show, int Ammo Current, int Ammo Total, bool CallFunc_Is_Out_Of_Weapon_Ammunition_Type_Is_Out, bool CallFunc_Is_Low_On_Ammo_Is_Low, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_HasTag_ReturnValue);// 0x6d94ba8 0x782e7ef040
	void Get Show Reload Prompt(out bool Value, bool CallFunc_HasTag_ReturnValue);// 0x6d94ba8 0x782e7ef120
	void Set Ammunition Pool Value(byte Ammo Type, int Value, int[] CallFunc_Map_Values_Values, byte[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Clamp_ReturnValue);// 0x6d94ba8 0x782e7ef200
	void Get Ammunition Pool Value(byte Ammo Type, out int Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x6d94ba8 0x782e7ef2e0
	void On Ammunition Set(bool Fill, int Amount, int Ammunition Current, int Ammunition Needed, int Ammunition Total, int Ammunition Left, int Array Index, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Current_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int[] CallFunc_Map_Values_Values, int CallFunc_Array_Get_Item, byte[] CallFunc_Map_Keys_Keys, byte CallFunc_Array_Get_Item, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Get_Ammunition_Total_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782e7ef3c0
	int Get Shot Count();// 0x6d94ba8 0x782e7ef4a0
	void Get Camera Component(out CameraComponent* Camera Component, out bool Is Valid, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ef580
	bool Is Camera Right Shoulder();// 0x6d94ba8 0x782e7ef660
	void On Set Knife Visibility(bool Visible);// 0x6d94ba8 0x782e7ef740
	void On Set Ability Tags(GameplayTagContainer Value);// 0x6d94ba8 0x782e7ef820
	bool Has Highlighted Weapon In Inventory(bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, class Actor CallFunc_GetObjectClass_ReturnValue, int CallFunc_Array_Find_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue);// 0x6d94ba8 0x782e7ef900
	bool Has Inventory Space(int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e7ef9e0
	Actor* Get Actor Pickup(bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x6d94ba8 0x782e7efac0
	Actor* Get Actor Weapon();// 0x6d94ba8 0x782e7efba0
	GameplayTagContainer Get Ability Tags();// 0x6d94ba8 0x782e7efc80
	int Get Grenades Current(int CallFunc_Get_Ammunition_Pool_Value_Value);// 0x6d94ba8 0x782e7efd60
	bool Is Tutorial Text Visible();// 0x6d94ba8 0x782e7efe40
	Vector2D Get Input Movement();// 0x6d94ba8 0x782e7eff20
	Vector2D Get Input Look();// 0x6d94ba8 0x782e7ecaa0
	float Get Aim Speed Multiplier();// 0x6d94ba8 0x782e7ecb80
	float Get Aim Duration(float CallFunc_Get_Aim_Speed_Multiplier_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7ecc60
	bool Is Running();// 0x6d94ba8 0x782e7ecd40
	bool Is Aiming();// 0x6d94ba8 0x782e7ece20
	float Get Sensitivity Multiplier();// 0x6d94ba8 0x782e7ecf00
	float Get Field Of View Running(int CallFunc_Get_Field_Of_View_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue);// 0x6d94ba8 0x782e7ecfe0
	int Get Field Of View();// 0x6d94ba8 0x782e7ed0c0
	void GetKillerInfo(Controller* Instigator, out FText Name, out byte Class, Controller* NewLocalVar, bool ___bool_Variable, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText K2Node_Select_Default);// 0x6d94ba8 0x782e7ed1a0
	void OnDead(BP_LPSP_PCH_C* DeadActor, PlayerController* InstigatorPC, Controller* InstigatorC, const DamageType* DmgType, float KillerHP, DamageType* DamageType, Controller* ControllerInstigator, PlayerController* IntigatorPC, BP_LPSP_PCH_C* DeadPawn, Pawn* CallFunc_K2_GetPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetKillerInfo_Name, byte CallFunc_GetKillerInfo_Class);// 0x6d94ba8 0x782e7ed280
	void Spectate(Pawn* Pawn, Controller* Controller, Controller* ControllerLocal, Pawn* PawnLocal, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SpectatorBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x782e7ed360
	void OnRep_Dead();// 0x6d94ba8 0x782e7ed440
	void UpdateHealth(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ed520
	void TakeDamage(Controller* ControllerInstigator, float Damge, out bool bDead, float DmatoDo, Controller* LocalController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x782e7ed600
	void DirectionalDamageIndicator(Actor* Actor, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ed6e0
	void On DamageTaken(float OnHitDamage, const DamageType* OnHitDamageType, Controller* AnyDamageInstigator, Actor* DamageCauser, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TakeDamage_bDead, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x782e7ed7c0
	void Drop Flag(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue);// 0x6d94ba8 0x782e7ed8a0
	void Update Game State(BP_LPSP_PCH_C* NewParam, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_TDM_GS_C* K2Node_DynamicCast_AsFPS_TDM_GS, bool K2Node_DynamicCast_bSuccess, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e7ed980
	void Check Target(BP_LPSP_PCH_C* OtherPawn, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, const Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e7eda60
	void Handle Playing Falling Timeline(bool CallFunc_IsPlaying_ReturnValue, bool CallFunc_IsFalling_ReturnValue);// 0x6d94ba8 0x782e7edb40
	void Reset Recoil(Rotator CallFunc_GetControlRotation_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Rotator CallFunc_Add_Rotators_Value);// 0x6d94ba8 0x782e7edc20
	void Interpolate Viewmodel Curves(float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue);// 0x6d94ba8 0x782e7edd00
	void Interpolate Camera Jumping Curves(float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue);// 0x6d94ba8 0x782e7edde0
	void Set Up Mapping Context(bool CallFunc_IsLocallyControlled_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, EnhancedInputLocalPlayerSubsystem* CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue, interface classNone CallFunc_AddMappingContext_self_CastInput);// 0x6d94ba8 0x782e7edec0
	void Set Up All Timeline Curves();// 0x6d94ba8 0x782e7edfa0
	void Equip Starting Weapon(DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_HasAuthority_ReturnValue);// 0x6d94ba8 0x782e7ee080
	void Try Set Field Of View Alpha(const float Alpha, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x6d94ba8 0x782e7ee160
	void OnRep_Weapon Inventory References Equipped(DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle);// 0x6d94ba8 0x782e7ee240
	void Is Low On Ammo(out bool Is Low, int Ammo Current, int Ammo Total, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Current_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Total_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e7ee320
	void OnRep_Weapon Inventory References(int Amount Of Loaded Weapons, bool Is Valid, LevelSequenceActor* CallFunc_CreateLevelSequencePlayer_OutActor, LevelSequencePlayer* CallFunc_CreateLevelSequencePlayer_ReturnValue);// 0x6d94ba8 0x782e7ee400
	void Is Out Of Weapon Ammunition Type(out bool Is Out, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Out_Of_Ammunition_ReturnValue, int CallFunc_Get_Ammunition_Pool_Value_Value, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782e7ee4e0
	void Interpolate Camera Recoil(Vector CallFunc_MakeVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, SRecoilState CallFunc_Get_Recoil_State_Camera_Value, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x6d94ba8 0x782e7ee5c0
	void Update Show Reload Prompt(interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Pool_Value_Value, bool CallFunc_Is_Out_Of_Ammunition_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e7ee6a0
	void Update Movement Values(SSpeed Speed, SMovement Movement);// 0x6d94ba8 0x782e7eadc0
	void Trace For Leaning Side(float Multiplier, out float Sign, out float Minimum Distance, out int Minimum Index, int Current Index, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, bool ___bool_Variable, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int ___int_Variable, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_FCeil_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Vector CallFunc_TransformDirection_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Get_Avoidance_Trace_Inputs_Start, Vector CallFunc_Get_Avoidance_Trace_Inputs_End, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7eaea0
	void Get Avoidance Trace Inputs(Vector Offset, out Vector Start, out Vector End, Vector CallFunc_Get_Forward_Rotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x6d94ba8 0x782e7eaf80
	void Update Leaning Values(Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_FInterpTo_ReturnValue);// 0x6d94ba8 0x782e7eb060
	void Trace For Forward Blocked(Vector CallFunc_Get_Avoidance_Trace_Inputs_Start, Vector CallFunc_Get_Avoidance_Trace_Inputs_End, const Actor*[] ___object_Variable, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);// 0x6d94ba8 0x782e7eb140
	void Trace For Lowered State(const Actor*[] ___object_Variable, bool CallFunc_Can_Lower_Weapon_Value, Vector CallFunc_Get_Forward_Rotation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);// 0x6d94ba8 0x782e7eb220
	void Get Added Rotations(out Rotator Value, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out);// 0x6d94ba8 0x782e7eb300
	void Is Moving(out bool Value, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7eb3e0
	void Is Holding Fire(out bool Value, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782e7eb4c0
	void Check Automatic Leaning(int Current Index, float Sign, int Minimum Index, float Minimum Distance, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7eb5a0
	void Can Lower Weapon(out bool Value, bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x782e7eb680
	Vector Get Forward Rotation(bool ___bool_Variable, Rotator K2Node_Select_Default, Vector CallFunc_GetForwardVector_ReturnValue);// 0x6d94ba8 0x782e7eb760
	void Has Any Ammunition Of Weapon Type(out bool Value, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e7eb840
	void Get Movement Speed(out SSpeed Value, float Distance, float Max Speed, bool ___bool_Variable, bool CallFunc_Is_Holding_Fire_Value, bool ___bool_Variable, bool CallFunc_Is_Holding_Fire_Value, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, SSpeed K2Node_MakeStruct_SSpeed, SSpeed K2Node_Select_Default, SSpeed K2Node_Select_Default);// 0x6d94ba8 0x782e7eb920
	bool Can Switch Weapon(int Index, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x782e7eba00
	void Spawn Throw Weapon(class Actor Class, Vector SpawnTransform_Location, Rotator SpawnTransform_Rotation, out const SWeaponAllSettings SWeaponAllSettings, out MaterialInstance*[] Body, out MaterialInstance*[] Iron Sights, out MaterialInstance*[] Magazine, out MaterialInstance*[] Muzzle, out MaterialInstance*[] Scope, out MaterialInstance*[] Laser, out MaterialInstance*[] Grip, DataTableRowHandle Row Handle Laser Light, DataTableRowHandle Row Handle Flash light, SSkin Weapon Skin, SSkin CallFunc_Material_Arrays_To_SSkin_SSkin, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, SWeaponAllSettings K2Node_MakeStruct_SWeaponAllSettings, CameraComponent* CallFunc_Get_Camera_Component_Camera_Component, bool CallFunc_Get_Camera_Component_Is_Valid, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x6d94ba8 0x782e7ebae0
	int Get Next Weapon Index(int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x782e7ebbc0
	void Spawn Thrown Weapon From Server(SWeaponAllSettings Weapon Settings, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Body, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Iron_Sights, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Magzine, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Muzzle, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Scope, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Laser, MaterialInstance*[] CallFunc_Break_Skin_To_Arrays_Grip, DataTableRowHandle CallFunc_Break_Skin_To_Arrays_Row_Handle_Laser_Light, DataTableRowHandle CallFunc_Break_Skin_To_Arrays_Row_Handle_Flash_Light, SWeaponAllSettings CallFunc_Get_All_Weapon_Settings_Settings, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_RandomRotator_ReturnValue, class Actor CallFunc_GetObjectClass_ReturnValue);// 0x6d94ba8 0x782e7ebca0
	bool Is Allowed To Interact(bool CallFunc_Can_Start_Game_Ability_Value, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, interface classNone K2Node_DynamicCast_AsInterface_Interactable, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Can_Interact_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x6d94ba8 0x782e7ebd80
	Actor* Get Inventory Version Of Highlighted Weapon(bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, class Actor CallFunc_GetObjectClass_ReturnValue, int CallFunc_Array_Find_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ebe60
	FName Get Name Montage Unholster(bool ___bool_Variable, FName ___name_Variable, FName ___name_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAnyMontagePlaying_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_Select_Default);// 0x6d94ba8 0x782e7ebf40
	FName Get Name Montage Holster(bool ___bool_Variable, FName ___name_Variable, FName ___name_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsAnyMontagePlaying_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_Select_Default);// 0x6d94ba8 0x782e7ec020
	void Try Change Weapon Settings Physical(DataTableRowHandle Row Handle, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ec100
	void Spawn All Weapons(Actor* Actor Current, int ___int_Array_Index_Variable, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e7ec1e0
	void Create Widget Crosshair(bool CallFunc_IsPlayerControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, class UserWidget CallFunc_Get_Widget_Class_Crosshair_ReturnValue, UserWidget* CallFunc_Create_ReturnValue);// 0x6d94ba8 0x782e7ec2c0
	void Update Current Weapon(BP_LPSP_WEP_C* K2Node_DynamicCast_AsBP_LPSP_WEP, bool K2Node_DynamicCast_bSuccess, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class BP_LPSP_WEP_C K2Node_ClassDynamicCast_AsBP_LPSP_WEP, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_WEP_C* CallFunc_FinishSpawningActor_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SMovement CallFunc_Get_Character_Settings_Movement_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable, DataTable* CallFunc_Get_Character_Animation_Montages_ReturnValue, int K2Node_Select_Default, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SWeaponSettings CallFunc_Get_Settings_Weapon_ReturnValue, int CallFunc_SelectInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SAbilities CallFunc_Get_Character_Abilities_ReturnValue);// 0x6d94ba8 0x782e7ec3a0
	Vector Get View Location(float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x6d94ba8 0x782e7ec480
	void Game Ability Stop(SGameAbility Ability, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* CallFunc_GetCurrentActiveMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782e7ec560
	bool Can Update Weapon Laser(bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e7ec640
	void Add Widgets To Viewport(bool CallFunc_IsLocallyControlled_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, UserWidget* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7ec720
	void Disable Player Input();// 0x6d94ba8 0x782e7ec800
	void Aim(bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue);// 0x6d94ba8 0x782e7ec8e0
	void Disable Weapon Laser(bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e7ec9c0
	void Try Toggling Weapon Laser(bool CallFunc_Can_Update_Weapon_Laser_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e7e90e0
	void Try Enabling Weapon Laser(bool CallFunc_Can_Update_Weapon_Laser_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e7e91c0
	void Get Animation Values(AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_GetCurveValue_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e7e92a0
	void Try Stop Inspect(bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7e9380
	void Stop Inspect Montage(float InBlendOutTime, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue);// 0x6d94ba8 0x782e7e9460
	void Try Launch Grenade(float ForceMultiplier, bool bCinematic, int Grenades Left, int CallFunc_Get_Ammunition_Pool_Value_Value, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Rotator CallFunc_Add_Rotators_Value, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Transform CallFunc_MakeTransform_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_PROJ_Grenade_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x782e7e9540
	bool Is Weapon Ammunition Empty(bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Out_Of_Ammunition_ReturnValue);// 0x6d94ba8 0x782e7e9620
	bool Is Weapon Ammunition Full(bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Full_Of_Ammunition_ReturnValue);// 0x6d94ba8 0x782e7e9700
	bool Should Be Running(Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Can_Start_Game_Ability_Value, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7e97e0
	bool Has Rate Passed(float Since, float Rate, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Has_Time_Passed_ReturnValue);// 0x6d94ba8 0x782e7e98c0
	bool Has Time Passed(float Since, float Duration, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7e99a0
	bool Can Fire(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, bool CallFunc_IsFalling_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Can_Start_Game_Ability_Value, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x782e7e9a80
	bool Should Be Aiming(BP_LPSP_PCH_C* NewParam, PlayerController* NewParam1, AIController* NewParam2, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x782e7e9b60
	void Play Footsteps(Vector CallFunc_K2_GetActorLocation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Is_Moving_Value, bool CallFunc_IsFalling_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e7e9c40
	void UserConstructionScript(Vector CallFunc_Get_View_Location_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Vector CallFunc_GetSocketLocation_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_Conv_BoolToFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x6d94ba8 0x782e7e9d20
	void TLine Breathing Loop__FinishedFunc();// 0x6d94ba8 0x782e7e9e00
	void TLine Breathing Loop__UpdateFunc();// 0x6d94ba8 0x782e7e9ee0
	void TLine Viewmodel Jump__FinishedFunc();// 0x6d94ba8 0x782e7e9fc0
	void TLine Viewmodel Jump__UpdateFunc();// 0x6d94ba8 0x782e7ea0a0
	void TLine Viewmodel Land__FinishedFunc();// 0x6d94ba8 0x782e7ea180
	void TLine Viewmodel Land__UpdateFunc();// 0x6d94ba8 0x782e7ea260
	void TLine Viewmodel Fall__FinishedFunc();// 0x6d94ba8 0x782e7ea340
	void TLine Viewmodel Fall__UpdateFunc();// 0x6d94ba8 0x782e7ea420
	void TLine Camera Jump__FinishedFunc();// 0x6d94ba8 0x782e7ea500
	void TLine Camera Jump__UpdateFunc();// 0x6d94ba8 0x782e7ea5e0
	void TLine Camera Land__FinishedFunc();// 0x6d94ba8 0x782e7ea6c0
	void TLine Camera Land__UpdateFunc();// 0x6d94ba8 0x782e7ea7a0
	void TLine Reset Camera__FinishedFunc();// 0x6d94ba8 0x782e7ea880
	void TLine Reset Camera__UpdateFunc();// 0x6d94ba8 0x782e7ea960
	void OnNotifyEnd_88C49EE447785396546556A5B2C77A4F(FName NotifyName);// 0x6d94ba8 0x782e7eaa40
	void OnNotifyBegin_88C49EE447785396546556A5B2C77A4F(FName NotifyName);// 0x6d94ba8 0x782e7eab20
	void OnInterrupted_88C49EE447785396546556A5B2C77A4F(FName NotifyName);// 0x6d94ba8 0x782e7eac00
	void OnBlendOut_88C49EE447785396546556A5B2C77A4F(FName NotifyName);// 0x6d94ba8 0x782e7eace0
	void OnCompleted_88C49EE447785396546556A5B2C77A4F(FName NotifyName);// 0x6d94ba8 0x782e7e7400
	void OnNotifyEnd_88C49EE447785396546556A52FE36471(FName NotifyName);// 0x6d94ba8 0x782e7e74e0
	void OnNotifyBegin_88C49EE447785396546556A52FE36471(FName NotifyName);// 0x6d94ba8 0x782e7e75c0
	void OnInterrupted_88C49EE447785396546556A52FE36471(FName NotifyName);// 0x6d94ba8 0x782e7e76a0
	void OnBlendOut_88C49EE447785396546556A52FE36471(FName NotifyName);// 0x6d94ba8 0x782e7e7780
	void OnCompleted_88C49EE447785396546556A52FE36471(FName NotifyName);// 0x6d94ba8 0x782e7e7860
	void OnNotifyEnd_88C49EE447785396546556A536A2B464(FName NotifyName);// 0x6d94ba8 0x782e7e7940
	void OnNotifyBegin_88C49EE447785396546556A536A2B464(FName NotifyName);// 0x6d94ba8 0x782e7e7a20
	void OnInterrupted_88C49EE447785396546556A536A2B464(FName NotifyName);// 0x6d94ba8 0x782e7e7b00
	void OnBlendOut_88C49EE447785396546556A536A2B464(FName NotifyName);// 0x6d94ba8 0x782e7e7be0
	void OnCompleted_88C49EE447785396546556A536A2B464(FName NotifyName);// 0x6d94ba8 0x782e7e7cc0
	void OnNotifyEnd_88C49EE447785396546556A5AD9D42A5(FName NotifyName);// 0x6d94ba8 0x782e7e7da0
	void OnNotifyBegin_88C49EE447785396546556A5AD9D42A5(FName NotifyName);// 0x6d94ba8 0x782e7e7e80
	void OnInterrupted_88C49EE447785396546556A5AD9D42A5(FName NotifyName);// 0x6d94ba8 0x782e7e7f60
	void OnBlendOut_88C49EE447785396546556A5AD9D42A5(FName NotifyName);// 0x6d94ba8 0x782e7e8040
	void OnCompleted_88C49EE447785396546556A5AD9D42A5(FName NotifyName);// 0x6d94ba8 0x782e7e8120
	void OnNotifyEnd_88C49EE447785396546556A5C6FFF3DA(FName NotifyName);// 0x6d94ba8 0x782e7e8200
	void OnNotifyBegin_88C49EE447785396546556A5C6FFF3DA(FName NotifyName);// 0x6d94ba8 0x782e7e82e0
	void OnInterrupted_88C49EE447785396546556A5C6FFF3DA(FName NotifyName);// 0x6d94ba8 0x782e7e83c0
	void OnBlendOut_88C49EE447785396546556A5C6FFF3DA(FName NotifyName);// 0x6d94ba8 0x782e7e84a0
	void OnCompleted_88C49EE447785396546556A5C6FFF3DA(FName NotifyName);// 0x6d94ba8 0x782e7e8580
	void OnNotifyEnd_677838E64EB7C691E9924D98788DFDC7(FName NotifyName);// 0x6d94ba8 0x782e7e8660
	void OnNotifyBegin_677838E64EB7C691E9924D98788DFDC7(FName NotifyName);// 0x6d94ba8 0x782e7e8740
	void OnInterrupted_677838E64EB7C691E9924D98788DFDC7(FName NotifyName);// 0x6d94ba8 0x782e7e8820
	void OnBlendOut_677838E64EB7C691E9924D98788DFDC7(FName NotifyName);// 0x6d94ba8 0x782e7e8900
	void OnCompleted_677838E64EB7C691E9924D98788DFDC7(FName NotifyName);// 0x6d94ba8 0x782e7e89e0
	void OnNotifyEnd_88C49EE447785396546556A5BB446847(FName NotifyName);// 0x6d94ba8 0x782e7e8ac0
	void OnNotifyBegin_88C49EE447785396546556A5BB446847(FName NotifyName);// 0x6d94ba8 0x782e7e8ba0
	void OnInterrupted_88C49EE447785396546556A5BB446847(FName NotifyName);// 0x6d94ba8 0x782e7e8c80
	void OnBlendOut_88C49EE447785396546556A5BB446847(FName NotifyName);// 0x6d94ba8 0x782e7e8d60
	void OnCompleted_88C49EE447785396546556A5BB446847(FName NotifyName);// 0x6d94ba8 0x782e7e8e40
	void OnNotifyEnd_88C49EE447785396546556A5B6D402A2(FName NotifyName);// 0x6d94ba8 0x782e7e8f20
	void OnNotifyBegin_88C49EE447785396546556A5B6D402A2(FName NotifyName);// 0x6d94ba8 0x782e7e9000
	void OnInterrupted_88C49EE447785396546556A5B6D402A2(FName NotifyName);// 0x6d94ba8 0x782e7e5720
	void OnBlendOut_88C49EE447785396546556A5B6D402A2(FName NotifyName);// 0x6d94ba8 0x782e7e5800
	void OnCompleted_88C49EE447785396546556A5B6D402A2(FName NotifyName);// 0x6d94ba8 0x782e7e58e0
	void InpActEvt_IA_LPSP_Lean_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e59c0
	void InpActEvt_IA_LPSP_Lean_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e5aa0
	void InpActEvt_IA_LPSP_Holster_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e5b80
	void InpActEvt_IA_LPSP_Holster_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e5c60
	void InpActEvt_IA_LPSP_Holster_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e5d40
	void OnNotifyEnd_88C49EE447785396546556A5C4EE24FB(FName NotifyName);// 0x6d94ba8 0x782e7e5e20
	void OnNotifyBegin_88C49EE447785396546556A5C4EE24FB(FName NotifyName);// 0x6d94ba8 0x782e7e5f00
	void OnInterrupted_88C49EE447785396546556A5C4EE24FB(FName NotifyName);// 0x6d94ba8 0x782e7e5fe0
	void OnBlendOut_88C49EE447785396546556A5C4EE24FB(FName NotifyName);// 0x6d94ba8 0x782e7e60c0
	void OnCompleted_88C49EE447785396546556A5C4EE24FB(FName NotifyName);// 0x6d94ba8 0x782e7e61a0
	void InpActEvt_IA_LPSP_Randomize_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6280
	void InpActEvt_IA_LPSP_Randomize_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6360
	void InpActEvt_IA_LPSP_Randomize_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6440
	void InpActEvt_IA_LPSP_View_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6520
	void InpActEvt_IA_LPSP_View_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6600
	void InpActEvt_IA_LPSP_Interact_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e66e0
	void InpActEvt_IA_LPSP_Interact_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e67c0
	void InpActEvt_IA_LPSP_Shoot_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e68a0
	void InpActEvt_IA_LPSP_Shoot_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6980
	void InpActEvt_IA_LPSP_Reload_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6a60
	void InpActEvt_IA_LPSP_Reload_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6b40
	void InpActEvt_IA_LPSP_Inspect_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6c20
	void InpActEvt_IA_LPSP_Inspect_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6d00
	void InpActEvt_IA_LPSP_Melee_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6de0
	void InpActEvt_IA_LPSP_Grenade_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6ec0
	void InpActEvt_IA_LPSP_WEP_Drop_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e6fa0
	void InpActEvt_IA_LPSP_Jump_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e7080
	void InpActEvt_IA_LPSP_Jump_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e7160
	void InpActEvt_IA_LPSP_WEP_Laser_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e7240
	void InpActEvt_IA_LPSP_Clip_Toggle_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e7320
	void InpActEvt_IA_LPSP_Tutorial_Toggle_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e3a40
	void InpActEvt_IA_LPSP_Tutorial_Toggle_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e3b20
	void InpActEvt_IA_LPSP_Load_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e3c00
	void InpActEvt_IA_LPSP_Save_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e3ce0
	void InpTchEvt_Moved(byte FingerIndex, Vector Location);// 0x6d94ba8 0x782e7e3dc0
	void InpTchEvt_Released(byte FingerIndex, Vector Location);// 0x6d94ba8 0x782e7e3ea0
	void InpTchEvt_Pressed(byte FingerIndex, Vector Location);// 0x6d94ba8 0x782e7e3f80
	void OnNotifyEnd_88C49EE447785396546556A5B3008A8F(FName NotifyName);// 0x6d94ba8 0x782e7e4060
	void OnNotifyBegin_88C49EE447785396546556A5B3008A8F(FName NotifyName);// 0x6d94ba8 0x782e7e4140
	void OnInterrupted_88C49EE447785396546556A5B3008A8F(FName NotifyName);// 0x6d94ba8 0x782e7e4220
	void OnBlendOut_88C49EE447785396546556A5B3008A8F(FName NotifyName);// 0x6d94ba8 0x782e7e4300
	void OnCompleted_88C49EE447785396546556A5B3008A8F(FName NotifyName);// 0x6d94ba8 0x782e7e43e0
	void OnNotifyEnd_FAB12DAA4CF13CCD494A95BDC75A5646(FName NotifyName);// 0x6d94ba8 0x782e7e44c0
	void OnNotifyBegin_FAB12DAA4CF13CCD494A95BDC75A5646(FName NotifyName);// 0x6d94ba8 0x782e7e45a0
	void OnInterrupted_FAB12DAA4CF13CCD494A95BDC75A5646(FName NotifyName);// 0x6d94ba8 0x782e7e4680
	void OnBlendOut_FAB12DAA4CF13CCD494A95BDC75A5646(FName NotifyName);// 0x6d94ba8 0x782e7e4760
	void OnCompleted_FAB12DAA4CF13CCD494A95BDC75A5646(FName NotifyName);// 0x6d94ba8 0x782e7e4840
	void OnNotifyEnd_8869BCD443CBD4DD49152AB02EA0BBFD(FName NotifyName);// 0x6d94ba8 0x782e7e4920
	void OnNotifyBegin_8869BCD443CBD4DD49152AB02EA0BBFD(FName NotifyName);// 0x6d94ba8 0x782e7e4a00
	void OnInterrupted_8869BCD443CBD4DD49152AB02EA0BBFD(FName NotifyName);// 0x6d94ba8 0x782e7e4ae0
	void OnBlendOut_8869BCD443CBD4DD49152AB02EA0BBFD(FName NotifyName);// 0x6d94ba8 0x782e7e4bc0
	void OnCompleted_8869BCD443CBD4DD49152AB02EA0BBFD(FName NotifyName);// 0x6d94ba8 0x782e7e4ca0
	void OnNotifyEnd_42BAC46C4070E7DC87791E94582CE581(FName NotifyName);// 0x6d94ba8 0x782e7e4d80
	void OnNotifyBegin_42BAC46C4070E7DC87791E94582CE581(FName NotifyName);// 0x6d94ba8 0x782e7e4e60
	void OnInterrupted_42BAC46C4070E7DC87791E94582CE581(FName NotifyName);// 0x6d94ba8 0x782e7e4f40
	void OnBlendOut_42BAC46C4070E7DC87791E94582CE581(FName NotifyName);// 0x6d94ba8 0x782e7e5020
	void OnCompleted_42BAC46C4070E7DC87791E94582CE581(FName NotifyName);// 0x6d94ba8 0x782e7e5100
	void OnNotifyEnd_4295C6524E702DA0D19EFAA71C782603(FName NotifyName);// 0x6d94ba8 0x782e7e51e0
	void OnNotifyBegin_4295C6524E702DA0D19EFAA71C782603(FName NotifyName);// 0x6d94ba8 0x782e7e52c0
	void OnInterrupted_4295C6524E702DA0D19EFAA71C782603(FName NotifyName);// 0x6d94ba8 0x782e7e53a0
	void OnBlendOut_4295C6524E702DA0D19EFAA71C782603(FName NotifyName);// 0x6d94ba8 0x782e7e5480
	void OnCompleted_4295C6524E702DA0D19EFAA71C782603(FName NotifyName);// 0x6d94ba8 0x782e7e5560
	void OnNotifyEnd_88C49EE447785396546556A5B0C490B8(FName NotifyName);// 0x6d94ba8 0x782e7e5640
	void OnNotifyBegin_88C49EE447785396546556A5B0C490B8(FName NotifyName);// 0x6d94ba8 0x782e7e1d60
	void OnInterrupted_88C49EE447785396546556A5B0C490B8(FName NotifyName);// 0x6d94ba8 0x782e7e1e40
	void OnBlendOut_88C49EE447785396546556A5B0C490B8(FName NotifyName);// 0x6d94ba8 0x782e7e1f20
	void OnCompleted_88C49EE447785396546556A5B0C490B8(FName NotifyName);// 0x6d94ba8 0x782e7e2000
	void InpActEvt_IA_LPSP_Run_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e20e0
	void InpActEvt_IA_LPSP_Run_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e21c0
	void InpActEvt_IA_LPSP_Crouch_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e22a0
	void InpActEvt_IA_LPSP_Crouch_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2380
	void InpActEvt_IA_LPSP_Aim_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2460
	void InpActEvt_IA_LPSP_Aim_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2540
	void OnNotifyEnd_88C49EE447785396546556A54578E810(FName NotifyName);// 0x6d94ba8 0x782e7e2620
	void OnNotifyBegin_88C49EE447785396546556A54578E810(FName NotifyName);// 0x6d94ba8 0x782e7e2700
	void OnInterrupted_88C49EE447785396546556A54578E810(FName NotifyName);// 0x6d94ba8 0x782e7e27e0
	void OnBlendOut_88C49EE447785396546556A54578E810(FName NotifyName);// 0x6d94ba8 0x782e7e28c0
	void OnCompleted_88C49EE447785396546556A54578E810(FName NotifyName);// 0x6d94ba8 0x782e7e29a0
	void InpActEvt_IA_LPSP_Look_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2a80
	void InpActEvt_IA_LPSP_Look_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2b60
	void InpActEvt_IA_LPSP_WEP_Swap_K2Node_EnhancedInputActionEvent(InputActionValue ActionValue, float ElapsedTime, float TriggeredTime);// 0x6d94ba8 0x782e7e2c40
	void InpActEvt_Three_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x782e7e2d20
	void InpActEvt_Two_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x782e7e2e00
	void InpActEvt_One_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x782e7e2ee0
	void OnNotifyEnd_4A53C35C406F50FED04C4CB29CE98E01(FName NotifyName);// 0x6d94ba8 0x782e7e2fc0
	void OnNotifyBegin_4A53C35C406F50FED04C4CB29CE98E01(FName NotifyName);// 0x6d94ba8 0x782e7e30a0
	void OnInterrupted_4A53C35C406F50FED04C4CB29CE98E01(FName NotifyName);// 0x6d94ba8 0x782e7e3180
	void OnBlendOut_4A53C35C406F50FED04C4CB29CE98E01(FName NotifyName);// 0x6d94ba8 0x782e7e3260
	void OnCompleted_4A53C35C406F50FED04C4CB29CE98E01(FName NotifyName);// 0x6d94ba8 0x782e7e3340
	void OnNotifyEnd_1F2D46CA44180A3933D38E801F2048A7(FName NotifyName);// 0x6d94ba8 0x782e7e3420
	void OnNotifyBegin_1F2D46CA44180A3933D38E801F2048A7(FName NotifyName);// 0x6d94ba8 0x782e7e3500
	void OnInterrupted_1F2D46CA44180A3933D38E801F2048A7(FName NotifyName);// 0x6d94ba8 0x782e7e35e0
	void OnBlendOut_1F2D46CA44180A3933D38E801F2048A7(FName NotifyName);// 0x6d94ba8 0x782e7e37a0
	void OnCompleted_1F2D46CA44180A3933D38E801F2048A7(FName NotifyName);// 0x6d94ba8 0x782e7e3880
	void OnNotifyEnd_420433E64D6DD78059ABD9A896792BF0(FName NotifyName);// 0x6d94ba8 0x782e7e3960
	void OnNotifyBegin_420433E64D6DD78059ABD9A896792BF0(FName NotifyName);// 0x6d94ba8 0x782e7e0080
	void OnInterrupted_420433E64D6DD78059ABD9A896792BF0(FName NotifyName);// 0x6d94ba8 0x782e7e0160
	void OnBlendOut_420433E64D6DD78059ABD9A896792BF0(FName NotifyName);// 0x6d94ba8 0x782e7e0240
	void OnCompleted_420433E64D6DD78059ABD9A896792BF0(FName NotifyName);// 0x6d94ba8 0x782e7e0320
	void OnNotifyEnd_88C49EE447785396546556A58378AE8D(FName NotifyName);// 0x6d94ba8 0x782e7e0400
	void OnNotifyBegin_88C49EE447785396546556A58378AE8D(FName NotifyName);// 0x6d94ba8 0x782e7e04e0
	void OnInterrupted_88C49EE447785396546556A58378AE8D(FName NotifyName);// 0x6d94ba8 0x782e7e05c0
	void OnBlendOut_88C49EE447785396546556A58378AE8D(FName NotifyName);// 0x6d94ba8 0x782e7e06a0
	void OnCompleted_88C49EE447785396546556A58378AE8D(FName NotifyName);// 0x6d94ba8 0x782e7e0780
	void OnNotifyEnd_88C49EE447785396546556A588ED6E65(FName NotifyName);// 0x6d94ba8 0x782e7e0860
	void OnNotifyBegin_88C49EE447785396546556A588ED6E65(FName NotifyName);// 0x6d94ba8 0x782e7e0940
	void OnInterrupted_88C49EE447785396546556A588ED6E65(FName NotifyName);// 0x6d94ba8 0x782e7e0a20
	void OnBlendOut_88C49EE447785396546556A588ED6E65(FName NotifyName);// 0x6d94ba8 0x782e7e0b00
	void OnCompleted_88C49EE447785396546556A588ED6E65(FName NotifyName);// 0x6d94ba8 0x782e7e0be0
	void Event Multicast On Set Weapon Inventory Index (int New Index);// 0x6d94ba8 0x782e7e0cc0
	void Event Multicast On Play Holster Event ();// 0x6d94ba8 0x782e7e0da0
	void Event Multicast On Update Weapon Visiblity ();// 0x6d94ba8 0x782e7e0e80
	void Event Server On Set Weapon Inventory Index (int New Index);// 0x6d94ba8 0x782e7e0f60
	void Event Server On Play Holster Animation ();// 0x6d94ba8 0x782e7e1040
	void Event Server On Update Weapon Visibility ();// 0x6d94ba8 0x782e7e1120
	void Event Replicated On Set Control Rotation(Rotator Control Rot);// 0x6d94ba8 0x782e7e1200
	void Event Replicated Destroy Weapon(Actor* Weapon To Destroy);// 0x6d94ba8 0x782e7e12e0
	void Event Multicast On Remove Weapon From Inventory (int Index);// 0x6d94ba8 0x782e7e13c0
	void Event Multicast On Add Weapon To Inventory (int Weapon To Add);// 0x6d94ba8 0x782e7e14a0
	void Event Server On Add Weapon To Inventory (int Weapon To Add);// 0x6d94ba8 0x782e7e1580
	void Event Server On Remove Weapon From Inventory (int Index);// 0x6d94ba8 0x782e7e1660
	void Event Spawn Throw Weapon(class Actor Weapon Class, Vector Weapon Location, Rotator Weapon Rotation, SWeaponAllSettings Swap Weapon Settings, out const MaterialInstance*[] Skin Body, out const MaterialInstance*[] Skin Iron Sights, out const MaterialInstance*[] Skin Magazine, out const MaterialInstance*[] Skin Muzzle, out const MaterialInstance*[] Skin Scope, out const MaterialInstance*[] Skin Laser, out const MaterialInstance*[] Skin Grip, const DataTableRowHandle Skin Row Handle Laser Light, DataTableRowHandle Skin Row Handle Flash Light);// 0x6d94ba8 0x782e7e1740
	void Event Server On Set Lowered(bool Value);// 0x6d94ba8 0x782e7e1820
	void Event Server On Update Movement Values(SSpeed Speed, SMovement Movement);// 0x6d94ba8 0x782e7e1900
	void Event Multicast On Update Movement Values(SSpeed Speed, SMovement Movement);// 0x6d94ba8 0x782e7e19e0
	void On Try Fire Projectile();// 0x6d94ba8 0x782e7e1ac0
	void Add Ammunition Pool Value(byte Ammo Type, int Value);// 0x6d94ba8 0x782e7e1ba0
	void Add Ammunition Pool(<byte,int> Ammunition Pool);// 0x6d94ba8 0x782e7e1c80
	void On Pick Up();// 0x6d94ba8 0x782edbe780
	void UpdateHP(float NewHP);// 0x6d94ba8 0x782edbe860
	void SendInfoToKillFeed(const Controller* KillerPC, BP_LPSP_PCH_C* DeadActor, const DamageType* DamageType);// 0x6d94ba8 0x782edbe940
	void AddKill(BP_LPSP_PCH_C* DeadActor, bool Headshot);// 0x6d94ba8 0x782edbea20
	void Server_Ragdoll(BP_LPSP_PCH_C* Actor);// 0x6d94ba8 0x782edbeb00
	void Repeat Fire Loop();// 0x6d94ba8 0x782edbebe0
	void On Fire Animation Play();// 0x6d94ba8 0x782edbecc0
	void On Perform Bolt();// 0x6d94ba8 0x782edbeda0
	void On Try Perform Bolt();// 0x6d94ba8 0x782edbee80
	void On Fire Ticking();// 0x6d94ba8 0x782edbef60
	void On Try Reload();// 0x6d94ba8 0x782edbf040
	void OnLanded(out const HitResult Hit);// 0x6d94ba8 0x782edbf120
	void On Fire Burst Stop();// 0x6d94ba8 0x782edbf200
	void ReceiveDestroyed();// 0x6d94ba8 0x782edbf2e0
	void Event On Try Switch Weapon(int Index, SGameAbility Ability);// 0x6d94ba8 0x782edbf3c0
	void OnJumped();// 0x6d94ba8 0x782edbf4a0
	void Event Begin Play Weapons Final Check();// 0x6d94ba8 0x782edbf580
	void Event On Reload();// 0x6d94ba8 0x782edbf660
	void On Throw Grenade();// 0x6d94ba8 0x782edbf740
	void Event On Throw Grenade();// 0x6d94ba8 0x782edbf820
	void Event On Rep Throw Grenade();// 0x6d94ba8 0x782edbdfa0
	void Event On Change Holster State(byte Value);// 0x6d94ba8 0x782edbf900
	void Event On Unholster(float Play Rate);// 0x6d94ba8 0x782edbf9e0
	void Event On Holster(float Play Rate);// 0x6d94ba8 0x782edbfac0
	void AiReload();// 0x6d94ba8 0x782edbfba0
	void StartJump();// 0x6d94ba8 0x782edbfc80
	void Grenade();// 0x6d94ba8 0x782edbfd60
	void FreeLook();// 0x6d94ba8 0x782edbfe40
	void Fire();// 0x6d94ba8 0x782edbff20
	void UnFire();// 0x6d94ba8 0x782edbcaa0
	void TouchLook(Vector2D Look, bool IsTouch);// 0x6d94ba8 0x782edbcb80
	void Melee();// 0x6d94ba8 0x782edbcc60
	void Show();// 0x6d94ba8 0x782edbcd40
	void TouchLook1(Vector2D Look);// 0x6d94ba8 0x782edbce20
	void UnRun();// 0x6d94ba8 0x782edbcf00
	void Run();// 0x6d94ba8 0x782edbcfe0
	void On Run Released();// 0x6d94ba8 0x782edbd0c0
	void On Rep Run Released();// 0x6d94ba8 0x782edbd1a0
	void On Run Pressed();// 0x6d94ba8 0x782edbd280
	void On Rep Run Pressed();// 0x6d94ba8 0x782edbd360
	void StartUnCrouch();// 0x6d94ba8 0x782edbd440
	void StartCrouch();// 0x6d94ba8 0x782edbd520
	void On Released Crouch();// 0x6d94ba8 0x782edbd600
	void On Rep Released Crouch();// 0x6d94ba8 0x782edbd6e0
	void On Pressed Crouch();// 0x6d94ba8 0x782edbd7c0
	void On Rep Pressed Crouch();// 0x6d94ba8 0x782edbd8a0
	void StartUnAim();// 0x6d94ba8 0x782edbd980
	void StartAim();// 0x6d94ba8 0x782edbda60
	void On Released Aim();// 0x6d94ba8 0x782edbdb40
	void On Rep Released Aim();// 0x6d94ba8 0x782edbdc20
	void On Pressed Aim();// 0x6d94ba8 0x782edbdd00
	void On Rep Pressed Aim();// 0x6d94ba8 0x782edbdde0
	void Move();// 0x6d94ba8 0x782edbdec0
	void InpAxisEvt_MoveRight1_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x782edbe080
	void InpAxisEvt_MoveForward1_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x782edbe160
	void On Axis Movement Vertical();// 0x6d94ba8 0x782edbe240
	void On Axis Movement Horizontal();// 0x6d94ba8 0x782edbe320
	void On Rep Axis Movement Vertical();// 0x6d94ba8 0x782edbe400
	void On Rep Axis Movement Horizontal();// 0x6d94ba8 0x782edbe4e0
	void On Axis Look Yaw();// 0x6d94ba8 0x782edbe5c0
	void On Axis Look Pitch();// 0x6d94ba8 0x782edbe6a0
	void On Rep Axis Look Pitch();// 0x6d94ba8 0x782edbadc0
	void On Rep Axis Look Yaw();// 0x6d94ba8 0x782edbaea0
	void ReceiveBeginPlay();// 0x6d94ba8 0x782edbaf80
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x782edbb060
	void Event Tick Local();// 0x6d94ba8 0x782edbb140
	void ReceivePossessed(Controller* NewController);// 0x6d94ba8 0x782edbb220
	void UpdateAll tags();// 0x6d94ba8 0x782edbb3e0
	void OnPickupFlag(BP_BaseFlag_C* Flag);// 0x6d94ba8 0x782edbb5a0
	void OnDropFlag();// 0x6d94ba8 0x782edbb680
	void StopPawn();// 0x6d94ba8 0x78358b45a0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x782edbb920
	void Play Impact shake(Actor* Instigator);// 0x6d94ba8 0x782edbba00
	void PlayHitMontage();// 0x6d94ba8 0x782edbbae0
	void DamageDirection(Actor* Dmg Causer);// 0x6d94ba8 0x782edbbbc0
	void On_Death(BP_LPSP_PCH_C* Dead_Actor, PlayerController* Instigator, Controller* Instigator Controller, float KillerHP, const DamageType* DmgType);// 0x6d94ba8 0x782edbbca0
	void SpectateKiller(Pawn* KillerPawn, Controller* Controller);// 0x6d94ba8 0x782edbbd80
	void DeadCam();// 0x6d94ba8 0x782edbbe60
	void OnPawnDeath(FText KillerName, float KillerHP, byte KillerClass, const DamageType* DmgType);// 0x6d94ba8 0x782edbbf40
	void DestroyWeapon(BP_LPSP_PCH_C* Pawn);// 0x6d94ba8 0x782edbc100
	void ReceiveEndPlay(byte EndPlayReason);// 0x6d94ba8 0x782edbc2c0
	void ExecuteUbergraph_BP_LPSP_PCH(int EntryPoint, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float ___float_Variable, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float ___float_Variable, bool ___bool_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float ___float_Variable, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float ___float_Variable, bool ___bool_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float ___float_Variable, float ___float_Variable, bool ___bool_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, Vector2D CallFunc_Conv_InputActionValueToAxis2D_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float ___float_Variable, Vector2D CallFunc_Conv_InputActionValueToAxis2D_ReturnValue, float ___float_Variable, Vector2D ___struct_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float ___float_Variable, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float ___float_Variable, bool ___bool_Variable, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, bool ___bool_Variable, MaterialInterface* ___object_Variable, MaterialInterface* ___object_Variable, UI_Fade_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool CallFunc_IsValid_ReturnValue, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, bool ___bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, FName ___name_Variable, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, FName K2Node_CustomEvent_NotifyName, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, bool CallFunc_HasAuthority_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetPlaybackPosition_ReturnValue, FName K2Node_CustomEvent_NotifyName, Vector CallFunc_GetVectorValue_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_New_Index, FName ___name_Variable, int K2Node_CustomEvent_New_Index, bool ___bool_Has_Been_Initd_Variable, Rotator K2Node_CustomEvent_Control_Rot, Actor* K2Node_CustomEvent_Weapon_To_Destroy, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool ___bool_IsClosed_Variable, int K2Node_CustomEvent_Index, int K2Node_CustomEvent_Weapon_To_Add, int K2Node_CustomEvent_Weapon_To_Add, int K2Node_CustomEvent_Index, FName K2Node_CustomEvent_NotifyName, class Actor K2Node_CustomEvent_Weapon_Class, Vector K2Node_CustomEvent_Weapon_Location, Rotator K2Node_CustomEvent_Weapon_Rotation, SWeaponAllSettings K2Node_CustomEvent_Swap_Weapon_Settings, const MaterialInstance*[] K2Node_CustomEvent_Skin_Body, const MaterialInstance*[] K2Node_CustomEvent_Skin_Iron_Sights, const MaterialInstance*[] K2Node_CustomEvent_Skin_Magazine, const MaterialInstance*[] K2Node_CustomEvent_Skin_Muzzle, const MaterialInstance*[] K2Node_CustomEvent_Skin_Scope, const MaterialInstance*[] K2Node_CustomEvent_Skin_Laser, const MaterialInstance*[] K2Node_CustomEvent_Skin_Grip, const DataTableRowHandle K2Node_CustomEvent_Skin_Row_Handle_Laser_Light, DataTableRowHandle K2Node_CustomEvent_Skin_Row_Handle_Flash_Light, bool K2Node_CustomEvent_Value, SSpeed K2Node_CustomEvent_Speed, SMovement K2Node_CustomEvent_Movement, SSpeed K2Node_CustomEvent_Speed, SMovement K2Node_CustomEvent_Movement, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName CallFunc_Get_Name_Montage_Unholster_ReturnValue, FName K2Node_CustomEvent_NotifyName, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, byte K2Node_Event_Ammo_Type, int K2Node_Event_Value, byte[] CallFunc_Map_Keys_Keys, int[] CallFunc_Map_Values_Values, int CallFunc_Array_Find_ReturnValue, FName K2Node_CustomEvent_NotifyName, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, <byte,int> K2Node_Event_Ammunition_Pool, byte[] CallFunc_Map_Keys_Keys, int[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Has_Been_Initd_Variable, float K2Node_CustomEvent_NewHP, const Controller* K2Node_CustomEvent_KillerPC, BP_LPSP_PCH_C* K2Node_CustomEvent_DeadActor, const DamageType* K2Node_CustomEvent_DamageType, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_DeadActor, bool K2Node_CustomEvent_Headshot, bool CallFunc_IsValid_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C* K2Node_CustomEvent_Actor, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Using_Gamepad_Value, FName K2Node_CustomEvent_NotifyName, PlayerController* CallFunc_GetPlayerController_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, Actor* CallFunc_Get_Inventory_Version_Of_Highlighted_Weapon_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, class Actor CallFunc_GetObjectClass_ReturnValue, Actor* CallFunc_Get_Inventory_Version_Of_Highlighted_Weapon_ReturnValue, int CallFunc_Array_Find_ReturnValue, Actor* CallFunc_Get_Inventory_Version_Of_Highlighted_Weapon_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Has_Highlighted_Weapon_In_Inventory_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Has_Inventory_Space_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, const HitResult K2Node_Event_Hit, bool ___bool_IsClosed_Variable, FName K2Node_CustomEvent_NotifyName, float CallFunc_GetGameTimeInSeconds_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, int K2Node_CustomEvent_Index, SGameAbility K2Node_CustomEvent_Ability, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Has_Been_Initd_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, Vector ___struct_Variable, byte ___byte_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, bool ___bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Can_Fire_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Can_Fire_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Has_Time_Passed_ReturnValue, bool CallFunc_Has_Rate_Passed_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool ___bool_Variable, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, float ___float_Variable, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Try_Start_Game_Ability_Value, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FName ___name_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_Can_Switch_Weapon_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, FName CallFunc_Get_Name_Montage_Unholster_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool ___bool_Variable, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float ___float_Variable, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool ___bool_Variable, float ___float_Variable, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float ___float_Variable, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, interface classNone K2Node_DynamicCast_AsInterface_Interactable, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Can_Start_Game_Ability_Value, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool ___bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, byte K2Node_CustomEvent_Value, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float K2Node_CustomEvent_Play_Rate, float K2Node_CustomEvent_Play_Rate, FName K2Node_CustomEvent_NotifyName, FName CallFunc_Get_Name_Montage_Holster_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, bool K2Node_SwitchEnum_CmpSuccess, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName CallFunc_Get_Name_Montage_Unholster_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FName K2Node_CustomEvent_NotifyName, bool ___bool_Variable, float ___float_Variable, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, float ___float_Variable, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Try_Start_Game_Ability_Value, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool ___bool_Variable, int CallFunc_Array_Find_ReturnValue, FName K2Node_CustomEvent_NotifyName, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, BP_LPSP_WEP_C* K2Node_DynamicCast_AsBP_LPSP_WEP, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_On_Update_Ammunition_self_CastInput, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, float ___float_Variable, bool CallFunc_IsValid_ReturnValue, float ___float_Variable, bool CallFunc_Has_Any_Ammunition_Of_Weapon_Type_Value, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, bool CallFunc_Try_Start_Game_Ability_Value, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Is_Weapon_Ammunition_Full_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, int CallFunc_Get_Ammunition_Pool_Value_Value, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool ___bool_Variable, float ___float_Variable, bool CallFunc_Is_Weapon_Ammunition_Full_ReturnValue, float ___float_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, SoundBase* ___object_Variable, bool CallFunc_IsValid_ReturnValue, SoundBase* ___object_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool ___bool_Variable, bool ___bool_Variable, bool CallFunc_Can_Lower_Weapon_Value, SoundBase* K2Node_Select_Default, bool ___bool_Variable, FText K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, float ___float_Variable, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, DataTableRowHandle K2Node_MakeStruct_DataTableRowHandle, Vector CallFunc_Multiply_VectorFloat_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D K2Node_CustomEvent_Look, bool K2Node_CustomEvent_IsTouch, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D K2Node_CustomEvent_Look, Vector CallFunc_Multiply_VectorVector_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Try_Start_Game_Ability_Value, FName ___name_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Try_Start_Game_Ability_Value, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, int CallFunc_Get_Ammunition_Pool_Value_Value, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Try_Start_Game_Ability_Value, bool CallFunc_BooleanOR_ReturnValue, FName K2Node_CustomEvent_NotifyName, int ___int_Array_Index_Variable, bool ___bool_Variable, byte CallFunc_Array_Get_Item, int CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, float ___float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_CanJump_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Get_Sound_From_Data_Table_Is_Valid, SSound CallFunc_Get_Sound_From_Data_Table_Sound_Cue, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool ___bool_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsCrouching_ReturnValue, FName K2Node_CustomEvent_NotifyName, float ___float_Variable, float ___float_Variable, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Is_Weapon_Ammunition_Empty_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Can_Fire_ReturnValue, bool ___bool_Variable, float ___float_Variable, bool CallFunc_Can_Fire_ReturnValue, bool CallFunc_Has_Rate_Passed_ReturnValue, bool CallFunc_Has_Rate_Passed_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, float ___float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Should_Be_Running_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsCrouching_ReturnValue, int ___int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName ___name_Variable, float CallFunc_Get_Aim_Duration_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, bool CallFunc_IsValid_ReturnValue, AudioComponent* CallFunc_SpawnSoundAttached_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Should_Be_Aiming_ReturnValue, FName K2Node_CustomEvent_NotifyName, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_InputAxisEvent_AxisValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, Vector CallFunc_GetActorForwardVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, float CallFunc_SelectFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_Multiply_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Is_Allowed_To_Interact_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, interface classNone K2Node_DynamicCast_AsInterface_Interactable, bool K2Node_DynamicCast_bSuccess, AudioComponent* CallFunc_SpawnSound2D_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Get_Next_Weapon_Index_ReturnValue, int CallFunc_Get_Next_Weapon_Index_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, bool CallFunc_Conv_InputActionValueToBool_ReturnValue, float ___float_Variable, float ___float_Variable, float ___float_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float CallFunc_Conv_InputActionValueToAxis1D_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Rotator CallFunc_REase_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, FName ___name_Variable, InputActionValue K2Node_EnhancedInputActionEvent_ActionValue, float K2Node_EnhancedInputActionEvent_ElapsedTime, float K2Node_EnhancedInputActionEvent_TriggeredTime, float CallFunc_Conv_InputActionValueToAxis1D_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Try_Start_Game_Ability_Value, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName ___name_Variable, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Try_Start_Game_Ability_Value, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Try_Start_Game_Ability_Value, delegate K2Node_CreateDelegate_OutputDelegate, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_DeltaSeconds, FName K2Node_CustomEvent_NotifyName, Controller* K2Node_Event_NewController, delegate K2Node_CreateDelegate_OutputDelegate, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, BP_BaseFlag_C* K2Node_CustomEvent_Flag, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_Instigator, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, CameraShakeBase* CallFunc_StartCameraShake_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, Actor* K2Node_CustomEvent_Dmg_Causer, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_Dead_Actor, PlayerController* K2Node_CustomEvent_Instigator, Controller* K2Node_CustomEvent_Instigator_Controller, float K2Node_CustomEvent_KillerHP, const DamageType* K2Node_CustomEvent_DmgType, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Pawn* K2Node_CustomEvent_KillerPawn, Controller* K2Node_CustomEvent_Controller, FText K2Node_CustomEvent_KillerName, float K2Node_CustomEvent_KillerHP, byte K2Node_CustomEvent_KillerClass, const DamageType* K2Node_CustomEvent_DmgType, BP_LPSP_PCH_C* K2Node_CustomEvent_Pawn, byte K2Node_Event_EndPlayReason, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerControlled_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, MaterialInterface* K2Node_Select_Default, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsPlayerControlled_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimer_ReturnValue, FName ___name_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, FName K2Node_CustomEvent_NotifyName, class Actor CallFunc_Array_Get_Item, class Actor CallFunc_Array_Random_OutItem, int CallFunc_Array_Random_OutIndex, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsPlayerControlled_ReturnValue, bool CallFunc_IsPlayerControlled_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Get_Animation_Montage_From_Data_Table_Is_Valid, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_First_Person, AnimMontage* CallFunc_Get_Animation_Montage_From_Data_Table_Montage_Third_Person, float CallFunc_GetWorldDeltaSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_Get_View_Location_ReturnValue, bool CallFunc_IsPlayerControlled_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_FInterpTo_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, float CallFunc_Get_Sensitivity_Multiplier_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Ammunition_Type_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTable* CallFunc_Get_Sounds_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_Get_Offset_ReturnValue, HitResult CallFunc_K2_SetActorRelativeTransform_SweepHitResult, float CallFunc_GetMaxAcceleration_ReturnValue, Vector CallFunc_GetCurrentAcceleration_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, float CallFunc_VSize_ReturnValue, int CallFunc_FCeil_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, FName K2Node_CustomEvent_NotifyName, SLaser CallFunc_Get_Laser_Settings_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SScope CallFunc_Get_Settings_Scope_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_Get_Added_Rotations_Value, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_RInterpTo_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, Rotator CallFunc_Add_Rotators_Value, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, FName ___name_Variable, float CallFunc_ClampAngle_ReturnValue, float CallFunc_ClampAngle_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FName K2Node_CustomEvent_NotifyName, Rotator CallFunc_RInterpTo_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Rotator CallFunc_Subtract_Rotators_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_MakeRotator_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, int ___int_Variable, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, FName K2Node_CustomEvent_NotifyName, SSpeed CallFunc_Get_Movement_Speed_Value, delegate K2Node_CreateDelegate_OutputDelegate, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetCurveValue_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue);// 0x6d94ba8 0x782edbc3a0

--------------------------------
Class: BP_BaseWeapon_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7831405380
	CameraComponent* Camera;//[Offset: 0x228, Size: 0x8] 0x7831405300
	SkeletalMeshComponent* MeshTPP;//[Offset: 0x230, Size: 0x8] 0x7831407380
	SkeletalMeshComponent* MeshFPP;//[Offset: 0x238, Size: 0x8] 0x7831407300
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8] 0x7831407280
	int AmmoPerMag;//[Offset: 0x248, Size: 0x4] 0x7831407200
	int ActualAmmo;//[Offset: 0x24c, Size: 0x4] 0x7831407180
	float Damage;//[Offset: 0x250, Size: 0x4] 0x7831407100
	float TimeBetweenShots;//[Offset: 0x254, Size: 0x4] 0x7831407080
	float ReloadTime;//[Offset: 0x258, Size: 0x4] 0x7831407000
	float WeaponRange;//[Offset: 0x25c, Size: 0x4] 0x7831406f80
	float WeaponSpread;//[Offset: 0x260, Size: 0x4] 0x7831406f00
	float WeaponVerticalRecoilMax;//[Offset: 0x264, Size: 0x4] 0x7831406e80
	float WeaponVerticalRecoilMin;//[Offset: 0x268, Size: 0x4] 0x7831406e00
	float WeaponHorizontalRecoilMax;//[Offset: 0x26c, Size: 0x4] 0x7831406d80
	float WeaponHorizontalRecoilMin;//[Offset: 0x270, Size: 0x4] 0x7831406d00
	float AimingSpread;//[Offset: 0x274, Size: 0x4] 0x7831406c80
	byte AmmoType;//[Offset: 0x278, Size: 0x1] 0x7831406c00
	bool bIsPrimary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1] 0x7831406b80
	int PickUpWeaponAmmo;//[Offset: 0x27c, Size: 0x4] 0x7831406b00
	bool InitialValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x7831406a80
	bool bInstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1] 0x7831406a00
	bool bShotgun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1] 0x7831406980
	int ShotgunProjectilesPerShot;//[Offset: 0x284, Size: 0x4] 0x7831406900
	SoundCue* NoAmmoFireSound;//[Offset: 0x288, Size: 0x8] 0x7831406880
	SoundBase* FireSound;//[Offset: 0x290, Size: 0x8] 0x7831406800
	class DamageType* DamageType;//[Offset: 0x298, Size: 0x8] 0x782e49dbc0
	byte[] FiringModes;//[Offset: 0x2a0, Size: 0x10] 0x782e49db20
	byte ActualFiringMode;//[Offset: 0x2b0, Size: 0x1] 0x7831406700
	int BulletsPerBurst;//[Offset: 0x2b4, Size: 0x4] 0x7831406680
	BP_BaseCharacter_C* OwnerPawnRef;//[Offset: 0x2b8, Size: 0x8] 0x7831406600
	float AimingFOV;//[Offset: 0x2c0, Size: 0x4] 0x7831406580
	float AimingInterSpeed;//[Offset: 0x2c4, Size: 0x4] 0x7831406500
	byte WeaponName;//[Offset: 0x2c8, Size: 0x1] 0x7831406480
	MatineeCameraShake* BreathingShakeRef;//[Offset: 0x2d0, Size: 0x8] 0x7831406400
	float HeadshotMultiplayer;//[Offset: 0x2d8, Size: 0x4] 0x7831406380
	float BulletVelocity;//[Offset: 0x2dc, Size: 0x4] 0x7831408400
	AnimMontage* EquipWeaponMontage;//[Offset: 0x2e0, Size: 0x8] 0x7831408380
	AnimMontage* UnequipWeaponMontage;//[Offset: 0x2e8, Size: 0x8] 0x7831408300
	float RecoverInterpSpeed;//[Offset: 0x2f0, Size: 0x4] 0x7831408280
	float RecoilInterpSpeed;//[Offset: 0x2f4, Size: 0x4] 0x7831408200
	AnimMontage* ArmReloadMontage;//[Offset: 0x2f8, Size: 0x8] 0x7831408180
	AnimMontage* WeaponReloadMontage;//[Offset: 0x300, Size: 0x8] 0x7831408100
	AnimMontage* ArmFireMontage;//[Offset: 0x308, Size: 0x8] 0x7831408080
	AnimMontage* WeaponFireMontage;//[Offset: 0x310, Size: 0x8] 0x7831408000
	AnimMontage* InArmFireMontage;//[Offset: 0x318, Size: 0x8] 0x7831407f80
	byte NameType;//[Offset: 0x320, Size: 0x1] 0x7831407f00
	PaperSprite* WeaponImage;//[Offset: 0x328, Size: 0x8] 0x7831407e80
	FString WeaponName1;//[Offset: 0x330, Size: 0x10] 0x7831407e00
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x340, Size: 0x8] 0x7831407d80
	FName    插槽                                                                                           ;//[Offset: 0x348, Size: 0x8] 0x7831407d00
	void BeginInteract(Actor* Instigator, out bool Failure);// 0x6d94ba8 0x7835eabbc0
	void FireInstantBullet(float Distorsion, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, int ___int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_RandomUnitVectorInConeInRadians_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult[] CallFunc_LineTraceMulti_OutHits, bool CallFunc_LineTraceMulti_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, HealthComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7835eabca0
	void FireBullet(float Spread, float BulletSpread, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_GetControlRotation_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_RandomUnitVectorInConeInRadians_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Bullet_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x7835eabd80
	void ReduceAmmo(int ___int_Variable, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x7835eabe60
	void Interact(Actor* Instigator);// 0x6d94ba8 0x7835eabf40
	void BeginHover();// 0x6d94ba8 0x7835eac020
	void EndHover();// 0x6d94ba8 0x7835eac100
	void EndInteract();// 0x6d94ba8 0x7835eac1e0
	void ReceiveBeginPlay();// 0x6d94ba8 0x7835eac2c0
	void Shoot(float Spread);// 0x6d94ba8 0x7835eac3a0
	void ReloadWeapon(int AddedAmmo);// 0x6d94ba8 0x7835eac480
	void PlayShotEffects();// 0x6d94ba8 0x7835eac560
	void LocalPlayEffects();// 0x6d94ba8 0x7835eac640
	void ChangeFiringMode();// 0x6d94ba8 0x7835eac720
	void PlayImpacEffects(Rotator ImpactNormal, Vector ImpactPoint, PhysicalMaterial* PhyMat);// 0x6d94ba8 0x7835eac800
	void ServerPlayEffects(Rotator ImpactNormal, Vector ImpactPoint, PhysicalMaterial* PhyMat);// 0x6d94ba8 0x7835eac8e0
	void ServerPlayShotEffects();// 0x6d94ba8 0x7835eac9c0
	void OnBeginAiming();// 0x6d94ba8 0x7835ea90e0
	void OnEndAiming();// 0x6d94ba8 0x7835ea91c0
	void PlayWeaponFireSound();// 0x6d94ba8 0x7835ea92a0
	void PlayShotShake();// 0x6d94ba8 0x7835ea9380
	void HoldBreath();// 0x6d94ba8 0x7835ea9460
	void StopHoldBreath();// 0x6d94ba8 0x7835ea9540
	void ScopeZoom(bool Up);// 0x6d94ba8 0x7835ea9620
	void SetActualAmmo(int Ammo);// 0x6d94ba8 0x7835ea9700
	void Reload();// 0x6d94ba8 0x7835ea98c0
	void Fire();// 0x6d94ba8 0x7835ea9a80
	void ExecuteUbergraph_BP_BaseWeapon(int EntryPoint, bool ___bool_Variable, Actor* CallFunc_GetOwner_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int ___int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int K2Node_CustomEvent_AddedAmmo, float K2Node_CustomEvent_Spread, Rotator K2Node_CustomEvent_ImpactNormal, Vector K2Node_CustomEvent_ImpactPoint, PhysicalMaterial* K2Node_CustomEvent_PhyMat, Rotator K2Node_CustomEvent_ImpactNormal, Vector K2Node_CustomEvent_ImpactPoint, PhysicalMaterial* K2Node_CustomEvent_PhyMat, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, DecalComponent* CallFunc_SpawnDecalAtLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor* K2Node_Event_Instigator, float ___float_Variable, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, float ___float_Variable, bool K2Node_CustomEvent_Up, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_Ammo, float K2Node_Select_Default, CameraShakeBase* CallFunc_StartCameraShake_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_Montage_Play_ReturnValue, float CallFunc_Montage_Play_ReturnValue, float CallFunc_Montage_Play_ReturnValue, float CallFunc_Montage_Play_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7835ea9b60

--------------------------------
Class: BP_BaseCharacter_C.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c0, Size: 0x8] 0x7840267200
	UTCSwipeToMoveComponent_C* UTCSwipeToMoveComponent;//[Offset: 0x4c8, Size: 0x8] 0x7840267180
	UTCJoystickComponent_C* UTCJoystickComponent;//[Offset: 0x4d0, Size: 0x8] 0x7840267100
	SkeletalMeshComponent* MeshFP;//[Offset: 0x4d8, Size: 0x8] 0x7840267080
	WidgetComponent* PlayerTagWidget;//[Offset: 0x4e0, Size: 0x8] 0x7840267000
	CameraComponent* Camera;//[Offset: 0x4e8, Size: 0x8] 0x7840266f80
	SpringArmComponent* SpringArm;//[Offset: 0x4f0, Size: 0x8] 0x7840266f00
	HealthComponent_C* HealthComponent;//[Offset: 0x4f8, Size: 0x8] 0x7840266e80
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1] 0x7840266e00
	Vector ImpactPoint;//[Offset: 0x504, Size: 0xc] 0x7840266d80
	BP_BaseWeapon_C* CurrentWeapon;//[Offset: 0x510, Size: 0x8] 0x7840266d00
	BP_BaseWeapon_C* PrimaryWeapon;//[Offset: 0x518, Size: 0x8] 0x7840266c80
	BP_BaseWeapon_C* SecondaryWeapon;//[Offset: 0x520, Size: 0x8] 0x7840266c00
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1] 0x7840266b80
	TimerHandle AutoShootTimerHandle;//[Offset: 0x530, Size: 0x8] 0x7840266b00
	float InteractRange;//[Offset: 0x538, Size: 0x4] 0x7840266a80
	TimerHandle InteractTimer;//[Offset: 0x540, Size: 0x8] 0x7840266a00
	BP_BaseInteractable_C* CurrentInteractable;//[Offset: 0x548, Size: 0x8] 0x7840266980
	Actor* Previous Interactable;//[Offset: 0x550, Size: 0x8] 0x7840266900
	bool bInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1] 0x7840266880
	TimerHandle InteractingTimer;//[Offset: 0x560, Size: 0x8] 0x7840266800
	bool bCanShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1] 0x7840266780
	float DefaultMovementSpeed;//[Offset: 0x56c, Size: 0x4] 0x7840266700
	float RunSpeedModifier;//[Offset: 0x570, Size: 0x4] 0x7840266680
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1] 0x7840266600
	class BP_BaseWeapon_C* SecondaryWeaponToSpawn;//[Offset: 0x578, Size: 0x8] 0x783450e2a0
	class BP_BaseWeapon_C* PrimaryWeaponToSpawn;//[Offset: 0x580, Size: 0x8] 0x783450e200
	bool bWantToJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1] 0x7840266580
	bool bAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1] 0x7840266500
	float PitchAcum;//[Offset: 0x58c, Size: 0x4] 0x7840266480
	float YawAcum;//[Offset: 0x590, Size: 0x4] 0x7840266400
	float Delta;//[Offset: 0x594, Size: 0x4] 0x7840266380
	bool bCanRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1] 0x7840268400
	float DefaultFOV;//[Offset: 0x59c, Size: 0x4] 0x7840268380
	float CurrentFOV;//[Offset: 0x5a0, Size: 0x4] 0x7840268300
	bool bFirstShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1] 0x7840268280
	AmmoMagazines[] Magazines;//[Offset: 0x5a8, Size: 0x10] 0x783450e160
	float InteractTime;//[Offset: 0x5b8, Size: 0x4] 0x7840268180
	bool bWantsToRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1] 0x7840268100
	bool bWantsToAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 0x1] 0x7840268080
	bool bAimingAtAlly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 0x1] 0x7840268000
	bool bChangingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bf, Size: 0x1] 0x7840267f80
	bool bPawnTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1] 0x7840267f00
	bool bIsInSafeZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1] 0x7840267e80
	TimerHandle LeaveProtectedZoneHandle;//[Offset: 0x5c8, Size: 0x8] 0x7840267e00
	byte CapturePoint;//[Offset: 0x5d0, Size: 0x1] 0x7840267d80
	bool bCapturingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1] 0x7840267d00
	bool bWantToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1] 0x7840267c80
	bool bRecentlyDamaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 0x1] 0x7840267c00
	BaseCharacterPC_C* AnyDamageInstigator;//[Offset: 0x5d8, Size: 0x8] 0x7840267b80
	BaseCharacterPC_C* ControllerRef;//[Offset: 0x5e0, Size: 0x8] 0x7840267b00
	float DefaultRunSpeedModdifier;//[Offset: 0x5e8, Size: 0x4] 0x7840267a80
	float ActualLeanAngle;//[Offset: 0x5ec, Size: 0x4] 0x7840267a00
	FText PlayerName;//[Offset: 0x5f0, Size: 0x18] 0x7840267980
	BP_BaseCharacter_C* OtherPawn;//[Offset: 0x608, Size: 0x8] 0x7840267900
	bool bCarringFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1] 0x7840267880
	BP_BaseFlag_C* FlagRef;//[Offset: 0x618, Size: 0x8] 0x7840267800
	TimerHandle GrenadeTimerHandle;//[Offset: 0x620, Size: 0x8] 0x7840267780
	bool bThrowingGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 0x1] 0x7840267700
	bool bCanUseGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1] 0x7840267680
	float MeleeAttackRange;//[Offset: 0x62c, Size: 0x4] 0x7840267600
	bool bCanUseMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1] 0x7840267580
	bool bAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 0x1] 0x7840267500
	DamageType* OnHitDamageType;//[Offset: 0x638, Size: 0x8] 0x7840267480
	float OnHitDamage;//[Offset: 0x640, Size: 0x4] 0x7840267400
	float TargetLean;//[Offset: 0x644, Size: 0x4] 0x7840269480
	float DefaultCrouchSpeed;//[Offset: 0x648, Size: 0x4] 0x7840269400
	int BulletsFired;//[Offset: 0x64c, Size: 0x4] 0x7840269380
	bool bOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1] 0x7840269300
	bool bFiringBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1] 0x7840269280
	float ActualPitch;//[Offset: 0x654, Size: 0x4] 0x7840269200
	float ActualYaw;//[Offset: 0x658, Size: 0x4] 0x7840269180
	float InterpSpeed;//[Offset: 0x65c, Size: 0x4] 0x7840269100
	float TargetFOV;//[Offset: 0x660, Size: 0x4] 0x7840269080
	float TargetSpread;//[Offset: 0x664, Size: 0x4] 0x7840269000
	bool bLeaningLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1] 0x7840268f80
	bool AimingAtEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1] 0x7840268f00
	TimerHandle ActivateRegenTimerHandle;//[Offset: 0x670, Size: 0x8] 0x7840268e80
	TimerHandle RegenTimerHandle;//[Offset: 0x678, Size: 0x8] 0x7840268e00
	float Saturation;//[Offset: 0x680, Size: 0x4] 0x7840268d80
	float AbilityCoolDown;//[Offset: 0x684, Size: 0x4] 0x7840268d00
	bool bCanUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1] 0x7840268c80
	Actor* DamageCauser;//[Offset: 0x690, Size: 0x8] 0x7840268c00
	float LeanAngle;//[Offset: 0x698, Size: 0x4] 0x7840268b80
	bool LeaningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1] 0x7840268b00
	TimerHandle GrenadeTimeHandler;//[Offset: 0x6a0, Size: 0x8] 0x7840268a80
	Controller* InstigatorController;//[Offset: 0x6a8, Size: 0x8] 0x7840268a00
	WB_Dynamic_Crosshair_C* DynamicCrosshairRef;//[Offset: 0x6b0, Size: 0x8] 0x7840268980
	WB_Gameplay_C* GameplayWB_Ref;//[Offset: 0x6b8, Size: 0x8] 0x7840268900
	float SwayHorizontalTarget;//[Offset: 0x6c0, Size: 0x4] 0x7840268880
	float SwayVerticalTarget;//[Offset: 0x6c4, Size: 0x4] 0x7840268800
	byte EquipedWeapon;//[Offset: 0x6c8, Size: 0x1] 0x7840268780
	bool MovingForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1] 0x7840268700
	bool WantsToThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 0x1] 0x7840268680
	float DefaultCameraHeight;//[Offset: 0x6cc, Size: 0x4] 0x7840268600
	Object* KnifeRef;//[Offset: 0x6d0, Size: 0x8] 0x7840268580
	Object* GrenadeRef;//[Offset: 0x6d8, Size: 0x8] 0x7840268500
	float AimSensitivityMultiplier ;//[Offset: 0x6e0, Size: 0x4] 0x7840268480
	byte PreviousWeapon;//[Offset: 0x6e4, Size: 0x1] 0x784026a500
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e5, Size: 0x1] 0x784026a480
	float AimSpeedDivider;//[Offset: 0x6e8, Size: 0x4] 0x784026a400
	delegate EventDead;//[Offset: 0x6f0, Size: 0x10] 0x784026a380
	float CurX;//[Offset: 0x700, Size: 0x4] 0x784026a300
	float CurY;//[Offset: 0x704, Size: 0x4] 0x784026a280
	delegate EventOnAimChange;//[Offset: 0x708, Size: 0x10] 0x784026a200
	Vector Location;//[Offset: 0x718, Size: 0xc] 0x784026a180
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x728, Size: 0x8] 0x784026a100
	int TouchIndex;//[Offset: 0x730, Size: 0x4] 0x784026a080
	bool IsTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1] 0x784026a000
	<byte,Vector> JoyTouchIndex;//[Offset: 0x738, Size: 0x50] 0x783d6a5800
	void Spectate(Pawn* Pawn, Controller* Controller, Pawn* PawnLocal, Controller* ControllerLocal, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SpectatorBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x7831b3f820
	void PawnInit(Controller* Controller, BP_BaseWeapon_C* CurrentWeapon, Controller* ControllerLocal, BP_BaseWeapon_C* Weapon, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3f900
	void OnDead(BP_BaseCharacter_C* DeadActor, PlayerController* InstigatorPC, Controller* InstigatorC, const DamageType* DmgType, float KillerHP, DamageType* DamageType, Controller* ControllerInstigator, PlayerController* IntigatorPC, BP_BaseCharacter_C* DeadPawn, FText CallFunc_GetKillerInfo_Name, byte CallFunc_GetKillerInfo_Class, Controller* CallFunc_GetController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3f9e0
	void OnPossesedPawn(Controller* Controller, Controller* LocalControllerRef, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3fac0
	void EnableDamage();// 0x6d94ba8 0x7831b3fba0
	void BulletHit(Actor* DamagedActor, float BaseDamage, PhysicalMaterial* PhysicalMat, BP_BaseCharacter_C* IntigatorPawn, class DamageType DamageTypeClass, float Damage, class DamageType DamageType, Actor* ActorDamaged, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, float CallFunc_ApplyDamage_ReturnValue);// 0x6d94ba8 0x7831b3fc80
	void HideGrenadeAndKnife();// 0x6d94ba8 0x7831b3fd60
	void Show_Grenade();// 0x6d94ba8 0x7831b3fe40
	void Show_Knife();// 0x6d94ba8 0x7831b3ff20
	void OnRep_bOnVehicle();// 0x6d94ba8 0x7831b3cb80
	void GetKillerInfo(Controller* Instigator, out FText Name, out byte Class, byte KillerWeaponName, byte InstigatorClass, Controller* InstigatorRef, bool ___bool_Variable, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText K2Node_Select_Default, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3cc60
	void Crouching(bool ___bool_Variable, float K2Node_Select_Default, float CallFunc_FInterpTo_ReturnValue);// 0x6d94ba8 0x7831b3cd40
	void ForceThrow(bool CallFunc_ReduceGrenades_Success, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue);// 0x6d94ba8 0x7831b3ce20
	void OnRep_EquipedWeapon(bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x7831b3cf00
	void RefillAmmo(int ___int_Loop_Counter_Variable, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, AmmoMagazines K2Node_MakeStruct_AmmoMagazines);// 0x6d94ba8 0x7831b3cfe0
	void Sway(float Delta, float Offset, float CurrentSway, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FInterpTo_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult);// 0x6d94ba8 0x7831b3d0c0
	void OnRep_bReloading();// 0x6d94ba8 0x7831b3d1a0
	void OnRep_bAttacking();// 0x6d94ba8 0x7831b3d280
	void On DamageTaken(float OnHitDamage, const DamageType* OnHitDamageType, Controller* AnyDamageInstigator, Actor* DamageCauser, bool bSelfInficted, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TakeDamage_bDead, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831b3d360
	void ApplySelectedPerk(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, AmmoMagazines K2Node_MakeStruct_AmmoMagazines, AmmoMagazines K2Node_MakeStruct_AmmoMagazines, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x7831b3d440
	void UpdateHealth(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3d520
	void UpdateTotalBullets(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3d600
	void OnRep_bDead();// 0x6d94ba8 0x7831b3d6e0
	void CheckForInteractable(const Actor*[] ___object_Variable, bool CallFunc_Not_PreBool_ReturnValue, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BeginInteract_Failure, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_BaseInteractable_C* K2Node_DynamicCast_AsBP_Base_Interactable, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3d7c0
	void CheckTarget(UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3d8a0
	void SetLeanRotation(Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue);// 0x6d94ba8 0x7831b3d980
	void AdjustCamera(float Input, bool ___bool_Variable, float CallFunc_DegSin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default);// 0x6d94ba8 0x7831b3da60
	void ReduceGrenades(out bool Success, int ___int_Array_Index_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Array_Length_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, AmmoMagazines K2Node_MakeStruct_AmmoMagazines, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x7831b3db40
	void RegenHealth(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_ApplyDamage_ReturnValue);// 0x6d94ba8 0x7831b3dc20
	void ActivateRegenHealth(TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x6d94ba8 0x7831b3dd00
	void StartRegenTimer(bool CallFunc_K2_IsValidTimerHandle_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x6d94ba8 0x7831b3dde0
	void SetSpreadTarget(float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue);// 0x6d94ba8 0x7831b3dec0
	void SetMagazines(int Index, int NewAmmoQuantity, AmmoMagazines K2Node_MakeStruct_AmmoMagazines);// 0x6d94ba8 0x7831b3dfa0
	void AddRecoilYaw(float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x6d94ba8 0x7831b3e080
	void AddRecoilPitch(bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x6d94ba8 0x7831b3e160
	void NoAmmo(bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x6d94ba8 0x7831b3e240
	void StopShoting ();// 0x6d94ba8 0x7831b3e320
	void DirectionalDamageIndicator(Actor* DmgCauser, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3e400
	void MeleeAttack(const Actor*[] K2Node_MakeArray_Array, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_CapsuleTraceSingle_OutHit, bool CallFunc_CapsuleTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, HealthComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3e4e0
	void ThrowGrenade(BP_BaseCharacter_C* InstigatorPawn, float TimeToExplode, Vector CallFunc_GetActorEyesViewPoint_OutLocation, Rotator CallFunc_GetActorEyesViewPoint_OutRotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_VSize_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x6d94ba8 0x7831b3e5c0
	void Drop Flag(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue);// 0x6d94ba8 0x7831b3e6a0
	void Update Game State(BP_BaseCharacter_C* DeadActor, PlayerController* Instigator, Controller* BotController, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_TDM_GS_C* K2Node_DynamicCast_AsFPS_TDM_GS, bool K2Node_DynamicCast_bSuccess, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831b3e780
	void TakeDamage(float DamageToDo, Controller* ControllerInstigator, out bool bDead, Controller* Local_Controller, float DmgToDo, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x6d94ba8 0x7831b3adc0
	void ResetRecoil(bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3aea0
	void SetWeaponVisibility(BP_BaseWeapon_C* Weapon, bool bHidde, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831b3af80
	void EquipWeapon(class BP_BaseWeapon_C WeaponToSpawn, int ActualAmmo, bool bInitialValues, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BaseWeapon_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x7831b3b060
	void HasAmmo(BP_BaseWeapon_C* Weapon, out bool Success, out int Ammo, out int MagazinesIndex, out int NewQuantity, int Index, byte AmmoType, int AmmoToReduce, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Min_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x7831b3b140
	void Movement Recoil(BP_BaseWeapon_C* Weapon, out float Distorsion, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool ___bool_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, bool ___bool_Variable, float K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, Vector CallFunc_ClampVectorSize_ReturnValue, Vector CallFunc_ClampVectorSize_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_VSize_ReturnValue, float K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x6d94ba8 0x7831b3b220
	void SetPOV(bool CallFunc_IsValid_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue);// 0x6d94ba8 0x7831b3b300
	void AddRecoil(float RandomFloat, bool CallFunc_RandomBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x6d94ba8 0x7831b3b3e0
	void TryToShoot(out bool CanShoot, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x7831b3b4c0
	void OnNotifyEnd_472935974CD0378368D6318D91E24DBB(FName NotifyName);// 0x6d94ba8 0x7831b3b5a0
	void OnNotifyBegin_472935974CD0378368D6318D91E24DBB(FName NotifyName);// 0x6d94ba8 0x7831b3b680
	void OnInterrupted_472935974CD0378368D6318D91E24DBB(FName NotifyName);// 0x6d94ba8 0x7831b3b760
	void OnBlendOut_472935974CD0378368D6318D91E24DBB(FName NotifyName);// 0x6d94ba8 0x7831b3b840
	void OnCompleted_472935974CD0378368D6318D91E24DBB(FName NotifyName);// 0x6d94ba8 0x7831b3b920
	void OnNotifyEnd_137028304668B24A4A9706887676E1C1(FName NotifyName);// 0x6d94ba8 0x7831b3ba00
	void OnNotifyBegin_137028304668B24A4A9706887676E1C1(FName NotifyName);// 0x6d94ba8 0x7831b3bae0
	void OnInterrupted_137028304668B24A4A9706887676E1C1(FName NotifyName);// 0x6d94ba8 0x7831b3bbc0
	void OnBlendOut_137028304668B24A4A9706887676E1C1(FName NotifyName);// 0x6d94ba8 0x7831b3bca0
	void OnCompleted_137028304668B24A4A9706887676E1C1(FName NotifyName);// 0x6d94ba8 0x7831b3bd80
	void OnNotifyEnd_430BF82042855DCFF84CB5938349FD22(FName NotifyName);// 0x6d94ba8 0x7831b3be60
	void OnNotifyBegin_430BF82042855DCFF84CB5938349FD22(FName NotifyName);// 0x6d94ba8 0x7831b3bf40
	void OnInterrupted_430BF82042855DCFF84CB5938349FD22(FName NotifyName);// 0x6d94ba8 0x7831b3c020
	void OnBlendOut_430BF82042855DCFF84CB5938349FD22(FName NotifyName);// 0x6d94ba8 0x7831b3c100
	void OnCompleted_430BF82042855DCFF84CB5938349FD22(FName NotifyName);// 0x6d94ba8 0x7831b3c1e0
	void OnNotifyEnd_472935974CD0378368D6318DD6EB12F1(FName NotifyName);// 0x6d94ba8 0x7831b3c2c0
	void OnNotifyBegin_472935974CD0378368D6318DD6EB12F1(FName NotifyName);// 0x6d94ba8 0x7831b3c3a0
	void OnInterrupted_472935974CD0378368D6318DD6EB12F1(FName NotifyName);// 0x6d94ba8 0x7831b3c480
	void OnBlendOut_472935974CD0378368D6318DD6EB12F1(FName NotifyName);// 0x6d94ba8 0x7831b3c560
	void OnCompleted_472935974CD0378368D6318DD6EB12F1(FName NotifyName);// 0x6d94ba8 0x7831b3c640
	void OnNotifyEnd_137028304668B24A4A970688317FBE8B(FName NotifyName);// 0x6d94ba8 0x7831b3c720
	void OnNotifyBegin_137028304668B24A4A970688317FBE8B(FName NotifyName);// 0x6d94ba8 0x7831b3c800
	void OnInterrupted_137028304668B24A4A970688317FBE8B(FName NotifyName);// 0x6d94ba8 0x7831b3c8e0
	void OnBlendOut_137028304668B24A4A970688317FBE8B(FName NotifyName);// 0x6d94ba8 0x7831b3c9c0
	void OnCompleted_137028304668B24A4A970688317FBE8B(FName NotifyName);// 0x6d94ba8 0x7831b390e0
	void OnNotifyEnd_430BF82042855DCFF84CB593C440A268(FName NotifyName);// 0x6d94ba8 0x7831b391c0
	void OnNotifyBegin_430BF82042855DCFF84CB593C440A268(FName NotifyName);// 0x6d94ba8 0x7831b392a0
	void OnInterrupted_430BF82042855DCFF84CB593C440A268(FName NotifyName);// 0x6d94ba8 0x7831b39380
	void OnBlendOut_430BF82042855DCFF84CB593C440A268(FName NotifyName);// 0x6d94ba8 0x7831b39460
	void OnCompleted_430BF82042855DCFF84CB593C440A268(FName NotifyName);// 0x6d94ba8 0x7831b39540
	void OnNotifyEnd_96787A2E4D0AFE9FB7F51597B1A43CD5(FName NotifyName);// 0x6d94ba8 0x7831b39620
	void OnNotifyBegin_96787A2E4D0AFE9FB7F51597B1A43CD5(FName NotifyName);// 0x6d94ba8 0x7831b39700
	void OnInterrupted_96787A2E4D0AFE9FB7F51597B1A43CD5(FName NotifyName);// 0x6d94ba8 0x7831b397e0
	void OnBlendOut_96787A2E4D0AFE9FB7F51597B1A43CD5(FName NotifyName);// 0x6d94ba8 0x7831b398c0
	void OnCompleted_96787A2E4D0AFE9FB7F51597B1A43CD5(FName NotifyName);// 0x6d94ba8 0x7831b399a0
	void OnNotifyEnd_745B3DED406BFCD9750E768D4DAB35C8(FName NotifyName);// 0x6d94ba8 0x7831b39a80
	void OnNotifyBegin_745B3DED406BFCD9750E768D4DAB35C8(FName NotifyName);// 0x6d94ba8 0x7831b39b60
	void OnInterrupted_745B3DED406BFCD9750E768D4DAB35C8(FName NotifyName);// 0x6d94ba8 0x7831b39c40
	void OnBlendOut_745B3DED406BFCD9750E768D4DAB35C8(FName NotifyName);// 0x6d94ba8 0x7831b39d20
	void OnCompleted_745B3DED406BFCD9750E768D4DAB35C8(FName NotifyName);// 0x6d94ba8 0x7831b39e00
	void OnNotifyEnd_472935974CD0378368D6318D6F602C78(FName NotifyName);// 0x6d94ba8 0x7831b39ee0
	void OnNotifyBegin_472935974CD0378368D6318D6F602C78(FName NotifyName);// 0x6d94ba8 0x7831b39fc0
	void OnInterrupted_472935974CD0378368D6318D6F602C78(FName NotifyName);// 0x6d94ba8 0x7831b3a0a0
	void OnBlendOut_472935974CD0378368D6318D6F602C78(FName NotifyName);// 0x6d94ba8 0x7831b3a180
	void OnCompleted_472935974CD0378368D6318D6F602C78(FName NotifyName);// 0x6d94ba8 0x7831b3a260
	void OnNotifyEnd_137028304668B24A4A97068888F48002(FName NotifyName);// 0x6d94ba8 0x7831b3a340
	void OnNotifyBegin_137028304668B24A4A97068888F48002(FName NotifyName);// 0x6d94ba8 0x7831b3a420
	void OnInterrupted_137028304668B24A4A97068888F48002(FName NotifyName);// 0x6d94ba8 0x7831b3a500
	void OnBlendOut_137028304668B24A4A97068888F48002(FName NotifyName);// 0x6d94ba8 0x7831b3a5e0
	void OnCompleted_137028304668B24A4A97068888F48002(FName NotifyName);// 0x6d94ba8 0x7831b3a6c0
	void OnNotifyEnd_430BF82042855DCFF84CB5937DCB9CE1(FName NotifyName);// 0x6d94ba8 0x7831b3a7a0
	void OnNotifyBegin_430BF82042855DCFF84CB5937DCB9CE1(FName NotifyName);// 0x6d94ba8 0x7831b3a880
	void OnInterrupted_430BF82042855DCFF84CB5937DCB9CE1(FName NotifyName);// 0x6d94ba8 0x7831b3a960
	void OnBlendOut_430BF82042855DCFF84CB5937DCB9CE1(FName NotifyName);// 0x6d94ba8 0x7831b3aa40
	void OnCompleted_430BF82042855DCFF84CB5937DCB9CE1(FName NotifyName);// 0x6d94ba8 0x7831b3ab20
	void OnNotifyEnd_52421F2143CE425AF4C4C791964DA610(FName NotifyName);// 0x6d94ba8 0x7831b3ac00
	void OnNotifyBegin_52421F2143CE425AF4C4C791964DA610(FName NotifyName);// 0x6d94ba8 0x7831b3ace0
	void OnInterrupted_52421F2143CE425AF4C4C791964DA610(FName NotifyName);// 0x6d94ba8 0x7831b37400
	void OnBlendOut_52421F2143CE425AF4C4C791964DA610(FName NotifyName);// 0x6d94ba8 0x7831b374e0
	void OnCompleted_52421F2143CE425AF4C4C791964DA610(FName NotifyName);// 0x6d94ba8 0x7831b375c0
	void OnNotifyEnd_96787A2E4D0AFE9FB7F51597966DD9AF(FName NotifyName);// 0x6d94ba8 0x7831b376a0
	void OnNotifyBegin_96787A2E4D0AFE9FB7F51597966DD9AF(FName NotifyName);// 0x6d94ba8 0x7831b37780
	void OnInterrupted_96787A2E4D0AFE9FB7F51597966DD9AF(FName NotifyName);// 0x6d94ba8 0x7831b37860
	void OnBlendOut_96787A2E4D0AFE9FB7F51597966DD9AF(FName NotifyName);// 0x6d94ba8 0x7831b37940
	void OnCompleted_96787A2E4D0AFE9FB7F51597966DD9AF(FName NotifyName);// 0x6d94ba8 0x7831b37a20
	void OnNotifyEnd_745B3DED406BFCD9750E768D6A62D0B2(FName NotifyName);// 0x6d94ba8 0x7831b37b00
	void OnNotifyBegin_745B3DED406BFCD9750E768D6A62D0B2(FName NotifyName);// 0x6d94ba8 0x7831b37be0
	void OnInterrupted_745B3DED406BFCD9750E768D6A62D0B2(FName NotifyName);// 0x6d94ba8 0x7831b37cc0
	void OnBlendOut_745B3DED406BFCD9750E768D6A62D0B2(FName NotifyName);// 0x6d94ba8 0x7831b37da0
	void OnCompleted_745B3DED406BFCD9750E768D6A62D0B2(FName NotifyName);// 0x6d94ba8 0x7831b37e80
	void InpActEvt_Jump_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b37f60
	void InpActEvt_Jump_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38040
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38120
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38200
	void InpActEvt_Reload_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b382e0
	void InpActEvt_Run_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b383c0
	void InpActEvt_Run_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b384a0
	void InpActEvt_Aim_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38580
	void InpActEvt_Aim_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38660
	void InpActEvt_Utility_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38740
	void InpActEvt_Utility_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38820
	void InpActEvt_PrimaryWeapon_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38900
	void InpActEvt_SecondaryWeapon_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b389e0
	void InpActEvt_Skill_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38ac0
	void InpActEvt_Skill_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38ba0
	void InpActEvt_Crouch_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38c80
	void InpActEvt_ToggleWeapon_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38d60
	void InpActEvt_Interact_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38e40
	void InpActEvt_Interact_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b38f20
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b39000
	void InpActEvt_ChangeFiringMode_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b35720
	void OnNotifyEnd_430BF82042855DCFF84CB593E286C4E5(FName NotifyName);// 0x6d94ba8 0x7831b35800
	void OnNotifyBegin_430BF82042855DCFF84CB593E286C4E5(FName NotifyName);// 0x6d94ba8 0x7831b358e0
	void OnInterrupted_430BF82042855DCFF84CB593E286C4E5(FName NotifyName);// 0x6d94ba8 0x7831b359c0
	void OnBlendOut_430BF82042855DCFF84CB593E286C4E5(FName NotifyName);// 0x6d94ba8 0x7831b35aa0
	void OnCompleted_430BF82042855DCFF84CB593E286C4E5(FName NotifyName);// 0x6d94ba8 0x7831b35b80
	void OnNotifyEnd_137028304668B24A4A97068855963C0D(FName NotifyName);// 0x6d94ba8 0x7831b35c60
	void OnNotifyBegin_137028304668B24A4A97068855963C0D(FName NotifyName);// 0x6d94ba8 0x7831b35d40
	void OnInterrupted_137028304668B24A4A97068855963C0D(FName NotifyName);// 0x6d94ba8 0x7831b35e20
	void OnBlendOut_137028304668B24A4A97068855963C0D(FName NotifyName);// 0x6d94ba8 0x7831b35f00
	void OnCompleted_137028304668B24A4A97068855963C0D(FName NotifyName);// 0x6d94ba8 0x7831b35fe0
	void InpActEvt_LeanRight_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b360c0
	void OnNotifyEnd_472935974CD0378368D6318DD273F77D(FName NotifyName);// 0x6d94ba8 0x7831b361a0
	void OnNotifyBegin_472935974CD0378368D6318DD273F77D(FName NotifyName);// 0x6d94ba8 0x7831b36280
	void OnInterrupted_472935974CD0378368D6318DD273F77D(FName NotifyName);// 0x6d94ba8 0x7831b36360
	void OnBlendOut_472935974CD0378368D6318DD273F77D(FName NotifyName);// 0x6d94ba8 0x7831b36440
	void OnCompleted_472935974CD0378368D6318DD273F77D(FName NotifyName);// 0x6d94ba8 0x7831b36520
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831b36600
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831b366e0
	void InpActEvt_LeanLeft_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b367c0
	void OnNotifyEnd_047A1D9743257FE7FAD2CFA87FEDE871(FName NotifyName);// 0x6d94ba8 0x7831b368a0
	void OnNotifyBegin_047A1D9743257FE7FAD2CFA87FEDE871(FName NotifyName);// 0x6d94ba8 0x7831b36980
	void OnInterrupted_047A1D9743257FE7FAD2CFA87FEDE871(FName NotifyName);// 0x6d94ba8 0x7831b36a60
	void OnBlendOut_047A1D9743257FE7FAD2CFA87FEDE871(FName NotifyName);// 0x6d94ba8 0x7831b36b40
	void OnCompleted_047A1D9743257FE7FAD2CFA87FEDE871(FName NotifyName);// 0x6d94ba8 0x7831b36c20
	void OnNotifyEnd_2AAF2C1D47F5E1D811F751B0D92D2332(FName NotifyName);// 0x6d94ba8 0x7831b36d00
	void OnNotifyBegin_2AAF2C1D47F5E1D811F751B0D92D2332(FName NotifyName);// 0x6d94ba8 0x7831b36de0
	void OnInterrupted_2AAF2C1D47F5E1D811F751B0D92D2332(FName NotifyName);// 0x6d94ba8 0x7831b36ec0
	void OnBlendOut_2AAF2C1D47F5E1D811F751B0D92D2332(FName NotifyName);// 0x6d94ba8 0x7831b36fa0
	void OnCompleted_2AAF2C1D47F5E1D811F751B0D92D2332(FName NotifyName);// 0x6d94ba8 0x7831b37080
	void OnNotifyEnd_39FEA55E4FD00C85F22065A1136FB8F5(FName NotifyName);// 0x6d94ba8 0x7831b37160
	void OnNotifyBegin_39FEA55E4FD00C85F22065A1136FB8F5(FName NotifyName);// 0x6d94ba8 0x7831b37240
	void OnInterrupted_39FEA55E4FD00C85F22065A1136FB8F5(FName NotifyName);// 0x6d94ba8 0x7831b37320
	void OnBlendOut_39FEA55E4FD00C85F22065A1136FB8F5(FName NotifyName);// 0x6d94ba8 0x7831b33a40
	void OnCompleted_39FEA55E4FD00C85F22065A1136FB8F5(FName NotifyName);// 0x6d94ba8 0x7831b33b20
	void OnNotifyEnd_3E9398AF4198B8085D484E8F408BA204(FName NotifyName);// 0x6d94ba8 0x7831b33c00
	void OnNotifyBegin_3E9398AF4198B8085D484E8F408BA204(FName NotifyName);// 0x6d94ba8 0x7831b33ce0
	void OnInterrupted_3E9398AF4198B8085D484E8F408BA204(FName NotifyName);// 0x6d94ba8 0x7831b33dc0
	void OnBlendOut_3E9398AF4198B8085D484E8F408BA204(FName NotifyName);// 0x6d94ba8 0x7831b33ea0
	void OnCompleted_3E9398AF4198B8085D484E8F408BA204(FName NotifyName);// 0x6d94ba8 0x7831b33f80
	void OnNotifyEnd_9B25732D48A672BA8998618BE4EF60CA(FName NotifyName);// 0x6d94ba8 0x7831b34060
	void OnNotifyBegin_9B25732D48A672BA8998618BE4EF60CA(FName NotifyName);// 0x6d94ba8 0x7831b34140
	void OnInterrupted_9B25732D48A672BA8998618BE4EF60CA(FName NotifyName);// 0x6d94ba8 0x7831b34220
	void OnBlendOut_9B25732D48A672BA8998618BE4EF60CA(FName NotifyName);// 0x6d94ba8 0x7831b34300
	void OnCompleted_9B25732D48A672BA8998618BE4EF60CA(FName NotifyName);// 0x6d94ba8 0x7831b343e0
	void OnNotifyEnd_E0BBC4614D51264B26801FB42A6F2D43(FName NotifyName);// 0x6d94ba8 0x7831b344c0
	void OnNotifyBegin_E0BBC4614D51264B26801FB42A6F2D43(FName NotifyName);// 0x6d94ba8 0x7831b345a0
	void OnInterrupted_E0BBC4614D51264B26801FB42A6F2D43(FName NotifyName);// 0x6d94ba8 0x7831b34680
	void OnBlendOut_E0BBC4614D51264B26801FB42A6F2D43(FName NotifyName);// 0x6d94ba8 0x7831b34760
	void OnCompleted_E0BBC4614D51264B26801FB42A6F2D43(FName NotifyName);// 0x6d94ba8 0x7831b34840
	void OnNotifyEnd_D4DAA8D14F26BFC0086D7DA77CBF6B8C(FName NotifyName);// 0x6d94ba8 0x7831b34920
	void OnNotifyBegin_D4DAA8D14F26BFC0086D7DA77CBF6B8C(FName NotifyName);// 0x6d94ba8 0x7831b34a00
	void OnInterrupted_D4DAA8D14F26BFC0086D7DA77CBF6B8C(FName NotifyName);// 0x6d94ba8 0x7831b34ae0
	void OnBlendOut_D4DAA8D14F26BFC0086D7DA77CBF6B8C(FName NotifyName);// 0x6d94ba8 0x7831b34bc0
	void OnCompleted_D4DAA8D14F26BFC0086D7DA77CBF6B8C(FName NotifyName);// 0x6d94ba8 0x7831b34ca0
	void InpActEvt_EquipGrenade_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b34d80
	void InpActEvt_EquipKnife_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831b34e60
	void OnNotifyEnd_A13BC5F04CC420D637FF588B8333A6E3(FName NotifyName);// 0x6d94ba8 0x7831b34f40
	void OnNotifyBegin_A13BC5F04CC420D637FF588B8333A6E3(FName NotifyName);// 0x6d94ba8 0x7831b35020
	void OnInterrupted_A13BC5F04CC420D637FF588B8333A6E3(FName NotifyName);// 0x6d94ba8 0x7831b35100
	void OnBlendOut_A13BC5F04CC420D637FF588B8333A6E3(FName NotifyName);// 0x6d94ba8 0x7831b351e0
	void OnCompleted_A13BC5F04CC420D637FF588B8333A6E3(FName NotifyName);// 0x6d94ba8 0x7831b352c0
	void OnNotifyEnd_6039E2364728445A447312ABBA21069D(FName NotifyName);// 0x6d94ba8 0x7831b353a0
	void OnNotifyBegin_6039E2364728445A447312ABBA21069D(FName NotifyName);// 0x6d94ba8 0x7831b35480
	void OnInterrupted_6039E2364728445A447312ABBA21069D(FName NotifyName);// 0x6d94ba8 0x7831b35560
	void OnBlendOut_6039E2364728445A447312ABBA21069D(FName NotifyName);// 0x6d94ba8 0x7831b35640
	void OnCompleted_6039E2364728445A447312ABBA21069D(FName NotifyName);// 0x6d94ba8 0x7831b31d60
	void OnNotifyEnd_267776D84D0FA226C8A5DA9A3D717923(FName NotifyName);// 0x6d94ba8 0x7831b31e40
	void OnNotifyBegin_267776D84D0FA226C8A5DA9A3D717923(FName NotifyName);// 0x6d94ba8 0x7831b31f20
	void OnInterrupted_267776D84D0FA226C8A5DA9A3D717923(FName NotifyName);// 0x6d94ba8 0x7831b32000
	void OnBlendOut_267776D84D0FA226C8A5DA9A3D717923(FName NotifyName);// 0x6d94ba8 0x7831b320e0
	void OnCompleted_267776D84D0FA226C8A5DA9A3D717923(FName NotifyName);// 0x6d94ba8 0x7831b321c0
	void InpActEvt_F1_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831b322a0
	void InpActEvt_N_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831b32380
	void OnNotifyEnd_472935974CD0378368D6318DF5BA1207(FName NotifyName);// 0x6d94ba8 0x7831b32460
	void OnNotifyBegin_472935974CD0378368D6318DF5BA1207(FName NotifyName);// 0x6d94ba8 0x7831b32540
	void OnInterrupted_472935974CD0378368D6318DF5BA1207(FName NotifyName);// 0x6d94ba8 0x7831b32620
	void OnBlendOut_472935974CD0378368D6318DF5BA1207(FName NotifyName);// 0x6d94ba8 0x7831b32700
	void OnCompleted_472935974CD0378368D6318DF5BA1207(FName NotifyName);// 0x6d94ba8 0x7831b327e0
	void OnNotifyEnd_7CF22F5E4499129E7FA9678CCA4B92C9(FName NotifyName);// 0x6d94ba8 0x7831b328c0
	void OnNotifyBegin_7CF22F5E4499129E7FA9678CCA4B92C9(FName NotifyName);// 0x6d94ba8 0x7831b329a0
	void OnInterrupted_7CF22F5E4499129E7FA9678CCA4B92C9(FName NotifyName);// 0x6d94ba8 0x7831b32a80
	void OnBlendOut_7CF22F5E4499129E7FA9678CCA4B92C9(FName NotifyName);// 0x6d94ba8 0x7831b32b60
	void OnCompleted_7CF22F5E4499129E7FA9678CCA4B92C9(FName NotifyName);// 0x6d94ba8 0x7831b32c40
	void InpTchEvt_Moved(byte FingerIndex, Vector Location);// 0x6d94ba8 0x7831b32d20
	void InpTchEvt_Released(byte FingerIndex, Vector Location);// 0x6d94ba8 0x7831b32e00
	void InpTchEvt_Pressed(byte FingerIndex, Vector Location);// 0x6d94ba8 0x7831b32ee0
	void InpActEvt_One_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831b32fc0
	void OnNotifyEnd_430BF82042855DCFF84CB593C54F219F(FName NotifyName);// 0x6d94ba8 0x7831b330a0
	void OnNotifyBegin_430BF82042855DCFF84CB593C54F219F(FName NotifyName);// 0x6d94ba8 0x7831b33180
	void OnInterrupted_430BF82042855DCFF84CB593C54F219F(FName NotifyName);// 0x6d94ba8 0x7831b33260
	void OnBlendOut_430BF82042855DCFF84CB593C54F219F(FName NotifyName);// 0x6d94ba8 0x7831b33340
	void OnCompleted_430BF82042855DCFF84CB593C54F219F(FName NotifyName);// 0x6d94ba8 0x7831b33420
	void OnNotifyEnd_137028304668B24A4A970688725FD977(FName NotifyName);// 0x6d94ba8 0x7831b33500
	void OnNotifyBegin_137028304668B24A4A970688725FD977(FName NotifyName);// 0x6d94ba8 0x7831b335e0
	void OnInterrupted_137028304668B24A4A970688725FD977(FName NotifyName);// 0x6d94ba8 0x7831b336c0
	void OnBlendOut_137028304668B24A4A970688725FD977(FName NotifyName);// 0x6d94ba8 0x7831b337a0
	void OnCompleted_137028304668B24A4A970688725FD977(FName NotifyName);// 0x6d94ba8 0x7831b33880
	void InpAxisEvt_Turn_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x7831b33960
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x7831b30080
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x7831b30160
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x7831b30240
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x7831b30320
	void On_Death(BP_BaseCharacter_C* Dead_Actor, PlayerController* Instigator, Controller* Instigator Controller, float KillerHP, const DamageType* DmgType);// 0x6d94ba8 0x7831b30400
	void Server_Hit(HitResult HitResult, BP_BaseCharacter_C* Instigator, float DamageMult);// 0x6d94ba8 0x7831b304e0
	void Server_Ragdoll(BP_BaseCharacter_C* Actor);// 0x6d94ba8 0x7831b305c0
	void ReceiveBeginPlay();// 0x6d94ba8 0x7831b306a0
	void AutoShoot();// 0x6d94ba8 0x7831b30780
	void Interact();// 0x6d94ba8 0x7831b30860
	void ServerInteract(Actor* Interactable, Actor* Instigator);// 0x6d94ba8 0x7831b30940
	void ResetCanShoot();// 0x6d94ba8 0x7831b30a20
	void ServerRun();// 0x6d94ba8 0x7831b30b00
	void ServerWalk();// 0x6d94ba8 0x7831b30be0
	void ServerSetAim(bool bAim);// 0x6d94ba8 0x7831b30cc0
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x7831b30da0
	void OnBeginAiming();// 0x6d94ba8 0x7831b30e80
	void OnEndAmiming();// 0x6d94ba8 0x7831b30f60
	void CheckRun();// 0x6d94ba8 0x7831b31040
	void SpawnGrenade(Vector SpawnLocation, Rotator SpawnRotation, float TimeToExplode, float PawnVelocity);// 0x6d94ba8 0x7831b31120
	void DropAmmo();// 0x6d94ba8 0x7831b31200
	void StopPawn();// 0x6d94ba8 0x7831b312e0
	void ReceivePossessed(Controller* NewController);// 0x6d94ba8 0x7831b313c0
	void ClientPawnInit(Controller* Controller, BP_BaseWeapon_C* CurrentWeapon);// 0x6d94ba8 0x7831b314a0
	void CheckAim();// 0x6d94ba8 0x7831b31580
	void OnPawnDeath(FText KillerName, float KillerHP, byte KillerClass, const DamageType* DmgType);// 0x6d94ba8 0x7831b31660
	void ShowWeaponMulticast(bool ShowPrimary);// 0x6d94ba8 0x7831b31740
	void UpdatesEveryOneView(bool Weapon);// 0x6d94ba8 0x7831b31820
	void UpdateHP(float NewHP);// 0x6d94ba8 0x7831b31900
	void Update Magazines(out const AmmoMagazines[] Magazines);// 0x6d94ba8 0x7831b319e0
	void Play Impact shake(Actor* Instigator);// 0x6d94ba8 0x7831b31ac0
	void UseClassSkill();// 0x6d94ba8 0x7831b31ba0
	void DestroyWeapon(BP_BaseCharacter_C* Pawn);// 0x6d94ba8 0x7831b31c80
	void ServerEquipWeapons(class BP_BaseWeapon_C Primary Weapon, class BP_BaseWeapon_C SecondaryWeapon);// 0x6d94ba8 0x78e3e2e780
	void SetSafeZone(bool Bool);// 0x6d94ba8 0x78e3e2e860
	void SetWarnPlayer(bool Bool);// 0x6d94ba8 0x78e3e2e940
	void KillPlayerIntruder();// 0x6d94ba8 0x78e3e2ea20
	void PickUpWeapon(class BP_BaseWeapon_C WeaponToEquip, int WeaponActualAmmo);// 0x6d94ba8 0x78e3e2eb00
	void DropPrimaryWeapon();// 0x6d94ba8 0x78e3e2ebe0
	void ShowHitOverlay();// 0x6d94ba8 0x78e3e2ecc0
	void SendInfoToKillFeed(const Controller* KillerPC, BP_BaseCharacter_C* DeadActor, const DamageType* DamageType);// 0x6d94ba8 0x78e3e2eda0
	void Shoot();// 0x6d94ba8 0x78e3e2ee80
	void DeadCam();// 0x6d94ba8 0x78e3e2ef60
	void StopClassSkill();// 0x6d94ba8 0x78e3e2d8a0
	void BulletServer(Actor* Damaged Actor, float Damage, PhysicalMaterial* PhyMat, BP_BaseCharacter_C* Instigator, class DamageType DamageType);// 0x6d94ba8 0x78e3e2f040
	void InteractVehicle(Actor* Intigator);// 0x6d94ba8 0x78e3e2f120
	void Cancel_Interact();// 0x6d94ba8 0x78e3e2f200
	void ServerSetCurrentWeapon(BP_BaseWeapon_C* WeaponToEquip);// 0x6d94ba8 0x78e3e2f2e0
	void OnLanded(out const HitResult Hit);// 0x6d94ba8 0x78e3e2f3c0
	void OnPickupFlag(BP_BaseFlag_C* Flag);// 0x6d94ba8 0x78e3e2f4a0
	void OnDropFlag();// 0x6d94ba8 0x78e3e2f580
	void ApplyMeleeDamage(Actor* DamagedActor, BP_BaseCharacter_C* Intigator, Vector ImpactLocation, Rotator ImpactNormal, PhysicalMaterial* PhyMat);// 0x6d94ba8 0x78e3e2f660
	void SetAttacking(bool Bool);// 0x6d94ba8 0x78e3e2f740
	void DamageDirection(Actor* Dmg Causer);// 0x6d94ba8 0x78e3e2f820
	void ReloadWeapon();// 0x6d94ba8 0x78e3e2f900
	void SetReloading(bool Bool);// 0x6d94ba8 0x78e3e2f9e0
	void PlayHitMarkerSound();// 0x6d94ba8 0x78e3e2fac0
	void ResetLeaning();// 0x6d94ba8 0x78e3e2fba0
	void Server Set Leaning(bool bRight, bool bIsLeaning);// 0x6d94ba8 0x78e3e2fc80
	void ServerResetLeaning();// 0x6d94ba8 0x78e3e2fd60
	void RefreshAim();// 0x6d94ba8 0x78e3e2fe40
	void UpdateRun();// 0x6d94ba8 0x78e3e2ff20
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x6d94ba8 0x78e3e2caa0
	void OnJumped();// 0x6d94ba8 0x78e3e2cb80
	void UpdateAll tags();// 0x6d94ba8 0x78e3e2cc60
	void StopAiming();// 0x6d94ba8 0x78e3e2cd40
	void ForceUncrouch();// 0x6d94ba8 0x78e3e2ce20
	void PlayMeleeMontage();// 0x6d94ba8 0x78e3e2cf00
	void PlayReloadMontage();// 0x6d94ba8 0x78e3e2cfe0
	void Refill Magazines();// 0x6d94ba8 0x78e3e2d0c0
	void UseMelee();// 0x6d94ba8 0x78e3e2d1a0
	void ShowWeapon(bool Primary);// 0x6d94ba8 0x78e3e2d280
	void SetWeaponEquiped(byte NewParam);// 0x6d94ba8 0x78e3e2d360
	void PlayEquipWeaponMontage();// 0x6d94ba8 0x78e3e2d440
	void ForceChangeWeapon(bool QuickChange, bool Primary);// 0x6d94ba8 0x78e3e2d520
	void ForcedWeaponChange(bool QuickChange, bool Primary);// 0x6d94ba8 0x78e3e2d600
	void EquipGrenade();// 0x6d94ba8 0x78e3e2d6e0
	void PlayMeleeImpactEffects(Rotator Impact Normal, Vector ImpactPoint, PhysicalMaterial* Phy Mat);// 0x6d94ba8 0x78e3e2d7c0
	void Reload();// 0x6d94ba8 0x78e3e2d980
	void PlayHitMontage();// 0x6d94ba8 0x78e3e2da60
	void ForceChange();// 0x6d94ba8 0x78e3e2db40
	void EquipKnife();// 0x6d94ba8 0x78e3e2dc20
	void MultiThrowGrenadeAnim();// 0x6d94ba8 0x78e3e2dd00
	void SpectateKiller(Pawn* KillerPawn, Controller* Controller);// 0x6d94ba8 0x78e3e2dde0
	void StartEnableDamageTimer();// 0x6d94ba8 0x78e3e2dec0
	void Fire();// 0x6d94ba8 0x78e3e2dfa0
	void UnFire();// 0x6d94ba8 0x78e3e2e080
	void StartJump();// 0x6d94ba8 0x78e3e2e160
	void StopJump();// 0x6d94ba8 0x78e3e2e240
	void Aim();// 0x6d94ba8 0x78e3e2e320
	void UnAim();// 0x6d94ba8 0x78e3e2e400
	void StartCrouch();// 0x6d94ba8 0x78e3e2e4e0
	void Turn1(float NewParam);// 0x6d94ba8 0x78e3e2e5c0
	void LookUP1(float NewParam);// 0x6d94ba8 0x78e3e2e6a0
	void LearnLeft();// 0x6d94ba8 0x78e3e2adc0
	void LeanRight();// 0x6d94ba8 0x78e3e2aea0
	void Run();// 0x6d94ba8 0x78e3e2af80
	void UnRun();// 0x6d94ba8 0x78e3e2b060
	void Inter();// 0x6d94ba8 0x78e3e2b140
	void SetTouch();// 0x6d94ba8 0x78e3e2b220
	void BndEvt__BP_BaseCharacter_UTCJoystickComponent_K2Node_ComponentBoundEvent_2_On Joystick Pressed__DelegateSignature(Vector Location);// 0x6d94ba8 0x7836562d20
	void BndEvt__BP_BaseCharacter_UTCJoystickComponent_K2Node_ComponentBoundEvent_3_On Joystick Released__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e2b3e0
	void ChangeFiringMode();// 0x6d94ba8 0x78e3e2b4c0
	void ExecuteUbergraph_BP_BaseCharacter(int EntryPoint, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchName_CmpSuccess, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchName_CmpSuccess, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool ___bool_Variable, bool ___bool_Variable, bool ___bool_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, bool ___bool_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_EqualEqual_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputActionEvent_Key, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputKeyEvent_Key, Key K2Node_InputActionEvent_Key, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool ___bool_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, byte ___byte_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, bool ___bool_Variable, class DamageType ___class_Variable, bool ___bool_Variable, float ___float_Variable, float ___float_Variable, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, byte ___byte_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, AnimMontage* ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool K2Node_SwitchEnum_CmpSuccess, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool ___bool_Variable, bool ___bool_Variable, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte ___byte_Variable, Vector ___struct_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, byte ___byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputKeyEvent_Key, bool ___bool_Variable, float ___float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool ___bool_Variable, float ___float_Variable, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName ___name_Variable, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchName_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsFlying_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, int ___int_Loop_Counter_Variable, AmmoMagazines CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int ___int_Array_Index_Variable, FName K2Node_CustomEvent_NotifyName, FName ___name_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Variable, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_ReduceGrenades_Success, TimerHandle CallFunc_K2_SetTimer_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FName CallFunc_Montage_GetCurrentSection_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ReduceGrenades_Success, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FName ___name_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName ___name_Variable, bool CallFunc_BooleanAND_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_ReduceGrenades_Success, TimerHandle CallFunc_K2_SetTimer_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, FName CallFunc_Montage_GetCurrentSection_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_BooleanAND_ReturnValue, UTCComponent_C*[] CallFunc_K2_GetComponentsByClass_ReturnValue, UTCComponent_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, UTCComponent_C*[] CallFunc_Filter_By_Active_Active_Components, UTCComponent_C*[] CallFunc_Filter_By_Bounds_In_Bounds, UTCComponent_C*[] CallFunc_Filter_By_Bounds_W_out_Bounds, UTCComponent_C*[] CallFunc_Filter_By_Bounds_Both, int CallFunc_Array_Length_ReturnValue, UTCComponent_C*[] CallFunc_Sort_By_Priority_W__Higher_Priority, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, float K2Node_InputAxisEvent_AxisValue, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_InputAxisEvent_AxisValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_InputAxisEvent_AxisValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, bool CallFunc_Not_PreBool_ReturnValue, BP_BaseCharacter_C* K2Node_CustomEvent_Dead_Actor, PlayerController* K2Node_CustomEvent_Instigator, Controller* K2Node_CustomEvent_Instigator_Controller, float K2Node_CustomEvent_KillerHP, const DamageType* K2Node_CustomEvent_DmgType, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Controller* CallFunc_GetController_ReturnValue, HitResult K2Node_CustomEvent_HitResult, BP_BaseCharacter_C* K2Node_CustomEvent_Instigator, float K2Node_CustomEvent_DamageMult, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, BP_BaseCharacter_C* K2Node_CustomEvent_Actor, float K2Node_Select_Default, int CallFunc_FTrunc_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_TryToShoot_CanShoot, FName K2Node_CustomEvent_NotifyName, Actor* K2Node_CustomEvent_Interactable, Actor* K2Node_CustomEvent_Instigator, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int ___int_Array_Index_Variable, bool K2Node_CustomEvent_bAim, float K2Node_Event_DeltaSeconds, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, Vector K2Node_CustomEvent_SpawnLocation, Rotator K2Node_CustomEvent_SpawnRotation, float K2Node_CustomEvent_TimeToExplode, float K2Node_CustomEvent_PawnVelocity, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Magazine_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, AmmoMagazines CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Movement_Recoil_Distorsion, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Controller* K2Node_Event_NewController, Controller* K2Node_CustomEvent_Controller, BP_BaseWeapon_C* K2Node_CustomEvent_CurrentWeapon, int ___int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText K2Node_CustomEvent_KillerName, float K2Node_CustomEvent_KillerHP, byte K2Node_CustomEvent_KillerClass, const DamageType* K2Node_CustomEvent_DmgType, bool K2Node_CustomEvent_ShowPrimary, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_Weapon, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, float K2Node_CustomEvent_NewHP, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, const AmmoMagazines[] K2Node_CustomEvent_Magazines, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector4 K2Node_MakeStruct_Vector4, Actor* K2Node_CustomEvent_Instigator, PostProcessSettings K2Node_MakeStruct_PostProcessSettings, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, BP_BaseCharacter_C* K2Node_CustomEvent_Pawn, int ___int_Array_Index_Variable, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Is_Finger_Location_Exists_Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, class BP_BaseWeapon_C K2Node_CustomEvent_Primary_Weapon, class BP_BaseWeapon_C K2Node_CustomEvent_SecondaryWeapon, bool K2Node_CustomEvent_Bool, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_Bool, class BP_BaseWeapon_C K2Node_CustomEvent_WeaponToEquip, int K2Node_CustomEvent_WeaponActualAmmo, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName ___name_Variable, bool CallFunc_CanJump_ReturnValue, const Controller* K2Node_CustomEvent_KillerPC, BP_BaseCharacter_C* K2Node_CustomEvent_DeadActor, const DamageType* K2Node_CustomEvent_DamageType, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText K2Node_Select_Default, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_CustomEvent_Damaged_Actor, float K2Node_CustomEvent_Damage, PhysicalMaterial* K2Node_CustomEvent_PhyMat, BP_BaseCharacter_C* K2Node_CustomEvent_Instigator, class DamageType K2Node_CustomEvent_DamageType, Actor* K2Node_CustomEvent_Intigator, const Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_BaseVehicle_C* K2Node_DynamicCast_AsBP_Base_Vehicle, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Interactive, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FName K2Node_CustomEvent_NotifyName, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BP_BaseWeapon_C* K2Node_CustomEvent_WeaponToEquip, bool CallFunc_BeginInteract_Failure, delegate K2Node_CreateDelegate_OutputDelegate, const HitResult K2Node_Event_Hit, Controller* CallFunc_GetController_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, int ___int_Loop_Counter_Variable, BP_BaseFlag_C* K2Node_CustomEvent_Flag, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* K2Node_CustomEvent_DamagedActor, BP_BaseCharacter_C* K2Node_CustomEvent_Intigator, Vector K2Node_CustomEvent_ImpactLocation, Rotator K2Node_CustomEvent_ImpactNormal, PhysicalMaterial* K2Node_CustomEvent_PhyMat, Controller* CallFunc_GetController_ReturnValue, bool K2Node_CustomEvent_Bool, Actor* K2Node_CustomEvent_Dmg_Causer, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_Bool, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, CameraShakeBase* CallFunc_StartCameraShake_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Grenade_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_bRight, bool K2Node_CustomEvent_bIsLeaning, FName K2Node_CustomEvent_NotifyName, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, CameraShakeBase* CallFunc_StartCameraShake_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int ___int_Array_Index_Variable, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_Is_Finger_Location_Exists_Result, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, const Vector K2Node_Event_PreviousFloorImpactNormal, const Vector K2Node_Event_PreviousFloorContactNormal, const Vector K2Node_Event_PreviousLocation, float K2Node_Event_TimeDelta, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, BP_BaseCharacter_C*[] CallFunc_GetAllActorsOfClass_OutActors, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, BP_BaseCharacter_C* CallFunc_Array_Get_Item, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, WB_PlayerTag_C* K2Node_DynamicCast_AsWB_Player_Tag, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, BP_Bomb_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_HasAmmo_Success, int CallFunc_HasAmmo_Ammo, int CallFunc_HasAmmo_MagazinesIndex, int CallFunc_HasAmmo_NewQuantity, bool CallFunc_HasAmmo_Success, int CallFunc_HasAmmo_Ammo, int CallFunc_HasAmmo_MagazinesIndex, int CallFunc_HasAmmo_NewQuantity, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AmmoMagazines CallFunc_Array_Get_Item, bool CallFunc_NotEqual_IntInt_ReturnValue, bool K2Node_CustomEvent_Primary, bool CallFunc_Not_PreBool_ReturnValue, byte K2Node_CustomEvent_NewParam, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_QuickChange, bool K2Node_CustomEvent_Primary, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_QuickChange, bool K2Node_CustomEvent_Primary, bool CallFunc_Not_PreBool_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator K2Node_CustomEvent_Impact_Normal, Vector K2Node_CustomEvent_ImpactPoint, PhysicalMaterial* K2Node_CustomEvent_Phy_Mat, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, AnimMontage* K2Node_Select_Default, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Array_Index_Variable, UTCComponent_C* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Is_Finger_Slots_Available_ReturnValue, bool CallFunc_Is_Finger_Location_Exists_Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, class DamageType K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_ApplyDamage_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Not_PreBool_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, AnimMontage* K2Node_Select_Default, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Pawn* K2Node_CustomEvent_KillerPawn, Controller* K2Node_CustomEvent_Controller, TimerHandle CallFunc_K2_SetTimer_ReturnValue, float K2Node_CustomEvent_NewParam, float K2Node_CustomEvent_NewParam, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float K2Node_Select_Default, float K2Node_Select_Default, bool CallFunc_NotEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, AnimMontage* K2Node_Select_Default, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, WB_Fire_C* K2Node_DynamicCast_AsWB_Fire, bool K2Node_DynamicCast_bSuccess, Vector K2Node_ComponentBoundEvent_Location, Vector K2Node_ComponentBoundEvent_Location, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float K2Node_Select_Default, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Add_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FName ___name_Variable, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, FName K2Node_CustomEvent_NotifyName, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x78e3e2b5a0
	void EventOnAimChange__DelegateSignature();// 0x6d94ba8 0x78e3e2b760
	void EventDead__DelegateSignature();// 0x6d94ba8 0x78e3e2b920

--------------------------------
Class: UTCJoystickComponent_C.UTCComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 0x8] 0x7831309680
	Vector Press Location;//[Offset: 0x1a0, Size: 0xc] 0x7831309600
	Vector Drag Location;//[Offset: 0x1ac, Size: 0xc] 0x7831309580
	Vector Direction;//[Offset: 0x1b8, Size: 0xc] 0x7831309500
	float Previous Magnitude;//[Offset: 0x1c4, Size: 0x4] 0x783130b580
	float Magnitude;//[Offset: 0x1c8, Size: 0x4] 0x783130b500
	float Angle;//[Offset: 0x1cc, Size: 0x4] 0x783130b480
	Vector2D Axes;//[Offset: 0x1d0, Size: 0x8] 0x783130b400
	float Max Magnitude;//[Offset: 0x1d8, Size: 0x4] 0x783130b380
	float Clamping Speed;//[Offset: 0x1dc, Size: 0x4] 0x783130b300
	float Joystick Offset;//[Offset: 0x1e0, Size: 0x4] 0x783130b280
	byte Lock Axis;//[Offset: 0x1e4, Size: 0x1] 0x783130b200
	bool Enable Floating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 0x1] 0x783130b180
	delegate On X Axis Changed;//[Offset: 0x1e8, Size: 0x10] 0x783130b100
	delegate On Y Axis Changed;//[Offset: 0x1f8, Size: 0x10] 0x783130b080
	bool Released;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1] 0x783130b000
	delegate On Joystick Location Changed;//[Offset: 0x210, Size: 0x10] 0x783130af80
	delegate On Picker Location Changed;//[Offset: 0x220, Size: 0x10] 0x783130af00
	delegate On Joystick Pressed;//[Offset: 0x230, Size: 0x10] 0x783130ae80
	delegate On Joystick Released;//[Offset: 0x240, Size: 0x10] 0x783130ae00
	delegate On Joystick Clamped;//[Offset: 0x250, Size: 0x10] 0x783130ad80
	delegate On Axes Changed;//[Offset: 0x260, Size: 0x10] 0x783130ad00
	byte CurrentFingerIndex;//[Offset: 0x270, Size: 0x1] 0x783130ac80
	UTCJoystickDebugWidget_C* Debug Widget;//[Offset: 0x278, Size: 0x8] 0x783130ac00
	UserWidget* Joystick Widget;//[Offset: 0x280, Size: 0x8] 0x783130ab80
	bool Hide On Unpossession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1] 0x783130ab00
	bool Use Fixed Location;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1] 0x783130aa80
	bool Use Fixed Location In Percentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1] 0x783130aa00
	bool Recalculate Immediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1] 0x783130a980
	bool Adjust Bounds to Fixed Location;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1] 0x783130a900
	Vector2D Fixed Location;//[Offset: 0x290, Size: 0x8] 0x783130a880
	bool Use Widget Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1] 0x783130a800
	Vector2D Fixed Location (%);//[Offset: 0x29c, Size: 0x8] 0x783130a780
	void Snap Bounds to Fixed Location(bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue);// 0x6d94ba8 0x78e3e2c2c0
	void Update Temp Variables(float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_VSize_ReturnValue);// 0x6d94ba8 0x78e3e2c3a0
	void Update Fixed Location(bool Is Viewport Size Changed, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6d94ba8 0x78e3e2c480
	void Setup Fixed Location(bool Is Enabled, Vector2D Fixed Location, bool In Percent, bool Imeediate Recalculation, bool Adjust Bounds to Fixed Location);// 0x6d94ba8 0x78e3e2c560
	void Update Magnituge By Widget Size(float CallFunc_GetViewportScale_ReturnValue, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ObjectObject_ReturnValue, float CallFunc_Get_Max_Size_Value, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x78e3e2c640
	void Get Direction Angle(out float Angle);// 0x6d94ba8 0x78e3e2c720
	void Inner Setup Widget(class UserWidget Widget Class, bool Use Widget Size, bool Hide If Unpossessed, out bool Is Initialized, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Possessed_By_PC, bool CallFunc_Get_Is_Pawn_Possessed_by_PC_Is_Locally_Controlled, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UserWidget* CallFunc_Create_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, float CallFunc_Get_Max_Size_Value, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x78e3e2c8e0
	void Get Joystick Widget Instance(out UserWidget* Joystick Widget Instance);// 0x6d94ba8 0x78e3e2c9c0
	void Snap Widget to Bounds(Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x78e3e290e0
	void Clear Vector Z(Vector In Vector, out Vector Out Vector, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue);// 0x6d94ba8 0x78e3e291c0
	void Update Lock Axes(bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_FInterpTo_ReturnValue, float CallFunc_FInterpTo_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x6d94ba8 0x78e3e292a0
	void Update Floating(out Vector JoystickLocation, out Vector PickerLocation, float Old Magnitude, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Check_Bounds_In_Bounds, bool CallFunc_Check_Bounds_W_out_Bounds, bool CallFunc_Check_Bounds_In_Bounds_by_X, bool CallFunc_Check_Bounds_In_Bounds_by_Y, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_VLerp_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_SelectVector_ReturnValue);// 0x6d94ba8 0x78e3e29380
	void Update Axis Vector(out Vector2D Axis, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_DegSin_ReturnValue, float CallFunc_DegCos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6d94ba8 0x78e3e29460
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x78e3e29540
	void On Joystick Location Changed Event(Vector Location);// 0x6d94ba8 0x78e3e29620
	void On Picker Location Changed Event(Vector Location);// 0x6d94ba8 0x78e3e29700
	void On Joystick Pressed Event(Vector Location);// 0x6d94ba8 0x78e3e297e0
	void On Joystick Released Event(Vector Location);// 0x6d94ba8 0x78e3e298c0
	void On Joystick Clamped Event();// 0x6d94ba8 0x78e3e299a0
	void On X Axis Changed Event(float Value);// 0x6d94ba8 0x78e3e29a80
	void On Y Axis Changed Event(float Value);// 0x6d94ba8 0x78e3e29b60
	void On Axes Changed Event(float XAxis, float YAxis, Vector Direction);// 0x6d94ba8 0x78e3e29c40
	void Setup Widget(class UserWidget Widget (with IUTCWIdget Interface), bool Use Widget Size (back texture size), bool Hide if pawn Unpossessed);// 0x6d94ba8 0x78e3e29d20
	void Destroy Widget();// 0x6d94ba8 0x78e3e29e00
	void ReceiveBeginPlay();// 0x6d94ba8 0x78e3e29ee0
	void On Event Touch Moved(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e29fc0
	void On Event Touch Released(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e2a0a0
	void On Pawn Unpossesed(Controller* Old Controller);// 0x6d94ba8 0x78e3e2a180
	void On Event Touch Pressed(Vector Location, byte FingerIndex);// 0x6d94ba8 0x78e3e2a260
	void On Viewport Size Is Changed();// 0x6d94ba8 0x78e3e2a340
	void On Viewport Size Changed Event(Vector2D Previous Size, Vector2D Updated Size);// 0x6d94ba8 0x78e3e2a420
	void On Pawn Possesed(Controller* New Controller);// 0x6d94ba8 0x78e3e2a500
	void ExecuteUbergraph_UTCJoystickComponent(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_NotEqual_ByteByte_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Update_Floating_JoystickLocation, Vector CallFunc_Update_Floating_PickerLocation, bool CallFunc_Not_PreBool_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue, Vector2D CallFunc_Update_Axis_Vector_Axis, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Vector CallFunc_VInterpTo_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Vector2DInterpTo_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector K2Node_CustomEvent_Location, Vector K2Node_CustomEvent_Location, Vector K2Node_CustomEvent_Location, Vector K2Node_CustomEvent_Location, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_XAxis, float K2Node_CustomEvent_YAxis, Vector K2Node_CustomEvent_Direction, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsIUTCWidget, bool K2Node_DynamicCast_bSuccess, UTCJoystickDebugWidget_C* CallFunc_Create_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, class UserWidget K2Node_CustomEvent_Widget__with_IUTCWIdget_Interface_, bool K2Node_CustomEvent_Use_Widget_Size__back_texture_size_, bool K2Node_CustomEvent_Hide_if_pawn_Unpossessed, bool CallFunc_Inner_Setup_Widget_Is_Initialized, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, Controller* K2Node_Event_Old_Controller, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector K2Node_Event_Location, byte K2Node_Event_FingerIndex, bool ___bool_Has_Been_Initd_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Is_Finger_Location_Exists_Result, Vector CallFunc_SelectVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_IsClosed_Variable, Vector2D K2Node_CustomEvent_Previous_Size, Vector2D K2Node_CustomEvent_Updated_Size, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Controller* K2Node_Event_New_Controller, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x78e3e2a5e0
	void On Axes Changed__DelegateSignature(float XAxis, float YAxis, Vector Direction);// 0x6d94ba8 0x78e3e2a6c0
	void On Joystick Clamped__DelegateSignature();// 0x6d94ba8 0x78e3e2a7a0
	void On Joystick Released__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e2a880
	void On Joystick Pressed__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e2a960
	void On Picker Location Changed__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e2aa40
	void On Joystick Location Changed__DelegateSignature(Vector Location);// 0x6d94ba8 0x78e3e2ab20
	void On Y Axis Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78e3e2ace0
	void On X Axis Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78e3e274e0

--------------------------------
Class: UTCJoystickDebugWidget_C.UTCDebugWidget_C.UserWidget.Widget.Visual.Object
	Vector2D Joystick Location;//[Offset: 0x270, Size: 0x8] 0x7831415600
	Vector2D Picker Location;//[Offset: 0x278, Size: 0x8] 0x7831415580
	float Radius;//[Offset: 0x280, Size: 0x4] 0x7831415500
	byte LockedAxis;//[Offset: 0x284, Size: 0x1] 0x7831415480
	void OnPaint(out PaintContext Context, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, LinearColor CallFunc_SelectColor_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, LinearColor CallFunc_SelectColor_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x78e3e206a0

--------------------------------
Class: BP_SpectatorBase_C.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x78360fd880
	SpringArmComponent* SpringArm;//[Offset: 0x288, Size: 0x8] 0x78360fd800
	CameraComponent* Camera;//[Offset: 0x290, Size: 0x8] 0x78360fd780
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x7831202700
	void InpAxisEvt_Turn_K2Node_InputAxisEvent(float AxisValue);// 0x6d94ba8 0x78312027e0
	void ReceiveBeginPlay();// 0x6d94ba8 0x78312028c0
	void Turn(float Value);// 0x6d94ba8 0x7831202a80
	void LookUp(float Value);// 0x6d94ba8 0x7831202d20
	void ExecuteUbergraph_BP_SpectatorBase(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float K2Node_InputAxisEvent_AxisValue, float K2Node_InputAxisEvent_AxisValue, float K2Node_CustomEvent_Value, float K2Node_CustomEvent_Value, WB_KilledBy_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, WB_KilledBy_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831202e00

--------------------------------
Class: WB_KilledBy_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7835c3fb80
	Image* ClassIcon;//[Offset: 0x268, Size: 0x8] 0x7835c3f980
	TextBlock* HealthLeft;//[Offset: 0x270, Size: 0x8] 0x7850104680
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7850104600
	TextBlock* TextBlock;//[Offset: 0x280, Size: 0x8] 0x7850104580
	FText KillerName;//[Offset: 0x288, Size: 0x18] 0x7850104500
	float KillerHP;//[Offset: 0x2a0, Size: 0x4] 0x7850104480
	byte KillerClass;//[Offset: 0x2a4, Size: 0x1] 0x7850104400
	DamageType* WeaponDamageType;//[Offset: 0x2a8, Size: 0x8] 0x7850104380
	BP_SpectatorBase_C* NewVar;//[Offset: 0x2b0, Size: 0x8] 0x7850104300
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e5df200
	void Construct();// 0x6d94ba8 0x782e5df2e0
	void Destruct();// 0x6d94ba8 0x782e5df4a0
	void ExecuteUbergraph_WB_KilledBy(int EntryPoint, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, int CallFunc_FTrunc_ReturnValue, const DT_BaseDamage_C* K2Node_DynamicCast_AsDT_Base_Damage, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e5df660

--------------------------------
Class: DT_BaseDamage_C.DamageType.Object
	PaperSprite* DamageIcon;//[Offset: 0x40, Size: 0x8] 0x7834367380
	FText WeaponName;//[Offset: 0x48, Size: 0x18] 0x7834367300
	bool bCanHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1] 0x7834367280

--------------------------------
Class: BaseCharacterPC_C.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 0x8] 0x7833c85c80
	bool bReadyToSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1] 0x7833c85c00
	bool Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1] 0x7833c85b80
	byte Class;//[Offset: 0x57a, Size: 0x1] 0x7833c85b00
	float MasterVolume;//[Offset: 0x57c, Size: 0x4] 0x7833c85a80
	float MusicVolume;//[Offset: 0x580, Size: 0x4] 0x7833c85a00
	float CharactersVolume;//[Offset: 0x584, Size: 0x4] 0x7833c85980
	float AmbientVolume;//[Offset: 0x588, Size: 0x4] 0x7833c85900
	float WeaponVolume;//[Offset: 0x58c, Size: 0x4] 0x7833c85880
	bool bShowFps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1] 0x7833c85800
	int TimeLeft;//[Offset: 0x594, Size: 0x4] 0x7833c85780
	byte Perks;//[Offset: 0x598, Size: 0x1] 0x7833c85700
	FText SenderText;//[Offset: 0x5a0, Size: 0x18] 0x7833c85680
	FText SenderName;//[Offset: 0x5b8, Size: 0x18] 0x7833c85600
	WB_Gameplay_C* GameplayWB;//[Offset: 0x5d0, Size: 0x8] 0x7833c85580
	byte ActualGameMode;//[Offset: 0x5d8, Size: 0x1] 0x7833c85500
	FText KillerName;//[Offset: 0x5e0, Size: 0x18] 0x7833c85480
	FText DeathPlayerName;//[Offset: 0x5f8, Size: 0x18] 0x7833c85400
	WB_CharacterSelection_C* CharacterSelectionRef;//[Offset: 0x610, Size: 0x8] 0x7833c85380
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1] 0x7833c85300
	BP_BaseVehicle_C* ActualVehicle;//[Offset: 0x620, Size: 0x8] 0x7833c87380
	FText SteamName;//[Offset: 0x628, Size: 0x18] 0x7833c87300
	bool bSettingsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1] 0x7833c87280
	class BP_BaseWeapon_C* PrimaryWeapon;//[Offset: 0x648, Size: 0x8] 0x783450f420
	class BP_BaseWeapon_C* SecondaryWeapon;//[Offset: 0x650, Size: 0x8] 0x783450f380
	FText Test;//[Offset: 0x658, Size: 0x18] 0x7833c87200
	class BP_Grenade_C* GrenadeType;//[Offset: 0x670, Size: 0x8] 0x783450f2e0
	float MouseSensitivity ;//[Offset: 0x678, Size: 0x4] 0x7833c87180
	bool bVericalInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1] 0x7833c87100
	bool bHorizontalInverted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 0x1] 0x7833c87080
	WB_Controls_C* ShowControlsWB;//[Offset: 0x680, Size: 0x8] 0x7833c87000
	float ZoomSensitivity;//[Offset: 0x688, Size: 0x4] 0x7833c86f80
	bool TestBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 0x1] 0x7833c86f00
	bool bIsTeamChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68d, Size: 0x1] 0x7833c86e80
	bool bIsChatOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e, Size: 0x1] 0x7833c86e00
	WB_Chat_C* ChatRef;//[Offset: 0x690, Size: 0x8] 0x7833c86d80
	FPS_PlayerState_C*[] SemiSortedScoreTeamA;//[Offset: 0x698, Size: 0x10] 0x783450d080
	FPS_PlayerState_C*[] SemiSortedScoreTeamB;//[Offset: 0x6a8, Size: 0x10] 0x783450cfe0
	void GetPlayerName(out FText PlayerName, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x78312092a0
	void GetTimeLeftToSpawn(out float TimeLeft, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue);// 0x6d94ba8 0x7831209380
	void LoadSettings();// 0x6d94ba8 0x7831209460
	void InpActEvt_SettingMenu_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831209540
	void OnFailure_8B36B7024B2396B3739819A2F6B7B374();// 0x6d94ba8 0x7831209620
	void OnSuccess_8B36B7024B2396B3739819A2F6B7B374();// 0x6d94ba8 0x7831209700
	void InpActEvt_ShowInputs_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x78312097e0
	void InpActEvt_ShowInputs_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x78312098c0
	void InpActEvt_GlobalChat_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x78312099a0
	void InpActEvt_TeamChat_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831209a80
	void InpActEvt_Chat_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831209b60
	void InpActEvt_ShowScoreScreen_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831209c40
	void InpActEvt_ShowScoreScreen_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7831209d20
	void InpActEvt_P_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831209e00
	void InpActEvt_P_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7831209ee0
	void ReceiveEndPlay(byte EndPlayReason);// 0x6d94ba8 0x7831209fc0
	void Server_AddToReadyToSpawnList(PlayerController* PCReady);// 0x6d94ba8 0x783120a0a0
	void SetTeam(bool bTeam);// 0x6d94ba8 0x783120a180
	void SetClass(byte PlayeerClass);// 0x6d94ba8 0x783120a260
	void LoadCharacterSelect();// 0x6d94ba8 0x783120a340
	void AddKill(BP_LPSP_PCH_C* DeadActor, bool Headshot);// 0x6d94ba8 0x783120a420
	void Kicked();// 0x6d94ba8 0x783120a500
	void ShowGameplayWidget(BP_LPSP_PCH_C* PlayerPawn);// 0x6d94ba8 0x783120a5e0
	void ReceiveBeginPlay();// 0x6d94ba8 0x783120a6c0
	void ShowEndGameScreen(bool bWinnerTeam, float TimeForNextMatch);// 0x6d94ba8 0x783120a7a0
	void GetTime();// 0x6d94ba8 0x783120a880
	void KillPawn();// 0x6d94ba8 0x783120a960
	void SetPerks(byte Perk);// 0x6d94ba8 0x783120aa40
	void SetClientGameMode(byte GameMode);// 0x6d94ba8 0x783120ab20
	void ServerDestroyWeapon(Actor* Actor);// 0x6d94ba8 0x783120ac00
	void CloseWidgets();// 0x6d94ba8 0x783120ace0
	void UpdateKillFeed(FText Killer, FText Victim, bool bKillerTeam, bool bVictimTeam, const DamageType* DamageType);// 0x6d94ba8 0x7831207400
	void SetIsPlaying(bool BoolValue);// 0x6d94ba8 0x78312075c0
	void ServerSetGM(byte GameMode);// 0x6d94ba8 0x78312076a0
	void SetSteamName();// 0x6d94ba8 0x7831207780
	void PauseGame();// 0x6d94ba8 0x7831207860
	void SetPrimaryWeapon(out const class BP_BaseWeapon_C PrimaryWeapon);// 0x6d94ba8 0x7831207940
	void SetSecondaryWeapon(out const class BP_BaseWeapon_C SecondaryWeapon);// 0x6d94ba8 0x7831207a20
	void SetGrenadeType(class BP_Grenade_C GrenadeType);// 0x6d94ba8 0x7831207b00
	void ShowKillingSpreeMessage();// 0x6d94ba8 0x7831207be0
	void ShowKillMarker();// 0x6d94ba8 0x7831207cc0
	void ShowHitMarker();// 0x6d94ba8 0x7831207da0
	void CloseScores();// 0x6d94ba8 0x7831207e80
	void Close CharacterSelection();// 0x6d94ba8 0x7831207f60
	void SuicidePoints();// 0x6d94ba8 0x7831208040
	void RemoveAllWidgets();// 0x6d94ba8 0x7831208120
	void UpdateObjectiveMarkers();// 0x6d94ba8 0x7831208200
	void DeathmatchEndGame(float TimeForNextMatch);// 0x6d94ba8 0x78312082e0
	void ShowKilledByWidget(FText KillerName, float KillerHealth, byte KillerClass, const DamageType* DamageType);// 0x6d94ba8 0x78312083c0
	void CleanWidgets();// 0x6d94ba8 0x78312084a0
	void CloseControlsWidget();// 0x6d94ba8 0x7831208580
	void CreateChatWidget();// 0x6d94ba8 0x7831208660
	void OpenScores();// 0x6d94ba8 0x7831208740
	void InitScoreList();// 0x6d94ba8 0x7831208820
	void ESC();// 0x6d94ba8 0x7831208900
	void UpdateChat(FText Sender, FText Text, bool bTeamChat);// 0x6d94ba8 0x78312089e0
	void GetChatMessage(FText TextToSend, bool bTeamChat, PlayerController* SenderPC);// 0x6d94ba8 0x7831208ac0
	void UnpossesVehicle();// 0x6d94ba8 0x7831208ba0
	void ChangePosition(int Position);// 0x6d94ba8 0x7831208c80
	void LeaveVehicle();// 0x6d94ba8 0x7831208e40
	void SetActualVehicle(BP_BaseVehicle_C* NewVehicle);// 0x6d94ba8 0x7831209000
	void ExecuteUbergraph_BaseCharacterPC(int EntryPoint, Key K2Node_InputActionEvent_Key, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue, DestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* K2Node_CustomEvent_PCReady, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_CustomEvent_bTeam, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_PlayeerClass, WB_CharacterSelection_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_DeadActor, bool K2Node_CustomEvent_Headshot, bool CallFunc_IsValid_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_PlayerPawn, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, WB_Gameplay_C* CallFunc_Create_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputKeyEvent_Key, int ___int_Array_Index_Variable, bool K2Node_CustomEvent_bWinnerTeam, float K2Node_CustomEvent_TimeForNextMatch, GameInstance* CallFunc_GetGameInstance_ReturnValue, Key K2Node_InputKeyEvent_Key, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Key ___struct_Variable, Pawn* CallFunc_K2_GetPawn_ReturnValue, Key K2Node_InputActionEvent_Key, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputActionEvent_Key, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetTimeLeftToSpawn_TimeLeft, int CallFunc_FTrunc_ReturnValue, byte K2Node_CustomEvent_Perk, byte K2Node_CustomEvent_GameMode, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Actor* K2Node_CustomEvent_Actor, FText K2Node_CustomEvent_Killer, FText K2Node_CustomEvent_Victim, bool K2Node_CustomEvent_bKillerTeam, bool K2Node_CustomEvent_bVictimTeam, const DamageType* K2Node_CustomEvent_DamageType, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_boolValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue, byte K2Node_CustomEvent_GameMode, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsGamePaused_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_SetGamePaused_ReturnValue, const class BP_BaseWeapon_C K2Node_CustomEvent_PrimaryWeapon, const class BP_BaseWeapon_C K2Node_CustomEvent_SecondaryWeapon, class BP_Grenade_C K2Node_CustomEvent_GrenadeType, WB_KillingSpreeMessage_C* CallFunc_Create_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, float CallFunc_ApplyDamage_ReturnValue, int ___int_Array_Index_Variable, PlayerStart*[] CallFunc_GetAllActorsOfClass_OutActors, Key K2Node_InputActionEvent_Key, PlayerStart* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_TimeForNextMatch, GameInstance* CallFunc_GetGameInstance_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key, FText K2Node_CustomEvent_KillerName, float K2Node_CustomEvent_KillerHealth, byte K2Node_CustomEvent_KillerClass, const DamageType* K2Node_CustomEvent_DamageType, bool CallFunc_IsValid_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, int ___int_Loop_Counter_Variable, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, WB_Controls_C* CallFunc_Create_ReturnValue, Key ___struct_Variable, Key K2Node_InputActionEvent_Key, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key K2Node_InputActionEvent_Key, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UserWidget* CallFunc_Array_Get_Item, UserWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, WB_Gameplay_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, delegate K2Node_CreateDelegate_OutputDelegate, WB_Gameplay_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, FText K2Node_CustomEvent_Sender, FText K2Node_CustomEvent_Text, bool K2Node_CustomEvent_bTeamChat, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetPlayerName_PlayerName, int CallFunc_Array_Length_ReturnValue, FText K2Node_CustomEvent_TextToSend, bool K2Node_CustomEvent_bTeamChat, PlayerController* K2Node_CustomEvent_SenderPC, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_Position, int ___int_Loop_Counter_Variable, BP_BaseVehicle_C* K2Node_CustomEvent_NewVehicle, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x7831205720

--------------------------------
Class: WB_Gameplay_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x782f362600
	WidgetAnimation* ScoreAnimation;//[Offset: 0x268, Size: 0x8] 0x782f362580
	WidgetAnimation* HitMarkerAnim;//[Offset: 0x270, Size: 0x8] 0x782f362500
	WidgetAnimation* KillMarkerAnim;//[Offset: 0x278, Size: 0x8] 0x782f362480
	ProgressBar* BlueTeamScore;//[Offset: 0x280, Size: 0x8] 0x782f362400
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x782f362380
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x782f362300
	TextBlock* CapturingPointText;//[Offset: 0x298, Size: 0x8] 0x782f362280
	Image* CompassCenterImage;//[Offset: 0x2a0, Size: 0x8] 0x782f362200
	Image* CompassImage;//[Offset: 0x2a8, Size: 0x8] 0x782f362180
	ProgressBar* ConqueringPointBar;//[Offset: 0x2b0, Size: 0x8] 0x782f364200
	TextBlock* CoolDownTime;//[Offset: 0x2b8, Size: 0x8] 0x782f364180
	ProgressBar* DeathMatchPercent;//[Offset: 0x2c0, Size: 0x8] 0x782f364100
	TextBlock* DeathMatchWinner;//[Offset: 0x2c8, Size: 0x8] 0x782f364080
	CanvasPanel* DirectionalDamageCanvas;//[Offset: 0x2d0, Size: 0x8] 0x782f364000
	TextBlock* Distance;//[Offset: 0x2d8, Size: 0x8] 0x782f363f80
	VerticalBox* DistanceScope;//[Offset: 0x2e0, Size: 0x8] 0x782f363f00
	Image* DmgOverlay;//[Offset: 0x2e8, Size: 0x8] 0x782f363e80
	TextBlock* Health;//[Offset: 0x2f0, Size: 0x8] 0x782f363e00
	Image* HitMarkerImage;//[Offset: 0x2f8, Size: 0x8] 0x782f363d80
	Image* IconBorder;//[Offset: 0x300, Size: 0x8] 0x782f363d00
	Image* IconImage;//[Offset: 0x308, Size: 0x8] 0x782f363c80
	Image* Image;//[Offset: 0x310, Size: 0x8] 0x782f363c00
	Image* Image;//[Offset: 0x318, Size: 0x8] 0x782f363b80
	Image* Image;//[Offset: 0x320, Size: 0x8] 0x782f363b00
	Image* Image;//[Offset: 0x328, Size: 0x8] 0x782f363a80
	ProgressBar* InteractProgressBar;//[Offset: 0x330, Size: 0x8] 0x782f363a00
	HorizontalBox* InteractText;//[Offset: 0x338, Size: 0x8] 0x782f363980
	KillFeedWindow_C* KillFeedWindow;//[Offset: 0x340, Size: 0x8] 0x782f363900
	Image* KillMarker;//[Offset: 0x348, Size: 0x8] 0x782f363880
	Border* LeaveAreaWarningBorder;//[Offset: 0x350, Size: 0x8] 0x782f363800
	CanvasPanel* MainCanvas;//[Offset: 0x358, Size: 0x8] 0x782f363780
	Image* RedDot;//[Offset: 0x360, Size: 0x8] 0x782f363700
	ProgressBar* RedTeamScore;//[Offset: 0x368, Size: 0x8] 0x782f363680
	Border* Scope;//[Offset: 0x370, Size: 0x8] 0x782f363600
	Image* ScopeImage;//[Offset: 0x378, Size: 0x8] 0x782f363580
	VerticalBox* ScopeZoom;//[Offset: 0x380, Size: 0x8] 0x782f363500
	VerticalBox* ScorepercentBars;//[Offset: 0x388, Size: 0x8] 0x782f363480
	TextBlock* ScoreReinforcements;//[Offset: 0x390, Size: 0x8] 0x782f363400
	TextBlock* ScoreText;//[Offset: 0x398, Size: 0x8] 0x782f363380
	VerticalBox* ScoreType;//[Offset: 0x3a0, Size: 0x8] 0x782f363300
	TextBlock* TeamAScoreText;//[Offset: 0x3a8, Size: 0x8] 0x782f363280
	TextBlock* TeamBScoreText;//[Offset: 0x3b0, Size: 0x8] 0x782f363200
	Image* TeamIcon;//[Offset: 0x3b8, Size: 0x8] 0x782f365280
	VerticalBox* TeamScoresText;//[Offset: 0x3c0, Size: 0x8] 0x782f365200
	TextBlock* TextBlock;//[Offset: 0x3c8, Size: 0x8] 0x782f365180
	TextBlock* TimeLeft;//[Offset: 0x3d0, Size: 0x8] 0x782f365100
	TextBlock* TimerText;//[Offset: 0x3d8, Size: 0x8] 0x782f365080
	WB_CusUIItem_Touch_C* WB_Aim;//[Offset: 0x3e0, Size: 0x8] 0x782f365000
	WB_CusUIItem_Touch_C* WB_Crouch;//[Offset: 0x3e8, Size: 0x8] 0x782f364f80
	WB_CusUIItem_Touch_C* WB_FireL;//[Offset: 0x3f0, Size: 0x8] 0x782f364f00
	WB_CusUIItem_Touch_C* WB_FireR;//[Offset: 0x3f8, Size: 0x8] 0x782f364e80
	WB_CusUIItem_Touch_C* WB_Jump;//[Offset: 0x400, Size: 0x8] 0x782f364e00
	WB_CusUIItem_Touch_C* WB_M;//[Offset: 0x408, Size: 0x8] 0x782f364d80
	WB_CusUIItem_Touch_C* WB_Reload;//[Offset: 0x410, Size: 0x8] 0x782f364d00
	WB_CusUIItem_Touch_C* WB_Show;//[Offset: 0x418, Size: 0x8] 0x782f364c80
	WB_CusUIItem_Touch_C* WB_Show;//[Offset: 0x420, Size: 0x8] 0x782f364c00
	TextBlock* ZoomText;//[Offset: 0x428, Size: 0x8] 0x782f364b80
	TimerHandle CoolDownTimerHandle;//[Offset: 0x430, Size: 0x8] 0x782f364b00
	SlateColor DefautlScoreColor;//[Offset: 0x438, Size: 0x28] 0x782f364a80
	SlateColor NegativeColor;//[Offset: 0x460, Size: 0x28] 0x782f364a00
	float TempScore;//[Offset: 0x488, Size: 0x4] 0x782f364980
	TimerHandle ResetScoreTimerHandle;//[Offset: 0x490, Size: 0x8] 0x782f364900
	TimerHandle GetDistanceTimer;//[Offset: 0x498, Size: 0x8] 0x782f364880
	BP_LPSP_PCH_C* PawnOwner;//[Offset: 0x4a0, Size: 0x8] 0x782f364800
	byte ActualCapturePoint;//[Offset: 0x4a8, Size: 0x1] 0x782f364780
	TimerHandle CapturePointUpdateTimer;//[Offset: 0x4b0, Size: 0x8] 0x782f364700
	LinearColor RedTeamColor;//[Offset: 0x4b8, Size: 0x10] 0x782f364680
	LinearColor BlueTeamColor;//[Offset: 0x4c8, Size: 0x10] 0x782f364600
	ObjectiveCompassMarker_C* MarkerARef;//[Offset: 0x4d8, Size: 0x8] 0x782f364580
	ObjectiveCompassMarker_C* MarkerBRef;//[Offset: 0x4e0, Size: 0x8] 0x782f364500
	ObjectiveCompassMarker_C* MarkerCRef;//[Offset: 0x4e8, Size: 0x8] 0x782f364480
	ObjectiveCompassMarker_C*[] RushObjectiveRef;//[Offset: 0x4f0, Size: 0x10] 0x7834508a80
	BaseCharacterPC_C* PCRef;//[Offset: 0x500, Size: 0x8] 0x782f364380
	FPS_GS_C* GSRef;//[Offset: 0x508, Size: 0x8] 0x782f364300
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x510, Size: 0x8] 0x782f364280
	ObjectiveCompassMarker_C* MarkerDRef;//[Offset: 0x518, Size: 0x8] 0x782f366300
	ObjectiveCompassMarker_C* MarkerEref;//[Offset: 0x520, Size: 0x8] 0x782f366280
	void GetPlayerStateName(FPS_PlayerState_C* PlayerState, out FText Name, bool ___bool_Variable, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText K2Node_Select_Default);// 0x6d94ba8 0x782e2245a0
	void HideShowGameModeInfo(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e224680
	void UpdateCTFScores(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_CTF_GS_C* K2Node_DynamicCast_AsFPS_CTF_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e224760
	void UpdateTDMScores(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_TDM_GS_C* K2Node_DynamicCast_AsFPS_TDM_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e224840
	void UpdateConquestScores(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e224920
	void InitWeaponBullets();// 0x6d94ba8 0x782e224a00
	void SetScoreSizeText(bool CallFunc_IsValid_ReturnValue, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateFontInfo K2Node_MakeStruct_SlateFontInfo);// 0x6d94ba8 0x782e224ae0
	void UpdateScores(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e224bc0
	void UpdateTimer(bool ___bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, float ___float_Variable, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, byte ___byte_Variable, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Percent_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Clamp_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText K2Node_Select_Default);// 0x6d94ba8 0x782e224ca0
	FText GetSniperRNG(const Actor*[] ___object_Variable, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e224d80
	FText GetCoolDownTime(float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, int CallFunc_FCeil_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e224e60
	void RotateDamageCanvas(PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e224f40
	void RotateCompass(PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x6d94ba8 0x782e225020
	void GetSkillIcon(out SlateBrush Icon, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e225100
	FText GetGrenades();// 0x6d94ba8 0x782e2251e0
	FText GetPlayerName(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e2252c0
	enum GetPlayerNameVisibility(Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e2253a0
	enum GetMainWidgetVisibility(Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e225480
	enum GetVisiblity(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e225560
	FText GetAmmo(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e225640
	LinearColor GetDmgOverlayOpacity(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e221d60
	FText GetReinformentsLeft(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e221e40
	enum GetGameModeRushStateVisibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x782e221f20
	float GetRushReinfortmentPercent(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e222000
	FText Get_RedTeamPointsText(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Clamp_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e2220e0
	FText Get_BlueTeamPointsText(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Clamp_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e2221c0
	enum Get_CaptureBarVisibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e2222a0
	LinearColor GetCapturePointColorB(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e222380
	LinearColor GetCapturePointColorC(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e222460
	LinearColor GetCapturePointColorA(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782e222540
	enum GetGameModeConquestStateVisibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x782e222620
	LinearColor GetCrossAirColor(Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e222700
	enum Get_CrosshairImage_Visibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x782e220b00
	float GetInteractingBarPercent(Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e2227e0
	enum GetInteractingProgressBarEnabled(PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e2228c0
	FText GetActualAmmoPerMag(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e2229a0
	void Construct();// 0x6d94ba8 0x782e222a80
	void AddDamageIndicator(Vector DmgLocation);// 0x6d94ba8 0x782e222b60
	void SetScopeVisibility(bool Visible);// 0x6d94ba8 0x782e222c40
	void SetRedDotVisibility(bool Visible);// 0x6d94ba8 0x782e222d20
	void OnSkillUsed(TimerHandle CoolDownHandle);// 0x6d94ba8 0x782e222e00
	void SkillReset();// 0x6d94ba8 0x782e222ee0
	void ShowKillMarker();// 0x6d94ba8 0x782e222fc0
	void ShowHitMarker();// 0x6d94ba8 0x782e2230a0
	void ShowScore(float Score, FText Text);// 0x6d94ba8 0x782e223180
	void ResettempScore();// 0x6d94ba8 0x782e223260
	void GetDisntace();// 0x6d94ba8 0x782e223340
	void Update ZoomText();// 0x6d94ba8 0x782e223420
	void OnPawnDeath();// 0x6d94ba8 0x782e223500
	void UpdateHealth();// 0x6d94ba8 0x782e2235e0
	void SetTeamIcon();// 0x6d94ba8 0x782e2236c0
	void UpdateDeathmatchScores();// 0x6d94ba8 0x782e2237a0
	void UpdateRushScores();// 0x6d94ba8 0x782e223880
	void ShowCapturingPointState(enum Visibility);// 0x6d94ba8 0x782e223960
	void UpdateCapturingPointState();// 0x6d94ba8 0x7830199700
	void SetCapturingPoint(byte ActualCapturePoint);// 0x6d94ba8 0x782e220080
	void ActivateCapturePointUpdate();// 0x6d94ba8 0x782e220160
	void StopCapturePointUpdate();// 0x6d94ba8 0x782e220240
	void UpdateCapturePointsMarkers(byte CapturePoint, byte State);// 0x6d94ba8 0x782e220320
	void RemoveObjectives();// 0x6d94ba8 0x782e220400
	void UpdateRushObjectiveMarker();// 0x6d94ba8 0x782e2204e0
	void ToogleInteractText(bool bVisible, BP_BaseInteractable_C* Interactable);// 0x6d94ba8 0x782e2205c0
	void UpdateObjectivesMarkers();// 0x6d94ba8 0x782e2206a0
	void ShowWarningMessage();// 0x6d94ba8 0x782e220780
	void UpdateWarningTime();// 0x6d94ba8 0x782e220860
	void HideWarning();// 0x6d94ba8 0x782e220940
	void On_Death();// 0x6d94ba8 0x782e220a20
	void Show/HideProgressBarVisibility(bool bVisible);// 0x6d94ba8 0x782e220be0
	void SetCusUI();// 0x6d94ba8 0x782e220cc0
	void BndEvt__WB_Gameplay_Button_73_K2Node_ComponentBoundEvent_5_OnButtonPressedEvent__DelegateSignature();// 0x6d94ba8 0x782e220da0
	void BndEvt__WB_Gameplay_Button_73_K2Node_ComponentBoundEvent_7_OnButtonReleasedEvent__DelegateSignature();// 0x6d94ba8 0x782e220e80
	void BndEvt__WB_Gameplay_WB_FireR_K2Node_ComponentBoundEvent_8_EventPas__DelegateSignature();// 0x6d94ba8 0x782e220f60
	void BndEvt__WB_Gameplay_WB_FireR_K2Node_ComponentBoundEvent_9_EventPre__DelegateSignature();// 0x6d94ba8 0x782e221040
	void BndEvt__WB_Gameplay_WB_FireL_K2Node_ComponentBoundEvent_10_EventPas__DelegateSignature();// 0x6d94ba8 0x782e221120
	void BndEvt__WB_Gameplay_WB_FireL_K2Node_ComponentBoundEvent_11_EventPre__DelegateSignature();// 0x6d94ba8 0x782e221200
	void BndEvt__WB_Gameplay_WB_FireR_K2Node_ComponentBoundEvent_0_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e2212e0
	void BndEvt__WB_Gameplay_WB_Aim_K2Node_ComponentBoundEvent_1_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e2213c0
	void BndEvt__WB_Gameplay_WB_Aim_K2Node_ComponentBoundEvent_2_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e2214a0
	void BndEvt__WB_Gameplay_WB_Jump_K2Node_ComponentBoundEvent_3_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e221580
	void BndEvt__WB_Gameplay_WB_Crouch_K2Node_ComponentBoundEvent_4_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e221660
	void BndEvt__WB_Gameplay_WB_Reload_K2Node_ComponentBoundEvent_6_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e221740
	void BndEvt__WB_Gameplay_WB_Jump_K2Node_ComponentBoundEvent_12_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e221820
	void BndEvt__WB_Gameplay_WB_Crouch_K2Node_ComponentBoundEvent_13_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e221900
	void BndEvt__WB_Gameplay_WB_Reload_K2Node_ComponentBoundEvent_14_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e2219e0
	void BndEvt__WB_Gameplay_WB_FireL_K2Node_ComponentBoundEvent_15_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e221ac0
	void BndEvt__WB_Gameplay_WB_Jump_1_K2Node_ComponentBoundEvent_16_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e221ba0
	void BndEvt__WB_Gameplay_WB_Jump_1_K2Node_ComponentBoundEvent_17_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e221c80
	void BndEvt__WB_Gameplay_WB_Jump_2_K2Node_ComponentBoundEvent_18_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x78301999a0
	void BndEvt__WB_Gameplay_WB_Jump_2_K2Node_ComponentBoundEvent_19_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5de780
	void BndEvt__WB_Gameplay_Button_74_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5de860
	void BndEvt__WB_Gameplay_WB_Show_1_K2Node_ComponentBoundEvent_21_EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x782e5de940
	void BndEvt__WB_Gameplay_WB_Show_1_K2Node_ComponentBoundEvent_22_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5dea20
	void BndEvt__WB_Gameplay_WB_Aim_K2Node_ComponentBoundEvent_23_EventPas__DelegateSignature();// 0x6d94ba8 0x782e5debe0
	void BndEvt__WB_Gameplay_WB_Aim_K2Node_ComponentBoundEvent_24_EventPre__DelegateSignature();// 0x6d94ba8 0x782e5deda0
	void ExecuteUbergraph_WB_Gameplay(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte ___byte_Variable, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable, FText ___text_Variable, FText ___text_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, WB_InGameMenu_C* CallFunc_Create_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, BP_BaseFlag_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConquestCapturePoint_C*[] CallFunc_GetAllActorsOfClass_OutActors, FText K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_FTrunc_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, BP_Bomb_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, ObjectiveCompassMarker_C* CallFunc_Array_Get_Item, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, SlateBrush CallFunc_GetSkillIcon_Icon, Vector K2Node_CustomEvent_DmgLocation, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WB_DirectionalDamageIndicator_C* CallFunc_Create_ReturnValue, const Actor*[] ___object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool K2Node_CustomEvent_Visible, bool K2Node_CustomEvent_Visible, int ___int_Loop_Counter_Variable, TimerHandle K2Node_CustomEvent_CoolDownHandle, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float K2Node_CustomEvent_Score, FText K2Node_CustomEvent_Text, bool CallFunc_TextIsEmpty_ReturnValue, float CallFunc_SignOfFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_SignOfFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ScoreReason_C* CallFunc_Create_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText ___text_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int ___int_Array_Index_Variable, BP_BaseFlag_C* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_BoolBool_ReturnValue, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FText CallFunc_GetPlayerStateName_Name, float CallFunc_Conv_IntToFloat_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, enum K2Node_CustomEvent_Visibility, byte K2Node_CustomEvent_ActualCapturePoint, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, CapturePointInfo K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, LinearColor K2Node_Select_Default, bool ___bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, byte K2Node_CustomEvent_CapturePoint, byte K2Node_CustomEvent_State, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, ObjectiveCompassMarker_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_bVisible, BP_BaseInteractable_C* K2Node_CustomEvent_Interactable, BP_Bomb_C* K2Node_DynamicCast_AsBP_Bomb, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanXOR_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int ___int_Array_Index_Variable, BP_ConquestCapturePoint_C* CallFunc_Array_Get_Item, bool K2Node_CustomEvent_bVisible, bool K2Node_SwitchEnum_CmpSuccess, ObjectiveCompassMarker_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, ObjectiveCompassMarker_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, Vector2D K2Node_ComponentBoundEvent_Vavtor, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, int CallFunc_Add_IntInt_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, PlayerController* CallFunc_GetPlayerController_ReturnValue);// 0x6d94ba8 0x782e5dee80

--------------------------------
Class: FPS_PlayerState_C.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 0x8] 0x7840265e80
	SceneComponent* DefaultSceneRoot;//[Offset: 0x320, Size: 0x8] 0x7840265680
	byte PlayerClass;//[Offset: 0x328, Size: 0x1] 0x7840265600
	int Kills;//[Offset: 0x32c, Size: 0x4] 0x7840265580
	byte Deaths;//[Offset: 0x330, Size: 0x1] 0x7840265500
	FString Name;//[Offset: 0x338, Size: 0x10] 0x7840265480
	int KillStreak;//[Offset: 0x348, Size: 0x4] 0x7840265400
	float PlayerScore;//[Offset: 0x34c, Size: 0x4] 0x7840265380
	int KillingSpree;//[Offset: 0x350, Size: 0x4] 0x7840265300
	Controller* Controller;//[Offset: 0x358, Size: 0x8] 0x7840267380
	bool Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1] 0x7840267300
	bool bNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1] 0x7840267280
	void OnDeathmatch(bool Input, out bool bTeamKill, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x7831206440
	void UserConstructionScript(FString CallFunc_GetPlayerName_ReturnValue);// 0x6d94ba8 0x7831206520
	void AddKill(bool TeamKill, bool Headshot);// 0x6d94ba8 0x7831206600
	void ResetScore();// 0x6d94ba8 0x78312066e0
	void AddDeath();// 0x6d94ba8 0x78312067c0
	void AddScorePoints(float Points, FText Reason);// 0x6d94ba8 0x78312068a0
	void ClientShowScore(float Score, FText Text);// 0x6d94ba8 0x7831206980
	void Reset();// 0x6d94ba8 0x7831206a60
	void Update Streak();// 0x6d94ba8 0x7831206b40
	void Streak(int Number of kills);// 0x6d94ba8 0x7831206c20
	void Suicide();// 0x6d94ba8 0x7831206d00
	void NeedsUpdate();// 0x6d94ba8 0x7831206de0
	void UpdateScores();// 0x6d94ba8 0x7831206fa0
	void SetTeam(bool bTeam);// 0x6d94ba8 0x7831207160
	void ExecuteUbergraph_FPS_PlayerState(int EntryPoint, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, int ___int_Loop_Counter_Variable, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, bool K2Node_CustomEvent_TeamKill, bool K2Node_CustomEvent_Headshot, bool CallFunc_OnDeathmatch_bTeamKill, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte CallFunc_Add_ByteByte_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, float K2Node_CustomEvent_Points, FText K2Node_CustomEvent_Reason, float CallFunc_Add_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_Score, FText K2Node_CustomEvent_Text, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_Number_of_kills, bool ___bool_Variable, int K2Node_Select_Default, int CallFunc_Subtract_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_CustomEvent_bTeam, PlayerState* CallFunc_Array_Get_Item, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x7831207240

--------------------------------
Class: FPS_GM_C.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x308, Size: 0x8] 0x7834305c00
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8] 0x7834305b80
	PlayerController*[] AllPlayersPCs;//[Offset: 0x318, Size: 0x10] 0x7850062180
	BP_PlayerSpawn_C*[] PossibleSpawnsA;//[Offset: 0x328, Size: 0x10] 0x78500620e0
	BP_PlayerSpawn_C*[] PossibleSpawnsB;//[Offset: 0x338, Size: 0x10] 0x7850062040
	bool bGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1] 0x7834305980
	bool bGameWithBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1] 0x7834305900
	bool bFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1] 0x7834305880
	float FriendlyDmgMultiplier;//[Offset: 0x34c, Size: 0x4] 0x7834305800
	byte GameMode;//[Offset: 0x350, Size: 0x1] 0x7834305780
	int TeamABots;//[Offset: 0x354, Size: 0x4] 0x7834305700
	int TeamBBots;//[Offset: 0x358, Size: 0x4] 0x7834305680
	BP_PlayerSpawn_C*[] PlayerSpawnsA;//[Offset: 0x360, Size: 0x10] 0x7850061fa0
	BP_PlayerSpawn_C*[] PlayerSpawnsB;//[Offset: 0x370, Size: 0x10] 0x7850061f00
	float MinSpawnEnemyDistance;//[Offset: 0x380, Size: 0x4] 0x7834305500
	Controller*[] TeamABotsControllers;//[Offset: 0x388, Size: 0x10] 0x7850061e60
	Controller*[] TeamBBotsControllers;//[Offset: 0x398, Size: 0x10] 0x7850061dc0
	int TeamAScore;//[Offset: 0x3a8, Size: 0x4] 0x7834305380
	int TeamBScore;//[Offset: 0x3ac, Size: 0x4] 0x7834305300
	float TimeToReset;//[Offset: 0x3b0, Size: 0x4] 0x7834307380
	int SelectWeapon;//[Offset: 0x3b4, Size: 0x4] 0x7834307300
	void OverrideNumberOfBots(int TeamA, int TeamB);// 0x6d94ba8 0x782d9484a0
	void OnRep_AllPlayersPCs();// 0x6d94ba8 0x782d948660
	void DestroyBotsPlayerState(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, Controller* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Controller* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782d948740
	void StopBots(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, Controller* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, Controller* CallFunc_Array_Get_Item, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782d948820
	bool ReadyToStartMatch(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782d9489e0
	bool ReadyToEndMatch();// 0x6d94ba8 0x782d948ac0
	void PossesPawn(BP_LPSP_PCH_C* Pawn, bool Team, PlayerController* Controller, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d948ba0
	void SendKillFeedInfo(bool KillerTeam, bool VictimTeam, FText KillerName, FText VictimName, const DamageType* DmgType, FText VictimPlayerName, FText KillerPlayerName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d948c80
	void ChooseSpawn(out BP_PlayerSpawn_C*[] Spawns, bool bTeam, out BP_PlayerSpawn_C*[] BestSpawns, BP_PlayerSpawn_C* ActualSpawn, BP_PlayerSpawn_C*[] BestPossibleSpawn, bool PawnTeam, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x6d94ba8 0x782d948d60
	void GetPlayerSpawns(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerSpawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x6d94ba8 0x782d948e40
	void AllPosibleSpawns(PlayerController* PlayerController, out bool bTeam, int ___int_Array_Index_Variable, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782d948f20
	void SpawnCharacterPawn(Transform SpawnTransform, byte Player Class, PlayerController* PC, bool PawnTeam, byte PlayerClass, PlayerController* PlayerController, FText Name, Transform Transform, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_PCH_AR_01_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_PCH_AR_01_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x6d94ba8 0x782d949000
	void TeamPosibleSpawn(bool Team, out BP_PlayerSpawn_C*[] TeamSpawns, out BP_PlayerSpawn_C*[] PosibleSpawn, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int ___int_Array_Index_Variable, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, int ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x6d94ba8 0x783019bae0
	void SpawnClass(byte PlayerClass, PlayerController* PlayerController, BP_PlayerSpawn_C* SpawnRef, bool ___bool_Variable, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllPosibleSpawns_bTeam, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, bool ___bool_Variable, bool ___bool_Variable, BP_PlayerSpawn_C*[] K2Node_Select_Default, BP_PlayerSpawn_C*[] K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, BP_PlayerSpawn_C*[] CallFunc_ChooseSpawn_BestSpawns, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, BP_PlayerSpawn_C* K2Node_Select_Default);// 0x6d94ba8 0x782d945720
	void SpawnPlayer(PlayerController* PController);// 0x6d94ba8 0x782d945800
	void SpawnCharacterWithClass(byte PlayerClass, PlayerController* PlayerController);// 0x6d94ba8 0x782d9458e0
	void SpawnPlayers();// 0x6d94ba8 0x782d9459c0
	void KickAllPlayers();// 0x6d94ba8 0x782d945aa0
	void RemovePC(PlayerController* NewParam);// 0x6d94ba8 0x782d945b80
	void K2_OnLogout(Controller* ExitingController);// 0x6d94ba8 0x782d945c60
	void EndGame(bool WinningTeam);// 0x6d94ba8 0x782d946b40
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x6d94ba8 0x782d946c20
	void SetFriendlyFire(bool FriendlyFire);// 0x6d94ba8 0x782d946d00
	void CreateBots();// 0x6d94ba8 0x782d946de0
	void ShowSelectCharacter();// 0x6d94ba8 0x782d946ec0
	void ReceiveBeginPlay();// 0x6d94ba8 0x782d946fa0
	void ResetGame(float Delay);// 0x6d94ba8 0x782d947080
	void CheckGameOptions();// 0x6d94ba8 0x782d947160
	void ManageNumberOfBots();// 0x6d94ba8 0x782d947240
	void ResetSpawns();// 0x6d94ba8 0x782d947320
	void SpawnBots();// 0x6d94ba8 0x783019bd80
	void GetKillFeedText(bool Killer Team, bool VictimTeam, FText KillerName, FText VictimName, const DamageType* DmgType);// 0x6d94ba8 0x782d943a40
	void SetTeamScores();// 0x6d94ba8 0x782d943c00
	void ClientUpdateScores();// 0x6d94ba8 0x782d943dc0
	void ExecuteUbergraph_FPS_GM(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool ___bool_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int ___int_Variable, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, PlayerController* K2Node_CustomEvent_PController, Pawn* CallFunc_K2_GetPawn_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_PlayerClass, PlayerController* K2Node_CustomEvent_PlayerController, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* K2Node_CustomEvent_NewParam, Controller* K2Node_Event_ExitingController, bool CallFunc_Array_RemoveItem_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool K2Node_CustomEvent_WinningTeam, PlayerController* K2Node_Event_NewPlayer, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_CustomEvent_FriendlyFire, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Array_Index_Variable, PlayerController* CallFunc_Array_Get_Item, PlayerController* CallFunc_Array_Get_Item, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_RemoveItem_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float K2Node_CustomEvent_Delay, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerSpawn_C*[] CallFunc_TeamPosibleSpawn_PosibleSpawn, BP_PlayerSpawn_C*[] CallFunc_TeamPosibleSpawn_PosibleSpawn, int CallFunc_Array_Length_ReturnValue, BP_PlayerSpawn_C*[] CallFunc_ChooseSpawn_BestSpawns, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, BP_PlayerSpawn_C*[] CallFunc_ChooseSpawn_BestSpawns, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_Array_LastIndex_ReturnValue, Pawn* CallFunc_SpawnAIFromClass_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Pawn* CallFunc_SpawnAIFromClass_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool K2Node_CustomEvent_Killer_Team, bool K2Node_CustomEvent_VictimTeam, FText K2Node_CustomEvent_KillerName, FText K2Node_CustomEvent_VictimName, const DamageType* K2Node_CustomEvent_DmgType, BP_PlayerSpawn_C*[] K2Node_Select_Default, int ___int_Loop_Counter_Variable, BP_PlayerSpawn_C*[] CallFunc_TeamPosibleSpawn_PosibleSpawn, BP_PlayerSpawn_C*[] CallFunc_ChooseSpawn_BestSpawns, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AI_Pawn_A_C* CallFunc_FinishSpawningActor_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AI_Pawn_B_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, PlayerController* CallFunc_Array_Get_Item, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782d943ea0

--------------------------------
Class: AI_PlayerController_C.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x328, Size: 0x8] 0x783695d300
	bool Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x783695d280
	void ReceiveBeginPlay();// 0x6d94ba8 0x783120b5a0
	void ReceivePossess(Pawn* PossessedPawn);// 0x6d94ba8 0x783120b760
	void AddKill(BP_LPSP_PCH_C* DeadActor);// 0x6d94ba8 0x783120b840
	void StopBot();// 0x6d94ba8 0x783120ba00
	void ExecuteUbergraph_AI_PlayerController(int EntryPoint, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, Pawn* K2Node_Event_PossessedPawn, bool K2Node_SwitchEnum_CmpSuccess, FString[] K2Node_MakeArray_Array, int CallFunc_Array_LastIndex_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_RandomInteger_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_DeadActor, bool CallFunc_IsValid_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue);// 0x6d94ba8 0x783120bae0

--------------------------------
Class: FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x288, Size: 0x8] 0x78360f8080
	SceneComponent* DefaultSceneRoot;//[Offset: 0x290, Size: 0x8] 0x78360f8000
	PlayerController*[] PlayersReadyToSpawn;//[Offset: 0x298, Size: 0x10] 0x783128ace0
	TimerHandle TimeToSpawnHandler;//[Offset: 0x2a8, Size: 0x8] 0x78360f7f00
	TimerHandle TimeLimitHandler;//[Offset: 0x2b0, Size: 0x8] 0x78360f7e80
	bool bIsGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1] 0x78360f7e00
	Controller*[] BotsReadyToSpawn;//[Offset: 0x2c0, Size: 0x10] 0x783128ac40
	float RespawnTime;//[Offset: 0x2d0, Size: 0x4] 0x78360f7d00
	Controller*[] BotsTeamAControllers;//[Offset: 0x2d8, Size: 0x10] 0x783128aba0
	Controller*[] BotsTeamBControllers;//[Offset: 0x2e8, Size: 0x10] 0x783128ab00
	bool bReadyToStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x78360f7b80
	TimerHandle PreMatchTimerHandle;//[Offset: 0x300, Size: 0x8] 0x78360f7b00
	float TimeLeftToStartMatch;//[Offset: 0x308, Size: 0x4] 0x78360f7a80
	TimerHandle UpdateCountDownTimerHandle;//[Offset: 0x310, Size: 0x8] 0x78360f7a00
	float MatchTimeLeft;//[Offset: 0x318, Size: 0x4] 0x78360f7980
	float GameTimeInSeconds;//[Offset: 0x31c, Size: 0x4] 0x78360f7900
	void AddPlayerToReadyList(PlayerController* PCReady);// 0x6d94ba8 0x7831b72b60
	void ReceiveBeginPlay();// 0x6d94ba8 0x7831b72c40
	void CheckElapsedTime();// 0x6d94ba8 0x7831b72d20
	void CheckBotsReadyToSpawn();// 0x6d94ba8 0x7831b72e00
	void StartMatch();// 0x6d94ba8 0x7831b72ee0
	void UpdatePrematchTimer();// 0x6d94ba8 0x7831b72fc0
	void OnStartMatch();// 0x6d94ba8 0x7831b730a0
	void UpdateTimeLeft();// 0x6d94ba8 0x7831b73180
	void UpdateMatchTime();// 0x6d94ba8 0x7831b73340
	void ResetPonitToWin(int Num);// 0x6d94ba8 0x7831b73500
	void ExecuteUbergraph_FPS_GS(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, RecordSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, PlayerController* K2Node_CustomEvent_PCReady, int CallFunc_Array_Add_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayerState* CallFunc_Array_Get_Item, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int ___int_Loop_Counter_Variable, PlayerState* CallFunc_Array_Get_Item, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int K2Node_CustomEvent_Num, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_GetTempNumberRecord_Number, bool CallFunc_GetTempNumberRecord_isFind, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x6d94ba8 0x783509cd40

--------------------------------
Class: BP_PlayerSpawn_C.PlayerStart.NavigationObjectBase.Actor.Object
	bool bTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78350d9900
	bool bCanBeUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1] 0x78350d9880
	bool bNearEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x78350d9800
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x253, Size: 0x1] 0x78350d9780
	int State;//[Offset: 0x254, Size: 0x4] 0x78350d9700

--------------------------------
Class: BP_LPSP_PCH_AR_01_C.BP_LPSP_PCH_C.Character.Pawn.Actor.Object
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, class Actor CallFunc_Array_Get_Item);// 0x6d94ba8 0x7834279fc0

--------------------------------
Class: BP_AI_Pawn_A_C.BP_BaseAI_Pawn_C.BP_LPSP_PCH_Random_C.BP_LPSP_PCH_C.Character.Pawn.Actor.Object

--------------------------------
Class: BP_AI_Pawn_B_C.BP_BaseAI_Pawn_C.BP_LPSP_PCH_Random_C.BP_LPSP_PCH_C.Character.Pawn.Actor.Object

--------------------------------
Class: FPS_DM_GS_C.FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8] 0x7836957100
	PlayerPoints ActualWinnerPlayerPoints;//[Offset: 0x328, Size: 0x10] 0x7836957080
	int PointsToWin;//[Offset: 0x338, Size: 0x4] 0x7836957000
	PlayerPoints[] AllPlayerPoints;//[Offset: 0x340, Size: 0x10] 0x783128cfe0
	FPS_PlayerState_C* ActualWinner;//[Offset: 0x350, Size: 0x8] 0x7836956f00
	TimerHandle Update WinnerTimer;//[Offset: 0x358, Size: 0x8] 0x7836956e80
	void UpdateWinner(bool CallFunc_IsValid_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x7831205aa0
	void CheckWinnerPoints(bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_DM_GM_C* K2Node_DynamicCast_AsFPS_DM_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x6d94ba8 0x7831205b80
	void ReceiveBeginPlay();// 0x6d94ba8 0x7831205c60
	void UpdateGameState();// 0x6d94ba8 0x7831205e20
	void ResetPonitToWin(int Num);// 0x6d94ba8 0x7831205f00
	void ExecuteUbergraph_FPS_DM_GS(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, int K2Node_Event_Num, int CallFunc_Multiply_IntInt_ReturnValue);// 0x6d94ba8 0x78312060c0

--------------------------------
Class: PlayerPoints
	PlayerState* PlayerState_8_BC3D534C44495E6DA43C2DB0EF1CE51E;//[Offset: 0x0, Size: 0x8] 0x78350d6780
	byte Points_5_F12490954E2A7BB1B8299B9938E83DE3;//[Offset: 0x8, Size: 0x1] 0x78350d6700

--------------------------------
Class: FPS_DM_GM_C.FPS_GM_C.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 0x8] 0x7834307200
	PlayerPoints[] AllPlayerPoints;//[Offset: 0x3c0, Size: 0x10] 0x7850061d20
	void ReceiveBeginPlay();// 0x6d94ba8 0x782d946520
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x6d94ba8 0x782d946600
	void AddPoints(PlayerController* PC);// 0x6d94ba8 0x782d9467c0
	void K2_OnLogout(Controller* ExitingController);// 0x6d94ba8 0x782d948580
	void EndDeathmatch();// 0x6d94ba8 0x782d946980
	void ExecuteUbergraph_FPS_DM_GM(int EntryPoint, int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, PlayerController* K2Node_Event_NewPlayer, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* K2Node_CustomEvent_PC, int ___int_Loop_Counter_Variable, PlayerController* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_Array_Get_Item, byte CallFunc_Add_ByteByte_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, PlayerPoints K2Node_MakeStruct_PlayerPoints, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Controller* K2Node_Event_ExitingController, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, PlayerPoints K2Node_MakeStruct_PlayerPoints, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, PlayerController* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d946a60

--------------------------------
Class: KillFeedWindow_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7833f28f80
	ScrollBox* KillFeedLog;//[Offset: 0x268, Size: 0x8] 0x7833f28f00
	void SetTextToSend(bool bTeam, FText Killer, FText Dead, out FText TexToSend, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6d94ba8 0x7834278820
	void OnInitialized();// 0x6d94ba8 0x7834278900
	void UpdateKillFeed(const FText Killer, const FText Victim, bool bKillerTeam, bool bVictimTeam, const DamageType* DamageType);// 0x6d94ba8 0x7834278ac0
	void ChecKillFeedSize();// 0x6d94ba8 0x7834278c80
	void ExecuteUbergraph_KillFeedWindow(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KillFeedText_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, const FText K2Node_CustomEvent_Killer, const FText K2Node_CustomEvent_Victim, bool K2Node_CustomEvent_bKillerTeam, bool K2Node_CustomEvent_bVictimTeam, const DamageType* K2Node_CustomEvent_DamageType, const DT_BaseDamage_C* K2Node_DynamicCast_AsDT_Base_Damage, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RemoveChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x6d94ba8 0x7834278d60

--------------------------------
Class: KillFeedText_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830aceb80
	WidgetAnimation* FadeKillFeedText;//[Offset: 0x268, Size: 0x8] 0x7830aceb00
	Image* ImageDamageIcon;//[Offset: 0x270, Size: 0x8] 0x7830acea80
	TextBlock* KillerNameText;//[Offset: 0x278, Size: 0x8] 0x7830acea00
	HorizontalBox* KillFeedText;//[Offset: 0x280, Size: 0x8] 0x7830ace980
	TextBlock* MessageWidget;//[Offset: 0x288, Size: 0x8] 0x7830ace900
	FText KillerName;//[Offset: 0x290, Size: 0x18] 0x7830ace880
	bool bKillerTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1] 0x7830ace800
	FText DeadPlayerName;//[Offset: 0x2b0, Size: 0x18] 0x7830ace780
	bool bDeadPlayerTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7830ace700
	PaperSprite* DamageIcon;//[Offset: 0x2d0, Size: 0x8] 0x7830acff80
	LinearColor TeamBColor;//[Offset: 0x2d8, Size: 0x10] 0x7830acff00
	LinearColor TeamAColor;//[Offset: 0x2e8, Size: 0x10] 0x7830acfe80
	void Construct();// 0x6d94ba8 0x78342751e0
	void SetNamesColor();// 0x6d94ba8 0x78342753a0
	void ExecuteUbergraph_KillFeedText(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor CallFunc_SelectColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, LinearColor CallFunc_SelectColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x6d94ba8 0x7834275560

--------------------------------
Class: WB_CusUIItem_Touch_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783022cf00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x783022ce80
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x783022ce00
	Vector2D LastPoint;//[Offset: 0x278, Size: 0x8] 0x783022cd80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x280, Size: 0x8] 0x783022cd00
	delegate EventTouchMove;//[Offset: 0x288, Size: 0x10] 0x783022cc80
	delegate EvenTouchClice;//[Offset: 0x298, Size: 0x10] 0x783022cc00
	Vector2D In Size;//[Offset: 0x2a8, Size: 0x8] 0x783022cb80
	Object* Resource Object;//[Offset: 0x2b0, Size: 0x8] 0x783022cb00
	float Scale;//[Offset: 0x2b8, Size: 0x4] 0x783022ca80
	float Time;//[Offset: 0x2bc, Size: 0x4] 0x783022ca00
	bool TouchIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x783022c980
	bool IsMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x783022c900
	delegate EventPas;//[Offset: 0x2c8, Size: 0x10] 0x783022c880
	delegate EventPre;//[Offset: 0x2d8, Size: 0x10] 0x783022c800
	bool Button;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x783022c780
	bool 已处理？                                                                                        ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1] 0x783022c700
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, bool ___bool_Variable, EventReply K2Node_MakeStruct_EventReply, EventReply CallFunc_Handled_ReturnValue, EventReply K2Node_Select_Default);// 0x6d94ba8 0x783019d280
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, bool ___bool_Variable, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_MakeVector2D_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_CaptureMouse_ReturnValue, EventReply K2Node_Select_Default, float CallFunc_Distance2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x783019d360
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, bool ___bool_Variable, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply K2Node_Select_Default);// 0x6d94ba8 0x783019d440
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x783019d520
	void UnSelect();// 0x6d94ba8 0x783019d600
	void Select();// 0x6d94ba8 0x783019d6e0
	void OnMouseCaptureLost();// 0x6d94ba8 0x783019d7c0
	void Construct();// 0x6d94ba8 0x783019d8a0
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x783019d980
	void ExecuteUbergraph_WB_CusUIItem_Touch(int EntryPoint, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_IsDesignTime);// 0x6d94ba8 0x783019da60
	void EventPre__DelegateSignature();// 0x6d94ba8 0x783019db40
	void EventPas__DelegateSignature();// 0x6d94ba8 0x783019dc20
	void EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x783019dde0
	void EventTouchMove__DelegateSignature(Vector2D Vavtor);// 0x6d94ba8 0x7870587b00

--------------------------------
Class: ObjectiveCompassMarker_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78350d8a80
	Image* MarkerImage;//[Offset: 0x268, Size: 0x8] 0x78350d8a00
	Actor* ObjectiveActor;//[Offset: 0x270, Size: 0x8] 0x78350d8980
	Texture2D* Image;//[Offset: 0x278, Size: 0x8] 0x78350d8900
	void UpdatePosition(CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x7834279000
	void Construct();// 0x6d94ba8 0x7834275800
	void SetCapturePointMarkerColor(LinearColor RedColor, LinearColor BlueColor, byte CapturePointState);// 0x6d94ba8 0x78342758e0
	void SetMarkerColor(LinearColor Color);// 0x6d94ba8 0x7834275aa0
	void ExecuteUbergraph_ObjectiveCompassMarker(int EntryPoint, byte ___byte_Variable, LinearColor ___struct_Variable, TimerHandle CallFunc_K2_SetTimer_ReturnValue, LinearColor K2Node_CustomEvent_RedColor, LinearColor K2Node_CustomEvent_BlueColor, byte K2Node_CustomEvent_CapturePointState, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_CustomEvent_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x7834275b80

--------------------------------
Class: FPS_CTF_GS_C.FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8] 0x78360f7600
	int TeamAPoints;//[Offset: 0x328, Size: 0x4] 0x78360f7580
	int TeamBPoints;//[Offset: 0x32c, Size: 0x4] 0x78360f7500
	int PointsToWin;//[Offset: 0x330, Size: 0x4] 0x78360f7480
	void AddTeamPoints(bool bTeam);// 0x6d94ba8 0x7831b71f20
	void ResetPonitToWin(int Num);// 0x6d94ba8 0x7831b72000
	void ExecuteUbergraph_FPS_CTF_GS(int EntryPoint, int ___int_Variable, int ___int_Variable, bool K2Node_CustomEvent_bTeam, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_Num, int CallFunc_Multiply_IntInt_ReturnValue);// 0x6d94ba8 0x7831b720e0

--------------------------------
Class: FPS_TDM_GS_C.FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8] 0x78360fee80
	int TeamA_Points;//[Offset: 0x328, Size: 0x4] 0x78360fee00
	int TeamB_Points;//[Offset: 0x32c, Size: 0x4] 0x78360fed80
	int PointsToWin;//[Offset: 0x330, Size: 0x4] 0x78360fed00
	void AddTeamPoints(bool bTeam);// 0x6d94ba8 0x7831202000
	void ResetPonitToWin(int Num);// 0x6d94ba8 0x78312020e0
	void ExecuteUbergraph_FPS_TDM_GS(int EntryPoint, int ___int_Variable, int ___int_Variable, bool K2Node_CustomEvent_bTeam, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Event_Num, int CallFunc_Multiply_IntInt_ReturnValue);// 0x6d94ba8 0x78312021c0

--------------------------------
Class: FPS_Conquest_GS_C.FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8] 0x78360fd080
	int TeamAPoints;//[Offset: 0x328, Size: 0x4] 0x78360fd000
	int PointsToWin;//[Offset: 0x32c, Size: 0x4] 0x78360fcf80
	int TeamBPoints;//[Offset: 0x330, Size: 0x4] 0x78360fcf00
	byte PointAHolder;//[Offset: 0x334, Size: 0x1] 0x78360fce80
	byte PointBHolder;//[Offset: 0x335, Size: 0x1] 0x78360fce00
	byte PointCHolder;//[Offset: 0x336, Size: 0x1] 0x78360fcd80
	CapturePointInfo PointAInfo;//[Offset: 0x338, Size: 0xc] 0x78360fcd00
	CapturePointInfo PointBInfo;//[Offset: 0x344, Size: 0xc] 0x78360fcc80
	CapturePointInfo PointCInfo;//[Offset: 0x350, Size: 0xc] 0x78360fcc00
	int PointsToCapture;//[Offset: 0x35c, Size: 0x4] 0x78360fcb80
	BP_ConquestCapturePoint_C*[] PointsToCaptureArray;//[Offset: 0x360, Size: 0x10] 0x783128de40
	CapturePointInfo PointDInfo;//[Offset: 0x370, Size: 0xc] 0x78360fca80
	CapturePointInfo PointEInfo;//[Offset: 0x37c, Size: 0xc] 0x78360fca00
	void AddTeamPoints(bool bTeam);// 0x6d94ba8 0x7831b72540
	void SetCapturePointHolder(bool HolderTeam, byte NewParam);// 0x6d94ba8 0x7831b72620
	void SetCapturePointsProgess(byte FlagID, CapturePointInfo NewParam);// 0x6d94ba8 0x7831b72700
	void OnStartMatch();// 0x6d94ba8 0x7831b727e0
	void ResetPonitToWin(int Num);// 0x6d94ba8 0x7831b728c0
	void ExecuteUbergraph_FPS_Conquest_GS(int EntryPoint, int ___int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int ___int_Variable, bool K2Node_CustomEvent_bTeam, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_HolderTeam, byte K2Node_CustomEvent_NewParam, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_FlagID, CapturePointInfo K2Node_CustomEvent_NewParam, bool CallFunc_GreaterEqual_IntInt_ReturnValue, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, bool K2Node_SwitchEnum_CmpSuccess, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, BP_ConquestCapturePoint_C*[] CallFunc_GetAllActorsOfClass_OutActors, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, int K2Node_Event_Num, int CallFunc_Multiply_IntInt_ReturnValue);// 0x6d94ba8 0x7831b729a0

--------------------------------
Class: CapturePointInfo
	byte State_2_81FA77CC4AE111F84F0149B1B1443871;//[Offset: 0x0, Size: 0x1] 0x78350d9480
	int Progress_5_5BA01F4449811550DA999B9902BB9CB3;//[Offset: 0x4, Size: 0x4] 0x78350d9400
	bool Team_8_E6593DA3446E94917AE03DA63906DEE5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1] 0x78350d9380

--------------------------------
Class: BP_ConquestCapturePoint_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7834366200
	WidgetComponent* Widget;//[Offset: 0x228, Size: 0x8] 0x7834366180
	SkeletalMeshComponent* Flag_01;//[Offset: 0x230, Size: 0x8] 0x7834366100
	DecalComponent* Decal;//[Offset: 0x238, Size: 0x8] 0x7834366080
	SphereComponent* Sphere;//[Offset: 0x240, Size: 0x8] 0x7834366000
	SceneComponent* DefaultSceneRoot;//[Offset: 0x248, Size: 0x8] 0x7834365f80
	int TeamAPlayers;//[Offset: 0x250, Size: 0x4] 0x7834365f00
	int TeamBPlayers;//[Offset: 0x254, Size: 0x4] 0x7834365e80
	int TeamACounter;//[Offset: 0x258, Size: 0x4] 0x7834365e00
	int TeamBCounter;//[Offset: 0x25c, Size: 0x4] 0x7834365d80
	bool bHolderTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x7834365d00
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1] 0x7834365c80
	byte PointId;//[Offset: 0x262, Size: 0x1] 0x7834365c00
	FPS_Conquest_GS_C* GameStateRef;//[Offset: 0x268, Size: 0x8] 0x7834365b80
	byte FlagState;//[Offset: 0x270, Size: 0x1] 0x7834365b00
	int PointsToCapture;//[Offset: 0x274, Size: 0x4] 0x7834365a80
	BP_LPSP_PCH_C*[] TeamAPlayerList;//[Offset: 0x278, Size: 0x10] 0x78500631c0
	BP_LPSP_PCH_C*[] TeamBPlayerList;//[Offset: 0x288, Size: 0x10] 0x7850063120
	void OnRep_FlagState(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x78316d5480
	void GetPlayersInside(BP_LPSP_PCH_C* PawnRef, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, Actor*[] CallFunc_GetOverlappingActors_OverlappingActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x78343b1820
	void ReceiveBeginPlay();// 0x6d94ba8 0x78316d1d60
	void Increase Team Points();// 0x6d94ba8 0x7836560940
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6d94ba8 0x78e3e24ae0
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6d94ba8 0x78343b1ba0
	void ChangeFlagMat(byte NewParam);// 0x6d94ba8 0x78e3e25aa0
	void GivePoints(bool bTeam, float Score, FText Reason);// 0x6d94ba8 0x78e3e28e40
	void SetIconColor(byte State);// 0x6d94ba8 0x783656a960
	void Set Icon();// 0x6d94ba8 0x783656ab20
	void RegenPoints();// 0x6d94ba8 0x783656a880
	void AddPoints();// 0x6d94ba8 0x783427ecc0
	void ExecuteUbergraph_BP_ConquestCapturePoint(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, int CallFunc_Abs_Int_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte K2Node_CustomEvent_NewParam, int CallFunc_Clamp_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_CustomEvent_bTeam, float K2Node_CustomEvent_Score, FText K2Node_CustomEvent_Reason, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte K2Node_CustomEvent_State, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, CapturePointIcon_C* K2Node_DynamicCast_AsCapture_Point_Icon, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, CapturePointIcon_C* K2Node_DynamicCast_AsCapture_Point_Icon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Clamp_ReturnValue, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, bool CallFunc_EqualEqual_IntInt_ReturnValue, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, CapturePointInfo K2Node_MakeStruct_CapturePointInfo, int ___int_Loop_Counter_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x783427eda0

--------------------------------
Class: CapturePointIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78350da380
	Image* Icon;//[Offset: 0x268, Size: 0x8] 0x78350da300
	void SetIconColor(byte Team);// 0x6d94ba8 0x7831bed360
	void Set Icon(Texture2D* Icon);// 0x6d94ba8 0x7831bed520
	void ExecuteUbergraph_CapturePointIcon(int EntryPoint, byte ___byte_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, byte K2Node_CustomEvent_Team, Texture2D* K2Node_CustomEvent_Icon, LinearColor K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x7831bed600

--------------------------------
Class: FPS_Rush_GS_C.FPS_GS_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8] 0x7836952000
	int Reinforcements;//[Offset: 0x328, Size: 0x4] 0x7836951f80
	int MaxReinforcements;//[Offset: 0x32c, Size: 0x4] 0x7836951f00
	byte BombState;//[Offset: 0x330, Size: 0x1] 0x7836951e80
	BP_Bomb_C*[] BombRef;//[Offset: 0x338, Size: 0x10] 0x783128d6c0
	int State;//[Offset: 0x348, Size: 0x4] 0x7836951d80
	int FinalState;//[Offset: 0x34c, Size: 0x4] 0x7836951d00
	bool bChangeState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x7836951c80
	bool bEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1] 0x7836951c00
	bool bTimeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1] 0x7836951b80
	float RoundTime;//[Offset: 0x354, Size: 0x4] 0x7836951b00
	void UserConstructionScript();// 0x6d94ba8 0x7831204760
	void ReduceReinformets();// 0x6d94ba8 0x7831204840
	void SetBombState(byte NewState);// 0x6d94ba8 0x7831204920
	void CheckGameState();// 0x6d94ba8 0x7831204a00
	void ChangeState();// 0x6d94ba8 0x7831204ae0
	void ResetReinforcements();// 0x6d94ba8 0x7831204bc0
	void StartGame();// 0x6d94ba8 0x7831204ca0
	void OnStartMatch();// 0x6d94ba8 0x7831204d80
	void CheckWinCondition();// 0x6d94ba8 0x7831204e60
	void ResetTimer();// 0x6d94ba8 0x7831204f40
	void StartMatchTimer();// 0x6d94ba8 0x7831205020
	void Timeout();// 0x6d94ba8 0x78312051e0
	void UpdateTime();// 0x6d94ba8 0x78312053a0
	void ExecuteUbergraph_FPS_Rush_GS(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Array_Index_Variable, byte K2Node_CustomEvent_NewState, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int ___int_Variable, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_RUSH_GM_C* K2Node_DynamicCast_AsFPS_RUSH_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, int CallFunc_Clamp_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x6d94ba8 0x7831205480

--------------------------------
Class: BP_Bomb_C.BP_BaseInteractable_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 0x8] 0x78360f4880
	SphereComponent* Sphere;//[Offset: 0x238, Size: 0x8] 0x78360f4800
	StaticMeshComponent* DestroyedMesh;//[Offset: 0x240, Size: 0x8] 0x78360f4780
	WidgetComponent* Widget;//[Offset: 0x248, Size: 0x8] 0x78360f4700
	StaticMeshComponent* BombMesh;//[Offset: 0x250, Size: 0x8] 0x78360f4680
	TimerHandle BombTimerHandle;//[Offset: 0x258, Size: 0x8] 0x78360f4600
	bool bIsBombSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1] 0x78360f4580
	TimerHandle BombSoundTimer;//[Offset: 0x268, Size: 0x8] 0x78360f4500
	byte BombState;//[Offset: 0x270, Size: 0x1] 0x78360f4480
	FPS_PlayerState_C* PlayerStateRef;//[Offset: 0x278, Size: 0x8] 0x78360f4400
	int State;//[Offset: 0x280, Size: 0x4] 0x78360f4380
	float BombTimeToExplode;//[Offset: 0x284, Size: 0x4] 0x78360f4300
	void BeginInteract(Actor* Instigator, out bool Failure, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanXOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x7831b70320
	void OnRep_BombState(BaseCharacterPC_C* Controller, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x7831b70400
	void ServerActivateBomb(Actor* InstigatorActor);// 0x6d94ba8 0x7831b704e0
	void Activate/Deactivate(BP_LPSP_PCH_C* Instigator);// 0x6d94ba8 0x7831b705c0
	void ExploteBomb();// 0x6d94ba8 0x7831b706a0
	void PlaySound();// 0x6d94ba8 0x7831b70780
	void PlaySoundMulticast();// 0x6d94ba8 0x7831b70860
	void Interact(Actor* Instigator);// 0x6d94ba8 0x7831b70940
	void EndInteract();// 0x6d94ba8 0x7831b70a20
	void EndHover();// 0x6d94ba8 0x7831b70b00
	void BeginHover();// 0x6d94ba8 0x7831b70be0
	void BombInteract(BP_LPSP_PCH_C* PlayerPawn);// 0x6d94ba8 0x7831b70cc0
	void SetIconColor(LinearColor Color);// 0x6d94ba8 0x7831b70da0
	void ReceiveBeginPlay();// 0x6d94ba8 0x7831b70e80
	void UpdateWidget();// 0x6d94ba8 0x7831b70f60
	void SetWidgetText(FText NewText);// 0x6d94ba8 0x7831b71040
	void InitBomb();// 0x6d94ba8 0x7831b71120
	void OnDestroyEffects();// 0x6d94ba8 0x7831b712e0
	void BndEvt__BP_Bomb_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6d94ba8 0x7831b714a0
	void ExecuteUbergraph_BP_Bomb(int EntryPoint, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* K2Node_CustomEvent_InstigatorActor, BP_LPSP_PCH_C* K2Node_CustomEvent_Instigator, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* K2Node_Event_Instigator, BP_LPSP_PCH_C* K2Node_CustomEvent_PlayerPawn, bool CallFunc_BooleanXOR_ReturnValue, LinearColor K2Node_CustomEvent_Color, GameStateBase* CallFunc_GetGameState_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, BombWidget_C* K2Node_DynamicCast_AsBomb_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BombWidget_C* K2Node_DynamicCast_AsBomb_Widget, bool K2Node_DynamicCast_bSuccess, FText K2Node_CustomEvent_NewText, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Rotator CallFunc_RandomRotator_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_BooleanXOR_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, BP_DestroyedBomb_C* CallFunc_FinishSpawningActor_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x7831b71580

--------------------------------
Class: BP_BaseInteractable_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x220, Size: 0x8] 0x783130c400
	float InteractTime;//[Offset: 0x228, Size: 0x4] 0x783130c380

--------------------------------
Class: BombWidget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834367c00
	Image* ObjectiveIcon;//[Offset: 0x268, Size: 0x8] 0x7834367b80
	TextBlock* Text;//[Offset: 0x270, Size: 0x8] 0x7834367b00
	void SetIconColor(LinearColor Color);// 0x6d94ba8 0x783136ea20
	void SetText(FText NewText);// 0x6d94ba8 0x783136f120
	void ExecuteUbergraph_BombWidget(int EntryPoint, LinearColor K2Node_CustomEvent_Color, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, FText K2Node_CustomEvent_NewText);// 0x6d94ba8 0x78e3e284a0

--------------------------------
Class: BP_DestroyedBomb_C.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x220, Size: 0x8] 0x783130c300
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8] 0x783130c280

--------------------------------
Class: FPS_RUSH_GM_C.FPS_GM_C.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 0x8] 0x7834307080
	void ReceiveBeginPlay();// 0x6d94ba8 0x782d945f00
	void ActivateNewSpawns(int NewParam);// 0x6d94ba8 0x782d9460c0
	void ExecuteUbergraph_FPS_RUSH_GM(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int K2Node_CustomEvent_NewParam, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_PlayerSpawn_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782d946280

--------------------------------
Class: WB_InGameMenu_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783415bb80
	Button* CharacterSelection;//[Offset: 0x268, Size: 0x8] 0x783415bb00
	TextBlock* CharacterSelectionText;//[Offset: 0x270, Size: 0x8] 0x783415ba80
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x783415ba00
	Button* MainMenu;//[Offset: 0x280, Size: 0x8] 0x783415b980
	TextBlock* MainMenuText;//[Offset: 0x288, Size: 0x8] 0x783415b900
	Button* QuitButton;//[Offset: 0x290, Size: 0x8] 0x783415b880
	TextBlock* QuitText;//[Offset: 0x298, Size: 0x8] 0x783415b800
	TextBlock* ReturnButtonText;//[Offset: 0x2a0, Size: 0x8] 0x783415b780
	Button* ReturnToGameButton;//[Offset: 0x2a8, Size: 0x8] 0x783415b700
	Button* Settigns;//[Offset: 0x2b0, Size: 0x8] 0x783415b680
	TextBlock* SettingsText;//[Offset: 0x2b8, Size: 0x8] 0x783415b600
	LinearColor ButtonColor;//[Offset: 0x2c0, Size: 0x10] 0x783415d680
	LinearColor HoveredColor;//[Offset: 0x2d0, Size: 0x10] 0x783415d600
	LinearColor HoveredTextColor;//[Offset: 0x2e0, Size: 0x10] 0x783415d580
	LinearColor TextColor;//[Offset: 0x2f0, Size: 0x10] 0x783415d500
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, EventReply CallFunc_Handled_ReturnValue, Key CallFunc_GetKey_ReturnValue, FText CallFunc_Key_GetDisplayName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x6d94ba8 0x782d9421c0
	void BndEvt__MainMenu_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d9422a0
	void BndEvt__QuitButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d942380
	void BndEvt__Settigns_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d942460
	void BndEvt__ReturnToGameButton_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d942540
	void ReturnToGame();// 0x6d94ba8 0x782d942620
	void OnKeyPressed(FString Key);// 0x6d94ba8 0x782d942700
	void BndEvt__CharacterSelection_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d9427e0
	void OnButtonHovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782d9429a0
	void OnButtonUnhovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x782d942b60
	void ExecuteUbergraph_WB_InGameMenu(int EntryPoint, UserWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, int CallFunc_Array_Length_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, int ___int_Loop_Counter_Variable, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString K2Node_CustomEvent_Key, bool K2Node_SwitchString_CmpSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable, UserWidget* CallFunc_Array_Get_Item, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x78e262bf40

--------------------------------
Class: BP_BaseFlag_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7836954200
	WidgetComponent* Widget;//[Offset: 0x228, Size: 0x8] 0x7836954180
	StaticMeshComponent* Flag;//[Offset: 0x230, Size: 0x8] 0x7836954100
	SceneComponent* Root;//[Offset: 0x238, Size: 0x8] 0x7836954080
	CapsuleComponent* Capsule;//[Offset: 0x240, Size: 0x8] 0x7836954000
	bool Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x7836953f80
	Vector InitialPossition;//[Offset: 0x24c, Size: 0xc] 0x7836953f00
	Rotator InitialRotation;//[Offset: 0x258, Size: 0xc] 0x7836953e80
	bool bFlagTaken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1] 0x7836953e00
	BP_LPSP_PCH_C* PawnRef;//[Offset: 0x268, Size: 0x8] 0x7836953d80
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1] 0x7836953d00
	void TryToAddPoint(out bool Success, bool CallFunc_K2_SetActorRotation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, FPS_CTF_GS_C* K2Node_DynamicCast_AsFPS_CTF_GS, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831203f80
	void ReceiveBeginPlay();// 0x6d94ba8 0x7831204060
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6d94ba8 0x7831204220
	void ResetFlag();// 0x6d94ba8 0x78312043e0
	void ExecuteUbergraph_BP_BaseFlag(int EntryPoint, HitResult CallFunc_K2_AddLocalOffset_SweepHitResult, Texture2D* ___object_Variable, Texture2D* ___object_Variable, bool ___bool_Variable, byte ___byte_Variable, byte ___byte_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_TryToAddPoint_Success, bool CallFunc_HasAuthority_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, Texture2D* K2Node_Select_Default, CapturePointIcon_C* K2Node_DynamicCast_AsCapture_Point_Icon, bool K2Node_DynamicCast_bSuccess, byte K2Node_Select_Default);// 0x6d94ba8 0x78312044c0

--------------------------------
Class: WB_DirectionalDamageIndicator_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830acf800
	CanvasPanel* Canvas;//[Offset: 0x268, Size: 0x8] 0x7830acf780
	Image* IndicatorImage;//[Offset: 0x270, Size: 0x8] 0x7833f21080
	float Angle;//[Offset: 0x278, Size: 0x4] 0x7833f21000
	Vector DmgLocation;//[Offset: 0x27c, Size: 0xc] 0x7833f20f80
	void RotateWidget(Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);// 0x6d94ba8 0x7834274760
	void Construct();// 0x6d94ba8 0x7834274920
	void ExecuteUbergraph_WB_DirectionalDamageIndicator(int EntryPoint, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0x6d94ba8 0x7834274ae0

--------------------------------
Class: ScoreReason_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7835c39c00
	WidgetAnimation* ReasonAnim;//[Offset: 0x268, Size: 0x8] 0x7833f20e80
	TextBlock* Reason;//[Offset: 0x270, Size: 0x8] 0x7833f20e00
	bool bPositive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1] 0x7833f20d80
	SlateColor Positive;//[Offset: 0x280, Size: 0x28] 0x7833f20d00
	SlateColor Negative;//[Offset: 0x2a8, Size: 0x28] 0x7833f20c80
	FText Text;//[Offset: 0x2d0, Size: 0x18] 0x7833f20c00
	void Construct();// 0x6d94ba8 0x7834274300
	void ExecuteUbergraph_ScoreReason(int EntryPoint, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x6d94ba8 0x78342744c0

--------------------------------
Class: WB_CharacterSelection_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783435a200
	Button* AssaultClass;//[Offset: 0x268, Size: 0x8] 0x783435a180
	Image* AssaultIcon;//[Offset: 0x270, Size: 0x8] 0x783435a100
	Button* BackButton;//[Offset: 0x278, Size: 0x8] 0x783435a080
	TextBlock* BackText;//[Offset: 0x280, Size: 0x8] 0x783435a000
	TextBlock* ClassText;//[Offset: 0x288, Size: 0x8] 0x7834359f80
	Button* GrenadeButton;//[Offset: 0x290, Size: 0x8] 0x7834359f00
	Image* GrenadeIcon;//[Offset: 0x298, Size: 0x8] 0x7834359e80
	TextBlock* GunName;//[Offset: 0x2a0, Size: 0x8] 0x7834359e00
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x7834359d80
	Button* MedicClass;//[Offset: 0x2b0, Size: 0x8] 0x7834359d00
	Image* MedicIcon;//[Offset: 0x2b8, Size: 0x8] 0x7834359c80
	Button* NextGrenade;//[Offset: 0x2c0, Size: 0x8] 0x7834359c00
	TextBlock* NextGrenadeText;//[Offset: 0x2c8, Size: 0x8] 0x7834359b80
	Button* NextPerk;//[Offset: 0x2d0, Size: 0x8] 0x7834359b00
	TextBlock* NextPerkText;//[Offset: 0x2d8, Size: 0x8] 0x7834359a80
	Button* NextSidearmButton;//[Offset: 0x2e0, Size: 0x8] 0x7834359a00
	TextBlock* NextSidearmText;//[Offset: 0x2e8, Size: 0x8] 0x7834359980
	Button* OfficialClass;//[Offset: 0x2f0, Size: 0x8] 0x7834359900
	Image* PerkImage;//[Offset: 0x2f8, Size: 0x8] 0x7834359880
	Button* PerksButton;//[Offset: 0x300, Size: 0x8] 0x7834359800
	Button* PlayButton;//[Offset: 0x308, Size: 0x8] 0x7834359780
	TextBlock* PlayText;//[Offset: 0x310, Size: 0x8] 0x7834359700
	VerticalBox* PrematchTimer;//[Offset: 0x318, Size: 0x8] 0x7834359680
	Button* PreviousGrenade;//[Offset: 0x320, Size: 0x8] 0x7834359600
	TextBlock* PreviousGrenadeText;//[Offset: 0x328, Size: 0x8] 0x7834359580
	Button* PreviousPerk;//[Offset: 0x330, Size: 0x8] 0x7834359500
	TextBlock* PreviousPerkText;//[Offset: 0x338, Size: 0x8] 0x783435b580
	Button* PreviousSidearmButton;//[Offset: 0x340, Size: 0x8] 0x783435b500
	TextBlock* PreviousSidearmText;//[Offset: 0x348, Size: 0x8] 0x783435b480
	Image* PrymaryWeaponImage;//[Offset: 0x350, Size: 0x8] 0x783435b400
	ScrollBox* ScrollBox;//[Offset: 0x358, Size: 0x8] 0x783435b380
	Button* SideArm;//[Offset: 0x360, Size: 0x8] 0x783435b300
	Image* SideArmImage;//[Offset: 0x368, Size: 0x8] 0x783435b280
	TextBlock* SidearmName;//[Offset: 0x370, Size: 0x8] 0x783435b200
	SizeBox* SizeBox;//[Offset: 0x378, Size: 0x8] 0x783435b180
	Image* SniperIcon;//[Offset: 0x380, Size: 0x8] 0x783435b100
	Button* SupportClass;//[Offset: 0x388, Size: 0x8] 0x783435b080
	Image* SupportIcon;//[Offset: 0x390, Size: 0x8] 0x783435b000
	TextBlock* TeamText;//[Offset: 0x398, Size: 0x8] 0x783435af80
	TextBlock* TextBlock;//[Offset: 0x3a0, Size: 0x8] 0x783435af00
	Button* ToggleTeamButton;//[Offset: 0x3a8, Size: 0x8] 0x783435ae80
	TextBlock* ToggleTeamText;//[Offset: 0x3b0, Size: 0x8] 0x783435ae00
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3b8, Size: 0x8] 0x783435ad80
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3c0, Size: 0x8] 0x783435ad00
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3c8, Size: 0x8] 0x783435ac80
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3d0, Size: 0x8] 0x783435ac00
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3d8, Size: 0x8] 0x783435ab80
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3e0, Size: 0x8] 0x783435ab00
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3e8, Size: 0x8] 0x783435aa80
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3f0, Size: 0x8] 0x783435aa00
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x3f8, Size: 0x8] 0x783435a980
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x400, Size: 0x8] 0x783435a900
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x408, Size: 0x8] 0x783435a880
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x410, Size: 0x8] 0x783435a800
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x418, Size: 0x8] 0x783435a780
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x420, Size: 0x8] 0x783435a700
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x428, Size: 0x8] 0x783435a680
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x430, Size: 0x8] 0x783435a600
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x438, Size: 0x8] 0x783435a580
	UI_WeaponList_C* UI_WeaponList;//[Offset: 0x440, Size: 0x8] 0x783435c600
	byte PlayerClass;//[Offset: 0x448, Size: 0x1] 0x783435c580
	bool bReadyToSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1] 0x783435c500
	byte Selected Perk;//[Offset: 0x44a, Size: 0x1] 0x783435c480
	LinearColor On HoveredTextColor;//[Offset: 0x44c, Size: 0x10] 0x783435c400
	class BP_BaseWeapon_C* SelectedPrimaryWeapon;//[Offset: 0x460, Size: 0x8] 0x783450cea0
	class BP_BaseWeapon_C* SelectedSecondaryWeapon;//[Offset: 0x468, Size: 0x8] 0x783450ce00
	class BP_Grenade_C* SelectedGrenadeType;//[Offset: 0x470, Size: 0x8] 0x783450cd60
	LinearColor HoveredColor;//[Offset: 0x478, Size: 0x10] 0x783435c380
	LinearColor HoveredTextColor;//[Offset: 0x488, Size: 0x10] 0x783435c300
	LinearColor ButtonColor;//[Offset: 0x498, Size: 0x10] 0x783435c280
	LinearColor TextColor;//[Offset: 0x4a8, Size: 0x10] 0x783435c200
	class BP_BaseWeapon_C[] PrimaryWeaponArray;//[Offset: 0x4b8, Size: 0x10] 0x783450ccc0
	int PrimaryWeaponIndex;//[Offset: 0x4c8, Size: 0x4] 0x783435c180
	int PerkIndex;//[Offset: 0x4cc, Size: 0x4] 0x783435c100
	byte[] Perks;//[Offset: 0x4d0, Size: 0x10] 0x783450bfa0
	class BP_Grenade_C[] GrenadeArray;//[Offset: 0x4e0, Size: 0x10] 0x783450bf00
	int GrenadeIndex;//[Offset: 0x4f0, Size: 0x4] 0x783435c000
	class BP_BaseWeapon_C[] SidearmWeaponArray;//[Offset: 0x4f8, Size: 0x10] 0x783450f1a0
	int SidearmWeaponIndex;//[Offset: 0x508, Size: 0x4] 0x783435bf80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x510, Size: 0x8] 0x783435bf00
	FText GetTimeLeftToStart(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x7831beba00
	enum Get_PrematchTimer_Visibility(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default);// 0x6d94ba8 0x7831bebae0
	enum GetChangeTeamButtonVisibility(GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831bebbc0
	FText Get_TeamText_Text(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831bebca0
	enum ChangeTeamVisibility(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x6d94ba8 0x7831bebd80
	FText GetPerkDescription(bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x7831bebe60
	FText GetSpawnCountDown(BaseCharacterPC_C* Controller, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831bebf40
	bool GetReadyToSpawnButtonIsEnabled(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831bec020
	bool SetEnableOfficialButton(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831bec100
	bool SetEnableMedicButton(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831bec1e0
	bool SetEnableSupportButton(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831bec2c0
	bool SetEnableAssaultButton(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x7831bec3a0
	SlateBrush GetTeamImage(SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831bec480
	void Construct();// 0x6d94ba8 0x7831bec560
	void OnButtonHovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x7831bec640
	void OnButtonUnhovered(Button* Button, TextBlock* Text);// 0x6d94ba8 0x7831bec720
	void UpdatePrimaryWeapon();// 0x6d94ba8 0x7831bec800
	void BndEvt__PlayButton_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bec8e0
	void BndEvt__Button_127_K2Node_ComponentBoundEvent_30_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bec9c0
	void BndEvt__BackButton_K2Node_ComponentBoundEvent_35_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be90e0
	void UpdateClassText();// 0x6d94ba8 0x7831be91c0
	void BndEvt__NextPerk_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be92a0
	void BndEvt__NextPerk_K2Node_ComponentBoundEvent_7_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9380
	void BndEvt__NextPerk_K2Node_ComponentBoundEvent_8_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9540
	void BndEvt__PreviousPerk_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be9620
	void BndEvt__PreviousPerk_K2Node_ComponentBoundEvent_36_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9700
	void BndEvt__PreviousPerk_K2Node_ComponentBoundEvent_37_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be97e0
	void UpdatePerk();// 0x6d94ba8 0x7831be98c0
	void BndEvt__SupportClass_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be99a0
	void BndEvt__OfficialClass_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be9a80
	void BndEvt__MedicClass_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be9b60
	void BndEvt__NextGrenade_K2Node_ComponentBoundEvent_38_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831be9c40
	void BndEvt__NextGrenade_K2Node_ComponentBoundEvent_39_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9d20
	void BndEvt__NextGrenade_K2Node_ComponentBoundEvent_40_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9e00
	void BndEvt__PreviousGrenade_K2Node_ComponentBoundEvent_41_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9ee0
	void BndEvt__PreviousGrenade_K2Node_ComponentBoundEvent_42_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831be9fc0
	void BndEvt__PreviousGrenade_K2Node_ComponentBoundEvent_43_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bea0a0
	void UpdateGrenades();// 0x6d94ba8 0x7831bea180
	void InitButtons();// 0x6d94ba8 0x7831bea260
	void BndEvt__AssaultClass_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bea340
	void BndEvt__NextSidearmButton_K2Node_ComponentBoundEvent_44_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831bea420
	void BndEvt__NextSidearmButton_K2Node_ComponentBoundEvent_45_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831bea500
	void BndEvt__NextSidearmButton_K2Node_ComponentBoundEvent_46_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bea5e0
	void BndEvt__PreviousSidearmButton_K2Node_ComponentBoundEvent_47_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831bea6c0
	void BndEvt__PreviousSidearmButton_K2Node_ComponentBoundEvent_48_OnButtonHoverEvent__DelegateSignature();// 0x6d94ba8 0x7831bea7a0
	void BndEvt__PreviousSidearmButton_K2Node_ComponentBoundEvent_49_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x7831bea880
	void UpdateSideArm();// 0x6d94ba8 0x7831bea960
	void SelectWeapon(int Index);// 0x6d94ba8 0x7831beaa40
	void RefList();// 0x6d94ba8 0x7831beac00
	void 自定义事件                                                                                     (byte Type);// 0x6d94ba8 0x7831beace0
	void Destruct();// 0x6d94ba8 0x7831be74e0
	void ExecuteUbergraph_WB_CharacterSelection(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FPS_GM_C* K2Node_DynamicCast_AsFPS_GM, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, SlateBrush K2Node_MakeStruct_SlateBrush, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, Button* K2Node_CustomEvent_Button, TextBlock* K2Node_CustomEvent_Text, SlateColor K2Node_MakeStruct_SlateColor, class BP_BaseWeapon_C CallFunc_Array_Get_Item, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, class BP_Grenade_C CallFunc_Array_Get_Item, SlateBrush K2Node_MakeStruct_SlateBrush, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush, bool CallFunc_Greater_IntInt_ReturnValue, class BP_BaseWeapon_C CallFunc_Array_Get_Item, bool K2Node_SwitchInteger_CmpSuccess, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int K2Node_CustomEvent_Index, Widget*[] CallFunc_GetAllChildren_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, Widget* CallFunc_Array_Get_Item, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, UI_WeaponList_C* K2Node_DynamicCast_AsUI_Weapon_List, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_CustomEvent_Type, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, float CallFunc_GetScrollOffset_ReturnValue, UI_WeaponList_C* K2Node_DynamicCast_AsUI_Weapon_List, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Find_ReturnValue);// 0x6d94ba8 0x7831be75c0

--------------------------------
Class: UI_WeaponList_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78350d4480
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7834310700
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7834310680
	ScrollBox* ScrollBox;//[Offset: 0x278, Size: 0x8] 0x7834310600
	UI_WeaponListItem_C* UI_WeaponItem;//[Offset: 0x280, Size: 0x8] 0x7834310580
	UI_WeaponListItem_C* UI_WeaponItem;//[Offset: 0x288, Size: 0x8] 0x7834310500
	UI_WeaponListItem_C* UI_WeaponItem;//[Offset: 0x290, Size: 0x8] 0x7834310480
	UI_WeaponListItem_C* UI_WeaponItem;//[Offset: 0x298, Size: 0x8] 0x7834310400
	UI_WeaponListItem_C* UI_WeaponItem;//[Offset: 0x2a0, Size: 0x8] 0x7834310380
	Object* Resource Object;//[Offset: 0x2a8, Size: 0x8] 0x7834310300
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2b0, Size: 0x8] 0x7834310280
	byte Type;//[Offset: 0x2b8, Size: 0x1] 0x7834310200
	delegate EventSelect;//[Offset: 0x2c0, Size: 0x10] 0x7834310180
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply);// 0x6d94ba8 0x7831be82e0
	void Construct();// 0x6d94ba8 0x7831be83c0
	void RefUI();// 0x6d94ba8 0x7831be84a0
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7831be8580
	void Select(bool Select);// 0x6d94ba8 0x7831be8740
	void 自定义事件                                                                                     (int Index);// 0x6d94ba8 0x7831be8900
	void ExecuteUbergraph_UI_WeaponList(int EntryPoint, SlateColor K2Node_MakeStruct_SlateColor, Widget*[] CallFunc_GetAllChildren_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_Array_Length_ReturnValue, UI_WeaponListItem_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Widget* CallFunc_Array_Get_Item, UI_WeaponListItem_C* K2Node_DynamicCast_AsUI_Weapon_List_Item, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_IsDesignTime, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, bool K2Node_CustomEvent_Select, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int ___int_Loop_Counter_Variable, Widget* CallFunc_Array_Get_Item, UI_WeaponListItem_C* K2Node_DynamicCast_AsUI_Weapon_List_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_CustomEvent_Index, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x7831be89e0
	void EventSelect__DelegateSignature(byte Type);// 0x6d94ba8 0x7831be8ac0

--------------------------------
Class: UI_WeaponListItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834310c00
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7834310b80
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7834310b00
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7834310a80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x280, Size: 0x8] 0x7834310a00
	int Index;//[Offset: 0x288, Size: 0x4] 0x7834310980
	Object* Resource Object;//[Offset: 0x290, Size: 0x8] 0x7834310900
	delegate OnSelect;//[Offset: 0x298, Size: 0x10] 0x7834310880
	byte WeaponType;//[Offset: 0x2a8, Size: 0x1] 0x7834310800
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply);// 0x6d94ba8 0x7831be5aa0
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7831be5b80
	void Select(bool Select);// 0x6d94ba8 0x7831be5c60
	void Construct();// 0x6d94ba8 0x7831be5e20
	void ExecuteUbergraph_UI_WeaponListItem(int EntryPoint, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool K2Node_Event_IsDesignTime, bool K2Node_CustomEvent_Select, enum K2Node_Select_Default, enum K2Node_Select_Default, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831be5f00
	void OnSelect__DelegateSignature(int Index);// 0x6d94ba8 0x7831be60c0

--------------------------------
Class: BP_Grenade_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x783140a400
	StaticMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8] 0x783140a380
	SphereComponent* Sphere;//[Offset: 0x230, Size: 0x8] 0x783140a300
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x238, Size: 0x8] 0x783140a280
	HealthComponent_C* HealthComponent;//[Offset: 0x240, Size: 0x8] 0x783140a200
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x783140a180
	float TimeToExplode;//[Offset: 0x24c, Size: 0x4] 0x783140a100
	float PawnVelocity;//[Offset: 0x250, Size: 0x4] 0x783140a080
	void UserConstructionScript(float CallFunc_Add_FloatFloat_ReturnValue);// 0x6d94ba8 0x7835eae080
	void PlayEffects();// 0x6d94ba8 0x7835eae160
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x7835eae240
	void Explode();// 0x6d94ba8 0x7835eae400
	void ReceiveBeginPlay();// 0x6d94ba8 0x7835eae5c0
	void ExecuteUbergraph_BP_Grenade(int EntryPoint, const Actor*[] ___object_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_RandomRotator_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Controller* CallFunc_GetInstigatorController_ReturnValue, bool CallFunc_ApplyRadialDamage_ReturnValue, Rotator CallFunc_RandomRotator_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult);// 0x6d94ba8 0x7835eae6a0

--------------------------------
Class: HealthComponent_C.ActorComponent.Object
	float HP;//[Offset: 0xb0, Size: 0x4] 0x7830223080
	float Stamina;//[Offset: 0xb4, Size: 0x4] 0x7830223000
	float MaxHP;//[Offset: 0xb8, Size: 0x4] 0x7830222f80

--------------------------------
Class: BP_BaseVehicle_C.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8] 0x783140cc80
	HealthComponent_C* HealthComponent;//[Offset: 0x288, Size: 0x8] 0x783140cc00
	SpringArmComponent* SpringArm;//[Offset: 0x290, Size: 0x8] 0x783140cb80
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x298, Size: 0x8] 0x783140cb00
	CameraComponent* ChaseCamera;//[Offset: 0x2a0, Size: 0x8] 0x783140ca80
	AudioComponent* EngineSound;//[Offset: 0x2a8, Size: 0x8] 0x783140ca00
	bool bIsLowFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x783140c980
	bool IsInCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x783140c900
	LinearColor GearDisplayColor;//[Offset: 0x2b4, Size: 0x10] 0x783140c880
	LinearColor GearDisplayReverseColor;//[Offset: 0x2c4, Size: 0x10] 0x783140c800
	FString Speed Display String;//[Offset: 0x2d8, Size: 0x10] 0x783140c780
	FString Gear Display String;//[Offset: 0x2e8, Size: 0x10] 0x783140c700
	bool InReverseGear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1] 0x783140c680
	bool bHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1] 0x783140e700
	Controller* ControllerRef;//[Offset: 0x300, Size: 0x8] 0x783140e680
	Vehicle_PlayerInfo[] CharactersInside;//[Offset: 0x308, Size: 0x10] 0x782e49d620
	int Slots;//[Offset: 0x318, Size: 0x4] 0x783140e580
	BP_BaseCharacter_C* PawnRef;//[Offset: 0x320, Size: 0x8] 0x783140e500
	PlayerController* PlayerControlletRef;//[Offset: 0x328, Size: 0x8] 0x783140e480
	bool bDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1] 0x783140e400
	void BeginInteract(Actor* Instigator, out bool Failure);// 0x6d94ba8 0x7835eaf3c0
	void IsFlipped(Vector CallFunc_GetVelocity_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_GetActorUpVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetActorUpVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Abs_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x7835eaf4a0
	void EnableDisableCollisions(BP_BaseCharacter_C* Pawn, bool bEnable);// 0x6d94ba8 0x7835eaf580
	void ChangePlace(int Position, PlayerController* PlayerController, int ___int_Array_Index_Variable, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, int ___int_Loop_Counter_Variable, Vehicle_PlayerInfo CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x7835eaf660
	void GetVehicleSocketName(int Position, out FName SocketName, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x7835eaf740
	void IsFull(out bool bIsFull, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vehicle_PlayerInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7835eaf820
	void FindAvaliablePosition(out int Position, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vehicle_PlayerInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7835eaf900
	void InpActEvt_Interact_K2Node_InputActionEvent(Key Key);// 0x6d94ba8 0x7835eaf9e0
	void InpActEvt_F2_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7835eafac0
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x6d94ba8 0x7835eafba0
	void BeginHover();// 0x6d94ba8 0x7835eafc80
	void EndHover();// 0x6d94ba8 0x7835eafd60
	void EndInteract();// 0x6d94ba8 0x7835eafe40
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x6d94ba8 0x7835eaff20
	void Interact(Actor* Instigator);// 0x6d94ba8 0x7835eacaa0
	void ServerInteract(Actor* Instigator);// 0x6d94ba8 0x7835eacb80
	void EnterVehicle(Vehicle_PlayerInfo PlayerInfo);// 0x6d94ba8 0x7835eacc60
	void EnterVehiclePassenger(Controller* PlayerControler);// 0x6d94ba8 0x7835eacd40
	void LeaveVehicle(PlayerController* PlayerController);// 0x6d94ba8 0x7835eace20
	void EnterVehicleDriver(Controller* Controller);// 0x6d94ba8 0x7835eacf00
	void ChangePosition(int Position, PlayerController* PlayerController);// 0x6d94ba8 0x7835eacfe0
	void AttachActor(BP_BaseCharacter_C* Pawn, BP_BaseVehicle_C* Vehicle, bool IsLeaving, FName Name, Controller* Controller);// 0x6d94ba8 0x7835ead0c0
	void ReceiveBeginPlay();// 0x6d94ba8 0x7835ead1a0
	void OnDestroy(Controller* Instigator, Actor* Causer);// 0x6d94ba8 0x7835ead280
	void DestroyEffects();// 0x6d94ba8 0x7835ead360
	void ActivateDeactivateSound(bool bActivate);// 0x6d94ba8 0x7835ead520
	void ReceivePossessed(Controller* NewController);// 0x6d94ba8 0x7835ead6e0
	void ResetPawn(BP_BaseCharacter_C* NewParam, Controller* Controller);// 0x6d94ba8 0x7835ead7c0
	void ExecuteUbergraph_BP_BaseVehicle(int EntryPoint, BP_BaseCharacter_C* K2Node_CustomEvent_NewParam, Controller* K2Node_CustomEvent_Controller, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_SetActorRotation_ReturnValue, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Actor* K2Node_Event_Instigator, Pawn* CallFunc_K2_GetPawn_ReturnValue, Actor* K2Node_CustomEvent_Instigator, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, Vehicle_PlayerInfo K2Node_CustomEvent_PlayerInfo, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, Controller* K2Node_CustomEvent_PlayerControler, bool CallFunc_Less_IntInt_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, PlayerController* K2Node_CustomEvent_PlayerController, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Variable, Controller* K2Node_CustomEvent_Controller, Pawn* CallFunc_K2_GetPawn_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, int K2Node_CustomEvent_Position, PlayerController* K2Node_CustomEvent_PlayerController, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_GetVehicleSocketName_SocketName, FName CallFunc_GetVehicleSocketName_SocketName, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_BaseCharacter_C* K2Node_CustomEvent_Pawn, BP_BaseVehicle_C* K2Node_CustomEvent_Vehicle, bool K2Node_CustomEvent_IsLeaving, FName K2Node_CustomEvent_Name, Controller* K2Node_CustomEvent_Controller, int CallFunc_Array_Add_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsFull_bIsFull, bool CallFunc_Not_PreBool_ReturnValue, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, int CallFunc_FindAvaliablePosition_Position, FName CallFunc_GetVehicleSocketName_SocketName, Controller* K2Node_CustomEvent_Instigator, Actor* K2Node_CustomEvent_Causer, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, Vehicle_PlayerInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_ApplyDamage_ReturnValue, bool CallFunc_IsValid_ReturnValue, Key K2Node_InputActionEvent_Key, Vehicle_PlayerInfo K2Node_MakeStruct_Vehicle_PlayerInfo, Key K2Node_InputKeyEvent_Key, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, Key K2Node_InputKeyEvent_Key, TimerHandle CallFunc_K2_SetTimer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_ApplyRadialDamage_ReturnValue, bool K2Node_CustomEvent_bActivate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Controller* K2Node_Event_NewController, PlayerController* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, Vehicle_PlayerInfo CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x6d94ba8 0x7835ead8a0

--------------------------------
Class: Vehicle_PlayerInfo
	Controller* PlayerController_2_DF5AAD9A46D04179D69DC3AB85D61355;//[Offset: 0x0, Size: 0x8] 0x78350da780
	BP_BaseCharacter_C* CharacterPawn_8_04C8C5124A4A783BF70C7298790C077F;//[Offset: 0x8, Size: 0x8] 0x78350da700

--------------------------------
Class: WB_Controls_C.UserWidget.Widget.Visual.Object

--------------------------------
Class: WB_Chat_C.UserWidget.Widget.Visual.Object
	ChatWindow_C* ChatWindow;//[Offset: 0x260, Size: 0x8] 0x78350d4400

--------------------------------
Class: ChatWindow_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78350d6b00
	WidgetAnimation* FadeChatAnim;//[Offset: 0x268, Size: 0x8] 0x78350d6a80
	Border* BorderBackground;//[Offset: 0x270, Size: 0x8] 0x78350d6a00
	EditableTextBox* ChatEntry;//[Offset: 0x278, Size: 0x8] 0x78350d6980
	ScrollBox* ChatLog;//[Offset: 0x280, Size: 0x8] 0x78350d6900
	VerticalBox* VerticalBoxChat;//[Offset: 0x288, Size: 0x8] 0x78350d6880
	TimerHandle KeyboardFocusTimerHandle;//[Offset: 0x290, Size: 0x8] 0x78350d6800
	void SetTextToSend(bool bTeamChat, FText Sender, FText Msg, out FText TexToSend, bool ___bool_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FText K2Node_Select_Default);// 0x6d94ba8 0x7831bee4e0
	void UpdateChatWindow(const FText Sender, const FText Msg, bool bTeamChat);// 0x6d94ba8 0x7831bee5c0
	void BndEvt__ChatEntry_K2Node_ComponentBoundEvent_0_OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x6d94ba8 0x7831bee6a0
	void FadeChatWindow();// 0x6d94ba8 0x7831beadc0
	void InitChatEntry();// 0x6d94ba8 0x7831beaea0
	void ResetKeyboardFocus();// 0x6d94ba8 0x7831beb060
	void Construct();// 0x6d94ba8 0x7831beb220
	void ExecuteUbergraph_ChatWindow(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, const FText K2Node_CustomEvent_Sender, const FText K2Node_CustomEvent_Msg, bool K2Node_CustomEvent_bTeamChat, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_SetTextToSend_TexToSend, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, ChatText_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x6d94ba8 0x7831beb300

--------------------------------
Class: ChatText_C.UserWidget.Widget.Visual.Object
	TextBlock* MessageWidget;//[Offset: 0x260, Size: 0x8] 0x78350d1080
	FText ActualTest;//[Offset: 0x268, Size: 0x18] 0x78350d1000
	bool bTeamChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1] 0x78350d0f80
	SlateColor GetTextColor(SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x783656c640

--------------------------------
Class: WB_KillingSpreeMessage_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78350d2800
	WidgetAnimation* KillingSpreeAnim;//[Offset: 0x268, Size: 0x8] 0x78350d2780
	void Construct();// 0x6d94ba8 0x7831be7cc0
	void ExecuteUbergraph_WB_KillingSpreeMessage(int EntryPoint);// 0x6d94ba8 0x7831be7e80

--------------------------------
Class: AmmoMagazines
	byte AmmoType_5_1CD642D04C3BF1F857D9EBBF2F2EF4F5;//[Offset: 0x0, Size: 0x1] 0x7831401c00
	int Quantity_4_50296D3443367E8FA683FAA68E169687;//[Offset: 0x4, Size: 0x4] 0x7831401b80
	int MaxQuantity_8_546EA24A4AE28730EF32C0869D82333D;//[Offset: 0x8, Size: 0x4] 0x7831401b00

--------------------------------
Class: WB_Dynamic_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834366580
	WidgetAnimation* CookGrenadeAnim;//[Offset: 0x268, Size: 0x8] 0x7834366500
	CanvasPanel* CanvasPanel;//[Offset: 0x270, Size: 0x8] 0x7834366480
	Image* CrosshairBottom;//[Offset: 0x278, Size: 0x8] 0x7834366400
	Image* CrosshairLeft;//[Offset: 0x280, Size: 0x8] 0x7834366380
	Image* CrosshairRight;//[Offset: 0x288, Size: 0x8] 0x7834368400
	Image* CrosshairTop;//[Offset: 0x290, Size: 0x8] 0x7834368380
	Image* GrenadeCrosshair;//[Offset: 0x298, Size: 0x8] 0x7834368300
	BP_BaseCharacter_C* PawnRef;//[Offset: 0x2a0, Size: 0x8] 0x7834368280
	float CurrentPosition;//[Offset: 0x2a8, Size: 0x4] 0x7834368200
	float TargetPosition;//[Offset: 0x2ac, Size: 0x4] 0x7834368180
	float MaxSpread;//[Offset: 0x2b0, Size: 0x4] 0x7834368100
	float IncreaseSpeed;//[Offset: 0x2b4, Size: 0x4] 0x7834368080
	float DecreaseSpeed;//[Offset: 0x2b8, Size: 0x4] 0x7834368000
	float MaxOpacity;//[Offset: 0x2bc, Size: 0x4] 0x7834367f80
	void SetDotVisibility(bool CallFunc_IsAnimationPlaying_ReturnValue);// 0x6d94ba8 0x7831361d60
	void SetColorAndVisibility();// 0x6d94ba8 0x783136f4a0
	enum GetCrosshairVisibility();// 0x6d94ba8 0x783136f2e0
	void Construct();// 0x6d94ba8 0x783136ecc0
	void UpdateCrosshair();// 0x6d94ba8 0x7835ea75c0
	void ExecuteUbergraph_WB_Dynamic_Crosshair(int EntryPoint, float ___float_Variable, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_GetRenderOpacity_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector2D CallFunc_MakeVector2D_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x6d94ba8 0x7835ea76a0

--------------------------------
Class: WB_PlayerTag_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78360faa00
	WidgetAnimation* EnemyTagAnim;//[Offset: 0x268, Size: 0x8] 0x78360fa980
	WidgetAnimation* PlayerNameAnim;//[Offset: 0x270, Size: 0x8] 0x78360fa900
	TextBlock* NameText;//[Offset: 0x278, Size: 0x8] 0x78360fa880
	Image* PlayerIcon;//[Offset: 0x280, Size: 0x8] 0x78360fa800
	Image* TeamDeathPlayerIcon;//[Offset: 0x288, Size: 0x8] 0x78360fa780
	FName Player Name;//[Offset: 0x290, Size: 0x8] 0x78360fa700
	BP_LPSP_PCH_C* Owner;//[Offset: 0x298, Size: 0x8] 0x78360fa680
	LinearColor EnemyColor;//[Offset: 0x2a0, Size: 0x10] 0x78360fa600
	LinearColor AllyColor;//[Offset: 0x2b0, Size: 0x10] 0x78360fa580
	bool bIsDM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x78360fc600
	void Show EnemyTag();// 0x6d94ba8 0x7831b7d520
	void UpdateTags(BP_LPSP_PCH_C* NewParam);// 0x6d94ba8 0x7831b7d600
	void ShowName();// 0x6d94ba8 0x7831b7d6e0
	void Construct();// 0x6d94ba8 0x7831b7d8a0
	void SetDisplayedName(FText Name);// 0x6d94ba8 0x7831b7db40
	void ExecuteUbergraph_WB_PlayerTag(int EntryPoint, bool CallFunc_IsValid_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, BP_LPSP_PCH_C* K2Node_CustomEvent_NewParam, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_EqualEqual_BoolBool_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, FText K2Node_CustomEvent_Name, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x7831b7dc20

--------------------------------
Class: Magazine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7831409380
	SphereComponent* Sphere;//[Offset: 0x228, Size: 0x8] 0x7831409300
	StaticMeshComponent* StaticMesh;//[Offset: 0x230, Size: 0x8] 0x7831409280
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8] 0x7831409200
	byte AmmoType;//[Offset: 0x240, Size: 0x1] 0x7831409180
	int MagazineBullets;//[Offset: 0x244, Size: 0x4] 0x7831409100
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6d94ba8 0x7835eab300
	void ExecuteUbergraph_Magazine(int EntryPoint, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, AmmoMagazines CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AmmoMagazines K2Node_MakeStruct_AmmoMagazines, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x7835eab3e0

--------------------------------
Class: WB_Fire_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7831400200
	Image* Background;//[Offset: 0x268, Size: 0x8] 0x7831400180
	CanvasPanel* CanvasPanel;//[Offset: 0x270, Size: 0x8] 0x7831400100
	Image* Picker;//[Offset: 0x278, Size: 0x8] 0x7831400080
	Vector2D Widget Size;//[Offset: 0x280, Size: 0x8] 0x7831402100
	float Desired Magnitude;//[Offset: 0x288, Size: 0x4] 0x7831402080
	void Get Max Size(out float Value, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FMax_ReturnValue);// 0x6d94ba8 0x7835ea7940
	Vector2D GetPost1(const Geometry CallFunc_GetCachedGeometry_ReturnValue, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_LocalToAbsolute_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue);// 0x6d94ba8 0x7835ea7a20
	void GetImage Position(Image* Image, out Vector NewParam, float CallFunc_GetViewportScale_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_GetAutoSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue);// 0x6d94ba8 0x7835ea7b00
	void Set Image Position(Vector InVector, Image* Image, float CallFunc_GetViewportScale_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_GetAutoSize_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_SelectVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue);// 0x6d94ba8 0x7835ea7be0
	void On Joystick Clamped();// 0x6d94ba8 0x7835ea7cc0
	void On Joystick Pressed(Vector Location);// 0x6d94ba8 0x7835ea7da0
	void On Joystick Released(Vector Location);// 0x6d94ba8 0x7835ea7e80
	void On Axes Changed(float X Axis Value, float Y Axis Value, Vector Direction);// 0x6d94ba8 0x7835ea7f60
	void On X Axis Changed(float Value);// 0x6d94ba8 0x7835ea8040
	void On Y Axis Changed(float Value);// 0x6d94ba8 0x7835ea8120
	void On Viewport Size Changed(Vector2D Previous Size, Vector2D Updated Size);// 0x6d94ba8 0x7835ea8200
	void Set Size(Vector2D Size);// 0x6d94ba8 0x7835ea82e0
	void On Joystick Location Changed(Vector Location);// 0x6d94ba8 0x7835ea83c0
	void On Picker Location Changed(Vector Location);// 0x6d94ba8 0x7835ea84a0
	void Set Max Size(float Value);// 0x6d94ba8 0x7835ea8580
	void SetPost(Vector2D InPosition);// 0x6d94ba8 0x7835ea8740
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7835ea89e0
	void ExecuteUbergraph_WB_Fire(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Event_Location, Vector K2Node_Event_Location, float K2Node_Event_X_Axis_Value, float K2Node_Event_Y_Axis_Value, Vector K2Node_Event_Direction, float K2Node_Event_Value, float K2Node_Event_Value, Vector2D K2Node_Event_Previous_Size, Vector2D K2Node_Event_Updated_Size, Vector2D K2Node_Event_Size, Vector K2Node_Event_Location, Vector K2Node_Event_Location, bool CallFunc_NotEqual_VectorVector_ReturnValue, float K2Node_Event_Value, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FMax_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D K2Node_CustomEvent_InPosition, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x6d94ba8 0x7835ea8ac0

--------------------------------
Class: BP_Bullet_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x78350de000
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8] 0x78350ddf80
	Vector Velocity;//[Offset: 0x230, Size: 0xc] 0x78350ddf00
	Vector StartLocation;//[Offset: 0x23c, Size: 0xc] 0x78350dde80
	float Damage;//[Offset: 0x248, Size: 0x4] 0x78350dde00
	BP_BaseCharacter_C* OwnerRef;//[Offset: 0x250, Size: 0x8] 0x78350ddd80
	Actor* HitActor;//[Offset: 0x258, Size: 0x8] 0x78350ddd00
	PhysicalMaterial* PhyMat;//[Offset: 0x260, Size: 0x8] 0x78350ddc80
	class DamageType* DmgType;//[Offset: 0x268, Size: 0x8] 0x782e49c360
	Actor*[] ActorsAlreadyHit;//[Offset: 0x270, Size: 0x10] 0x782e49c2c0
	BP_BaseWeapon_C* WeaponRef;//[Offset: 0x280, Size: 0x8] 0x78350ddb80
	float ZVelocity;//[Offset: 0x288, Size: 0x4] 0x78350ddb00
	void ReceiveBeginPlay();// 0x6d94ba8 0x7835ea3a40
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x7835ea3c00
	void ExecuteUbergraph_BP_Bullet(int EntryPoint, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, const Actor*[] K2Node_MakeArray_Array, HitResult[] CallFunc_LineTraceMulti_OutHits, bool CallFunc_LineTraceMulti_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int ___int_Loop_Counter_Variable, const Actor*[] ___object_Variable, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, HealthComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, BP_BaseCharacter_C* K2Node_DynamicCast_AsBP_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x6d94ba8 0x7835ea3ce0

--------------------------------
Class: SClamps
	Vector2D ClampsYaw_2_D69A70314832264E1259339BF0463625;//[Offset: 0x0, Size: 0x8] 0x78360f9c80
	Vector2D ClampsPitch_4_49097C6045C58AEB16F0DFA7D5E0AD80;//[Offset: 0x8, Size: 0x8] 0x78360f9c00

--------------------------------
Class: SViemodelAnimatedOffsets
	Vector JumpingLocation_2_A9B5163A434F7355DAFB53A6CBD7EA0C;//[Offset: 0x0, Size: 0xc] 0x783695ef00
	Vector JumpingRotation_4_72AA75A14167E49D85632C89276AFC9D;//[Offset: 0xc, Size: 0xc] 0x783695ee80
	Vector FallingLocation_6_3553DF9544B1867E554F8FBF5F1870E3;//[Offset: 0x18, Size: 0xc] 0x783695ee00
	Vector FallingRotation_8_31B019524F9BA41510CBED90E0A8AF27;//[Offset: 0x24, Size: 0xc] 0x783695ed80
	Vector LandingLocation_10_290AC13C42D281F4F9713CB9B44C7C33;//[Offset: 0x30, Size: 0xc] 0x783695ed00
	Vector LandingRotation_12_BCB7656747C1FAC0B162F98B4E6C80D4;//[Offset: 0x3c, Size: 0xc] 0x783695ec80

--------------------------------
Class: BPAC_LPSP_Interactor_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8] 0x7840561100
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1] 0x7840563180
	Actor* Owner;//[Offset: 0xc0, Size: 0x8] 0x7840563100
	HitResult Hit Result;//[Offset: 0xc8, Size: 0x88] 0x7840563080
	float Distance;//[Offset: 0x150, Size: 0x4] 0x7840563000
	Vector Location;//[Offset: 0x154, Size: 0xc] 0x7840562f80
	Vector Forward;//[Offset: 0x160, Size: 0xc] 0x7840562f00
	byte Type;//[Offset: 0x16c, Size: 0x1] 0x7840562e80
	float Radius;//[Offset: 0x170, Size: 0x4] 0x7840562e00
	Character* Character;//[Offset: 0x178, Size: 0x8] 0x7840562d80
	byte[] Object Types Below;//[Offset: 0x180, Size: 0x10] 0x783648a100
	byte[] Object Types Forward;//[Offset: 0x190, Size: 0x10] 0x783648a060
	void Get Type(out byte Type);// 0x6d94ba8 0x7831361740
	void Get Hit Result(out HitResult Result);// 0x6d94ba8 0x7831361820
	void Try Assign Type(bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, interface classNone K2Node_DynamicCast_AsInterface_Interactable, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Interactable, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Interaction_Type_Type, bool CallFunc_Can_Interact_ReturnValue);// 0x6d94ba8 0x7831361900
	void Reset Type();// 0x6d94ba8 0x7831361ac0
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x7831361ba0
	void ReceiveBeginPlay();// 0x6d94ba8 0x7836a03c00
	void ExecuteUbergraph_BPAC_LPSP_Interactor(int EntryPoint, interface classNone K2Node_DynamicCast_AsInterface_Interactor_Target, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Get_Interact_Vectors_Location, Vector CallFunc_Get_Interact_Vectors_Forward, Actor* CallFunc_GetOwner_ReturnValue, Character* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaSeconds, const Actor*[] K2Node_MakeArray_Array, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_SphereTraceSingleForObjects_OutHit, bool CallFunc_SphereTraceSingleForObjects_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Interactor_Target, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Can_Trace_Interaction_Value, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_SphereTraceSingleForObjects_OutHit, bool CallFunc_SphereTraceSingleForObjects_ReturnValue);// 0x6d94ba8 0x783120e940

--------------------------------
Class: BP_LPSP_PROJ_Grenade_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7830224880
	BPSC_LPSP_Explosion_C* Utility Explosion Component;//[Offset: 0x228, Size: 0x8] 0x7830224800
	ParticleSystemComponent* Particles Trail;//[Offset: 0x230, Size: 0x8] 0x7830224780
	SceneComponent* Particles Root;//[Offset: 0x238, Size: 0x8] 0x7830224700
	SceneComponent* Audio Root;//[Offset: 0x240, Size: 0x8] 0x7830224680
	StaticMeshComponent* Projectile Mesh;//[Offset: 0x248, Size: 0x8] 0x7830224600
	SceneComponent* Utility Root;//[Offset: 0x250, Size: 0x8] 0x7830224580
	BoxComponent* Collision Box;//[Offset: 0x258, Size: 0x8] 0x7830224500
	WidgetComponent* Utility Widget Component;//[Offset: 0x260, Size: 0x8] 0x7830224480
	AudioComponent* Audio Loop;//[Offset: 0x268, Size: 0x8] 0x7830224400
	AudioComponent* Audio Init;//[Offset: 0x270, Size: 0x8] 0x7830224380
	ProjectileMovementComponent* Projectile (Movement);//[Offset: 0x278, Size: 0x8] 0x7830224300
	float Scale_Timeline_Reset_Alpha_EA5CB28B4F82A4674BE92F951B2AD3BE;//[Offset: 0x280, Size: 0x4] 0x7830224280
	byte Scale_Timeline_Reset__Direction_EA5CB28B4F82A4674BE92F951B2AD3BE;//[Offset: 0x284, Size: 0x1] 0x7830226300
	TimelineComponent* Scale Timeline Reset;//[Offset: 0x288, Size: 0x8] 0x7830226280
	float Scale_Timeline_Increase_Alpha_B5B24669463AA3EE31D50F8B8A46EE3C;//[Offset: 0x290, Size: 0x4] 0x7830226200
	byte Scale_Timeline_Increase__Direction_B5B24669463AA3EE31D50F8B8A46EE3C;//[Offset: 0x294, Size: 0x1] 0x7830226180
	TimelineComponent* Scale Timeline Increase;//[Offset: 0x298, Size: 0x8] 0x7830226100
	bool Rotation Update;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1] 0x7830226080
	Rotator Rotation Speed;//[Offset: 0x2a4, Size: 0xc] 0x7830226000
	class BP_LPSP_VFX_Distortion_C* Explosion Distortion Class;//[Offset: 0x2b0, Size: 0x8] 0x782f5d9480
	float Explosion Distortion Radius;//[Offset: 0x2b8, Size: 0x4] 0x7830225f80
	int Bounces Max;//[Offset: 0x2bc, Size: 0x4] 0x7830225f00
	int Bounces Current;//[Offset: 0x2c0, Size: 0x4] 0x7830225e80
	bool Cinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1] 0x7830225e00
	bool Exploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1] 0x7830225d80
	HitResult Result;//[Offset: 0x2c8, Size: 0x88] 0x7830225d00
	bool Update Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1] 0x7830225c80
	Vector Max Scale;//[Offset: 0x354, Size: 0xc] 0x7830225c00
	Vector Initial Scale;//[Offset: 0x360, Size: 0xc] 0x7830225b80
	Vector2D Bounces Range;//[Offset: 0x36c, Size: 0x8] 0x7830225b00
	float Cinematic Blend Time;//[Offset: 0x374, Size: 0x4] 0x7830225a80
	Vector2D Destroy Actor Delay Range;//[Offset: 0x378, Size: 0x8] 0x7830225a00
	Vector2D Impulse Apply Delay Range;//[Offset: 0x380, Size: 0x8] 0x7830225980
	bool Debug Explosion Radius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1] 0x7830225900
	DataTableRowHandle Impact Surfaces Handle;//[Offset: 0x390, Size: 0x10] 0x7830225880
	PhysicalMaterial* Phys Mat Air;//[Offset: 0x3a0, Size: 0x8] 0x7830225800
	Actor* Actor;//[Offset: 0x3a8, Size: 0x8] 0x7830225780
	float Damage;//[Offset: 0x3b0, Size: 0x4] 0x7830225700
	PhysicalMaterial* Phys Mat;//[Offset: 0x3b8, Size: 0x8] 0x7830225680
	bool IsProject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1] 0x7830225600
	Vector New Velocity;//[Offset: 0x3c4, Size: 0xc] 0x7830225580
	Vector Location;//[Offset: 0x3d0, Size: 0xc] 0x7830225500
	void UserConstructionScript(Vector2D CallFunc_MakeVector2D_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x6d94ba8 0x7830192c40
	void Scale Timeline Increase__FinishedFunc();// 0x6d94ba8 0x7830192d20
	void Scale Timeline Increase__UpdateFunc();// 0x6d94ba8 0x7830192e00
	void Scale Timeline Reset__FinishedFunc();// 0x6d94ba8 0x7830192ee0
	void Scale Timeline Reset__UpdateFunc();// 0x6d94ba8 0x7830192fc0
	void ReceiveDestroyed();// 0x6d94ba8 0x78301930a0
	void On Launch(bool bCinematic, Vector Velocity);// 0x6d94ba8 0x7830193260
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x7830193340
	void BndEvt__BP_Projectile_Box (Collision)_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x6d94ba8 0x784cccc020
	void On Explode();// 0x6d94ba8 0x78301935e0
	void ExecuteUbergraph_BP_LPSP_Projectile(int EntryPoint, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Vector_Up_ReturnValue, bool CallFunc_NotEqualExactly_VectorVector_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, PrimitiveComponent* K2Node_ComponentBoundEvent_HitComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, Vector K2Node_ComponentBoundEvent_NormalImpulse, const HitResult K2Node_ComponentBoundEvent_Hit, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_K2_GetComponentScale_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_MakeHitResult_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue, bool K2Node_CustomEvent_bCinematic, Vector K2Node_CustomEvent_Velocity, int CallFunc_Add_IntInt_ReturnValue, int ___int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float ___float_Variable, HitResult CallFunc_MakeHitResult_ReturnValue, float ___float_Variable, const Transform CallFunc_GetTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_IsValidClass_ReturnValue, float CallFunc_Get_Radius_Value_Radius, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, bool ___bool_Variable, float K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Transform CallFunc_MakeTransform_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_LPSP_VFX_Distortion_C* CallFunc_FinishSpawningActor_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue);// 0x6d94ba8 0x78301936c0

--------------------------------
Class: BPSC_LPSP_Explosion_C.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x200, Size: 0x8] 0x7836885a80
	Vector2D Radius;//[Offset: 0x208, Size: 0x8] 0x78403ec280
	bool Impulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1] 0x78403ec200
	byte Impulse Method;//[Offset: 0x211, Size: 0x1] 0x78403ec180
	byte Impulse Falloff;//[Offset: 0x212, Size: 0x1] 0x78403ec100
	Vector2D Impulse Force;//[Offset: 0x214, Size: 0x8] 0x78403ec080
	byte[] Impulse Object Types;//[Offset: 0x220, Size: 0x10] 0x783648e840
	bool Use Impulse Prevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1] 0x78403ebf80
	byte ImpulsePreventionChannel;//[Offset: 0x231, Size: 0x1] 0x78403ebf00
	bool Damage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1] 0x78403ebe80
	byte Damage Method;//[Offset: 0x233, Size: 0x1] 0x78403ebe00
	Vector2D Damage Amount;//[Offset: 0x234, Size: 0x8] 0x78403ebd80
	byte[] DamageObjectTypes;//[Offset: 0x240, Size: 0x10] 0x783648e7a0
	bool UseDamagePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1] 0x78403ebc80
	byte DamagePreventionChannel;//[Offset: 0x251, Size: 0x1] 0x78403ebc00
	bool Shake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1] 0x78403ebb80
	class CameraShakeBase[] Shakes;//[Offset: 0x258, Size: 0x10] 0x783648e700
	float Shake Falloff;//[Offset: 0x268, Size: 0x4] 0x78403ebb00
	float Shake Inner Radius;//[Offset: 0x26c, Size: 0x4] 0x78403eba80
	float Shake Outer Radius;//[Offset: 0x270, Size: 0x4] 0x78403eba00
	bool DebugRadialImpulsePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1] 0x78403eb980
	bool bDebugRadialDamagePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1] 0x78403eb900
	float Radius Value;//[Offset: 0x278, Size: 0x4] 0x78403eb880
	float Get Damage(float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue);// 0x6d94ba8 0x782edb7f60
	void Get Radius Value(out float Radius);// 0x6d94ba8 0x782edb8040
	void Try Apply Damage(HitResult Result, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782edb8120
	void Try Apply Impulse(float Multiplier, HitResult Result, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x6d94ba8 0x782edb8200
	void Draw Debug Radius(LinearColor Color, float Duration, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x782edb82e0
	void Start Shake(int Index, Vector CallFunc_K2_GetComponentLocation_ReturnValue, class CameraShakeBase CallFunc_Array_Get_Item, class CameraShakeBase CallFunc_Array_Get_Item, bool CallFunc_IsValidClass_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782edb83c0
	void Apply Radial Damage(Actor* Actor, LPSPDamageable* Damagable, Actor* Current, Actor*[] Ignored Actors, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Controller* CallFunc_GetController_ReturnValue, float CallFunc_Get_Damage_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_ApplyRadialDamage_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x782edb84a0
	void Apply Point Damage(HitResult Result, Actor* Actor, Vector CallFunc_MakeVector_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, float CallFunc_Get_Damage_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_ApplyPointDamage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x782edb8580
	bool Can Hit Actor(Actor* Arg Actor, byte Channel, bool debug, Vector Offset, Actor*[] Ignored, byte ___byte_Variable, byte ___byte_Variable, bool ___bool_Variable, int CallFunc_Array_Add_ReturnValue, byte K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x6d94ba8 0x782edb8660
	float Get Impulse(float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue);// 0x6d94ba8 0x782edb8740
	void Apply Radial Impulse(float Multiplier, float Used Impulse, Character* Character, Actor* Current, Actor*[] Ignored Actors, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Vector_Up_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Character* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int ___int_Array_Index_Variable, float CallFunc_Get_Impulse_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, PrimitiveComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, ActorComponent* CallFunc_Array_Get_Item, PrimitiveComponent* K2Node_DynamicCast_As____, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Can_Hit_Actor_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor*[] CallFunc_SphereOverlapActors_OutActors, bool CallFunc_SphereOverlapActors_ReturnValue, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782edb8900
	void Apply Point Impulse(HitResult Result, FName Hit Bone, Vector Direction, PrimitiveComponent* Component, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, float CallFunc_Get_Impulse_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_IsSimulatingPhysics_ReturnValue, Vector CallFunc_Normal_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x6d94ba8 0x782edb89e0
	void ReceiveBeginPlay();// 0x6d94ba8 0x784cccc3a0
	void ExecuteUbergraph_BPSC_LPSP_Explosion(int EntryPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue);// 0x6d94ba8 0x782edb8d60

--------------------------------
Class: BP_LPSP_VFX_Distortion_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x783436bf80
	StaticMeshComponent* Sphere;//[Offset: 0x228, Size: 0x8] 0x783436bf00
	MaterialInstanceDynamic* sphereMaterial;//[Offset: 0x230, Size: 0x8] 0x783436be80
	float targetRefractionIntensity;//[Offset: 0x238, Size: 0x4] 0x783436be00
	float fadeOutSpeed;//[Offset: 0x23c, Size: 0x4] 0x783436bd80
	float DeltaTime;//[Offset: 0x240, Size: 0x4] 0x783436bd00
	float refractionIntensity;//[Offset: 0x244, Size: 0x4] 0x783436bc80
	bool reachedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1] 0x783436bc00
	Vector inititalSphereScale;//[Offset: 0x24c, Size: 0xc] 0x783436bb80
	Vector targetSphereScale;//[Offset: 0x258, Size: 0xc] 0x783436bb00
	Vector sphereScale;//[Offset: 0x264, Size: 0xc] 0x783436ba80
	float sizeIncreaseSpeed;//[Offset: 0x270, Size: 0x4] 0x783436ba00
	float initialRefractionIntensity;//[Offset: 0x274, Size: 0x4] 0x783436b980
	void ReceiveBeginPlay();// 0x6d94ba8 0x78307a0a20
	void ReceiveTick(float DeltaSeconds);// 0x6d94ba8 0x787d036360
	void ExecuteUbergraph_BP_LPSP_VFX_Distortion(int EntryPoint, float CallFunc_FInterpTo_ReturnValue, Vector CallFunc_VInterpTo_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, float K2Node_Event_DeltaSeconds);// 0x6d94ba8 0x7830b89fc0

--------------------------------
Class: SAbilities
	SGameAbility AbilityKnife_35_3BC5A52642AB983F491DB1945E765EAB;//[Offset: 0x0, Size: 0x80] 0x783063ed00
	SGameAbility AbilityGrenade_36_179099B64FF6E58CDAC0249D2236BF7D;//[Offset: 0x80, Size: 0x80] 0x783063ec80
	SGameAbility AbilityReload_37_4F91E82B482779703406C1AB284CAF76;//[Offset: 0x100, Size: 0x80] 0x783063ec00
	SGameAbility AbilityInspect_38_5635F91B422E15F713A0A584D219745B;//[Offset: 0x180, Size: 0x80] 0x783063eb80
	SGameAbility AbilityFire_39_D971BE264C25C41EC76CF6B35A577D53;//[Offset: 0x200, Size: 0x80] 0x783063eb00
	SGameAbility AbilityFireEmpty_40_73705B9F4823CF0D8EF848859AAB3C26;//[Offset: 0x280, Size: 0x80] 0x783063ea80
	SGameAbility AbilityBolt_41_F9041BCE46F2FA1A53E5819D94DDDD10;//[Offset: 0x300, Size: 0x80] 0x783063ea00
	SGameAbility AbilityRun_42_603ED3D34CCD424BB871CD9379F5B76E;//[Offset: 0x380, Size: 0x80] 0x783063e980
	SGameAbility AbilityHolster_43_2B7825B54C963A5CC55D109C883BE017;//[Offset: 0x400, Size: 0x80] 0x783063e900
	SGameAbility AbilityAim_44_6425B98940D77A0E45ED32B81C828116;//[Offset: 0x480, Size: 0x80] 0x783063e880
	SGameAbility AbilityLowerWeapon_45_E7E9AA6B4375DF638908F0B5DF7534BF;//[Offset: 0x500, Size: 0x80] 0x783063e800
	SGameAbility AbilityLean_46_969F7DDA4192420A234BCBB58C1F4491;//[Offset: 0x580, Size: 0x80] 0x783063e780
	SGameAbility AbilityRandomizeWeaponPreset_47_421B818044727FAD097C659F6DD68153;//[Offset: 0x600, Size: 0x80] 0x783063ff80

--------------------------------
Class: SGameAbility
	GameplayTagContainer TagsRequired_2_315449AD42880F26E20FC3AF2800CB8B;//[Offset: 0x0, Size: 0x20] 0x7830636880
	GameplayTagContainer TagsBlocked_4_CECC80074262BF2843FB7F8B19F2A30C;//[Offset: 0x20, Size: 0x20] 0x7830636800
	GameplayTagContainer TagsAdded_6_06DBA3F44B75554B2CAF339673D93D8C;//[Offset: 0x40, Size: 0x20] 0x7830636780
	GameplayTagContainer TagsRemoved_8_F902F404486374A897AB3ABC29545E3E;//[Offset: 0x60, Size: 0x20] 0x7830636700

--------------------------------
Class: SScope
	bool RenderTargetRequired_29_040A8CAB491C0F546EC59E84973CD607;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7830639c80
	float RenderTargetFieldOfView_33_9169EF27444B0CCE7951B68DA11D57AB;//[Offset: 0x4, Size: 0x4] 0x7830639c00
	TextureRenderTarget2D* RenderTargetTexture_30_AAFC94E74A329091885594BC17D0E104;//[Offset: 0x8, Size: 0x8] 0x7830639b80
	FName RenderMaterialSlotName_41_896AE48C4988A6D1994BF2877E9BA620;//[Offset: 0x10, Size: 0x8] 0x7830639b00
	MaterialInstance* RenderMaterialReplacement_39_DF9D280B44767A72E274A3ACBC668E24;//[Offset: 0x18, Size: 0x8] 0x7830639a80
	Transform OffsetAiming_17_AB7EE96C4767FCBE66F1AF889C69C020;//[Offset: 0x20, Size: 0x30] 0x7830639a00
	SLagValues MultiplierLagValues_14_B2EAE9434DB25FD4D511A885C33F3CD4;//[Offset: 0x50, Size: 0x6c] 0x7830639980
	float MultiplierFieldOfView_9_4B570A9A411255D9838F80A9330F2447;//[Offset: 0xbc, Size: 0x4] 0x7830639900
	float MultiplierAimingSpeed_20_DE3112A44F76472D49E24FA34D02AB16;//[Offset: 0xc0, Size: 0x4] 0x7830639880
	float MultiplierSensitivityYaw_8_5418CBC34E66FA130E7604BE4CC96216;//[Offset: 0xc4, Size: 0x4] 0x7830639800
	float MultiplierSensitivityPitch_7_E5DC2385409974BCA53A7FBC7908EE79;//[Offset: 0xc8, Size: 0x4] 0x7830639780
	MaterialInstance* RenderMaterial_44_F80C68EE401A521203C5EE920E5E4ED0;//[Offset: 0xd0, Size: 0x8] 0x7830639700

--------------------------------
Class: SLagValues
	SDirectionTransform Movement_8_EA63B8E04E230081FD89F2B885575C52;//[Offset: 0x0, Size: 0x30] 0x7830637500
	SDirectionTransform Look_10_39DA99674879AB1EA3FFE4A012AFC599;//[Offset: 0x30, Size: 0x30] 0x7830637480
	SSpringInterpVector SpringInterpolation_13_6BB969B146C62F13AF517FBB6EAFBB75;//[Offset: 0x60, Size: 0xc] 0x7830637400

--------------------------------
Class: SDirectionTransform
	SDirectionVectors Location_2_8DDD3B0C4654CE04625D919367198EC9;//[Offset: 0x0, Size: 0x18] 0x7830638080
	SDirectionVectors Rotation_4_CC896B814169BAAF9AACA5ADCB795739;//[Offset: 0x18, Size: 0x18] 0x7830638000

--------------------------------
Class: SDirectionVectors
	Vector Horizontal_2_BE0DA96545C2AD25012571ABFA8E2083;//[Offset: 0x0, Size: 0xc] 0x7830638180
	Vector Vertical_4_CA2891A94611F6B1A2B6C68F3DF08CCC;//[Offset: 0xc, Size: 0xc] 0x7830638100

--------------------------------
Class: SLaser
	bool OffWhileAiming_26_A25C5F584A2E0B8702F75F9776D6181D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x783063c700
	bool OffWhileRunning_24_61EFCBD84DC167B43AA9F7850B7EC40E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x783063c680
	bool OffWhileLowered_64_62CEC356437BFB5CB5205ABBEA898C7F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x783063e700
	Vector RelativeLocation_54_7AB7E1F64DEB139A5AC1A09F080F9D2F;//[Offset: 0x4, Size: 0xc] 0x783063e680
	SoundCue* ToggleSoundCue_29_1150C9384ECFB7BB8E12C99B4ADD7156;//[Offset: 0x10, Size: 0x8] 0x783063e600
	bool Flashlight_21_10950BA44C632AB227A943BDF3E38B5A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x783063e580
	bool Lasersight_20_FFDA2F25431C809C52A2E3BE2EE9C7EB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x783063e500

--------------------------------
Class: SMovement
	SSpeeds Speeds_45_20D4C69D4F5481E7C553EF842A0CA1A5;//[Offset: 0x0, Size: 0x28] 0x783063cd00
	float AirControl_26_8FF589B14C90880B94A67CA201D9110D;//[Offset: 0x28, Size: 0x4] 0x783063cc80
	float JumpForce_46_2334205143B339CF59133993CC8AF1DA;//[Offset: 0x2c, Size: 0x4] 0x783063cc00
	float JumpMaxHoldTIme_28_BBB1144047441DFDFBFCCDB436C924A1;//[Offset: 0x30, Size: 0x4] 0x783063cb80
	float SpeedMultiplierFiringRevertAddedDelay_35_0F19F6A3427B823B4E2258AFA0424291;//[Offset: 0x34, Size: 0x4] 0x783063cb00

--------------------------------
Class: SSpeeds
	SSpeed SpeedWalk_2_A5D659C942189A8152AC65838030D5F5;//[Offset: 0x0, Size: 0x8] 0x7830638e80
	SSpeed SpeedAim_4_253FEA2043D8D2D564C0E2B7AEC5C276;//[Offset: 0x8, Size: 0x8] 0x7830638e00
	SSpeed SpeedRun_6_E2A016CF4D2721DBAA4DAAAE6424EB7C;//[Offset: 0x10, Size: 0x8] 0x7830638d80
	SSpeed SpeedCrouch_8_E5FCE6B34003C151FAEBE791C16FBF0F;//[Offset: 0x18, Size: 0x8] 0x7830638d00
	SSpeed SpeedMultiplierShooting_11_11FB19504825131D1221B894110DB564;//[Offset: 0x20, Size: 0x8] 0x7830638c80

--------------------------------
Class: SSpeed
	float MaxSpeed_2_D4F3B9E84ECCEED3CAA2AD8A8E366D2B;//[Offset: 0x0, Size: 0x4] 0x7830638f80
	float FootstepDistance_4_486A5A8B4F0BF456AB0A8498CB686B21;//[Offset: 0x4, Size: 0x4] 0x7830638f00

--------------------------------
Class: SFreeLook
	bool Enabled_1_18CEC34A45C2F617F2600282875FBE4D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78360f9b80
	bool DisableWeaponLagLooking_19_1A64F575444405D700054497D218A268;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x78360f9b00
	float CameraInterpolationSpeed_13_170FC9374ECF1B565FFC72B8FDA72A37;//[Offset: 0x4, Size: 0x4] 0x78360f9a80
	SClamps CameraClamps_18_EDE634FC4505DEBD8F4A55A20346C9B2;//[Offset: 0x8, Size: 0x10] 0x78360f9a00
	SCurveFloat CameraResetTimeline_28_2584D6144BCCEDEF7BCC6BB9B68568E3;//[Offset: 0x18, Size: 0x10] 0x78360f9980

--------------------------------
Class: SCurveFloat
	FName FloatTrackName_5_43A4613F406623D85A458389C44E3F2B;//[Offset: 0x0, Size: 0x8] 0x78360f9f80
	CurveFloat* FloatCurve_6_0AA2527042FA4C13B9221C8130283AB8;//[Offset: 0x8, Size: 0x8] 0x78360f9f00

--------------------------------
Class: SBreathing
	float PlayRate_12_C574E0B84B9B2187443A7B885D729174;//[Offset: 0x0, Size: 0x4] 0x78360f9600
	SBreathingState CurveStanding_8_38922B924CF1902F32362486BBF08D3A;//[Offset: 0x8, Size: 0x20] 0x78360f9580
	SBreathingState CurveAiming_9_0D6107CA428CCB718E763286C0763B53;//[Offset: 0x28, Size: 0x20] 0x78360f9500

--------------------------------
Class: SBreathingState
	Vector AmplitudeMultiplier_9_99639C0845606FA8FD9A11A495C19046;//[Offset: 0x0, Size: 0xc] 0x78360f9700
	SCurveVector Curve_2_25C55CD84958F96B749263B786D6CF9F;//[Offset: 0x10, Size: 0x10] 0x78360f9680

--------------------------------
Class: SCurveVector
	FName VectorTrackName_13_43A4613F406623D85A458389C44E3F2B;//[Offset: 0x0, Size: 0x8] 0x78360f9e80
	CurveVector* VectorCurve_12_0AA2527042FA4C13B9221C8130283AB8;//[Offset: 0x8, Size: 0x8] 0x78360f9e00

--------------------------------
Class: SWeaponAllSettings
	bool IsHiddenMagazine_5_199E18D440F8F862B6E945BB6020D262;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x783063fe80
	DataTableRowHandle AttachmentHandleIronSights_6_314114B8452164CC4F9A6AB947D7F85D;//[Offset: 0x8, Size: 0x10] 0x783063fe00
	DataTableRowHandle AttachmentHandleMagazine_8_F0F9E38E4BF6F162BA0C4190326EA759;//[Offset: 0x18, Size: 0x10] 0x783063fd80
	bool IsSlideRacked_11_67E3C23C457BE92D64862EA580F58D23;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x783063fd00
	DataTableRowHandle AttachmentHandleMuzzleMesh_17_238687E144C640BBD2492589AC606A9D;//[Offset: 0x30, Size: 0x10] 0x783063fc80
	DataTableRowHandle AttachmentHandleMuzzleSettings_18_9489376C4931AA9AD0C708B03E2F5EB6;//[Offset: 0x40, Size: 0x10] 0x783063fc00
	DataTableRowHandle AttachmentHandleLaserMesh_20_5436FBFD49108A866A98989884618092;//[Offset: 0x50, Size: 0x10] 0x783063fb80
	DataTableRowHandle AttachmentHandleLaserSettings_22_B4A939434D7437F1A6D03DAFBC5A8EFD;//[Offset: 0x60, Size: 0x10] 0x783063fb00
	DataTableRowHandle AttachmentHandleGripMesh_24_27D310EE4DB6004621C11FBDCD331992;//[Offset: 0x70, Size: 0x10] 0x783063fa80
	DataTableRowHandle AttachmentHandleGripSettings_26_0CA2968D4EEF8052ECB3D8B33A73EAD3;//[Offset: 0x80, Size: 0x10] 0x783063fa00
	DataTableRowHandle AttachmentHandleScopeMesh_28_D097AB72497A6DCAA4DE57BE5FF2D9F7;//[Offset: 0x90, Size: 0x10] 0x783063f980
	DataTableRowHandle AttachmentHandleScopeSettings_30_62672C134BCD932B9AD1FAA66D10C45D;//[Offset: 0xa0, Size: 0x10] 0x783063f900
	int Ammunition_33_E25521D4487E99BCDEDEA69838429438;//[Offset: 0xb0, Size: 0x4] 0x783063f880
	SSkin Skin_43_6BAF7FD740CD66DF4E1315866B5F87EB;//[Offset: 0xb8, Size: 0x250] 0x783063f800
	byte BoltState_39_827125A44AAB569FC8E60889A87CE2FF;//[Offset: 0x308, Size: 0x1] 0x7840561080
	bool LaserOn_42_2DE19AEC49D1A82F901107BECA2EDF3F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1] 0x7840561000

--------------------------------
Class: UI_Fade_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78360f9900
	WidgetAnimation* NewAnimation;//[Offset: 0x268, Size: 0x8] 0x78360f9880
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x78360f9800
	void Construct();// 0x6d94ba8 0x7831b7b920
	void WidgetAnimationEvt_NewAnimation_K2Node_WidgetAnimationEvent();// 0x6d94ba8 0x7831b7bae0
	void ExecuteUbergraph_UI_Fade(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue);// 0x6d94ba8 0x7831b7bca0

--------------------------------
Class: SSound
	float Delay_5_23E40419486FCF19BC3AEDA43FD1A00F;//[Offset: 0x0, Size: 0x4] 0x7840560700
	SoundCue* SoundCue_2_A06CB75E452C4E4F708A73BE699467F3;//[Offset: 0x8, Size: 0x8] 0x7840560680

--------------------------------
Class: BP_LPSP_WEP_Body_C.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: SPreset
	DataTableRowHandle RowHandleSkin_24_8AF2ABDD41F0C1309130A7A2C16B228C;//[Offset: 0x0, Size: 0x10] 0x783063dd00
	SAttachmentMeshes Attachments_26_FFA5A09E40A736E60CB2058B6772CA29;//[Offset: 0x10, Size: 0x40] 0x783063dc80

--------------------------------
Class: SAttachmentMeshes
	DataTableRowHandle RowHandleMeshScope_22_328AEE5B4F7F91F764D6DE9D09408870;//[Offset: 0x0, Size: 0x10] 0x783063df00
	DataTableRowHandle RowHandleMeshLaser_23_E007542E43B1C8659FBB7CB590874366;//[Offset: 0x10, Size: 0x10] 0x783063de80
	DataTableRowHandle RowHandleMeshMuzzle_21_B76E35EF46BC89FAA41D89B09C5D975A;//[Offset: 0x20, Size: 0x10] 0x783063de00
	DataTableRowHandle RowHandleMeshGrip_24_E3A440B14313CF9B76FD19942786856C;//[Offset: 0x30, Size: 0x10] 0x783063dd80

--------------------------------
Class: SInformation
	FText WeaponName_73_93DAC9E048572D435C3AF983CAC5BE13;//[Offset: 0x0, Size: 0x18] 0x783063f100
	class UserWidget* WidgetClassCrosshair_54_45841B454799D78B08F1C4A3FD2B8F97;//[Offset: 0x18, Size: 0x8] 0x783648a600
	SAttachmentSettings SettingsAttachments_67_29DF714B4CBFEE41A5D28090DD7C8DF1;//[Offset: 0x20, Size: 0x20] 0x783063f080
	SAnimBlueprintSettings SettingsAnimationBlueprint_70_488C73F04D8E57ABA017148E5E6E43A6;//[Offset: 0x40, Size: 0x28] 0x783063f000
	DataTableRowHandle RowHandleSettingsWeapon_50_CF318B9741DC50FC8A7AF99B20397EF3;//[Offset: 0x68, Size: 0x10] 0x783063ef80
	DataTableRowHandle RowHandleSettingsCharacterAbilities_51_C9D1DCA148626B6181BC2BAE043E93A6;//[Offset: 0x78, Size: 0x10] 0x783063ef00
	DataTableRowHandle RowHandleSettingsCharacterMovement_53_0B4D1A2A4F1990802659F19C456758A3;//[Offset: 0x88, Size: 0x10] 0x783063ee80
	DataTable* DataTableIcons_38_D87103974B0FEB9CD521CC9F82F23641;//[Offset: 0x98, Size: 0x8] 0x783063ee00
	DataTable* DataTableSoundCues_36_0524EC4C41EC4DE1FC64EE8C896CB97D;//[Offset: 0xa0, Size: 0x8] 0x783063ed80

--------------------------------
Class: SAttachmentSettings
	DataTable* DataTableSettingsScope_9_C9BB0468415F89979F3AE1B26A90DC96;//[Offset: 0x0, Size: 0x8] 0x783063e100
	DataTable* DataTableSettingsLaser_10_C588AE4C45BC513E7DB17EB5CE711B4F;//[Offset: 0x8, Size: 0x8] 0x783063e080
	DataTable* DataTableSettingsMuzzle_11_1443C9F14E0B8318B88A74B6F20598E5;//[Offset: 0x10, Size: 0x8] 0x783063e000
	DataTable* DataTableSettingsGrip_12_5321571345181DA7A816DDABE411C090;//[Offset: 0x18, Size: 0x8] 0x783063df80

--------------------------------
Class: SAnimBlueprintSettings
	DataTableRowHandle RowHandleSettingsAnimation_9_50F398FE42A7DD152A90A7AF56841542;//[Offset: 0x0, Size: 0x10] 0x783063dc00
	DataTable* DataTablePosesCharacter_2_B1A4A36B465873A6AB02E2A67FFCAFF9;//[Offset: 0x10, Size: 0x8] 0x783063db80
	DataTable* DataTableMontagesCharacter_4_5A02E0F94C7D1054FA58DDBB80AD417A;//[Offset: 0x18, Size: 0x8] 0x783063db00
	DataTable* DataTableMontagesWeapon_6_C2B73E6347B035947328ACA53E62B229;//[Offset: 0x20, Size: 0x8] 0x783063da80

--------------------------------
Class: SGrip
	bool Placeholder_2_C9DB0CC64D9E430852ECF7A720160981;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x783063e480

--------------------------------
Class: SMagazine
	StaticMesh* Mesh_23_E3ECA4BA4931B1849B8670849EF85707;//[Offset: 0x0, Size: 0x8] 0x7840560e00
	STexture Texture_37_6D4907D44C73BED810B18096332A2F88;//[Offset: 0x8, Size: 0x8] 0x7840560d80
	byte AmmunitionType_40_2F93C459402E28243CF183814B43A0F6;//[Offset: 0x10, Size: 0x1] 0x7840560d00
	int AmmunitionTotal_6_6020B813487D9AFEB4989B9706110A7A;//[Offset: 0x14, Size: 0x4] 0x7840560c80
	class BP_LPSP_Casing_C* CasingType_3_65BD26D64AF01769F4E794B52E680A32;//[Offset: 0x18, Size: 0x8] 0x783648a4c0
	Vector2D CasingImpulseRange_9_193F5BF24E1C52DFEEA295B6D2F6D868;//[Offset: 0x20, Size: 0x8] 0x7840560c00
	float CasingOffset_12_E4156D974D3CD758C07CAD928DAA46E8;//[Offset: 0x28, Size: 0x4] 0x7840560b80
	class BP_LPSP_Projectile_C* ProjectileType_15_34BF558E46246C46E937EC93A3A2637C;//[Offset: 0x30, Size: 0x8] 0x783648a420
	Vector2D ProjectileVelocityRange_18_645B7C81412553F1EB55FBB0A89F44E0;//[Offset: 0x38, Size: 0x8] 0x7840560b00
	Vector2D ProjectilePelletRange_20_E543BDF74D87C4AFB0464FBBE7C5A7B7;//[Offset: 0x40, Size: 0x8] 0x7840560a80
	bool AmmunitionVisualUpdate_31_6BBD58C846D006ACE376BCB24ADDEF8F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7840560a00
	int AmmunitionVisualStartingIndex_33_3530095949ECB3D8B104688FF24E73AC;//[Offset: 0x4c, Size: 0x4] 0x7840560980
	MaterialInstance* AmmunitionVisualHiddenMaterial_36_0DAA2EFD470C7291C2273A907E7313BE;//[Offset: 0x50, Size: 0x8] 0x7840560900

--------------------------------
Class: STexture
	Texture2D* Texture_4_DA61780D4090C4B1626CC1818362111C;//[Offset: 0x0, Size: 0x8] 0x7840560f00

--------------------------------
Class: SMuzzle
	ParticleSystem* FireParticles_22_E5DC2385409974BCA53A7FBC7908EE79;//[Offset: 0x0, Size: 0x8] 0x783063d100
	SoundCue* FireSoundCue_14_994C05DD468B2A1C6C7A80899A816C67;//[Offset: 0x8, Size: 0x8] 0x783063d080
	bool OverheatEnabled_19_5418CBC34E66FA130E7604BE4CC96216;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x783063d000
	int OverheatShots_18_70A397F347E7B961A673D28A4481ED45;//[Offset: 0x14, Size: 0x4] 0x783063cf80
	ParticleSystem* OverheatParticles_23_2F9E2C4C455EFFF26C216CB00C118A9A;//[Offset: 0x18, Size: 0x8] 0x783063cf00
	bool FlashLight_26_D6D276CF4FAC0FF5623C848AC0CB50C5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1] 0x783063ce80
	float FlashLightDuration_30_88D6AE5747E2C0D7C02ACF90A4CAB45A;//[Offset: 0x24, Size: 0x4] 0x783063ce00
	Vector FlashLightRelativeLocation_33_0E52BAE24723BEA6F84EDB85560273D1;//[Offset: 0x28, Size: 0xc] 0x783063cd80

--------------------------------
Class: SAnimationSettings
	float BlendTimeRunIn_31_4C58AF7A47F308533EE1958D217738F8;//[Offset: 0x0, Size: 0x4] 0x783063da00
	float BlendTimeRunOut_33_C01F5EEE4635D33F72B77D9BD2E82AF9;//[Offset: 0x4, Size: 0x4] 0x783063d980
	float PlayRateBreathing_38_594F6B314CEC38E4A22EF9B1EAF57757;//[Offset: 0x8, Size: 0x4] 0x783063d900
	float PlayRateWalking_40_3DE7E5744BE6A923DB961488DE473987;//[Offset: 0xc, Size: 0x4] 0x783063d880
	float PlayRateRunning_42_0EB9A9744852CFDFDF579FBBDE77A32E;//[Offset: 0x10, Size: 0x4] 0x783063d800
	float PlayRateTurning_44_FFC6CEBB40D1958398293DAADF29DEBE;//[Offset: 0x14, Size: 0x4] 0x783063d780
	float LagMovementInterpSpeed_55_30F9698548083CBFEE81F88E5CB7B9EA;//[Offset: 0x18, Size: 0x4] 0x783063d700
	Vector LookOffsetMultiplierLocation_18_6F9944B14153127A9B1627848658848B;//[Offset: 0x1c, Size: 0xc] 0x783063f780
	Vector LookOffsetMultiplierRotation_20_ED6F0438419F633B4C0B4487358FB7CE;//[Offset: 0x28, Size: 0xc] 0x783063f700
	Transform StandingOffset_12_72FFB3A74EC6B91A630963ADB084300F;//[Offset: 0x40, Size: 0x30] 0x783063f680
	SLagValues StandingLag_11_424D933E4C4449282FC6B89BCF959AD3;//[Offset: 0x70, Size: 0x6c] 0x783063f600
	Transform AimingOffset_15_18942C08467B5C961DCFDFBF4F34136F;//[Offset: 0xe0, Size: 0x30] 0x783063f580
	SLagValues AimingLag_14_A31EE80D42DEA9840E75E6BC137914B8;//[Offset: 0x110, Size: 0x6c] 0x783063f500
	Transform RunningOffset_21_3F38BA0D46BE829E296EE8966C5CF4DD;//[Offset: 0x180, Size: 0x30] 0x783063f480
	Transform CrouchingOffset_23_22497E024202CA9B8E172185A0F1437C;//[Offset: 0x1b0, Size: 0x30] 0x783063f400
	Transform MontageOffset_26_11930965418DE5A5A297F1A31F62B78C;//[Offset: 0x1e0, Size: 0x30] 0x783063f380
	SLowered LoweredSettings_69_8D9A050B49FAFA4C71EEBAAA1E2E6CB2;//[Offset: 0x210, Size: 0x50] 0x783063f300
	DataTable* DataTableSequences_58_796117C643A544469A911C86ADD4FC6C;//[Offset: 0x260, Size: 0x8] 0x783063f280
	DataTable* DataTableBlendspaces_60_85535CE249BCA58EB4471E9712A43712;//[Offset: 0x268, Size: 0x8] 0x783063f200
	SLean Leaning_75_48D7FCF7417F987D38B14A856693F1BC;//[Offset: 0x270, Size: 0x10] 0x783063f180

--------------------------------
Class: SLowered
	SBlend SettingsBlend_24_37F7327A4C4CE08C2166F8AE4181BC6A;//[Offset: 0x0, Size: 0xc] 0x7830636480
	Transform AdditionalOffset_17_75191DBB44F0012B16270C900ACFAADD;//[Offset: 0x10, Size: 0x30] 0x7830636400
	bool RemoveStandingOffset_20_23C25AE8492EC9A316CD6EB4C7A438E5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7830636380
	bool RunningAnimationUsed_13_79BB2C474C4264E03449829D0F2B43F8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1] 0x7830638400
	float RunningAnimationExplicitTime_16_C1621BD74DEC60ECAAF7FFB0A4ECDD74;//[Offset: 0x44, Size: 0x4] 0x7830638380
	bool RunningAnimationOffsetUsed_14_F188ED6544F5133C4789E3908CC9B1B4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1] 0x7830638300

--------------------------------
Class: SBlend
	float BlendIn_2_D657DE2F4BA41AFB408D67A1512A42C4;//[Offset: 0x0, Size: 0x4] 0x7830636600
	float BlendOut_4_72865A424505AE9C3C8221BEEF80FC90;//[Offset: 0x4, Size: 0x4] 0x7830636580
	float TimedValue_6_BD4D9BBD465D544DEED4219D476ACECF;//[Offset: 0x8, Size: 0x4] 0x7830636500

--------------------------------
Class: SLean
	CurveVector* CurveLocation_2_E43172C548B7950B0ED7F2BEDCDE25D7;//[Offset: 0x0, Size: 0x8] 0x7830638280
	CurveVector* CurveRotation_4_FC61B8BC47D083B29E671B8DEF3FF8D0;//[Offset: 0x8, Size: 0x8] 0x7830638200

--------------------------------
Class: SIronsights
	StaticMesh* Mesh_5_3844DF2F4B01E48AF983C8B1CBE77F8B;//[Offset: 0x0, Size: 0x8] 0x7840560880
	STexture Icon_10_070D317E493D148B7A7438AAF33A0F5C;//[Offset: 0x8, Size: 0x8] 0x7840560800
	DataTableRowHandle RowHandleSettingsScope_7_7F6B8A8642BC0AAA8B38F6B6F853623A;//[Offset: 0x10, Size: 0x10] 0x7840560780

--------------------------------
Class: SLasersight
	float LasersightBeamThickness_36_317E29214B0BA5A50E378AB671196169;//[Offset: 0x0, Size: 0x4] 0x783063ca80
	LinearColor LasersightBeamColor_50_947611A44C469E48226A84AA6300FC43;//[Offset: 0x4, Size: 0x10] 0x783063ca00
	MaterialInstance* LasersightBeamMaterial_38_EF18F9ED416633652F1D6FA37FF0D6DE;//[Offset: 0x18, Size: 0x8] 0x783063c980
	float LasersightDotSizeBase_43_3E1E98D14B7AEE393450C985A1507D6D;//[Offset: 0x20, Size: 0x4] 0x783063c900
	float LasersightDotSizeMultiplier_41_862D02E444EE15B6BF6C23A07350FB52;//[Offset: 0x24, Size: 0x4] 0x783063c880
	LinearColor LasersightDotColor_51_AD4FF7F34A7FCA9A46C48BB21FE8DEB6;//[Offset: 0x28, Size: 0x10] 0x783063c800
	MaterialInstance* LasersightDotMaterial_37_72C99B924AE1520F5050E1BFC15CB439;//[Offset: 0x38, Size: 0x8] 0x783063c780

--------------------------------
Class: SFlashlight
	float Intensity_3_0D4E71C044039AD0ABE41F9D5EBD8063;//[Offset: 0x0, Size: 0x4] 0x783063e400
	float AttenuationRadius_5_86B1BD5B431EC6921964A08DFD60CB25;//[Offset: 0x4, Size: 0x4] 0x783063e380
	float InnerConeAngle_8_0909B10C4878D1DA7FE6F5BC95DD26E6;//[Offset: 0x8, Size: 0x4] 0x783063e300
	float OuterConeAngle_9_01FBAE1C4CC69C3B2BCEA9A1F835B3D9;//[Offset: 0xc, Size: 0x4] 0x783063e280
	LinearColor Color_15_FA56EF2D4156EFC2F4D78B83C4E10FD0;//[Offset: 0x10, Size: 0x10] 0x783063e200
	MaterialInstance* LightFunctionMaterial_12_9F11E5F841BBFB953ACA89828464BABD;//[Offset: 0x20, Size: 0x8] 0x783063e180

--------------------------------
Class: BPSG_LPSP_Loadout_C.SaveGame.Object
	FName Name Scope;//[Offset: 0x28, Size: 0x8] 0x78404c7980
	FName Name Muzzle;//[Offset: 0x30, Size: 0x8] 0x78404c7900
	FName Name Laser;//[Offset: 0x38, Size: 0x8] 0x78404c7880
	FName Name Grip;//[Offset: 0x40, Size: 0x8] 0x78404c7800

--------------------------------
Class: SMesh
	StaticMesh* Mesh_2_15A49F24430DF020C556F891225DFC6F;//[Offset: 0x0, Size: 0x8] 0x7840560580

--------------------------------
Class: BP_SetLeftFire_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_GameSet_C.WorldObject.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 0x8] 0x7833f26f00
	byte Type;//[Offset: 0x30, Size: 0x1] 0x7833f26e80
	Vector2D Loaction;//[Offset: 0x34, Size: 0x8] 0x7833f26e00
	float Scale;//[Offset: 0x3c, Size: 0x4] 0x7833f26d80
	bool Change;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1] 0x7833f26d00
	float Op;//[Offset: 0x44, Size: 0x4] 0x7833f26c80
	void Get(out byte Type, out Vector2D Loaction, out float Scale, out bool Change, out float Op);// 0x6d94ba8 0x78342704e0
	void Set(byte Type, Vector2D Loaction, float Scale, bool Change, float Op);// 0x6d94ba8 0x78342705c0
	void ExecuteUbergraph_BP_GameSet(int EntryPoint, byte K2Node_CustomEvent_Type, Vector2D K2Node_CustomEvent_Loaction, float K2Node_CustomEvent_Scale, bool K2Node_CustomEvent_Change, float K2Node_CustomEvent_OP);// 0x6d94ba8 0x78342706a0

--------------------------------
Class: BP_SetRightFire_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetJump_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetReload_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetAim_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetCrouch_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetMelee_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetShow_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: BP_SetGrenade_C.BP_GameSet_C.WorldObject.Object

--------------------------------
Class: SaveGameStructure
	float MasterVolume_12_7CCC9C434AC47DC516360A8336DA7E14;//[Offset: 0x0, Size: 0x4] 0x7830ace600
	float MusicVolume_17_6E7461164AC3601F0524BD873654626E;//[Offset: 0x4, Size: 0x4] 0x7830ace580
	float CharactersVolume_23_C06AB5A24F3F27A181323ABCD7887113;//[Offset: 0x8, Size: 0x4] 0x7830ace500
	float AmbientVolume_24_F9EAD18848C8B5281356C49E7CCD50CC;//[Offset: 0xc, Size: 0x4] 0x7830ace480
	float WeaponVolume_22_8152372444C4796C5C8C7D88A017809D;//[Offset: 0x10, Size: 0x4] 0x7830ace400
	float MouseSensitivity_31_6BD1C14043F8D648E7340488079762A6;//[Offset: 0x14, Size: 0x4] 0x7830ace380
	float ZoomSensitivity_34_9EF6AB80425D0CFFFC6369B59C9D1902;//[Offset: 0x18, Size: 0x4] 0x7830ace300
	bool bShowFps_11_3B4BEAE848A1BADD54AEBBB38153BDD2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1] 0x7830ace280
	bool bVerticalAxisInverted_27_1BE5A19D4482DE49153A3FBF026005E4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1] 0x7830ace200
	bool bHorizontalAxisInverted_28_98EA246A473FF2295B5058A258123405;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1] 0x7830ace180
	float AimVolume_38_E81B4C294AB2DC4FDC6A278B7D6A925B;//[Offset: 0x20, Size: 0x4] 0x7830ace100
	float 2AimVolume_46_ED47125244140D565D2287BC2E854483;//[Offset: 0x24, Size: 0x4] 0x7830ace080
	float 4AimVolume_40_820628604CFCBBC170CE2BA5FA67CE39;//[Offset: 0x28, Size: 0x4] 0x7830ace000
	float 8AimVolume_43_86A446FE4E568BF58542C08EBBB38A91;//[Offset: 0x2c, Size: 0x4] 0x7830acdf80

--------------------------------
Class: WB_KeyRemap_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830acd000
	InputKeySelector* InputKey;//[Offset: 0x268, Size: 0x8] 0x7830accf80
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x7830accf00
	FText InputName;//[Offset: 0x278, Size: 0x18] 0x7830acce80
	int Position;//[Offset: 0x290, Size: 0x4] 0x7830acce00
	FText GetInputMapName();// 0x6d94ba8 0x78342737a0
	void BndEvt__InputKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x6d94ba8 0x7834273880
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7834270080
	void ExecuteUbergraph_WB_KeyRemap(int EntryPoint, InputChord K2Node_ComponentBoundEvent_SelectedKey, InputSettings* CallFunc_GetInputSettings_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, InputActionKeyMapping K2Node_MakeStruct_InputActionKeyMapping, InputActionKeyMapping[] CallFunc_GetActionMappingByName_OutMappings, InputSettings* CallFunc_GetInputSettings_ReturnValue, InputActionKeyMapping[] CallFunc_GetActionMappingByName_OutMappings, bool K2Node_Event_IsDesignTime, InputChord K2Node_MakeStruct_InputChord);// 0x6d94ba8 0x7834270240

--------------------------------
Class: WB_CusUI_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7833f26c00
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x7833f26b80
	CanvasPanel* CanvasPanel;//[Offset: 0x270, Size: 0x8] 0x7833f26b00
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7833f26a80
	Slider* Slider;//[Offset: 0x280, Size: 0x8] 0x7833f26a00
	Slider* Slider;//[Offset: 0x288, Size: 0x8] 0x7833f26980
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x290, Size: 0x8] 0x7833f26900
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x298, Size: 0x8] 0x7833f26880
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2a0, Size: 0x8] 0x7833f26800
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2a8, Size: 0x8] 0x7833f26780
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2b0, Size: 0x8] 0x7833f26700
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2b8, Size: 0x8] 0x7833f26680
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2c0, Size: 0x8] 0x7833f26600
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2c8, Size: 0x8] 0x7833f26580
	WB_CusUIItem_C* WB_CusUIItem;//[Offset: 0x2d0, Size: 0x8] 0x7833f26500
	WB_CusUIItem_C* CurItem;//[Offset: 0x2d8, Size: 0x8] 0x7833f26480
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2e0, Size: 0x8] 0x7833f26400
	FPS_SaveGame_C* Save Game;//[Offset: 0x2e8, Size: 0x8] 0x7833f26380
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation, DragWidget_C* K2Node_DynamicCast_AsDrag_Widget, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, WB_CusUIItem_C* K2Node_DynamicCast_AsWB_Cus_UIItem, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_GetDesiredSize_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x6d94ba8 0x7834272e00
	void BndEvt__WB_CusUI_Slider_48_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x7834272ee0
	void 自定义事件                                                                                     (WB_CusUIItem_C* UI);// 0x6d94ba8 0x7834272fc0
	void BndEvt__WB_CusUI_Button_79_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78342730a0
	void Save();// 0x6d94ba8 0x7834273180
	void SaveChenge(byte NewParam);// 0x6d94ba8 0x7834273260
	void BndEvt__WB_CusUI_Slider_K2Node_ComponentBoundEvent_2_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0x6d94ba8 0x7834273420
	void Construct();// 0x6d94ba8 0x7834273960
	void ExecuteUbergraph_WB_CusUI(int EntryPoint, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, bool ___bool_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, float K2Node_ComponentBoundEvent_Value, WB_CusUIItem_C* K2Node_CustomEvent_UI, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool ___bool_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors K2Node_MakeStruct_Anchors, Vector2D CallFunc_GetPosition_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool ___bool_Variable, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, byte K2Node_CustomEvent_NewParam, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_ComponentBoundEvent_Value, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, Anchors K2Node_Select_Default, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, Anchors K2Node_Select_Default, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, Anchors K2Node_Select_Default, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, Anchors K2Node_Select_Default, FString CallFunc_Conv_Vector2dToString_ReturnValue, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP, byte CallFunc_GET_Type, Vector2D CallFunc_GET_Loaction, float CallFunc_GET_Scale, bool CallFunc_GET_Change, float CallFunc_GET_OP);// 0x6d94ba8 0x78342735e0

--------------------------------
Class: DragWidget_C.DragDropOperation.Object
	UserWidget* WidgetToDrag;//[Offset: 0x88, Size: 0x8] 0x7830acb880
	Vector2D DropWindowOffset;//[Offset: 0x90, Size: 0x8] 0x7830acb800

--------------------------------
Class: WB_CusUIItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7833f20900
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7833f20880
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7833f20800
	Object* Resource Object;//[Offset: 0x278, Size: 0x8] 0x7833f20780
	Vector2D DragWindowOffset;//[Offset: 0x280, Size: 0x8] 0x7833f20700
	float Scale;//[Offset: 0x288, Size: 0x4] 0x7833f20680
	Vector2D In Size;//[Offset: 0x28c, Size: 0x8] 0x7833f20600
	delegate EventTouch;//[Offset: 0x298, Size: 0x10] 0x7833f20580
	byte Type;//[Offset: 0x2a8, Size: 0x1] 0x7833f20500
	float 透明度                                                                                           ;//[Offset: 0x2ac, Size: 0x4] 0x7833f20480
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_DetectDragIfPressed_ReturnValue);// 0x6d94ba8 0x7834270860
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation, DragWidget_C* CallFunc_CreateDragDropOperation_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x6d94ba8 0x7834270940
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7834270a20
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x7834270b00
	void Select(UserWidget* NewParam);// 0x6d94ba8 0x7834270be0
	void ExecuteUbergraph_WB_CusUIItem(int EntryPoint, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, UserWidget* K2Node_CustomEvent_NewParam, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x6d94ba8 0x7834270da0
	void EventTouch__DelegateSignature(WB_CusUIItem_C* UI);// 0x6d94ba8 0x7834270f60

--------------------------------
Class: WBP_LPSP_Menu_Main_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783455fa00
	WidgetAnimation* Fade_In;//[Offset: 0x268, Size: 0x8] 0x783455f980
	WidgetAnimation* Fade_Out;//[Offset: 0x270, Size: 0x8] 0x783455f900
	WidgetAnimation* Scale;//[Offset: 0x278, Size: 0x8] 0x783455f880
	Button* ExitButton;//[Offset: 0x280, Size: 0x8] 0x783455f800
	Button* ExitButton;//[Offset: 0x288, Size: 0x8] 0x78340c1080
	Button* OptionsButton;//[Offset: 0x290, Size: 0x8] 0x78340c1000
	Button* PlayButton;//[Offset: 0x298, Size: 0x8] 0x78340c0f80
	void Construct();// 0x6d94ba8 0x782e5dd600
	void BndEvt__Options_Button_K2Node_ComponentBoundEvent_167_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dd6e0
	void BndEvt__Exit_Button_K2Node_ComponentBoundEvent_127_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dd7c0
	void BndEvt__Button_83_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dd980
	void BndEvt__WBP_LPSP_Menu_Main_ExitButton_1_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5ddb40
	void ExecuteUbergraph_WBP_LPSP_Menu_Main(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Actor* CallFunc_Array_Get_Item, WB_SettingsMenu_C* CallFunc_Create_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, UI_ModeSet_C* CallFunc_Create_ReturnValue, UI_Weapons_C* CallFunc_Create_ReturnValue);// 0x6d94ba8 0x782e5ddc20

--------------------------------
Class: UI_ModeSet_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783455e600
	WidgetAnimation* NewAnimation;//[Offset: 0x268, Size: 0x8] 0x783455e580
	Button* BackButton;//[Offset: 0x270, Size: 0x8] 0x783455e500
	Button* BackButton;//[Offset: 0x278, Size: 0x8] 0x783455e480
	Button* BackButton;//[Offset: 0x280, Size: 0x8] 0x783455e400
	Image* BackgroundImage;//[Offset: 0x288, Size: 0x8] 0x783455e380
	Image* BackgroundImage;//[Offset: 0x290, Size: 0x8] 0x783455e300
	CheckBox* FriendlyFireCheckBox;//[Offset: 0x298, Size: 0x8] 0x783455e280
	Button* HiddeFps;//[Offset: 0x2a0, Size: 0x8] 0x783455e200
	Button* LessABots;//[Offset: 0x2a8, Size: 0x8] 0x783455e180
	Button* LessBBots;//[Offset: 0x2b0, Size: 0x8] 0x783455e100
	TextBlock* MapSelectionText;//[Offset: 0x2b8, Size: 0x8] 0x783455e080
	Button* MoreABots;//[Offset: 0x2c0, Size: 0x8] 0x783455e000
	Button* MoreBBots;//[Offset: 0x2c8, Size: 0x8] 0x783455df80
	ScrollBox* ScrollBox;//[Offset: 0x2d0, Size: 0x8] 0x783455df00
	Button* ShowFps;//[Offset: 0x2d8, Size: 0x8] 0x783455de80
	Button* ShowFps;//[Offset: 0x2e0, Size: 0x8] 0x783455de00
	TextBlock* TextBlock;//[Offset: 0x2e8, Size: 0x8] 0x783455dd80
	TextBlock* TextBlock;//[Offset: 0x2f0, Size: 0x8] 0x783455dd00
	TextBlock* TextBlock;//[Offset: 0x2f8, Size: 0x8] 0x783455dc80
	TextBlock* TextBlock;//[Offset: 0x300, Size: 0x8] 0x783455dc00
	TextBlock* TextBlock;//[Offset: 0x308, Size: 0x8] 0x783455db80
	UI_TouchMapSelect_C* UI_TouchMapSelect;//[Offset: 0x310, Size: 0x8] 0x783455db00
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x318, Size: 0x8] 0x783455da80
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x320, Size: 0x8] 0x783455da00
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x328, Size: 0x8] 0x783455d980
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x330, Size: 0x8] 0x783455d900
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x338, Size: 0x8] 0x783455d880
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x340, Size: 0x8] 0x783455d800
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x348, Size: 0x8] 0x783455d780
	BST_SelectMode[] ModeMap;//[Offset: 0x350, Size: 0x10] 0x78345061e0
	byte CurModeType;//[Offset: 0x360, Size: 0x1] 0x783455f780
	int Level Index;//[Offset: 0x364, Size: 0x4] 0x783455f700
	int ModeIndex;//[Offset: 0x368, Size: 0x4] 0x783455f680
	enum Get_BackButton_1_Visibility(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x6d94ba8 0x782e5de240
	FText GetText(FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e5de320
	FText GetText(FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e5de400
	enum Get_FriendlyFireCheckBox_CheckedState(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, enum K2Node_Select_Default);// 0x6d94ba8 0x782e5de4e0
	enum Get_BackButton_2_Visibility(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x6d94ba8 0x782e5de5c0
	FText Get_MapSelectionText_Text(int ___int_Variable, FText ___text_Variable, FText ___text_Variable, FText ___text_Variable, FText K2Node_Select_Default);// 0x6d94ba8 0x782e5de6a0
	void BndEvt__WBP_LPSP_Menu_Maps_WB_CusUIItem_Touch_K2Node_ComponentBoundEvent_0_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x7830199c40
	void BndEvt__WBP_LPSP_Menu_Maps_WB_CusUIItem_Touch_1_K2Node_ComponentBoundEvent_1_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5dadc0
	void BndEvt__WBP_LPSP_Menu_Maps_WB_CusUIItem_Touch_2_K2Node_ComponentBoundEvent_2_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5daea0
	void BndEvt__WBP_LPSP_Menu_Maps_WB_CusUIItem_Touch_3_K2Node_ComponentBoundEvent_3_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5daf80
	void Construct();// 0x6d94ba8 0x782e5db060
	void RefLevels(byte Type);// 0x6d94ba8 0x782e5db140
	void 自定义事件                                                                                     (UI_TouchMapSelect_C* NewParam);// 0x6d94ba8 0x782e5db220
	void BndEvt__WBP_LPSP_Menu_Maps_BackButton_2_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db300
	void BndEvt__UI_ModeSet_BackButton_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db3e0
	void BndEvt__UI_ModeSet_LessABots_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db4c0
	void BndEvt__UI_ModeSet_ShowFps_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db5a0
	void BndEvt__UI_ModeSet_ShowFps_1_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db680
	void BndEvt__UI_ModeSet_HiddeFps_K2Node_ComponentBoundEvent_9_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db760
	void BndEvt__UI_ModeSet_FriendlyFireCheckBox_K2Node_ComponentBoundEvent_10_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x6d94ba8 0x782e5db840
	void BndEvt__UI_ModeSet_MoreABots_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5db920
	void BndEvt__UI_ModeSet_MoreBBots_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dba00
	void BndEvt__UI_ModeSet_LessBBots_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dbae0
	void BndEvt__UI_ModeSet_BackButton_1_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dbca0
	void BndEvt__UI_ModeSet_WB_CusUIItem_Touch_4_K2Node_ComponentBoundEvent_15_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5dbf40
	void ExecuteUbergraph_UI_ModeSet(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, WBP_LPSP_Menu_Main_C* CallFunc_Create_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, int ___int_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Margin K2Node_MakeStruct_Margin, UI_TouchMapSelect_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Variable, int ___int_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, GameInstance* CallFunc_GetGameInstance_ReturnValue, FName CallFunc_Array_Get_Item, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, BST_SelectMode CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte K2Node_CustomEvent_Type, BST_SelectMode CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BST_LevelInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, PanelSlot* CallFunc_AddChild_ReturnValue, UI_TouchMapSelect_C* K2Node_CustomEvent_NewParam, ScrollBoxSlot* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, Widget*[] CallFunc_GetAllChildren_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UI_TouchMapSelect_C* K2Node_DynamicCast_AsUI_Touch_Map_Select, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, bool K2Node_ComponentBoundEvent_bIsChecked, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue);// 0x6d94ba8 0x782e5dc100

--------------------------------
Class: UI_TouchMapSelect_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7833f2a580
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7833f2c600
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7833f2c580
	Vector2D LastPoint;//[Offset: 0x278, Size: 0x8] 0x7833f2c500
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x280, Size: 0x8] 0x7833f2c480
	delegate EventTouchMove;//[Offset: 0x288, Size: 0x10] 0x7833f2c400
	delegate EvenTouchClice;//[Offset: 0x298, Size: 0x10] 0x7833f2c380
	Vector2D In Size;//[Offset: 0x2a8, Size: 0x8] 0x7833f2c300
	Object* Resource Object;//[Offset: 0x2b0, Size: 0x8] 0x7833f2c280
	float Scale;//[Offset: 0x2b8, Size: 0x4] 0x7833f2c200
	float Time;//[Offset: 0x2bc, Size: 0x4] 0x7833f2c180
	bool TouchIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1] 0x7833f2c100
	bool IsMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1] 0x7833f2c080
	delegate EventPas;//[Offset: 0x2c8, Size: 0x10] 0x7833f2c000
	delegate EventPre;//[Offset: 0x2d8, Size: 0x10] 0x7833f2bf80
	bool Button;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7833f2bf00
	int LevelIndex;//[Offset: 0x2ec, Size: 0x4] 0x7833f2be80
	delegate EventSelect;//[Offset: 0x2f0, Size: 0x10] 0x7833f2be00
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply);// 0x6d94ba8 0x783427c8e0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Distance2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x783427c9c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue);// 0x6d94ba8 0x783427caa0
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x783427cb80
	void Construct();// 0x6d94ba8 0x78342792a0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x7834279380
	void UnSelect();// 0x6d94ba8 0x7834279460
	void Select();// 0x6d94ba8 0x7834279540
	void ExecuteUbergraph_UI_TouchMapSelect(int EntryPoint, bool K2Node_Event_IsDesignTime, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x6d94ba8 0x7834279620
	void EventSelect__DelegateSignature(UI_TouchMapSelect_C* NewParam);// 0x6d94ba8 0x7834279700
	void EventPre__DelegateSignature();// 0x6d94ba8 0x78342797e0
	void EventPas__DelegateSignature();// 0x6d94ba8 0x78342798c0
	void EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x7834279a80
	void EventTouchMove__DelegateSignature();// 0x6d94ba8 0x7834279c40

--------------------------------
Class: UI_Weapons_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834350400
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x7834350380
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x7834350300
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x7834350280
	Button* Button;//[Offset: 0x280, Size: 0x8] 0x7834350200
	Button* Button;//[Offset: 0x288, Size: 0x8] 0x7834350180
	Button* Button;//[Offset: 0x290, Size: 0x8] 0x7834350100
	Button* Button;//[Offset: 0x298, Size: 0x8] 0x7834350080
	Button* Button;//[Offset: 0x2a0, Size: 0x8] 0x7834352100
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x7834352080
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x7834352000
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x7834351f80
	Button* PlayButton;//[Offset: 0x2c0, Size: 0x8] 0x7834351f00
	Button* PlayButton;//[Offset: 0x2c8, Size: 0x8] 0x7834351e80
	Button* PlayButton;//[Offset: 0x2d0, Size: 0x8] 0x7834351e00
	Button* PlayButton;//[Offset: 0x2d8, Size: 0x8] 0x7834351d80
	Button* PlayButton;//[Offset: 0x2e0, Size: 0x8] 0x7834351d00
	ScrollBox* ScrollBox;//[Offset: 0x2e8, Size: 0x8] 0x7834351c80
	ScrollBox* ScrollBox;//[Offset: 0x2f0, Size: 0x8] 0x7834351c00
	ScrollBox* ScrollBox;//[Offset: 0x2f8, Size: 0x8] 0x7834351b80
	TextBlock* TextBlock;//[Offset: 0x300, Size: 0x8] 0x7834351b00
	TextBlock* TextBlock;//[Offset: 0x308, Size: 0x8] 0x7834351a80
	TextBlock* TextBlock;//[Offset: 0x310, Size: 0x8] 0x7834351a00
	TextBlock* TextBlock;//[Offset: 0x318, Size: 0x8] 0x7834351980
	TextBlock* TextBlock;//[Offset: 0x320, Size: 0x8] 0x7834351900
	TextBlock* TextBlock;//[Offset: 0x328, Size: 0x8] 0x7834351880
	TextBlock* TextBlock;//[Offset: 0x330, Size: 0x8] 0x7834351800
	TextBlock* TextBlock;//[Offset: 0x338, Size: 0x8] 0x7834351780
	UI_PaintItem_C* UI_PaintItem;//[Offset: 0x340, Size: 0x8] 0x7834351700
	UI_WeaponItem_C* UI_WeaponItem;//[Offset: 0x348, Size: 0x8] 0x7834351680
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x350, Size: 0x8] 0x7834351600
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x358, Size: 0x8] 0x7834351580
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x360, Size: 0x8] 0x7834351500
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x368, Size: 0x8] 0x7834351480
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x370, Size: 0x8] 0x7834351400
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x378, Size: 0x8] 0x7834351380
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x380, Size: 0x8] 0x7834351300
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x388, Size: 0x8] 0x7834351280
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x390, Size: 0x8] 0x7834351200
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x398, Size: 0x8] 0x7834351180
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3a0, Size: 0x8] 0x7834351100
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3a8, Size: 0x8] 0x7834353180
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3b0, Size: 0x8] 0x7834353100
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3b8, Size: 0x8] 0x7834353080
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3c0, Size: 0x8] 0x7834353000
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3c8, Size: 0x8] 0x7834352f80
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3d0, Size: 0x8] 0x7834352f00
	WB_CusUIItem_Touch_C* WB_CusUIItem_Touch;//[Offset: 0x3d8, Size: 0x8] 0x7834352e80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x3e0, Size: 0x8] 0x7834352e00
	FPS_SaveGame_C* Save Game;//[Offset: 0x3e8, Size: 0x8] 0x7834352d80
	BP_LPSP_WEP_C* CurWEP;//[Offset: 0x3f0, Size: 0x8] 0x7834352d00
	BP_PainSaveData_C*[] UnLockPaint Data;//[Offset: 0x3f8, Size: 0x10] 0x783450d620
	BP_PainSaveData_C*[] LockPaint Data;//[Offset: 0x408, Size: 0x10] 0x783450d580
	BP_PainSaveData_C*[] Paint Data;//[Offset: 0x418, Size: 0x10] 0x783450d4e0
	BP_PainSaveData_C*[] ListPaint Data;//[Offset: 0x428, Size: 0x10] 0x783450d440
	byte Paint Type;//[Offset: 0x438, Size: 0x1] 0x7834352a80
	BP_WeaponSaveData_C* CurWEPData;//[Offset: 0x440, Size: 0x8] 0x7834352a00
	BP_PainSaveData_C* CurPaintData;//[Offset: 0x448, Size: 0x8] 0x7834352980
	byte WeaponType;//[Offset: 0x450, Size: 0x1] 0x7834352900
	bool isReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1] 0x7834352880
	enum Get_PlayButton_2_Visibility(enum ___byte_Variable, enum ___byte_Variable, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x6d94ba8 0x782e5d90e0
	void GetPaintIndex(out int Array Index, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e5d91c0
	void Construct();// 0x6d94ba8 0x782e5d92a0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_K2Node_ComponentBoundEvent_0_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9380
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_1_K2Node_ComponentBoundEvent_1_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9460
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_2_K2Node_ComponentBoundEvent_2_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9540
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_3_K2Node_ComponentBoundEvent_3_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9620
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_4_K2Node_ComponentBoundEvent_4_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9700
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_5_K2Node_ComponentBoundEvent_5_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d97e0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_6_K2Node_ComponentBoundEvent_6_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d98c0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_7_K2Node_ComponentBoundEvent_7_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d99a0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_8_K2Node_ComponentBoundEvent_8_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9a80
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_9_K2Node_ComponentBoundEvent_9_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9b60
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_10_K2Node_ComponentBoundEvent_10_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9c40
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_11_K2Node_ComponentBoundEvent_11_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9e00
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_12_K2Node_ComponentBoundEvent_12_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9ee0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_13_K2Node_ComponentBoundEvent_13_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5d9fc0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_14_K2Node_ComponentBoundEvent_14_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5da0a0
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_15_K2Node_ComponentBoundEvent_15_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5da180
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_16_K2Node_ComponentBoundEvent_16_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5da260
	void BndEvt__UI_Weapons_WB_CusUIItem_Touch_17_K2Node_ComponentBoundEvent_17_EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x782e5da340
	void RefWeaponList(byte Type);// 0x6d94ba8 0x782e5da420
	void BndEvt__UI_Weapons_PlayButton_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5da500
	void RefPaintList(byte PaintType);// 0x6d94ba8 0x782e5da5e0
	void BndEvt__UI_Weapons_Button_91_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5da6c0
	void BndEvt__UI_Weapons_Button_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5da7a0
	void BndEvt__UI_Weapons_Button_1_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5da880
	void BndEvt__UI_Weapons_Button_2_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5da960
	void BndEvt__UI_Weapons_Button_3_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5daa40
	void BndEvt__UI_Weapons_Button_4_K2Node_ComponentBoundEvent_24_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dab20
	void BndEvt__UI_Weapons_Button_5_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dac00
	void BndEvt__UI_Weapons_Button_6_K2Node_ComponentBoundEvent_26_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5dace0
	void 自定义事件                                                                                     (UI_WeaponItem_C* is);// 0x6d94ba8 0x782e5d7400
	void 自定义事件                                                                                     (UI_PaintItem_C* 1);// 0x6d94ba8 0x782e5d74e0
	void Destruct();// 0x6d94ba8 0x782e5d75c0
	void BndEvt__UI_Weapons_PlayButton_1_K2Node_ComponentBoundEvent_27_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5d76a0
	void 自定义事件                                                                                     ();// 0x6d94ba8 0x782e5d7780
	void RefWeaponButton();// 0x6d94ba8 0x782e5d7860
	void BndEvt__UI_Weapons_PlayButton_2_K2Node_ComponentBoundEvent_28_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5d7940
	void BndEvt__UI_Weapons_PlayButton_3_K2Node_ComponentBoundEvent_29_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5d7a20
	void 自定义事件                                                                                     ();// 0x6d94ba8 0x782e5d7b00
	void RefPaintButton(byte Type);// 0x6d94ba8 0x782e5d7be0
	void BndEvt__UI_Weapons_PlayButton_4_K2Node_ComponentBoundEvent_30_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e5d7da0
	void 自定义事件                                                                                     (bool isReward);// 0x6d94ba8 0x782e5d7f60
	void ExecuteUbergraph_UI_Weapons(int EntryPoint, UI_PaintLotto_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UI_WeaponLotto_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_SelectInt_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, byte ___byte_Variable, byte ___byte_Variable, UI_Reward_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, byte K2Node_CustomEvent_Type, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Margin K2Node_MakeStruct_Margin, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UI_WeaponItem_C* K2Node_DynamicCast_AsUI_Weapon_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, CameraActor*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, UI_PaintItem_C* CallFunc_Create_ReturnValue, CameraActor* CallFunc_Array_Get_Item, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte K2Node_CustomEvent_PaintType, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, ScrollBoxSlot* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, UI_WeaponItem_C* K2Node_CustomEvent_is, int ___int_Loop_Counter_Variable, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, BP_LPSP_WEP_C* CallFunc_Select_1_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, UI_PaintItem_C* K2Node_CustomEvent, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, BP_LPSP_WEP_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, Widget* CallFunc_Array_Get_Item, BP_LPSP_WEP_C* CallFunc_Array_Get_Item, UI_PaintItem_C* K2Node_DynamicCast_AsUI_Paint_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, int CallFunc_SelectInt_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetPaintIndex_Array_Index, int CallFunc_GetChildrenCount_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetScrollOffsetOfEnd_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, UI_PaintItem_C* K2Node_DynamicCast_AsUI_Paint_Item, bool K2Node_DynamicCast_bSuccess, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, WB_CusUIItem_Touch_C* K2Node_DynamicCast_AsWB_Cus_UIItem_Touch, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, Margin K2Node_MakeStruct_Margin, const Vector2D ___struct_Variable, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, UI_PaintItem_C* K2Node_DynamicCast_AsUI_Paint_Item, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UI_PaintItem_C* K2Node_DynamicCast_AsUI_Paint_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, WBP_LPSP_Menu_Main_C* CallFunc_Create_ReturnValue, Widget* CallFunc_Array_Get_Item, UI_WeaponItem_C* K2Node_DynamicCast_AsUI_Weapon_Item, bool K2Node_DynamicCast_bSuccess, BP_LPSP_WEP_C* CallFunc_Select_1_ReturnValue, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, UI_WeaponItem_C* CallFunc_Create_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, PanelSlot* CallFunc_AddChild_ReturnValue, ScrollBoxSlot* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, BP_PainSaveData_C* CallFunc_Array_Get_Item, byte K2Node_CustomEvent_Type, Button* K2Node_Select_Default, TextBlock* K2Node_Select_Default, Advertisement* CallFunc_GetAdvertisement_ReturnValue, Advertisement* CallFunc_GetAdvertisement_ReturnValue, bool K2Node_CustomEvent_isReward);// 0x6d94ba8 0x782e5d8040

--------------------------------
Class: UI_WeaponItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783022fe00
	CanvasPanel* CanvasPanel;//[Offset: 0x268, Size: 0x8] 0x783022fd80
	CanvasPanel* CanvasPanel;//[Offset: 0x270, Size: 0x8] 0x783022fd00
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x783022fc80
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x783022fc00
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x783022fb80
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x783022fb00
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x783022fa80
	Vector2D LastPoint;//[Offset: 0x2a0, Size: 0x8] 0x783022fa00
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2a8, Size: 0x8] 0x783022f980
	delegate EventTouchMove;//[Offset: 0x2b0, Size: 0x10] 0x783022f900
	delegate EvenTouchClice;//[Offset: 0x2c0, Size: 0x10] 0x783022f880
	Vector2D In Size;//[Offset: 0x2d0, Size: 0x8] 0x783022f800
	Object* Resource Object;//[Offset: 0x2d8, Size: 0x8] 0x7834471080
	float Scale;//[Offset: 0x2e0, Size: 0x4] 0x7834471000
	bool TouchIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1] 0x7834470f80
	bool IsMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1] 0x7834470f00
	delegate EventPas;//[Offset: 0x2e8, Size: 0x10] 0x7834470e80
	delegate EventPre;//[Offset: 0x2f8, Size: 0x10] 0x7834470e00
	byte Level;//[Offset: 0x308, Size: 0x1] 0x7834470d80
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1] 0x7834470d00
	bool IsSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1] 0x7834470c80
	delegate EventOnSelect;//[Offset: 0x310, Size: 0x10] 0x7834470c00
	int Index;//[Offset: 0x320, Size: 0x4] 0x7834470b80
	BP_LPSP_WEP_C* Select 1(bool Select?, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, int ___int_Array_Index_Variable, enum K2Node_Select_Default, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] K2Node_MakeArray_Array, Actor*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, BP_LPSP_WEP_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, Actor* CallFunc_Array_Get_Item, BP_LPSP_WEP_C* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_SelectInt_ReturnValue, BP_LPSP_WEP_C* CallFunc_FinishSpawningActor_ReturnValue, SceneComponent*[] CallFunc_GetChildrenComponents_Children, int CallFunc_Array_Length_ReturnValue, SceneComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, PrimitiveComponent* K2Node_DynamicCast_As____, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783019ee80
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply);// 0x6d94ba8 0x783019ef60
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Distance2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x783019f040
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue);// 0x6d94ba8 0x783019f120
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x783019f200
	void Construct();// 0x6d94ba8 0x783019f2e0
	void ExecuteUbergraph_UI_WeaponItem(int EntryPoint, byte ___byte_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, enum K2Node_Select_Default, bool K2Node_Event_IsDesignTime, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, LinearColor K2Node_Select_Default);// 0x6d94ba8 0x783019f3c0
	void EventOnSelect__DelegateSignature(UI_WeaponItem_C* is);// 0x6d94ba8 0x783019f4a0
	void EventPre__DelegateSignature();// 0x6d94ba8 0x783019f580
	void EventPas__DelegateSignature();// 0x6d94ba8 0x783019f660
	void EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x783019f820
	void EventTouchMove__DelegateSignature();// 0x6d94ba8 0x783019f9e0

--------------------------------
Class: UI_PaintItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834473100
	CanvasPanel* CanvasPanel;//[Offset: 0x268, Size: 0x8] 0x7834473080
	CanvasPanel* CanvasPanel;//[Offset: 0x270, Size: 0x8] 0x7834473000
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7834472f80
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x7834472f00
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x7834472e80
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x7834472e00
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x7834472d80
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8] 0x7834472d00
	Vector2D LastPoint;//[Offset: 0x2a8, Size: 0x8] 0x7834472c80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2b0, Size: 0x8] 0x7834472c00
	delegate EventTouchMove;//[Offset: 0x2b8, Size: 0x10] 0x7834472b80
	delegate EvenTouchClice;//[Offset: 0x2c8, Size: 0x10] 0x7834472b00
	Vector2D In Size;//[Offset: 0x2d8, Size: 0x8] 0x7834472a80
	Object* Resource Object;//[Offset: 0x2e0, Size: 0x8] 0x7834472a00
	float Scale;//[Offset: 0x2e8, Size: 0x4] 0x7834472980
	bool TouchIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1] 0x7834472900
	bool IsMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1] 0x7834472880
	delegate EventPas;//[Offset: 0x2f0, Size: 0x10] 0x7834472800
	delegate EventPre;//[Offset: 0x300, Size: 0x10] 0x7834472780
	byte Level;//[Offset: 0x310, Size: 0x1] 0x7834472700
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1] 0x7834472680
	delegate EventSelect;//[Offset: 0x318, Size: 0x10] 0x7834472600
	int Index;//[Offset: 0x328, Size: 0x4] 0x7834472580
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply);// 0x6d94ba8 0x782e871580
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Distance2D_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x6d94ba8 0x782e871660
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply K2Node_MakeStruct_EventReply, Vector2D CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue, Vector2D CallFunc_AbsoluteToLocal_ReturnValue);// 0x6d94ba8 0x782e871740
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x782e871820
	void Construct();// 0x6d94ba8 0x782e871900
	void Select(bool Select);// 0x6d94ba8 0x782e8719e0
	void IsUse(bool Use?);// 0x6d94ba8 0x782e871ac0
	void ExecuteUbergraph_UI_PaintItem(int EntryPoint, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, bool K2Node_Event_IsDesignTime, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool K2Node_CustomEvent_Select, enum K2Node_Select_Default, enum K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, Actor* CallFunc_Array_Get_Item, byte ___byte_Variable, bool CallFunc_IsValid_ReturnValue, LinearColor K2Node_Select_Default, BP_LPSP_WEP_C* K2Node_DynamicCast_AsBP_LPSP_WEP, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Use_, enum K2Node_Select_Default);// 0x6d94ba8 0x782e871ba0
	void EventSelect__DelegateSignature(UI_PaintItem_C* 1);// 0x6d94ba8 0x782e871c80
	void EventPre__DelegateSignature();// 0x6d94ba8 0x783019e780
	void EventPas__DelegateSignature();// 0x6d94ba8 0x783019e860
	void EvenTouchClice__DelegateSignature();// 0x6d94ba8 0x783019ea20
	void EventTouchMove__DelegateSignature();// 0x6d94ba8 0x783019ebe0

--------------------------------
Class: UI_PaintLotto_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834477700
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x7834477680
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x7834477600
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7834477580
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x7834477500
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x7834477480
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x290, Size: 0x8] 0x7834477400
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x298, Size: 0x8] 0x7834479480
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x2a0, Size: 0x8] 0x7834479400
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x2a8, Size: 0x8] 0x7834479380
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x2b0, Size: 0x8] 0x7834479300
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x2b8, Size: 0x8] 0x7834479280
	UI_PaintLottoItem_C* Lotto_Item;//[Offset: 0x2c0, Size: 0x8] 0x7834479200
	TextBlock* PlayText;//[Offset: 0x2c8, Size: 0x8] 0x7834479180
	ScrollBox* ScrollBox;//[Offset: 0x2d0, Size: 0x8] 0x7834479100
	UI_Coin_C* UI_Coin;//[Offset: 0x2d8, Size: 0x8] 0x7834479080
	TimerHandle IdleTimer;//[Offset: 0x2e0, Size: 0x8] 0x7834479000
	TimerHandle RunTimer;//[Offset: 0x2e8, Size: 0x8] 0x7834478f80
	float RunF;//[Offset: 0x2f0, Size: 0x4] 0x7834478f00
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2f8, Size: 0x8] 0x7834478e80
	FPS_SaveGame_C* Save Game;//[Offset: 0x300, Size: 0x8] 0x7834478e00
	BP_PainSaveData_C*[] PaintArray;//[Offset: 0x308, Size: 0x10] 0x782f5dcfe0
	delegate EventClose;//[Offset: 0x318, Size: 0x10] 0x7834478d00
	bool Lottoying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1] 0x7834478c80
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e873260
	enum GetVisibility(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, enum K2Node_Select_Default);// 0x6d94ba8 0x782e873340
	void Construct();// 0x6d94ba8 0x782e873420
	void BndEvt__Lotto_Button_69_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e873500
	void Idle();// 0x6d94ba8 0x782e8735e0
	void Run();// 0x6d94ba8 0x782e8736c0
	void RefPaintData();// 0x6d94ba8 0x782e8737a0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x782e873880
	void StartTimer();// 0x6d94ba8 0x782e873960
	void BndEvt__UI_PaintLotto_Button_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e870080
	void ExecuteUbergraph_UI_PaintLotto(int EntryPoint, UI_PaintLottoItem_C* CallFunc_Create_ReturnValue, UI_Reward_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, float CallFunc_GetScrollOffset_ReturnValue, float CallFunc_GetScrollOffsetOfEnd_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetScrollOffset_ReturnValue, float CallFunc_GetScrollOffsetOfEnd_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetScrollOffset_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, ScrollBoxSlot* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, BP_PainSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetPlayerController_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_SelectInt_ReturnValue, BP_PainSaveData_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e870160
	void EventClose__DelegateSignature();// 0x6d94ba8 0x782e870320

--------------------------------
Class: UI_PaintLottoItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830228800
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7830228780
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7830228700
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7830228680
	BP_PainSaveData_C* Paint;//[Offset: 0x280, Size: 0x8] 0x7830228600
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7830196520
	void Construct();// 0x6d94ba8 0x78301966e0
	void ExecuteUbergraph_UI_PaintLottoItem(int EntryPoint, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte ___byte_Variable, FString CallFunc_GetDisplayName_ReturnValue, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, byte ___byte_Variable, LinearColor K2Node_Select_Default, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor K2Node_Select_Default, bool K2Node_Event_IsDesignTime);// 0x6d94ba8 0x7830194060

--------------------------------
Class: UI_Reward_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783022af00
	WidgetAnimation* End;//[Offset: 0x268, Size: 0x8] 0x783022ae80
	WidgetAnimation* Start;//[Offset: 0x270, Size: 0x8] 0x783022ae00
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x783022ad80
	CusRewardItem_C* CusRewardItem;//[Offset: 0x280, Size: 0x8] 0x783022ad00
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x783022ac80
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x783022ac00
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x783022ab80
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x783022ab00
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x783022aa80
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x783022aa00
	Image* Image;//[Offset: 0x2b8, Size: 0x8] 0x783022a980
	Image* Image;//[Offset: 0x2c0, Size: 0x8] 0x783022a900
	TextBlock* TextBlock;//[Offset: 0x2c8, Size: 0x8] 0x783022a880
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x2d0, Size: 0x8] 0x783022a800
	byte Type;//[Offset: 0x2d8, Size: 0x1] 0x783022a780
	int Index;//[Offset: 0x2dc, Size: 0x4] 0x783022a700
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2e0, Size: 0x8] 0x783022a680
	void Construct();// 0x6d94ba8 0x783019e320
	void BndEvt__UI_Reward_Button_244_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x783019e4e0
	void WidgetAnimationEvt_End_K2Node_WidgetAnimationEvent();// 0x6d94ba8 0x783019e6a0
	void ExecuteUbergraph_UI_Reward(int EntryPoint, byte ___byte_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, byte ___byte_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, BP_PainSaveData_C* CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, BP_PainSaveData_C* CallFunc_Array_Get_Item, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue);// 0x6d94ba8 0x783019adc0

--------------------------------
Class: CusRewardItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830227880
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7830227800
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x7830227780
	int In Text;//[Offset: 0x278, Size: 0x4] 0x7830227700
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x783019ab20
	void RefValue(int Num);// 0x6d94ba8 0x783019ace0
	void ExecuteUbergraph_CusRewardItem(int EntryPoint, int K2Node_CustomEvent_Num, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x78301974e0

--------------------------------
Class: UI_Coin_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830228080
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7830228000
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x7830227f80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x278, Size: 0x8] 0x7830227f00
	void Construct();// 0x6d94ba8 0x7830195aa0
	void 自定义事件                                                                                     (int Old, int New);// 0x6d94ba8 0x7830195c60
	void ExecuteUbergraph_UI_Coin(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_old, int K2Node_CustomEvent_new, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x7830195d40

--------------------------------
Class: UI_WeaponLotto_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7834476280
	Button* Button;//[Offset: 0x268, Size: 0x8] 0x7834476200
	Button* Button;//[Offset: 0x270, Size: 0x8] 0x7834476180
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x7834476100
	Image* Image;//[Offset: 0x280, Size: 0x8] 0x7834476080
	Image* Image;//[Offset: 0x288, Size: 0x8] 0x7834476000
	TextBlock* PlayText;//[Offset: 0x290, Size: 0x8] 0x7834475f80
	ScrollBox* ScrollBox;//[Offset: 0x298, Size: 0x8] 0x7834475f00
	UI_Coin_C* UI_Coin;//[Offset: 0x2a0, Size: 0x8] 0x7834475e80
	UI_WeaponLottoItem_C* UI_WeaponLottoItem;//[Offset: 0x2a8, Size: 0x8] 0x7834475e00
	UI_WeaponLottoItem_C* UI_WeaponLottoItem;//[Offset: 0x2b0, Size: 0x8] 0x7834475d80
	UI_WeaponLottoItem_C* UI_WeaponLottoItem;//[Offset: 0x2b8, Size: 0x8] 0x7834475d00
	TimerHandle IdleTimer;//[Offset: 0x2c0, Size: 0x8] 0x7834475c80
	TimerHandle RunTimer;//[Offset: 0x2c8, Size: 0x8] 0x7834475c00
	float RunF;//[Offset: 0x2d0, Size: 0x4] 0x7834475b80
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2d8, Size: 0x8] 0x7834475b00
	FPS_SaveGame_C* Save Game;//[Offset: 0x2e0, Size: 0x8] 0x7834475a80
	BP_WeaponSaveData_C*[] WeaponArray;//[Offset: 0x2e8, Size: 0x10] 0x782f5dd440
	delegate EventClose;//[Offset: 0x2f8, Size: 0x10] 0x7834475980
	bool Lottoying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x7834475900
	bool GetbIsEnabled(bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e8706a0
	enum GetVisibility(bool ___bool_Variable, enum ___byte_Variable, enum ___byte_Variable, enum K2Node_Select_Default);// 0x6d94ba8 0x782e870780
	void Construct();// 0x6d94ba8 0x782e870860
	void BndEvt__Lotto_Button_69_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e870940
	void Idle();// 0x6d94ba8 0x782e870a20
	void Run();// 0x6d94ba8 0x782e870b00
	void RefWeaponData();// 0x6d94ba8 0x782e870be0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x782e870cc0
	void StartTimer();// 0x6d94ba8 0x782e870da0
	void BndEvt__UI_WeaponLotto_Button_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e870f60
	void ExecuteUbergraph_UI_WeaponLotto(int EntryPoint, UI_WeaponLottoItem_C* CallFunc_Create_ReturnValue, UI_Reward_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, float CallFunc_GetScrollOffset_ReturnValue, float CallFunc_GetScrollOffsetOfEnd_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetScrollOffset_ReturnValue, float CallFunc_GetScrollOffsetOfEnd_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetScrollOffset_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, ScrollBoxSlot* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PlayerController* CallFunc_GetPlayerController_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_SelectInt_ReturnValue, BP_WeaponSaveData_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782e871040
	void EventClose__DelegateSignature();// 0x6d94ba8 0x782e871200

--------------------------------
Class: UI_WeaponLottoItem_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830228580
	Image* Image;//[Offset: 0x268, Size: 0x8] 0x7830228500
	Image* Image;//[Offset: 0x270, Size: 0x8] 0x7830228480
	Image* Image;//[Offset: 0x278, Size: 0x8] 0x783022a500
	BP_WeaponSaveData_C* Paint;//[Offset: 0x280, Size: 0x8] 0x783022a480
	void PreConstruct(bool IsDesignTime);// 0x6d94ba8 0x7830198e40
	void Construct();// 0x6d94ba8 0x7830199000
	void ExecuteUbergraph_UI_WeaponLottoItem(int EntryPoint, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte ___byte_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, byte ___byte_Variable, LinearColor K2Node_Select_Default, LinearColor ___struct_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable, bool K2Node_Event_IsDesignTime, LinearColor K2Node_Select_Default);// 0x6d94ba8 0x7830195720

--------------------------------
Class: WB_EndGameScores_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7850109300
	WidgetAnimation* VictoryTextAnim;//[Offset: 0x268, Size: 0x8] 0x7850109280
	TextBlock* GameModeText;//[Offset: 0x270, Size: 0x8] 0x7850109200
	HorizontalBox* NextMatchTimer;//[Offset: 0x278, Size: 0x8] 0x7850109180
	HorizontalBox* QuiButtonBox;//[Offset: 0x280, Size: 0x8] 0x7850109100
	Button* QuitButton;//[Offset: 0x288, Size: 0x8] 0x7850109080
	ScrollBox* TeamAPlayers;//[Offset: 0x290, Size: 0x8] 0x7850109000
	TextBlock* TeamAScore;//[Offset: 0x298, Size: 0x8] 0x7850108f80
	VerticalBox* TeamASlot;//[Offset: 0x2a0, Size: 0x8] 0x7850108f00
	ScrollBox* TeamBPlayers;//[Offset: 0x2a8, Size: 0x8] 0x7850108e80
	TextBlock* TeamBScore;//[Offset: 0x2b0, Size: 0x8] 0x7850108e00
	VerticalBox* TeamBSlot;//[Offset: 0x2b8, Size: 0x8] 0x7850108d80
	Image* TeamImageA;//[Offset: 0x2c0, Size: 0x8] 0x7850108d00
	Image* TeamImageB;//[Offset: 0x2c8, Size: 0x8] 0x7850108c80
	TextBlock* TextBlock;//[Offset: 0x2d0, Size: 0x8] 0x7850108c00
	VerticalBox* VictoryScores;//[Offset: 0x2d8, Size: 0x8] 0x7850108b80
	TextBlock* VictroyText;//[Offset: 0x2e0, Size: 0x8] 0x7850108b00
	FPS_PlayerState_C*[] TeamAPlayerArray;//[Offset: 0x2e8, Size: 0x10] 0x78500609c0
	FPS_PlayerState_C*[] TeamBPlayerArray;//[Offset: 0x2f8, Size: 0x10] 0x7850060920
	bool bRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1] 0x7850108980
	float RefreshTime;//[Offset: 0x30c, Size: 0x4] 0x7850108900
	bool Winner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1] 0x7850108880
	float TimeForNextMatch;//[Offset: 0x314, Size: 0x4] 0x7850108800
	TimerHandle TimeLeftHandle;//[Offset: 0x318, Size: 0x8] 0x7850108780
	FPS_GS_C* GS;//[Offset: 0x320, Size: 0x8] 0x7850108700
	FPS_PlayerState_C* PS;//[Offset: 0x328, Size: 0x8] 0x7850108680
	FPS_PlayerState_C*[] SemiSortedArrayTeamB;//[Offset: 0x330, Size: 0x10] 0x7850060880
	FPS_PlayerState_C*[] SemiSortedArrayTeamA;//[Offset: 0x340, Size: 0x10] 0x78500607e0
	BaseCharacterPC_C* PC;//[Offset: 0x350, Size: 0x8] 0x7850108500
	float Player Score;//[Offset: 0x358, Size: 0x4] 0x7850108480
	void AssingPlayerSlots(out FPS_PlayerState_C*[] PlayerStates, ScrollBox* ScrollBox, int NumberOfSlots, ScrollBox* SB, FPS_PlayerState_C*[] PlayersArray, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerScore_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int ___int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PlayerScore_C* K2Node_DynamicCast_AsPlayer_Score, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x782e228e40
	void FindPos(out FPS_PlayerState_C*[] PlayerStates, FPS_PlayerState_C* CurrentPS, out int Position, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e228f20
	void UpdateSemiSortedLists(FPS_PlayerState_C* CurrentPS, bool ___bool_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerState* CallFunc_Array_Get_Item, FPS_PlayerState_C*[] K2Node_Select_Default, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e229000
	void IntsertionSort(out FPS_PlayerState_C*[] PlayerStates, out FPS_PlayerState_C*[] SortedPlayersState, FPS_PlayerState_C*[] TempSortedArray, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_FindPos_Position);// 0x6d94ba8 0x7830199620
	void InitList(FPS_PlayerState_C* CurrentPS, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e225720
	FText GetTimeLeftNextMatch();// 0x6d94ba8 0x782e225800
	FText GetVictoryText(PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_BoolBool_ReturnValue);// 0x6d94ba8 0x782e2258e0
	void AddBots(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, AI_PlayerController_C* K2Node_DynamicCast_AsAI_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e2259c0
	void SortPlayerArray(out FPS_PlayerState_C*[] Input, out FPS_PlayerState_C*[] Output, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e225aa0
	void Construct();// 0x6d94ba8 0x782e225b80
	void UpdateScore();// 0x6d94ba8 0x782e225c60
	void UpdateLists();// 0x6d94ba8 0x782e225d40
	void WidgetAnimationEvt_VictoryTextAnim_K2Node_WidgetAnimationEvent();// 0x6d94ba8 0x782e225f00
	void BndEvt__WB_EndGameScores_QuitButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e2260c0
	void ExecuteUbergraph_WB_EndGameScores(int EntryPoint, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_CTF_GS_C* K2Node_DynamicCast_AsFPS_CTF_GS, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, UI_RewardCoin_C* CallFunc_Create_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FPS_TDM_GS_C* K2Node_DynamicCast_AsFPS_TDM_GS, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, float ___float_Variable, FPS_PlayerState_C*[] CallFunc_IntsertionSort_SortedPlayersState, FPS_PlayerState_C*[] CallFunc_IntsertionSort_SortedPlayersState, SlateBrush K2Node_MakeStruct_SlateBrush, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x6d94ba8 0x782e2261a0

--------------------------------
Class: PlayerScore_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7833f2a200
	Border* BackgroundColor;//[Offset: 0x268, Size: 0x8] 0x7833f2a180
	TextBlock* DeathsText;//[Offset: 0x270, Size: 0x8] 0x7833f2a100
	TextBlock* KillsText;//[Offset: 0x278, Size: 0x8] 0x7833f2a080
	TextBlock* NameText;//[Offset: 0x280, Size: 0x8] 0x7833f2a000
	TextBlock* PingText;//[Offset: 0x288, Size: 0x8] 0x7833f29f80
	TextBlock* PositionText;//[Offset: 0x290, Size: 0x8] 0x7833f29f00
	TextBlock* ScoreText;//[Offset: 0x298, Size: 0x8] 0x7833f29e80
	byte Position;//[Offset: 0x2a0, Size: 0x1] 0x7833f29e00
	FPS_PlayerState_C* PS;//[Offset: 0x2a8, Size: 0x8] 0x7833f29d80
	void UpdatePlayerScoreInfo(FPS_PlayerState_C* PS, byte Position, bool bSelf);// 0x6d94ba8 0x78342784a0
	void ExecuteUbergraph_PlayerScore(int EntryPoint, FPS_PlayerState_C* K2Node_CustomEvent_PS, byte K2Node_CustomEvent_Position, bool K2Node_CustomEvent_bSelf, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText CallFunc_Conv_ByteToText_ReturnValue, FText CallFunc_Conv_ByteToText_ReturnValue, FText CallFunc_Conv_ByteToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsValid_ReturnValue, byte CallFunc_Percent_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool ___bool_Variable, SlateColor K2Node_MakeStruct_SlateColor, FText K2Node_Select_Default);// 0x6d94ba8 0x7834278580

--------------------------------
Class: UI_RewardCoin_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7830acd800
	WidgetAnimation* End;//[Offset: 0x268, Size: 0x8] 0x7830acd780
	WidgetAnimation* Start;//[Offset: 0x270, Size: 0x8] 0x7830acd700
	Button* Button;//[Offset: 0x278, Size: 0x8] 0x7830acd680
	Button* Button;//[Offset: 0x280, Size: 0x8] 0x7830acf700
	CusRewardItem_C* CusRewardItem;//[Offset: 0x288, Size: 0x8] 0x7830acf680
	Image* Image;//[Offset: 0x290, Size: 0x8] 0x7830acf600
	Image* Image;//[Offset: 0x298, Size: 0x8] 0x7830acf580
	Image* Image;//[Offset: 0x2a0, Size: 0x8] 0x7830acf500
	Image* Image;//[Offset: 0x2a8, Size: 0x8] 0x7830acf480
	Image* Image;//[Offset: 0x2b0, Size: 0x8] 0x7830acf400
	TextBlock* TextBlock;//[Offset: 0x2b8, Size: 0x8] 0x7830acf380
	TextBlock* TextBlock;//[Offset: 0x2c0, Size: 0x8] 0x7830acf300
	int Num;//[Offset: 0x2c8, Size: 0x4] 0x7830acf280
	FPS_GameInstance_C* As FPS Game Instance;//[Offset: 0x2d0, Size: 0x8] 0x7830acf200
	delegate EventNot;//[Offset: 0x2d8, Size: 0x10] 0x7830acf180
	bool isReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1] 0x7830acf100
	void Construct();// 0x6d94ba8 0x7834272000
	void BndEvt__UI_Reward_Button_244_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78342720e0
	void BndEvt__UI_Reward_Button_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x78342721c0
	void WidgetAnimationEvt_End_K2Node_WidgetAnimationEvent();// 0x6d94ba8 0x78342722a0
	void 自定义事件                                                                                     (bool isReward);// 0x6d94ba8 0x7834272460
	void ExecuteUbergraph_UI_RewardCoin(int EntryPoint, Advertisement* CallFunc_GetAdvertisement_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_Multiply_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, Advertisement* CallFunc_GetAdvertisement_ReturnValue, Advertisement* CallFunc_GetAdvertisement_ReturnValue, bool K2Node_CustomEvent_isReward);// 0x6d94ba8 0x7834272540
	void EventNot__DelegateSignature();// 0x6d94ba8 0x7834272700

--------------------------------
Class: WB_PlayerScores_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x78340cf000
	TextBlock* GameModeText;//[Offset: 0x268, Size: 0x8] 0x78340cef80
	TextBlock* TeamAScore;//[Offset: 0x270, Size: 0x8] 0x78340cef00
	VerticalBox* TeamASlot;//[Offset: 0x278, Size: 0x8] 0x78340cee80
	TextBlock* TeamBScore;//[Offset: 0x280, Size: 0x8] 0x78340cee00
	VerticalBox* TeamBSlot;//[Offset: 0x288, Size: 0x8] 0x78340ced80
	Image* TeamImageA;//[Offset: 0x290, Size: 0x8] 0x78340ced00
	Image* TeamImageB;//[Offset: 0x298, Size: 0x8] 0x78340cec80
	ScrollBox* VB_TeamAPlayers;//[Offset: 0x2a0, Size: 0x8] 0x78340cec00
	ScrollBox* VB_TeamBPlayers;//[Offset: 0x2a8, Size: 0x8] 0x78340ceb80
	bool bRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x78340ceb00
	float RefreshTime;//[Offset: 0x2b4, Size: 0x4] 0x78340cea80
	FPS_GS_C* GS;//[Offset: 0x2b8, Size: 0x8] 0x78340cea00
	FPS_PlayerState_C* PS;//[Offset: 0x2c0, Size: 0x8] 0x78340ce980
	BaseCharacterPC_C* PC;//[Offset: 0x2c8, Size: 0x8] 0x78340ce900
	void CleanList(out FPS_PlayerState_C*[] List, bool Team, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e5dfba0
	void AssingPlayerSlots(ScrollBox* ScrollBox, out FPS_PlayerState_C*[] Players, int NumberOfSlots, FPS_PlayerState_C*[] PlayersArray, ScrollBox* SB, int ___int_Variable, PlayerScore_C* CallFunc_Create_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int ___int_Variable, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PlayerScore_C* K2Node_DynamicCast_AsPlayer_Score, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x782e5dfc80
	void UpdateSemiSortedLists(FPS_PlayerState_C* CurrentPS, bool ___bool_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerState* CallFunc_Array_Get_Item, FPS_PlayerState_C*[] K2Node_Select_Default, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782e5dfd60
	void InitLists(FPS_PlayerState_C* CurrentPS, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e5dfe40
	void FindPos(out FPS_PlayerState_C*[] SortedArray, FPS_PlayerState_C* PlayerState, out int Position, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e5dff20
	void InsertionSort(out FPS_PlayerState_C*[] PlayersState, out FPS_PlayerState_C*[] SortedPlayersState, FPS_PlayerState_C*[] TempSortedArray, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_FindPos_Position);// 0x6d94ba8 0x782e5dcaa0
	void SortPlayerArray(out FPS_PlayerState_C*[] Input, out FPS_PlayerState_C*[] Output, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e5dcb80
	void Construct();// 0x6d94ba8 0x782e5dcc60
	void UpdateScore();// 0x6d94ba8 0x782e5dcd40
	void UpdateLists();// 0x6d94ba8 0x782e5dcf00
	void ExecuteUbergraph_WB_PlayerScores(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_CTF_GS_C* K2Node_DynamicCast_AsFPS_CTF_GS, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FPS_TDM_GS_C* K2Node_DynamicCast_AsFPS_TDM_GS, bool K2Node_DynamicCast_bSuccess, SlateBrush K2Node_MakeStruct_SlateBrush, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, FPS_PlayerState_C*[] CallFunc_InsertionSort_SortedPlayersState, FPS_PlayerState_C*[] CallFunc_InsertionSort_SortedPlayersState);// 0x6d94ba8 0x78e262ab20

--------------------------------
Class: WB_ErrorMesagge_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783415d100
	Button* ReturnToMainMenuButton;//[Offset: 0x268, Size: 0x8] 0x783415d080
	TextBlock* TextBlock;//[Offset: 0x270, Size: 0x8] 0x783415d000
	TextBlock* TextBlock;//[Offset: 0x278, Size: 0x8] 0x783415cf80
	FString ErrorMessageText;//[Offset: 0x280, Size: 0x10] 0x783415cf00
	void BndEvt__ReturnToMainMenuButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d9452c0
	void ExecuteUbergraph_WB_ErrorMesagge(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d9453a0

--------------------------------
Class: WB_SearchGame_C.UserWidget.Widget.Visual.Object
	CircularThrobber* CircularThrobber;//[Offset: 0x260, Size: 0x8] 0x7834157f80
	FString ErrorMessageText;//[Offset: 0x268, Size: 0x10] 0x7834157f00

--------------------------------
Class: WB_CantFindAnyGame_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783415cc00
	Button* ReturnToMainMenuButton;//[Offset: 0x268, Size: 0x8] 0x783415cb80
	FString ErrorMessageText;//[Offset: 0x270, Size: 0x10] 0x783415cb00
	void BndEvt__ReturnToMainMenuButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782d944ca0
	void ExecuteUbergraph_WB_CantFindAnyGame(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782d944d80

--------------------------------
Class: WB_EndGameScoresDeathMath_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x7850107d00
	WidgetAnimation* VictoryTextAnim;//[Offset: 0x268, Size: 0x8] 0x7850107c80
	TextBlock* GameModeText;//[Offset: 0x270, Size: 0x8] 0x7850107c00
	HorizontalBox* NextMatchTimer;//[Offset: 0x278, Size: 0x8] 0x7850107b80
	HorizontalBox* QuiButtonBox;//[Offset: 0x280, Size: 0x8] 0x7850107b00
	Button* QuitButton;//[Offset: 0x288, Size: 0x8] 0x7850107a80
	ScrollBox* TeamAPlayers;//[Offset: 0x290, Size: 0x8] 0x7850107a00
	VerticalBox* TeamASlot;//[Offset: 0x298, Size: 0x8] 0x7850107980
	Image* TeamImageA;//[Offset: 0x2a0, Size: 0x8] 0x7850107900
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8] 0x7850107880
	TextBlock* TextBlock;//[Offset: 0x2b0, Size: 0x8] 0x7850107800
	VerticalBox* VictoryScores;//[Offset: 0x2b8, Size: 0x8] 0x7850107780
	TextBlock* VictroyText;//[Offset: 0x2c0, Size: 0x8] 0x7850107700
	bool bRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1] 0x7850107680
	float RefreshTime;//[Offset: 0x2cc, Size: 0x4] 0x7850107600
	FName Winner;//[Offset: 0x2d0, Size: 0x8] 0x7850107580
	float TimeForNextMatch;//[Offset: 0x2d8, Size: 0x4] 0x7850107500
	TimerHandle TimeLeftHandle;//[Offset: 0x2e0, Size: 0x8] 0x7850107480
	FPS_GS_C* GS;//[Offset: 0x2e8, Size: 0x8] 0x7850107400
	FPS_PlayerState_C* PS;//[Offset: 0x2f0, Size: 0x8] 0x7850109480
	BaseCharacterPC_C* PC;//[Offset: 0x2f8, Size: 0x8] 0x7850109400
	float Player Score;//[Offset: 0x300, Size: 0x4] 0x7850109380
	FText Get_DM_WinnerName(bool ___bool_Variable, FPS_DM_GS_C* K2Node_DynamicCast_AsFPS_DM_GS, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x6d94ba8 0x782e2266e0
	void AssingPlayerSlots(out FPS_PlayerState_C*[] PlayerStates, ScrollBox* ScrollBox, int NumberOfSlots, ScrollBox* SB, FPS_PlayerState_C*[] PlayersArray, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerScore_C* CallFunc_Create_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int ___int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PlayerScore_C* K2Node_DynamicCast_AsPlayer_Score, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x782e2267c0
	void FindPos(out FPS_PlayerState_C*[] PlayerStates, FPS_PlayerState_C* CurrentPS, out int Position, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782e2268a0
	void UpdateSemiSortedLists(FPS_PlayerState_C* CurrentPS, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x6d94ba8 0x782e226980
	void IntsertionSort(out FPS_PlayerState_C*[] PlayerStates, out FPS_PlayerState_C*[] SortedPlayersState, FPS_PlayerState_C*[] TempSortedArray, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_FindPos_Position);// 0x6d94ba8 0x782e226a60
	void InitList(FPS_PlayerState_C* CurrentPS, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782e226b40
	FText GetTimeLeftNextMatch(float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x782e226c20
	void SortPlayerArray(out FPS_PlayerState_C*[] Input, out FPS_PlayerState_C*[] Output, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FPS_PlayerState_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x6d94ba8 0x782e226d00
	void Construct();// 0x6d94ba8 0x782e226de0
	void UpdateLists();// 0x6d94ba8 0x782e226ec0
	void WidgetAnimationEvt_VictoryTextAnim_K2Node_WidgetAnimationEvent();// 0x6d94ba8 0x782e226fa0
	void 自定义事件                                                                                     ();// 0x6d94ba8 0x782e227160
	void BndEvt__WB_EndGameScoresDeathMath_QuitButton_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x6d94ba8 0x782e227320
	void ExecuteUbergraph_WB_EndGameScoresDeathMath(int EntryPoint, bool ___bool_Variable, FText ___text_Variable, FText ___text_Variable, UI_RewardCoin_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, BaseCharacterPC_C* K2Node_DynamicCast_AsBase_Character_PC, bool K2Node_DynamicCast_bSuccess, FPS_PlayerState_C* K2Node_DynamicCast_AsFPS_Player_State, bool K2Node_DynamicCast_bSuccess, FPS_PlayerState_C*[] CallFunc_IntsertionSort_SortedPlayersState, FText K2Node_Select_Default, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue);// 0x6d94ba8 0x782e223a40

--------------------------------
Class: BPI_LPSP_Interactor_C.Interface.Object
	void Get Hit Result(out HitResult Result);// 0x6d94ba8 0x783427c2c0
	void Get Type(out byte Type);// 0x6d94ba8 0x783427be60

--------------------------------
Class: BTService_RandomFlag_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x7833f2cc00
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x7833f2cb80
	BP_ConquestCapturePoint_C* Flag;//[Offset: 0xc0, Size: 0x8] 0x7833f2cb00
	BP_ConquestCapturePoint_C*[] PosibleFlagsToCapture;//[Offset: 0xc8, Size: 0x10] 0x782e493e40
	BP_ConquestCapturePoint_C* PossibleFlag;//[Offset: 0xd8, Size: 0x8] 0x7833f2ca00
	void FindClosestFlag(out BP_ConquestCapturePoint_C*[] CapturePoints, Pawn* SelfPawn, out BP_ConquestCapturePoint_C* Flag, Actor* Pawn, float MinDistance, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, BP_ConquestCapturePoint_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_GetDistanceTo_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, BP_ConquestCapturePoint_C* CallFunc_Array_Get_Item);// 0x6d94ba8 0x783427bae0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427bd80
	void ExecuteUbergraph_BTService_RandomFlag(int EntryPoint, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Conquest_GS_C* K2Node_DynamicCast_AsFPS_Conquest_GS, bool K2Node_DynamicCast_bSuccess, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_ConquestCapturePoint_C* CallFunc_FindClosestFlag_Flag, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x6d94ba8 0x783427c020

--------------------------------
Class: BTService_SecureTeamFlag_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x7833f2d780
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x7833f2d700
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427d6e0
	void ExecuteUbergraph_BTService_SecureTeamFlag(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, BP_BaseFlag_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_BaseFlag_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_LPSP_PCH_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x783427d7c0

--------------------------------
Class: BTService_NextLocationFlag_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x7833f2ef00
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x7833f2ee80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427d360
	void ExecuteUbergraph_BTService_NextLocationFlag(int EntryPoint, BP_BaseFlag_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, BP_BaseFlag_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x6d94ba8 0x783427d440

--------------------------------
Class: BTService_FindCarrier_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x7833f2fd80
	BlackboardKeySelector Location;//[Offset: 0x98, Size: 0x28] 0x7833f2fd00
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427cfe0
	void ExecuteUbergraph_BTService_FindCarrier(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_BoolBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x783427d0c0

--------------------------------
Class: BTService_CheckFlagsState_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c0d80
	BlackboardKeySelector TeamFlagTaken;//[Offset: 0x98, Size: 0x28] 0x78350c0d00
	BlackboardKeySelector EnemyFlagTaken;//[Offset: 0xc0, Size: 0x28] 0x78350c0c80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427cc60
	void ExecuteUbergraph_BTService_CheckFlagsState(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, BP_BaseFlag_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_BaseFlag_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue);// 0x6d94ba8 0x783427cd40

--------------------------------
Class: BTService_GetEnemy_DM_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c1980
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x78350c1900
	BP_LPSP_PCH_C* Enemy;//[Offset: 0xc0, Size: 0x8] 0x78350c1880
	BlackboardKeySelector EnemyKey;//[Offset: 0xc8, Size: 0x28] 0x78350c1800
	BP_LPSP_PCH_C*[] PosibleEnemies;//[Offset: 0xf0, Size: 0x10] 0x782e495b00
	void FindClosestEnemy(out BP_LPSP_PCH_C*[] Enemys, Pawn* SelfPawn, out BP_LPSP_PCH_C* Enemy, int CusIndex, float MinDistance, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Abs_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x783427fac0
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427fc80
	void ExecuteUbergraph_BTService_GetEnemy_DM(int EntryPoint, int ___int_Array_Index_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, AIPerceptionComponent* CallFunc_GetComponentByClass_ReturnValue, Actor*[] CallFunc_GetKnownPerceivedActors_OutActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, BP_LPSP_PCH_C* CallFunc_FindClosestEnemy_Enemy, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x783427fd60

--------------------------------
Class: BTService_FindRandomPlayer_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c2900
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x78350c2880
	BP_ConquestCapturePoint_C* Flag;//[Offset: 0xc0, Size: 0x8] 0x78350c2800
	BP_ConquestCapturePoint_C*[] PosibleFlagsToCapture;//[Offset: 0xc8, Size: 0x10] 0x782e4956a0
	void FindPlayers(Pawn* SelfPawn, out BP_LPSP_PCH_C*[] PossibleEnemies, out BP_LPSP_PCH_C*[] Enemies, BP_LPSP_PCH_C*[] EnemiesArray, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x6d94ba8 0x783427f660
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427f820
	void ExecuteUbergraph_BTService_FindRandomPlayer(int EntryPoint, BP_LPSP_PCH_C*[] CallFunc_GetAllActorsOfClass_OutActors, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C*[] CallFunc_FindPlayers_Enemies, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x783427f900

--------------------------------
Class: BTTask_BombInteract_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78350c3c00
	BlackboardKeySelector InteractBombKey;//[Offset: 0xb0, Size: 0x28] 0x78350c3b80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x783427f3c0
	void ExecuteUbergraph_BTTask_BombInteract(int EntryPoint, int ___int_Array_Index_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int ___int_Loop_Counter_Variable, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x783427f4a0

--------------------------------
Class: BTService_BlueprintCheckBomb_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c5080
	BlackboardKeySelector InteractBombKey;//[Offset: 0x98, Size: 0x28] 0x78350c5000
	BlackboardKeySelector LocationKey;//[Offset: 0xc0, Size: 0x28] 0x78350c4f80
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x783427ef60
	void ExecuteUbergraph_BTService_BlueprintCheckBomb(int EntryPoint, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, FPS_Rush_GS_C* K2Node_DynamicCast_AsFPS_Rush_GS, bool K2Node_DynamicCast_bSuccess, BP_Bomb_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanXOR_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6d94ba8 0x783427f040

--------------------------------
Class: TaskReturnAlwaysTrue_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78350c4c80
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x783427eb00
	void ExecuteUbergraph_TaskReturnAlwaysTrue(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn);// 0x6d94ba8 0x783427ebe0

--------------------------------
Class: BTTask_ReloadWeapon_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x78350c4880
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x7831be1c80
	void ExecuteUbergraph_BTTask_ReloadWeapon(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783427e940

--------------------------------
Class: BTService_FindRandomEnemy_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c5b80
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x78350c5300
	BP_ConquestCapturePoint_C* Flag;//[Offset: 0xc0, Size: 0x8] 0x78350c7380
	BP_ConquestCapturePoint_C*[] PosibleFlagsToCapture;//[Offset: 0xc8, Size: 0x10] 0x782e497720
	BP_LPSP_PCH_C*[] PosibleEnemies;//[Offset: 0xd8, Size: 0x10] 0x782e497680
	void FindEnemies(Pawn* SelfPawn, out BP_LPSP_PCH_C*[] PossibleEnemies, out BP_LPSP_PCH_C*[] Enemies, BP_LPSP_PCH_C*[] EnemiesArray, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x7831be0f60
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x7831be1120
	void ExecuteUbergraph_BTService_FindRandomEnemy(int EntryPoint, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C*[] CallFunc_FindEnemies_Enemies, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, FPS_GS_C* K2Node_DynamicCast_AsFPS_GS, bool K2Node_DynamicCast_bSuccess, int CallFunc_RandomIntegerInRange_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, PlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x6d94ba8 0x7831be1200

--------------------------------
Class: BTService_CheckAmmo_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c6880
	BlackboardKeySelector bReload Key;//[Offset: 0x98, Size: 0x28] 0x78350c6800
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x7831be0cc0
	void ExecuteUbergraph_BTService_CheckAmmo(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_Get_Actor_Weapon_self_CastInput, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LPSP_WEP_C* K2Node_DynamicCast_AsBP_LPSP_WEP, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_Is_Out_Of_Ammunition_self_CastInput, bool CallFunc_Is_Out_Of_Ammunition_ReturnValue);// 0x6d94ba8 0x7831be0da0

--------------------------------
Class: BTService_CanShoot_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350c9900
	BlackboardKeySelector CanShootKey;//[Offset: 0x98, Size: 0x28] 0x78350c9880
	BP_LPSP_PCH_C* Enemy;//[Offset: 0xc0, Size: 0x8] 0x78350c9800
	BP_LPSP_PCH_C*[] PosibleEnemies;//[Offset: 0xc8, Size: 0x10] 0x782e4972c0
	BlackboardKeySelector EnemyKey;//[Offset: 0xd8, Size: 0x28] 0x78350c9700
	void FindEnemy(out BP_LPSP_PCH_C*[] CapturePoints, Pawn* SelfPawn, out BP_LPSP_PCH_C* Enemy, Actor* Pawn, float MinDistance, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Abs_ReturnValue, const Actor*[] ___object_Variable, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x6d94ba8 0x7831be0780
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x7831be0940
	void ExecuteUbergraph_BTService_CanShoot(int EntryPoint, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Object* CallFunc_GetBlackboardValueAsObject_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831be0a20

--------------------------------
Class: BTService_BlueprintGetenemy_C.BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x90, Size: 0x8] 0x78350cc080
	BlackboardKeySelector Vectorkey;//[Offset: 0x98, Size: 0x28] 0x78350cc000
	BP_LPSP_PCH_C* Enemy;//[Offset: 0xc0, Size: 0x8] 0x78350cbf80
	BlackboardKeySelector EnemyKey;//[Offset: 0xc8, Size: 0x28] 0x78350cbf00
	BP_LPSP_PCH_C*[] PosibleEnemies;//[Offset: 0xf0, Size: 0x10] 0x782e497040
	void IsEnemyAlive(BP_BaseCharacter_C* Enemy);// 0x6d94ba8 0x7831be0240
	void FindClosestEnemy(out BP_LPSP_PCH_C*[] Enemys, Pawn* SelfPawn, out BP_LPSP_PCH_C* Enemy, float MinDistance, int ___int_Array_Index_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, BP_LPSP_PCH_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x6d94ba8 0x7831be0320
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x6d94ba8 0x7831be04e0
	void ExecuteUbergraph_BTService_BlueprintGetenemy(int EntryPoint, int ___int_Loop_Counter_Variable, int ___int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, float K2Node_Event_DeltaSeconds, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, AIPerceptionComponent* CallFunc_GetComponentByClass_ReturnValue, Actor*[] CallFunc_GetKnownPerceivedActors_OutActors, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Add_ReturnValue, BP_LPSP_PCH_C* CallFunc_FindClosestEnemy_Enemy, bool CallFunc_Array_IsValidIndex_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831be05c0

--------------------------------
Class: BP_LPSP_AN_Grenade_Throw_C.AnimNotify.Object
	FString GetNotifyName();// 0x6d94ba8 0x7831be7320
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783656c1e0

--------------------------------
Class: BPFL_LPSP_Surfaces_C.BlueprintFunctionLibrary.Object
	static void Spawn Surface Details(HitResult Result, DataTableRowHandle Row Handle, Object* __WorldContext, Rotator Rotation, Vector Location, SDetails Details, SSurfaces Surfaces, GameInstance* CallFunc_GetGameInstance_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetSurfaceType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float ___float_Variable, AudioComponent* CallFunc_SpawnSoundAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, int CallFunc_Add_IntInt_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float ___float_Variable, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, Rotator CallFunc_Get_Rotation_From_Settings_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, Rotator CallFunc_Add_Rotators_Value, Vector CallFunc_Conv_FloatToVector_ReturnValue, DecalComponent* CallFunc_SpawnDecalAtLocation_ReturnValue, SParticle CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool ___bool_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, const byte ___byte_Variable, Rotator CallFunc_Get_Rotation_From_Settings_ReturnValue, Rotator CallFunc_Add_Rotators_Value, float CallFunc_RandomFloat_ReturnValue, byte CallFunc_GetSurfaceType_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SDetails CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float ___float_Variable, byte ___byte_Variable, float ___float_Variable, float K2Node_Select_Default, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_Random_Float_In_Vector_Range_ReturnValue, byte CallFunc_GetSurfaceType_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, const byte K2Node_Select_Default, SDetails CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SSurfaces CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x6d94ba8 0x7831be6d00
	static Rotator Get Rotation From Settings(SSettings Settings, Object* __WorldContext, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue);// 0x6d94ba8 0x783656c100

--------------------------------
Class: SDetails
	SDecal Decal_2_02AA4E314A6A97AA5A95EB9351269E4A;//[Offset: 0x0, Size: 0x48] 0x783688a180
	SParticle[] Particles_6_C5C3192344C0D6B5CFD6B395581FD2C9;//[Offset: 0x48, Size: 0x10] 0x78364884e0

--------------------------------
Class: SDecal
	MaterialInstance* DecalMaterial_18_586F932D48F36A9090D58FAEFE4EF56C;//[Offset: 0x0, Size: 0x8] 0x783688a400
	float FadeScreenSize_5_DCBCC50F44E2E30260C7BC890A3AAADC;//[Offset: 0x8, Size: 0x4] 0x783688a380
	SSettings Settings_8_62002E394241A15B664468924A181A10;//[Offset: 0xc, Size: 0x18] 0x783688a300
	SFade FadeIn_11_489D45804FC17D5D949E47BA2B6C52A2;//[Offset: 0x24, Size: 0x10] 0x783688a280
	SFade FadeOut_13_5B17B4B7454386F102502CB736F327B2;//[Offset: 0x34, Size: 0x10] 0x783688a200

--------------------------------
Class: SSettings
	bool RandomizeRoll_1_FDB9A7844CBBFAD7E0982691F299AD9D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x7836888580
	Vector2D Scale_9_DDA198B34FEEEDCD70E50EAD84DDE056;//[Offset: 0x4, Size: 0x8] 0x7836888500
	Rotator RotationOffset_8_ED01CDC540D66B5DA2A9759ACC1F03BF;//[Offset: 0xc, Size: 0xc] 0x7836888480

--------------------------------
Class: SFade
	Vector2D Delay_4_1C3248944FDEC615BD1C14921AAD8EE3;//[Offset: 0x0, Size: 0x8] 0x7836888680
	Vector2D Duration_5_EDEDBFC743FB4517D0CA9C9EBF3DCAD5;//[Offset: 0x8, Size: 0x8] 0x7836888600

--------------------------------
Class: SParticle
	ParticleSystem* Template_3_7096CA9944DDD48B9DD89AA58D69AE9C;//[Offset: 0x0, Size: 0x8] 0x783688a500
	SSettings Settings_6_CF190C29446B3FE6C30C67B94753A620;//[Offset: 0x8, Size: 0x18] 0x783688a480

--------------------------------
Class: SSurfaces
	SoundCue* SoundCue_13_E24D72D340EEA5B536674AB6D80A96C8;//[Offset: 0x0, Size: 0x8] 0x783688a080
	<byte,SDetails> Details_9_7F6258D44706A6D1264F25B0CD63EE20;//[Offset: 0x8, Size: 0x50] 0x783d6aee00

--------------------------------
Class: BP_LPSP_AN_Melee_C.AnimNotify.Object
	float Impulse;//[Offset: 0x38, Size: 0x4] 0x78350cd080
	float Range;//[Offset: 0x3c, Size: 0x4] 0x78350cd000
	float Trace Radius;//[Offset: 0x40, Size: 0x4] 0x78350ccf80
	DataTableRowHandle Surfaces Handle;//[Offset: 0x48, Size: 0x10] 0x78350ccf00
	float Base Damage;//[Offset: 0x58, Size: 0x4] 0x78350cce80
	class DamageType* Damage Type Class;//[Offset: 0x60, Size: 0x8] 0x782e496820
	FString GetNotifyName();// 0x6d94ba8 0x7831be6a60
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, HitResult Hit, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsSimulatingPhysics_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, PlayerController* CallFunc_GetPlayerController_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, const Actor*[] K2Node_MakeArray_Array, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_SphereTraceSingle_OutHit, bool CallFunc_SphereTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_ApplyPointDamage_ReturnValue);// 0x6d94ba8 0x7831be6c20

--------------------------------
Class: BP_LPSP_AN_Knife_Visibility_C.AnimNotify.Object
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x78350cfb00
	FString GetNotifyName();// 0x6d94ba8 0x7831be67c0
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783656cd40

--------------------------------
Class: FireShake1_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: RunShake_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: IUTCWidget_C.Interface.Object
	void Set Size(Vector2D Size);// 0x6d94ba8 0x78e3e20e80
	void On Viewport Size Changed(Vector2D Previous Size, Vector2D Updated Size);// 0x6d94ba8 0x78e3e20f60
	void Set Max Size(float Value);// 0x6d94ba8 0x78e3e21040
	void Get Max Size(out float Value);// 0x6d94ba8 0x78e3e21120
	void On Y Axis Changed(float Value);// 0x6d94ba8 0x78e3e21200
	void On X Axis Changed(float Value);// 0x6d94ba8 0x78e3e212e0
	void On Axes Changed(float X Axis Value, float Y Axis Value, Vector Direction);// 0x6d94ba8 0x78e3e213c0
	void On Joystick Released(Vector Location);// 0x6d94ba8 0x78e3e214a0
	void On Joystick Pressed(Vector Location);// 0x6d94ba8 0x78e3e21580
	void On Joystick Clamped();// 0x6d94ba8 0x78e3e21660
	void On Joystick Location Changed(Vector Location);// 0x6d94ba8 0x78e3e21820
	void On Picker Location Changed(Vector Location);// 0x6d94ba8 0x78e3e219e0

--------------------------------
Class: iInteractive_C.Interface.Object
	void EndInteract();// 0x6d94ba8 0x78e3e2bca0
	void BeginInteract(Actor* Instigator, out bool Failure);// 0x6d94ba8 0x78e3e2bd80
	void EndHover();// 0x6d94ba8 0x78e3e2be60
	void BeginHover();// 0x6d94ba8 0x78e3e2bf40
	void Interact(Actor* Instigator);// 0x6d94ba8 0x78e3e2c020

--------------------------------
Class: ABP_LPSP_WEP_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78360f8b00
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78360f8a80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x2f8, Size: 0xc8] 0x78360f8a00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x3c0, Size: 0x80] 0x78360f8980
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x440, Size: 0xa0] 0x78360f8900
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x4e0, Size: 0xa0] 0x78360f8880
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x580, Size: 0x48] 0x78360f8800
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x5c8, Size: 0x48] 0x78360f8780
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x610, Size: 0x48] 0x78360f8700
	bool Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1] 0x78360f8680
	AnimSequenceBase* Empty Ammo Pose;//[Offset: 0x660, Size: 0x8] 0x78360f8600
	float Blend Time Run In;//[Offset: 0x668, Size: 0x4] 0x78360f8580
	float Blend Time Run Out;//[Offset: 0x66c, Size: 0x4] 0x78360f8500
	bool Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1] 0x78360f8480
	bool Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1] 0x78360fa500
	void AnimGraph(out PoseLink AnimGraph);// 0x6d94ba8 0x7831b78d60
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x6d94ba8 0x7831b79000
	void ExecuteUbergraph_ABP_LPSP_WEP(int EntryPoint, Actor* CallFunc_GetOwningActor_ReturnValue, float K2Node_Event_DeltaTimeX, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Slide_Racked_Visually_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_Is_Aiming_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Running_ReturnValue);// 0x6d94ba8 0x7831b75800

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4] 0x787595e700

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10] 0x78759dab00
	FName Name;//[Offset: 0x20, Size: 0x8] 0x78759dab80
	FName Group;//[Offset: 0x28, Size: 0x8] 0x78759dac00

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x10, Size: 0x10] 0x78759d0500
	PoseLink Additive;//[Offset: 0x20, Size: 0x10] 0x78759d0580
	float Alpha;//[Offset: 0x30, Size: 0x4] 0x78759d0600
	InputScaleBias AlphaScaleBias;//[Offset: 0x34, Size: 0x8] 0x78759d0680
	int LODThreshold;//[Offset: 0x3c, Size: 0x4] 0x78759d0700
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48] 0x78759d0780
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8] 0x78759d0800
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30] 0x78759d0880
	enum AlphaInputType;//[Offset: 0xc4, Size: 0x1] 0x787800e340
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1] 0x78759d0980

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 0x4] 0x787595c980
	float Bias;//[Offset: 0x4, Size: 0x4] 0x787595ca00

--------------------------------
Class: InputAlphaBoolBlend
	float BlendInTime;//[Offset: 0x0, Size: 0x4] 0x787595cb00
	float BlendOutTime;//[Offset: 0x4, Size: 0x4] 0x787595cb80
	enum BlendOption;//[Offset: 0x8, Size: 0x1] 0x787800a380
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1] 0x787595cc80
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 0x8] 0x787595cd00
	AlphaBlend AlphaBlend;//[Offset: 0x18, Size: 0x30] 0x787595cf00

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x787595d080
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1] 0x787595d100
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1] 0x787595d180
	InputRange InRange;//[Offset: 0x4, Size: 0x8] 0x787595d200
	InputRange OutRange;//[Offset: 0xc, Size: 0x8] 0x787595d380
	float Scale;//[Offset: 0x14, Size: 0x4] 0x787595d400
	float Bias;//[Offset: 0x18, Size: 0x4] 0x787595d480
	float ClampMin;//[Offset: 0x1c, Size: 0x4] 0x787595d500
	float ClampMax;//[Offset: 0x20, Size: 0x4] 0x787595d580
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4] 0x787595d600
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4] 0x787595d680

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4] 0x787595d280
	float Max;//[Offset: 0x4, Size: 0x4] 0x787595d300

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x38, Size: 0x8] 0x7875a4ca80
	float PlayRateBasis;//[Offset: 0x40, Size: 0x4] 0x7875a4cb00
	float PlayRate;//[Offset: 0x44, Size: 0x4] 0x7875a4cb80
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x48, Size: 0x30] 0x7875a4cc00
	float StartPosition;//[Offset: 0x78, Size: 0x4] 0x7875a4cc80
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1] 0x7875a4cd00

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	FName GroupName;//[Offset: 0x10, Size: 0x8] 0x78759ce380
	byte GroupRole;//[Offset: 0x18, Size: 0x1] 0x78759ce400
	enum GroupScope;//[Offset: 0x19, Size: 0x1] 0x787800ec00
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1] 0x78759ce500
	float BlendWeight;//[Offset: 0x1c, Size: 0x4] 0x78759ce580
	float InternalTimeAccumulator;//[Offset: 0x20, Size: 0x4] 0x78759ce600

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1] 0x78759d1a00

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10] 0x787800fba0
	float[] BlendTime;//[Offset: 0x20, Size: 0x10] 0x787800fc40
	enum TransitionType;//[Offset: 0x30, Size: 0x1] 0x787800fce0
	enum BlendType;//[Offset: 0x31, Size: 0x1] 0x787800fd80
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1] 0x78759d1c80
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8] 0x78759d1d00
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8] 0x78759d1d80

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10] 0x78759d9880
	FName SlotName;//[Offset: 0x20, Size: 0x8] 0x78759d9900
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1] 0x78759d9980

--------------------------------
Class: ABP_LPSP_WEP_AR_02_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_AR_03_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_GL_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Handgun_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Handgun_02_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Handgun_03_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Handgun_04_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_RL_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Shotgun_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_SMG_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_SMG_02_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_SMG_03_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_SMG_04_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_SMG_05_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Sniper_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Sniper_02_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: ABP_LPSP_WEP_Sniper_03_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: BPFL_IG_Curves_C.BlueprintFunctionLibrary.Object
	static void Set Up Curve Vector(out TimelineComponent* Timeline Component, SCurveVector Curve, Object* __WorldContext);// 0x6d94ba8 0x7831200e80
	static void Set Up Curve Float(out TimelineComponent* Timeline Component, SCurveFloat Curve, Object* __WorldContext);// 0x6d94ba8 0x7831200be0

--------------------------------
Class: BPFL_IG_Abilities_C.BlueprintFunctionLibrary.Object
	static void Remove Gameplay Tag Container(out GameplayTagContainer A, GameplayTagContainer B, Object* __WorldContext, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameplayTag[] CallFunc_BreakGameplayTagContainer_GameplayTags, GameplayTag CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_RemoveGameplayTag_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x7831200860
	static void Stop Game Ability(SGameAbility Ability, out GameplayTagContainer Container, bool Add Removed, Object* __WorldContext);// 0x6d94ba8 0x7831200940
	static void Start Game Ability(SGameAbility Ability, out GameplayTagContainer Container, Object* __WorldContext);// 0x6d94ba8 0x7831200a20
	static void Try Start Game Ability(SGameAbility Ability, out GameplayTagContainer Container, Object* __WorldContext, out bool Value, bool CallFunc_Can_Start_Game_Ability_Value);// 0x6d94ba8 0x7831200b00
	static void Can Start Game Ability(SGameAbility Ability, GameplayTagContainer Container, Object* __WorldContext, out bool Value, bool CallFunc_HasAnyTags_ReturnValue, bool CallFunc_HasAllTags_ReturnValue);// 0x6d94ba8 0x7831200cc0

--------------------------------
Class: BP_LPSP_CS_CH_Land_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: BPI_LPSP_Interactor_Target_C.Interface.Object
	void Can Trace Interaction(out bool Value);// 0x6d94ba8 0x7831203340
	void Get Interact Vectors(out Vector Location, out Vector Forward);// 0x6d94ba8 0x78312037a0

--------------------------------
Class: BPI_LPSP_Controller_C.Interface.Object
	void Is Using Gamepad(out bool Value);// 0x6d94ba8 0x78312030a0
	void Get Key Pressed(out Key Value);// 0x6d94ba8 0x78312035e0

--------------------------------
Class: BPI_LPSP_Camera_Manager_Target_C.Interface.Object
	void Get Clamps(out bool Use Default, out SClamps Value);// 0x6d94ba8 0x7831203420

--------------------------------
Class: BPI_LPSP_Aim_Assister_Target_C.Interface.Object
	void Get Trace Parameters(out Vector Location, out Vector Direction);// 0x6d94ba8 0x7831202c40
	void Is Using Gamepad(out bool Value);// 0x6d94ba8 0x7831203260

--------------------------------
Class: ImpactShake_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: UE4_SK_Manequin_AnimBP_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x7836959f00
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x7836959e80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f8, Size: 0x28] 0x7836959e00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x320, Size: 0x28] 0x7836959d80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x348, Size: 0x28] 0x7836959d00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x370, Size: 0x28] 0x7836959c80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x398, Size: 0x28] 0x7836959c00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3c0, Size: 0x28] 0x7836959b80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3e8, Size: 0x28] 0x7836959b00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x410, Size: 0x28] 0x7836959a80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x438, Size: 0x28] 0x7836959a00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x460, Size: 0x28] 0x7836959980
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x488, Size: 0x28] 0x7836959900
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4b0, Size: 0x28] 0x7836959880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4d8, Size: 0x28] 0x7836959800
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x500, Size: 0x28] 0x7836959780
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x528, Size: 0x28] 0x7836959700
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x550, Size: 0xe8] 0x7836959680
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x638, Size: 0x30] 0x7836959600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x668, Size: 0x80] 0x7836959580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x6e8, Size: 0x30] 0x7836959500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x718, Size: 0x80] 0x783695b580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x798, Size: 0x30] 0x783695b500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x7c8, Size: 0x80] 0x783695b480
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x848, Size: 0xa0] 0x783695b400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8e8, Size: 0x80] 0x783695b380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x968, Size: 0x30] 0x783695b300
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0x998, Size: 0xe8] 0x783695b280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xa80, Size: 0x30] 0x783695b200
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xab0, Size: 0xe8] 0x783695b180
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0xb98, Size: 0xa0] 0x783695b100
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xc38, Size: 0x80] 0x783695b080
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0xcb8, Size: 0xc0] 0x783695b000
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xd78, Size: 0xe8] 0x783695af80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xe60, Size: 0x30] 0x783695af00
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xe90, Size: 0xe8] 0x783695ae80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xf78, Size: 0x30] 0x783695ae00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xfa8, Size: 0xb0] 0x783695ad80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x1058, Size: 0x158] 0x783695ad00
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x11b0, Size: 0xc0] 0x783695ac80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x1270, Size: 0x158] 0x783695ac00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x13c8, Size: 0x158] 0x783695ab80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1520, Size: 0x28] 0x783695ab00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1548, Size: 0x28] 0x783695aa80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x1570, Size: 0x48] 0x783695aa00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x15b8, Size: 0x28] 0x783695a980
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x15e0, Size: 0x28] 0x783695a900
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1608, Size: 0x28] 0x783695a880
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x1630, Size: 0xa0] 0x783695a800
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x16d0, Size: 0x28] 0x783695a780
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x16f8, Size: 0x190] 0x783695a700
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace;//[Offset: 0x1888, Size: 0x190] 0x783695a680
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x1a18, Size: 0x158] 0x783695a600
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1b70, Size: 0x28] 0x783695a580
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x1b98, Size: 0xa0] 0x783695c600
	float Speed;//[Offset: 0x1c38, Size: 0x4] 0x783695c580
	float Direction;//[Offset: 0x1c3c, Size: 0x4] 0x783695c500
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c40, Size: 0x1] 0x783695c480
	bool bCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c41, Size: 0x1] 0x783695c400
	float AimPitch;//[Offset: 0x1c44, Size: 0x4] 0x783695c380
	bool bReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c48, Size: 0x1] 0x783695c300
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c49, Size: 0x1] 0x783695c280
	Character* Pawn;//[Offset: 0x1c50, Size: 0x8] 0x783695c200
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c58, Size: 0x1] 0x783695c180
	float TargetAngle;//[Offset: 0x1c5c, Size: 0x4] 0x783695c100
	float Delta;//[Offset: 0x1c60, Size: 0x4] 0x783695c080
	byte EquipedWeapon;//[Offset: 0x1c64, Size: 0x1] 0x783695c000
	BP_BaseCharacter_C* As BP Base Character;//[Offset: 0x1c68, Size: 0x8] 0x783695bf80
	void AnimGraph(out PoseLink AnimGraph);// 0x6d94ba8 0x783120bd80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_UE4_SK_Manequin_AnimBP_AnimGraphNode_BlendListByBool_664362214CACF9F72A07958C3EE46732();// 0x6d94ba8 0x783120be60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_UE4_SK_Manequin_AnimBP_AnimGraphNode_TransitionResult_5D442D174C07EC493CA92AA655702845();// 0x6d94ba8 0x783120bf40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_UE4_SK_Manequin_AnimBP_AnimGraphNode_TransitionResult_3BCA6ED4405B3A92F07C35B7FE0C9980();// 0x6d94ba8 0x783120c020
	void EvaluateGraphExposedInputs_ExecuteUbergraph_UE4_SK_Manequin_AnimBP_AnimGraphNode_TransitionResult_0DEE4FD74165CC9C3A2386BE700C32AE();// 0x6d94ba8 0x783120c100
	void EvaluateGraphExposedInputs_ExecuteUbergraph_UE4_SK_Manequin_AnimBP_AnimGraphNode_TransitionResult_2490B8B64E93975FBFEF328B22D194C2();// 0x6d94ba8 0x783120c1e0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x6d94ba8 0x783120c3a0
	void BlueprintInitializeAnimation();// 0x6d94ba8 0x783120c560
	void ExecuteUbergraph_UE4_SK_Manequin_AnimBP(int EntryPoint, float CallFunc_GetInstanceAssetPlayerTimeFromEnd_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetInstanceAssetPlayerTimeFromEnd_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_GetInstanceAssetPlayerTimeFromEnd_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float K2Node_Event_DeltaTimeX, bool CallFunc_BooleanAND_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Aiming_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Running_ReturnValue, float CallFunc_GetInstanceAssetPlayerTimeFromEnd_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_GetBaseAimRotation_ReturnValue, float CallFunc_NormalizeAxis_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_NormalizeAxis_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PawnMovementComponent* CallFunc_GetMovementComponent_ReturnValue, bool CallFunc_IsFalling_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_CalculateDirection_ReturnValue);// 0x6d94ba8 0x783120c640

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1] 0x7875a4e700

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x34, Size: 0x4] 0x78759cdf00
	float Y;//[Offset: 0x38, Size: 0x4] 0x78759cdf80
	float Z;//[Offset: 0x3c, Size: 0x4] 0x78759ce000
	float PlayRate;//[Offset: 0x40, Size: 0x4] 0x78759ce080
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78759ce100
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78759ce180
	float StartPosition;//[Offset: 0x48, Size: 0x4] 0x78759ce200
	BlendSpaceBase* BlendSpace;//[Offset: 0x50, Size: 0x8] 0x78759ce280
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xe0, Size: 0x8] 0x78759ce300

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x10, Size: 0x10] 0x78759d4a00
	PoseLink[] BlendPoses;//[Offset: 0x20, Size: 0x10] 0x78759e0f60
	InputBlendPose[] LayerSetup;//[Offset: 0x30, Size: 0x10] 0x78759e10a0
	float[] BlendWeights;//[Offset: 0x40, Size: 0x10] 0x78759e1140
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1] 0x78759d4d80
	bool bMeshSpaceScaleBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1] 0x78759d4e00
	byte CurveBlendOption;//[Offset: 0x52, Size: 0x1] 0x78759d4e80
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1] 0x78759d4f00
	int LODThreshold;//[Offset: 0x58, Size: 0x4] 0x78759d4f80
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x60, Size: 0x10] 0x78759e11e0
	Guid SkeletonGuid;//[Offset: 0x70, Size: 0x10] 0x78759d5180
	Guid VirtualBoneGuid;//[Offset: 0x80, Size: 0x10] 0x78759d5200

--------------------------------
Class: PerBoneBlendWeight
	int SourceIndex;//[Offset: 0x0, Size: 0x4] 0x78759d5000
	float BlendWeight;//[Offset: 0x4, Size: 0x4] 0x78759d5080

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4] 0x7875a4c880
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4] 0x7875a4c900
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1] 0x7875a4c980
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1] 0x7875a4ca00

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink Pose;//[Offset: 0x10, Size: 0x10] 0x7875a4cd80
	FName CachePoseName;//[Offset: 0x20, Size: 0x8] 0x7875a4ce00

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x10, Size: 0x10] 0x7875a4e600
	FName CachePoseName;//[Offset: 0x20, Size: 0x8] 0x7875a4e680

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0xe8, Size: 0x10] 0x78759da100
	int LODThreshold;//[Offset: 0xf8, Size: 0x4] 0x78759da180
	float Alpha;//[Offset: 0xfc, Size: 0x4] 0x78759da200
	InputScaleBias AlphaScaleBias;//[Offset: 0x100, Size: 0x8] 0x78759da280
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x108, Size: 0x48] 0x78759da300
	FName AlphaCurveName;//[Offset: 0x150, Size: 0x8] 0x78759da380
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x158, Size: 0x30] 0x78759da400
	enum AlphaInputType;//[Offset: 0x18c, Size: 0x1] 0x78759e2900
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 0x1] 0x78759da500

--------------------------------
Class: BPFL_IG_Conversions_C.BlueprintFunctionLibrary.Object
	static void Sequence To Montage(AnimSequenceBase* Sequence, Object* __WorldContext, out AnimMontage* Montage, AnimMontage* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831361580

--------------------------------
Class: BP_LPSP_AN_Slide_Reset_Visual_C.AnimNotify.Object
	FString GetNotifyName();// 0x6d94ba8 0x7831360320
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831360400

--------------------------------
Class: BP_LPSP_AN_Slide_Reset_C.AnimNotify.Object
	FString GetNotifyName();// 0x6d94ba8 0x7831363880
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x78376cd440

--------------------------------
Class: BP_LPSP_AN_Magazine_Hidden_C.AnimNotify.Object
	bool Hidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7830f30180
	FString GetNotifyName();// 0x6d94ba8 0x7831363500
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Actor* Actor Weapon, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue);// 0x6d94ba8 0x78313635e0

--------------------------------
Class: BP_LPSP_AN_Bolt_C.AnimNotify.Object
	FString GetNotifyName();// 0x6d94ba8 0x7831362b60
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x7831362c40

--------------------------------
Class: BP_LPSP_AN_Tags_Update_C.AnimNotify.Object
	GameplayTagContainer Tags Added;//[Offset: 0x38, Size: 0x20] 0x7830f31280
	GameplayTagContainer Tags Removed;//[Offset: 0x58, Size: 0x20] 0x7830f31200
	FString GetNotifyName();// 0x6d94ba8 0x7831362700
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, GameplayTagContainer Ability Tags, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameplayTagContainer CallFunc_Get_Ability_Tags_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameplayTag[] CallFunc_BreakGameplayTagContainer_GameplayTags, GameplayTag[] CallFunc_BreakGameplayTagContainer_GameplayTags, GameplayTag CallFunc_Array_Get_Item, GameplayTag CallFunc_Array_Get_Item, bool CallFunc_RemoveGameplayTag_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x7831362380

--------------------------------
Class: BP_LPSP_AN_Ammunition_Update_C.AnimNotify.Object
	bool Fill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7836880f00
	int Amount;//[Offset: 0x3c, Size: 0x4] 0x7836880e80
	FString GetNotifyName();// 0x6d94ba8 0x7831362460
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783cc2be60

--------------------------------
Class: BP_LPSP_AN_Bone_Hide_C.AnimNotify.Object
	bool Hidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7836881f80
	FName Bone Name;//[Offset: 0x3c, Size: 0x8] 0x7836881f00
	FString GetNotifyName();// 0x6d94ba8 0x783cc25c60
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x6d94ba8 0x7831366b40

--------------------------------
Class: BP_LPSP_AN_Ammunition_Visual_Reset_C.AnimNotify.Object
	FString GetNotifyName();// 0x6d94ba8 0x783136fc80
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x783136fd60

--------------------------------
Class: BP_LPSP_AN_Magazine_Hidden_Visually_C.AnimNotify.Object
	bool Hidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7836882b80
	FString GetNotifyName();// 0x6d94ba8 0x783136f580
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Actor* Actor Weapon, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue);// 0x6d94ba8 0x783136f740

--------------------------------
Class: BP_LPSP_AN_Casing_C.AnimNotify.Object
	bool Randomize Initial Rotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7836882280
	float Offset;//[Offset: 0x3c, Size: 0x4] 0x7836882200
	float Impulse Multiplier;//[Offset: 0x40, Size: 0x4] 0x7836882180
	FString GetNotifyName();// 0x6d94ba8 0x78316d1ac0
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, Actor* CallFunc_GetOwner_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x78316d1ba0

--------------------------------
Class: BPI_ALPW_WEP_C.Interface.Object
	AnimSequence* Get Third Person Sequence Loop Weapon Jog();// 0x6d94ba8 0x78316d3500
	AnimSequence* Get Third Person Sequence Loop Weapon Sprint Impulse();// 0x6d94ba8 0x78316d35e0
	AnimSequence* Get Third Person Sequence Loop Weapon Sprint();// 0x6d94ba8 0x78316d36c0
	AnimSequence* Get Third Person Sequence Pose Crouching Unholstered();// 0x6d94ba8 0x78316d37a0
	AnimSequence* Get Third Person Sequence Pose Crouching Holstered();// 0x6d94ba8 0x78316d3880
	AnimSequence* Get Third Person Sequence Pose Standing Unholstered();// 0x6d94ba8 0x78316d0080
	AnimSequence* Get Third Person Sequence Pose Standing Holstered();// 0x6d94ba8 0x78316d0160
	FName Get Name Socket Third Person();// 0x6d94ba8 0x78316d0240
	AnimMontage* Get Third Person Montage Character Inspect();// 0x6d94ba8 0x78316d0320
	AnimMontage* Get Third Person Montage Character Reload Empty();// 0x6d94ba8 0x78316d0400
	AnimMontage* Get Third Person Montage Character Reload();// 0x6d94ba8 0x78316d04e0
	AnimMontage* Get Third Person Montage Character Fire();// 0x6d94ba8 0x78316d05c0
	AnimMontage* Get First Person Montage Character Inspect();// 0x6d94ba8 0x78316d06a0
	AnimMontage* Get First Person Montage Character Reload Empty();// 0x6d94ba8 0x78316d0780
	AnimMontage* Get First Person Montage Character Reload();// 0x6d94ba8 0x78316d0860
	AnimMontage* Get First Person Montage Character Fire();// 0x6d94ba8 0x78316d0940
	AnimMontage* Get First Person Montage Character Unholster();// 0x6d94ba8 0x78316d0a20
	AnimMontage* Get First Person Montage Character Holster();// 0x6d94ba8 0x78316d0b00
	AnimSequence* Get First Person Sequence Loop Run();// 0x6d94ba8 0x78316d0be0
	AnimSequence* Get First Person Sequence Pose Aim();// 0x6d94ba8 0x78316d0cc0
	AnimSequence* Get First Person Sequence Pose Idle();// 0x6d94ba8 0x78316d0da0
	Rotator Get Offset Action Rotation();// 0x6d94ba8 0x78316d0e80
	Vector Get Offset Action Location();// 0x6d94ba8 0x78316d0f60
	float Get Rate Of Fire();// 0x6d94ba8 0x78316d1040
	StaticMeshComponent* Get Mesh Component Magazine();// 0x6d94ba8 0x78316d1120
	SkeletalMeshComponent* Get Mesh Component Weapon();// 0x6d94ba8 0x78316d1200
	void On Randomize Skin();// 0x6d94ba8 0x78316d12e0
	void On Set Attachments Scale(float Scale);// 0x6d94ba8 0x78316d13c0
	void On Randomize Attachments();// 0x6d94ba8 0x78316d14a0
	void On Reload Empty(bool First Person);// 0x6d94ba8 0x78316d1580
	void On Reload(bool First Person);// 0x6d94ba8 0x78316d1820
	void On Fire(bool First Person);// 0x6d94ba8 0x78316d1660

--------------------------------
Class: BP_ALPW_Magazine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 0x8] 0x7836884e80
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8] 0x7836884e00
	StaticMeshComponent* Mesh Magazine;//[Offset: 0x230, Size: 0x8] 0x7836884d80
	float Destroy Delay;//[Offset: 0x238, Size: 0x4] 0x7836884d00
	void ReceiveBeginPlay();// 0x6d94ba8 0x78316d30a0
	void ExecuteUbergraph_BP_ALPW_Magazine(int EntryPoint);// 0x6d94ba8 0x78316d3260

--------------------------------
Class: BP_ALPW_AN_Magazine_Drop_C.AnimNotify.Object
	bool Drop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1] 0x7836886080
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, StaticMeshComponent* Mesh Component Magazine, BP_ALPW_Magazine_C* Mesh Magazine, Actor* Actor Weapon, int ___int_Variable, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_GetNumMaterials_ReturnValue, BP_ALPW_Magazine_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Animated_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetStaticMesh_ReturnValue, StaticMeshComponent* CallFunc_Get_Mesh_Component_Magazine_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue);// 0x6d94ba8 0x783cc21d60
	FString GetNotifyName();// 0x6d94ba8 0x78316d2000

--------------------------------
Class: WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	float Target Size;//[Offset: 0x260, Size: 0x4] 0x7836885680
	FloatSpringState Spring State;//[Offset: 0x264, Size: 0x8] 0x7836885600
	float Current Size;//[Offset: 0x26c, Size: 0x4] 0x7836885580
	float Current Visibility;//[Offset: 0x270, Size: 0x4] 0x7836885500
	float Target Visibility;//[Offset: 0x274, Size: 0x4] 0x7836885480
	Widget* Panel Widget;//[Offset: 0x278, Size: 0x8] 0x7836885400
	float Default Size;//[Offset: 0x280, Size: 0x4] 0x7836885380
	float Minimum Size;//[Offset: 0x284, Size: 0x4] 0x7836885300
	float Maximum Size;//[Offset: 0x288, Size: 0x4] 0x7836887380
	float Size Multiplier Falling;//[Offset: 0x28c, Size: 0x4] 0x7836887300
	float Size Multiplier Running;//[Offset: 0x290, Size: 0x4] 0x7836887280
	float Size Multiplier Lowered;//[Offset: 0x294, Size: 0x4] 0x7836887200
	float Size Multiplier Crouching;//[Offset: 0x298, Size: 0x4] 0x7836887180
	float Interp Speed Size;//[Offset: 0x29c, Size: 0x4] 0x7836887100
	float Interp Speed Visibility;//[Offset: 0x2a0, Size: 0x4] 0x7836887080
	float Visibility Running;//[Offset: 0x2a4, Size: 0x4] 0x7836887000
	float Visibility Lowered;//[Offset: 0x2a8, Size: 0x4] 0x7836886f80
	float Visibility Holstered;//[Offset: 0x2ac, Size: 0x4] 0x7836886f00
	bool Lowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1] 0x7836886e80
	bool Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1] 0x7836886e00
	bool Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1] 0x7836886d80
	byte Holster State;//[Offset: 0x2b3, Size: 0x1] 0x7836886d00
	void Update Panel(float Spread Multiplier, SWeaponSettings Weapon Settings, Actor* Actor Weapon, enum Desired Visibility, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, byte CallFunc_Get_Holster_State_State, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Aiming_ReturnValue, bool CallFunc_IsValid_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, float ___float_Variable, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Running_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Lowered_Value, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float ___float_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, byte ___byte_Variable, bool CallFunc_IsFalling_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_SelectFloat_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, float CallFunc_Get_Spread_Multiplier_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float ___float_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, SWeaponSettings CallFunc_Get_Weapon_Settings_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_FInterpTo_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Crosshair, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, enum CallFunc_Should_Show_Crosshair_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, byte ___byte_Variable, Character* CallFunc_GetPlayerCharacter_ReturnValue, float K2Node_Select_Default, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_SelectFloat_ReturnValue, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FInterpTo_ReturnValue);// 0x6d94ba8 0x787ccdee80
	void Set Panel(Widget* Panel);// 0x6d94ba8 0x78316def60

--------------------------------
Class: WBP_LPSP_Dot_C.WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8] 0x7836886b80
	CanvasPanel* DotPanel;//[Offset: 0x2c0, Size: 0x8] 0x7836886b00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x78316df200
	void OnInitialized();// 0x6d94ba8 0x787ccde940
	void ExecuteUbergraph_WBP_LPSP_Dot(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x6d94ba8 0x78316df4a0

--------------------------------
Class: BPI_LPSP_Crosshair_C.Interface.Object
	enum Should Show Crosshair();// 0x6d94ba8 0x78316debe0

--------------------------------
Class: WBP_LPSP_Crosshair_SciFi_C.UserWidget.Widget.Visual.Object
	Image* CenterImage;//[Offset: 0x260, Size: 0x8] 0x7836886980
	enum Get Slate Visibility(Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Crosshair, bool K2Node_DynamicCast_bSuccess, Character* CallFunc_GetPlayerCharacter_ReturnValue, enum CallFunc_Should_Show_Crosshair_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x78316de940

--------------------------------
Class: WBP_LPSP_Crosshair_Classic_02_C.WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8] 0x7836888080
	WBP_LPSP_Dot_C* Dot;//[Offset: 0x2c0, Size: 0x8] 0x7836888000
	CanvasPanel* PanelCrosshair;//[Offset: 0x2c8, Size: 0x8] 0x7836887f80
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x78307a1660
	void OnInitialized();// 0x6d94ba8 0x78307a1820
	void ExecuteUbergraph_WBP_LPSP_Crosshair_Classic_02(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x6d94ba8 0x78307a19e0

--------------------------------
Class: WBP_LPSP_Crosshair_Classic_02_01_C.WBP_LPSP_Crosshair_Classic_02_C.WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 0x8] 0x7836887d80
	void OnInitialized();// 0x6d94ba8 0x78307a13c0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x78307a14a0
	void ExecuteUbergraph_WBP_LPSP_Crosshair_Classic_02_01(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x6d94ba8 0x78307a1580

--------------------------------
Class: WBP_LPSP_Crosshair_Classic_01_C.WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8] 0x7836887b80
	WBP_LPSP_Dot_C* Dot;//[Offset: 0x2c0, Size: 0x8] 0x7836887b00
	CanvasPanel* PanelCrosshair;//[Offset: 0x2c8, Size: 0x8] 0x7836887a80
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x78307a0e80
	void OnInitialized();// 0x6d94ba8 0x78307a1040
	void ExecuteUbergraph_WBP_LPSP_Crosshair_Classic_01(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x6d94ba8 0x78307a1200

--------------------------------
Class: BP_LPSP_CS_PROJ_RL_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: BP_LPSP_CS_Explosive_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: WBP_LPSP_Grenade_C.UserWidget.Widget.Visual.Object

--------------------------------
Class: BP_LPSP_CS_PROJ_Grenade_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: BP_LPSP_CS_PROJ_GL_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: BPFL_IG_Math_C.BlueprintFunctionLibrary.Object
	static Vector Custom Vector Spring Interp(Vector Current, Vector Target, float Delta Time, SSpringInterpVector Data, out VectorSpringState Spring State, Object* __WorldContext, SSpringInterpVector Local Data, Vector CallFunc_VectorSpringInterp_ReturnValue);// 0x6d94ba8 0x782f10eb00
	static float Custom Float Spring Interp(float Current, float Target, float Delta Time, SSpringInterpVector Data, out FloatSpringState Spring State, Object* __WorldContext, SSpringInterpVector Local Data, float CallFunc_FloatSpringInterp_ReturnValue);// 0x6d94ba8 0x782f10ebe0
	static Rotator Subtract Rotators(Rotator A, Rotator B, Object* __WorldContext, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_Negate_Rotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue);// 0x6d94ba8 0x782f10ecc0
	static void Negate Transform(Transform In, bool Ignore Scale, Object* __WorldContext, out Transform Out, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool ___bool_Variable, Vector CallFunc_NegateVector_ReturnValue, Vector CallFunc_NegateVector_ReturnValue, Vector K2Node_Select_Default, Rotator CallFunc_Negate_Rotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x6d94ba8 0x782f10eda0
	static int Random Integer In Vector Range(Vector2D Range, Object* __WorldContext, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue);// 0x6d94ba8 0x782f10ee80
	static float Random Float In Vector Range(Vector2D Range, Object* __WorldContext, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue);// 0x6d94ba8 0x782f10ef60
	static Vector Rotator To Vector(Rotator Value, Object* __WorldContext, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector CallFunc_MakeVector_ReturnValue);// 0x6d94ba8 0x782f10f040
	static void Vector To Rotator(Vector In, Object* __WorldContext, out Rotator Out, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_MakeRotator_ReturnValue);// 0x6d94ba8 0x782f10f120
	static Transform Add Transforms(Transform A, Transform B, Object* __WorldContext, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_Add_Rotators_Value, Transform CallFunc_MakeTransform_ReturnValue);// 0x6d94ba8 0x782f10f200
	static Rotator Negate Rotator(Rotator A, Object* __WorldContext, Rotator CallFunc_Multiply_RotatorFloat_ReturnValue);// 0x6d94ba8 0x782f10f3c0
	static void Add Rotators(Rotator A, Rotator B, Object* __WorldContext, out Rotator Value, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue);// 0x6d94ba8 0x782f10f580

--------------------------------
Class: BPI_LPSP_WEP_C.Interface.Object
	void On Equip Saved Loadout();// 0x6d94ba8 0x782edb4060
	void On Save Loadout();// 0x6d94ba8 0x782edb4140
	void On Randomize Preset();// 0x6d94ba8 0x782edb4220
	byte Get Ammunition Type();// 0x6d94ba8 0x782edb4300
	void On Weapon Drop(Vector Throw Impulse);// 0x6d94ba8 0x782edb43e0
	void Destroy Weapon From Server();// 0x6d94ba8 0x782edb44c0
	FName Get Socket Name Scope();// 0x6d94ba8 0x782edb45a0
	DataTable* Get Sounds();// 0x6d94ba8 0x782edb4680
	float Get Spread Multiplier();// 0x6d94ba8 0x782edb4760
	SWeaponSettings Get Weapon Settings();// 0x6d94ba8 0x782edb4840
	bool Is Showing Scope();// 0x6d94ba8 0x782edb4920
	bool Is Showing Ironsights();// 0x6d94ba8 0x782edb4a00
	void On Stop Audio Playing();// 0x6d94ba8 0x782edb4ae0
	void On Spawn Attachment Components();// 0x6d94ba8 0x782edb4bc0
	void On Set Movement Spread(float Value);// 0x6d94ba8 0x782edb4ca0
	void On Set Hidden Magazine(bool Value);// 0x6d94ba8 0x782edb4d80
	bool Is Hidden Magazine();// 0x6d94ba8 0x782edb4e60
	void On Set Slide Racked(bool Value);// 0x6d94ba8 0x782edb4f40
	bool Is Slide Racked();// 0x6d94ba8 0x782edb5020
	void On Set Hidden Magazine Visually(bool Value);// 0x6d94ba8 0x782edb5100
	bool Is Hidden Magazine Visually();// 0x6d94ba8 0x782edb51e0
	void On Set Laser Turned On(bool Value);// 0x6d94ba8 0x782edb3960
	bool Is Laser Turned On();// 0x6d94ba8 0x782edb52c0
	void On Set Shot Count(int Value);// 0x6d94ba8 0x782edb53a0
	void On Set Bolt State(byte Value);// 0x6d94ba8 0x782edb5480
	byte Get Bolt State();// 0x6d94ba8 0x782edb5560
	FText Get Weapon Name();// 0x6d94ba8 0x782edb5640
	void On Character Jumped();// 0x6d94ba8 0x782edb1d60
	void On Character Landed();// 0x6d94ba8 0x782edb1e40
	void On Change Settings Physical Attachments(DataTableRowHandle Value);// 0x6d94ba8 0x782edb1f20
	void On Change Settings Physical Body(DataTableRowHandle Value);// 0x6d94ba8 0x782edb2000
	void On Ammunition Set(int Amount);// 0x6d94ba8 0x782edb20e0
	StaticMeshComponent* Get Static Mesh Grip();// 0x6d94ba8 0x782edb21c0
	void On Swap Attachment Laser(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782edb22a0
	void Get Attachment Handles Laser(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782edb2380
	void On Swap Attachment Grip(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782edb2460
	void Get Attachment Handles Grip(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782edb2540
	void On Swap Attachment Scope(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782edb2620
	void Get Attachment Handles Scope(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782edb2700
	void On Swap Attachment Muzzle(DataTableRowHandle Mesh, DataTableRowHandle Settings);// 0x6d94ba8 0x782edb27e0
	void Get Attachment Handles Muzzle(out DataTableRowHandle Mesh, out DataTableRowHandle Settings);// 0x6d94ba8 0x782edb28c0
	void On Swap Attachment Magazine(DataTableRowHandle Row Handle);// 0x6d94ba8 0x782edb29a0
	DataTableRowHandle Get Attachment Handle Magazine();// 0x6d94ba8 0x782edb2a80
	void On Swap Attachment Ironsights(DataTableRowHandle Row Handle);// 0x6d94ba8 0x782edb2b60
	DataTableRowHandle Get Attachment Handle Ironsights();// 0x6d94ba8 0x782edb2c40
	void On Skin Set(SSkin Value);// 0x6d94ba8 0x782edb2d20
	SSkin Get Skin();// 0x6d94ba8 0x782edb2e00
	void On Reset Visual Ammunition();// 0x6d94ba8 0x782edb2ee0
	SMovement Get Character Settings Movement();// 0x6d94ba8 0x782edb2fc0
	void On Spawn Casing(float Offset, float Impulse Multiplier, bool Randomize Initial Rotation);// 0x6d94ba8 0x782edb30a0
	void On Aiming Stop();// 0x6d94ba8 0x782edb3180
	void On Aiming Set(bool Value);// 0x6d94ba8 0x782edb3260
	void On Aiming Start();// 0x6d94ba8 0x782edb3340
	void On Laser Toggle();// 0x6d94ba8 0x782edb3420
	void On Laser Turn Off();// 0x6d94ba8 0x782edb3500
	void On Laser Turn On();// 0x6d94ba8 0x782edb35e0
	void Set Slide Racked Visually(bool Value);// 0x6d94ba8 0x782edb36c0
	bool Is Slide Racked Visually();// 0x6d94ba8 0x782edb37a0
	void On Unequipped();// 0x6d94ba8 0x782edb3880
	void On Equipped();// 0x6d94ba8 0x782edb0080
	SLaser Get Laser Settings();// 0x6d94ba8 0x782edb0160
	void On Update();// 0x6d94ba8 0x782edb0240
	Transform Get Offset();// 0x6d94ba8 0x782edb0320
	StaticMeshComponent* Get Static Mesh Ironsights();// 0x6d94ba8 0x782edb0400
	SkeletalMeshComponent* Get Static Mesh Body();// 0x6d94ba8 0x782edb04e0
	StaticMeshComponent* Get Static Mesh Scope();// 0x6d94ba8 0x782edb05c0
	StaticMeshComponent* Get Static Mesh Magazine();// 0x6d94ba8 0x782edb06a0
	StaticMeshComponent* Get Static Mesh Muzzle();// 0x6d94ba8 0x782edb0780
	SScope Get Settings Scope();// 0x6d94ba8 0x782edb0860
	SAnimationSettings Get Settings Animation();// 0x6d94ba8 0x782edb0940
	class UserWidget Get Widget Class Crosshair();// 0x6d94ba8 0x782edb0a20
	Texture2D* Get Icon Ironsights();// 0x6d94ba8 0x782edb0b00
	Texture2D* Get Icon Laser();// 0x6d94ba8 0x782edb0be0
	Texture2D* Get Icon Grip();// 0x6d94ba8 0x782edb0cc0
	Texture2D* Get Icon Scope();// 0x6d94ba8 0x782edb0da0
	Texture2D* Get Icon Muzzle();// 0x6d94ba8 0x782edb0e80
	Texture2D* Get Icon Magazine();// 0x6d94ba8 0x782edb0f60
	Texture2D* Get Icon Body();// 0x6d94ba8 0x782edb1040
	void On Change Settings Physical(DataTableRowHandle Row Handle);// 0x6d94ba8 0x782edb1120
	void On Montage Stop All(float Blend Time);// 0x6d94ba8 0x782edb1200
	void On Montage Stop(byte View Mode, FName Name, float Blend Time);// 0x6d94ba8 0x782edb12e0
	void On Montage Play(FName Name, bool First Person);// 0x6d94ba8 0x782edb13c0
	void On Fire Projectile();// 0x6d94ba8 0x782edb14a0
	void On Update Ammunition(bool Fill, int Amount);// 0x6d94ba8 0x782edb1580
	bool Is Full Of Ammunition();// 0x6d94ba8 0x782edb1660
	bool Is Out Of Ammunition();// 0x6d94ba8 0x782edb1740
	SWeaponSettings Get Settings Weapon();// 0x6d94ba8 0x782edb1820
	DataTable* Get Character Animation Montages();// 0x6d94ba8 0x782edb1900
	DataTable* Get Character Animation Poses();// 0x6d94ba8 0x782edb19e0
	SAbilities Get Character Abilities();// 0x6d94ba8 0x782edb1ac0
	int Get Ammunition Current();// 0x6d94ba8 0x782edb1c80
	int Get Ammunition Total();// 0x6d94ba8 0x782f10e860

--------------------------------
Class: ABP_LPSP_FP_PCH_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x78302f8900
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2c8, Size: 0x30] 0x78302f8880
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x2f8, Size: 0x118] 0x78302f8800
	AnimNode_Fabrik AnimGraphNode_Fabrik;//[Offset: 0x410, Size: 0x190] 0x78302f8780
	AnimNode_Fabrik AnimGraphNode_Fabrik;//[Offset: 0x5a0, Size: 0x190] 0x78302f8700
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x730, Size: 0x20] 0x78302f8680
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x750, Size: 0x20] 0x78302f8600
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x770, Size: 0x30] 0x78302f8580
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x7a0, Size: 0x20] 0x78302f8500
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x7c0, Size: 0x20] 0x78302f8480
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x7e0, Size: 0xc8] 0x78302fa500
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8a8, Size: 0x28] 0x78302fa480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8d0, Size: 0x28] 0x78302fa400
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x8f8, Size: 0x108] 0x78302fa380
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xa00, Size: 0x108] 0x78302fa300
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb08, Size: 0x108] 0x78302fa280
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc10, Size: 0x28] 0x78302fa200
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc38, Size: 0x28] 0x78302fa180
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xc60, Size: 0x28] 0x78302fa100
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc88, Size: 0x108] 0x78302fa080
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xd90, Size: 0x108] 0x78302fa000
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xe98, Size: 0x108] 0x78302f9f80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xfa0, Size: 0x108] 0x78302f9f00
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x10a8, Size: 0xc8] 0x78302f9e80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1170, Size: 0xc8] 0x78302f9e00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x1238, Size: 0x20] 0x78302f9d80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x1258, Size: 0x20] 0x78302f9d00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1278, Size: 0x30] 0x78302f9c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x12a8, Size: 0x28] 0x78302f9c00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x12d0, Size: 0x28] 0x78302f9b80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x12f8, Size: 0x28] 0x78302f9b00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x1320, Size: 0x28] 0x78302f9a80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1348, Size: 0x108] 0x78302f9a00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1450, Size: 0x108] 0x78302f9980
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1558, Size: 0x108] 0x78302f9900
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1660, Size: 0x108] 0x78302f9880
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1768, Size: 0xc8] 0x78302f9800
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1830, Size: 0x108] 0x78302f9780
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1938, Size: 0xc8] 0x78302f9700
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1a00, Size: 0x108] 0x78302f9680
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x1b08, Size: 0xc8] 0x78302f9600
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x1bd0, Size: 0x20] 0x78302f9580
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x1bf0, Size: 0x20] 0x78302f9500
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1c10, Size: 0x108] 0x78302fb580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x1d18, Size: 0x30] 0x78302fb500
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x1d48, Size: 0xb0] 0x78302fb480
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x1df8, Size: 0x58] 0x78302fb400
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x1e50, Size: 0x58] 0x78302fb380
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x1ea8, Size: 0x108] 0x78302fb300
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x1fb0, Size: 0xc0] 0x78302fb280
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x2070, Size: 0x50] 0x78302fb200
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x20c0, Size: 0x118] 0x78302fb180
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x21d8, Size: 0x118] 0x78302fb100
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x22f0, Size: 0x118] 0x78302fb080
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x2408, Size: 0x118] 0x78302fb000
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x2520, Size: 0x118] 0x78302faf80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2638, Size: 0x158] 0x78302faf00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2790, Size: 0x158] 0x78302fae80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x28e8, Size: 0x158] 0x78302fae00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2a40, Size: 0x158] 0x78302fad80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2b98, Size: 0x158] 0x78302fad00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x2cf0, Size: 0x158] 0x78302fac80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x2e48, Size: 0x28] 0x78302fac00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e70, Size: 0x80] 0x78302fab80
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x2ef0, Size: 0x30] 0x78302fab00
	AnimNode_LinkedInputPose AnimGraphNode_LinkedInputPose;//[Offset: 0x2f20, Size: 0x118] 0x78302faa80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x3038, Size: 0x158] 0x78302faa00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x3190, Size: 0x48] 0x78302fa980
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x31d8, Size: 0xc0] 0x78302fa900
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x3298, Size: 0x48] 0x78302fa880
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x32e0, Size: 0xc0] 0x78302fa800
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x33a0, Size: 0x48] 0x78302fa780
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x33e8, Size: 0x48] 0x78302fa700
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x3430, Size: 0x28] 0x78302fa680
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x3458, Size: 0x28] 0x78302fa600
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x3480, Size: 0x28] 0x78302fa580
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x34a8, Size: 0x30] 0x78302fc600
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x34d8, Size: 0x20] 0x78302fc580
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x34f8, Size: 0x50] 0x78302fc500
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x3548, Size: 0xc8] 0x78302fc480
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x3610, Size: 0x50] 0x78302fc400
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x3660, Size: 0xc0] 0x78302fc380
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x3720, Size: 0x108] 0x78302fc300
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x3828, Size: 0x20] 0x78302fc280
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x3848, Size: 0x108] 0x78302fc200
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x3950, Size: 0x50] 0x78302fc180
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x39a0, Size: 0x108] 0x78302fc100
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend;//[Offset: 0x3aa8, Size: 0xc8] 0x78302fc080
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x3b70, Size: 0x58] 0x78302fc000
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x3bc8, Size: 0x58] 0x78302fbf80
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x3c20, Size: 0x58] 0x78302fbf00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x3c78, Size: 0x80] 0x78302fbe80
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x3cf8, Size: 0x58] 0x78302fbe00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x3d50, Size: 0x58] 0x78302fbd80
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x3da8, Size: 0x30] 0x78302fbd00
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x3dd8, Size: 0x20] 0x78302fbc80
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x3df8, Size: 0x20] 0x78302fbc00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x3e18, Size: 0x158] 0x78302fbb80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x3f70, Size: 0x48] 0x78302fbb00
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3fb8, Size: 0x28] 0x78302fba80
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3fe0, Size: 0x28] 0x78302fba00
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4008, Size: 0x80] 0x78302fb980
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x4088, Size: 0x30] 0x78302fb900
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x40b8, Size: 0x80] 0x78302fb880
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x4138, Size: 0x30] 0x78302fb800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4168, Size: 0x80] 0x78302fb780
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x41e8, Size: 0x30] 0x78302fb700
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x4218, Size: 0xb0] 0x78302fb680
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x42c8, Size: 0x158] 0x78302fb600
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4420, Size: 0x28] 0x78302fd680
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4448, Size: 0x28] 0x78302fd600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4470, Size: 0x80] 0x78302fd580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x44f0, Size: 0x30] 0x78302fd500
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4520, Size: 0x80] 0x78302fd480
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x45a0, Size: 0x30] 0x78302fd400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x45d0, Size: 0x80] 0x78302fd380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x4650, Size: 0x30] 0x78302fd300
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x4680, Size: 0xb0] 0x78302fd280
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x4730, Size: 0x50] 0x78302fd200
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x4780, Size: 0x58] 0x78302fd180
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x47d8, Size: 0x28] 0x78302fd100
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x4800, Size: 0x28] 0x78302fd080
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4828, Size: 0x48] 0x78302fd000
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x4870, Size: 0xc0] 0x78302fcf80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4930, Size: 0x48] 0x78302fcf00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x4978, Size: 0x28] 0x78302fce80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x49a0, Size: 0xc0] 0x78302fce00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4a60, Size: 0x48] 0x78302fcd80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4aa8, Size: 0x48] 0x78302fcd00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x4af0, Size: 0x158] 0x78302fcc80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x4c48, Size: 0xa0] 0x78302fcc00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x4ce8, Size: 0x158] 0x78302fcb80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x4e40, Size: 0x28] 0x78302fcb00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x4e68, Size: 0x158] 0x78302fca80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x4fc0, Size: 0x158] 0x78302fca00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x5118, Size: 0x28] 0x78302fc980
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x5140, Size: 0x28] 0x78302fc900
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5168, Size: 0xa0] 0x78302fc880
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5208, Size: 0x80] 0x78302fc800
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x5288, Size: 0x20] 0x78302fc780
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x52a8, Size: 0x20] 0x78302fc700
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x52c8, Size: 0x50] 0x78302fc680
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x5318, Size: 0xc0] 0x78302fe700
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x53d8, Size: 0x108] 0x78302fe680
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x54e0, Size: 0x108] 0x78302fe600
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x55e8, Size: 0x108] 0x78302fe580
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x56f0, Size: 0x108] 0x78302fe500
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x57f8, Size: 0x108] 0x78302fe480
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x5900, Size: 0x28] 0x78302fe400
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x5928, Size: 0x58] 0x78302fe380
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x5980, Size: 0x108] 0x78302fe300
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x5a88, Size: 0x20] 0x78302fe280
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x5aa8, Size: 0x20] 0x78302fe200
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x5ac8, Size: 0xc8] 0x78302fe180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5b90, Size: 0x80] 0x78302fe100
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x5c10, Size: 0xc8] 0x78302fe080
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x5cd8, Size: 0x58] 0x78302fe000
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x5d30, Size: 0x58] 0x78302fdf80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5d88, Size: 0x30] 0x78302fdf00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x5db8, Size: 0xb0] 0x78302fde80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x5e68, Size: 0x108] 0x78302fde00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x5f70, Size: 0x108] 0x78302fdd80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6078, Size: 0x108] 0x78302fdd00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6180, Size: 0x108] 0x78302fdc80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x6288, Size: 0x28] 0x78302fdc00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x62b0, Size: 0x58] 0x78302fdb80
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x6308, Size: 0x20] 0x78302fdb00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6328, Size: 0x108] 0x78302fda80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x6430, Size: 0x20] 0x78302fda00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x6450, Size: 0x58] 0x78302fd980
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x64a8, Size: 0x80] 0x78302fd900
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x6528, Size: 0xc8] 0x78302fd880
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x65f0, Size: 0x30] 0x78302fd800
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x6620, Size: 0xb0] 0x78302fd780
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x66d0, Size: 0x80] 0x78302fd700
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x6750, Size: 0x50] 0x78302ff780
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x67a0, Size: 0xc0] 0x78302ff700
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6860, Size: 0x108] 0x78302ff680
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x6968, Size: 0x58] 0x78302ff600
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x69c0, Size: 0x58] 0x78302ff580
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x6a18, Size: 0x28] 0x78302ff500
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x6a40, Size: 0x28] 0x78302ff480
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6a68, Size: 0x108] 0x78302ff400
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6b70, Size: 0x108] 0x78302ff380
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x6c78, Size: 0x28] 0x78302ff300
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x6ca0, Size: 0x28] 0x78302ff280
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6cc8, Size: 0x108] 0x78302ff200
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6dd0, Size: 0x108] 0x78302ff180
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6ed8, Size: 0x108] 0x78302ff100
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x6fe0, Size: 0x108] 0x78302ff080
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x70e8, Size: 0xc8] 0x78302ff000
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x71b0, Size: 0x28] 0x78302fef80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x71d8, Size: 0xc8] 0x78302fef00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x72a0, Size: 0x20] 0x78302fee80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x72c0, Size: 0x20] 0x78302fee00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x72e0, Size: 0x108] 0x78302fed80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x73e8, Size: 0x30] 0x78302fed00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x7418, Size: 0x28] 0x78302fec80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x7440, Size: 0x28] 0x78302fec00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x7468, Size: 0x28] 0x78302feb80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x7490, Size: 0x108] 0x78302feb00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x7598, Size: 0x108] 0x78302fea80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x76a0, Size: 0x108] 0x78302fea00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x77a8, Size: 0x108] 0x78302fe980
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x78b0, Size: 0xc8] 0x78302fe900
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x7978, Size: 0x108] 0x78302fe880
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x7a80, Size: 0xc8] 0x78302fe800
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x7b48, Size: 0x28] 0x78302fe780
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x7b70, Size: 0x108] 0x78302fff80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x7c78, Size: 0xc8] 0x78302fff00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x7d40, Size: 0x20] 0x78302ffe80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x7d60, Size: 0x20] 0x78302ffe00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x7d80, Size: 0x108] 0x78302ffd80
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x7e88, Size: 0x30] 0x78302ffd00
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x7eb8, Size: 0xb0] 0x78302ffc80
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive;//[Offset: 0x7f68, Size: 0xc8] 0x78302ffc00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x8030, Size: 0x20] 0x78302ffb80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x8050, Size: 0x20] 0x78302ffb00
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x8070, Size: 0x30] 0x78302ffa80
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x80a0, Size: 0xb0] 0x78302ffa00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8150, Size: 0x48] 0x78302ff980
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x8198, Size: 0xc0] 0x78302ff900
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8258, Size: 0x48] 0x78302ff880
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x82a0, Size: 0xc0] 0x78302ff800
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8360, Size: 0x48] 0x78404c1080
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x83a8, Size: 0x158] 0x78404c1000
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x8500, Size: 0x28] 0x78404c0f80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8528, Size: 0x48] 0x78404c0f00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8570, Size: 0x48] 0x78404c0e80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x85b8, Size: 0xc0] 0x78404c0e00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x8678, Size: 0x48] 0x78404c0d80
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend;//[Offset: 0x86c0, Size: 0xc0] 0x78404c0d00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x8780, Size: 0x28] 0x78404c0c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x87a8, Size: 0x28] 0x78404c0c00
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x87d0, Size: 0x48] 0x78404c0b80
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x8818, Size: 0x158] 0x78404c0b00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x8970, Size: 0x58] 0x78404c0a80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x89c8, Size: 0x48] 0x78404c0a00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x8a10, Size: 0x58] 0x78404c0980
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x8a68, Size: 0x58] 0x78404c0900
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x8ac0, Size: 0x58] 0x78404c0880
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x8b18, Size: 0x58] 0x78404c0800
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x8b70, Size: 0x108] 0x78404c0780
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x8c78, Size: 0x20] 0x78404c0700
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x8c98, Size: 0x20] 0x78404c0680
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x8cb8, Size: 0x108] 0x78404c0600
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x8dc0, Size: 0xa0] 0x78404c0580
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x8e60, Size: 0x50] 0x78404c0500
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8eb0, Size: 0x28] 0x78404c0480
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x8ed8, Size: 0x28] 0x78404c0400
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8f00, Size: 0x80] 0x78404c0380
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x8f80, Size: 0x30] 0x78404c0300
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8fb0, Size: 0x80] 0x78404c0280
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9030, Size: 0x30] 0x78404c0200
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9060, Size: 0x80] 0x78404c0180
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x90e0, Size: 0x30] 0x78404c0100
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x9110, Size: 0xb0] 0x78404c0080
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive;//[Offset: 0x91c0, Size: 0xd0] 0x78404c2100
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive;//[Offset: 0x9290, Size: 0xd0] 0x78404c2080
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive;//[Offset: 0x9360, Size: 0xd0] 0x78404c2000
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x9430, Size: 0x158] 0x78404c1f80
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x9588, Size: 0x58] 0x78404c1f00
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x95e0, Size: 0x58] 0x78404c1e80
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0x9638, Size: 0x58] 0x78404c1e00
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x9690, Size: 0x50] 0x78404c1d80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x96e0, Size: 0x28] 0x78404c1d00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x9708, Size: 0x28] 0x78404c1c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0x9730, Size: 0x28] 0x78404c1c00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0x9758, Size: 0x158] 0x78404c1b80
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x98b0, Size: 0xa0] 0x78404c1b00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x9950, Size: 0x108] 0x78404c1a80
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x9a58, Size: 0x20] 0x78404c1a00
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x9a78, Size: 0x20] 0x78404c1980
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x9a98, Size: 0x108] 0x78404c1900
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x9ba0, Size: 0x20] 0x78404c1880
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x9bc0, Size: 0x20] 0x78404c1800
	AnimNode_SequenceEvaluator AnimGraphNode_SequenceEvaluator;//[Offset: 0x9be0, Size: 0x50] 0x78404c1780
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x9c30, Size: 0x28] 0x78404c1700
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x9c58, Size: 0x28] 0x78404c1680
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9c80, Size: 0x80] 0x78404c1600
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9d00, Size: 0x30] 0x78404c1580
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9d30, Size: 0x80] 0x78404c1500
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9db0, Size: 0x30] 0x78404c1480
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x9de0, Size: 0x80] 0x78404c1400
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x9e60, Size: 0x30] 0x78404c1380
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x9e90, Size: 0xb0] 0x78404c1300
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive;//[Offset: 0x9f40, Size: 0xd0] 0x78404c1280
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xa010, Size: 0x158] 0x78404c1200
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xa168, Size: 0x28] 0x78404c1180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa190, Size: 0x80] 0x78404c1100
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xa210, Size: 0x158] 0x78404c3180
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xa368, Size: 0x80] 0x78404c3100
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xa3e8, Size: 0x158] 0x78404c3080
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xa540, Size: 0xe8] 0x78404c3000
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xa628, Size: 0x158] 0x78404c2f80
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer;//[Offset: 0xa780, Size: 0xe8] 0x78404c2f00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xa868, Size: 0x158] 0x78404c2e80
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0xa9c0, Size: 0x48] 0x78404c2e00
	AnimNode_LinkedAnimLayer AnimGraphNode_LinkedAnimLayer;//[Offset: 0xaa08, Size: 0xb0] 0x78404c2d80
	AnimNode_LinkedAnimLayer AnimGraphNode_LinkedAnimLayer;//[Offset: 0xaab8, Size: 0xb0] 0x78404c2d00
	AnimNode_LinkedAnimLayer AnimGraphNode_LinkedAnimLayer;//[Offset: 0xab68, Size: 0xb0] 0x78404c2c80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xac18, Size: 0x28] 0x78404c2c00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xac40, Size: 0x28] 0x78404c2b80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xac68, Size: 0x28] 0x78404c2b00
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xac90, Size: 0x28] 0x78404c2a80
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xacb8, Size: 0x28] 0x78404c2a00
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose;//[Offset: 0xace0, Size: 0x158] 0x78404c2980
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose;//[Offset: 0xae38, Size: 0x28] 0x78404c2900
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xae60, Size: 0x28] 0x78404c2880
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0xae88, Size: 0x28] 0x78404c2800
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xaeb0, Size: 0x80] 0x78404c2780
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xaf30, Size: 0x30] 0x78404c2700
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xaf60, Size: 0x80] 0x78404c2680
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xafe0, Size: 0x30] 0x78404c2600
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0xb010, Size: 0x80] 0x78404c2580
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xb090, Size: 0x30] 0x78404c2500
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xb0c0, Size: 0xb0] 0x78404c2480
	AnimNode_ApplyMeshSpaceAdditive AnimGraphNode_ApplyMeshSpaceAdditive;//[Offset: 0xb170, Size: 0xd0] 0x78404c2400
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb240, Size: 0x58] 0x78404c2380
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb298, Size: 0x58] 0x78404c2300
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb2f0, Size: 0x58] 0x78404c2280
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb348, Size: 0x108] 0x78404c2200
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb450, Size: 0x108] 0x78404c2180
	AnimNode_LinkedAnimLayer AnimGraphNode_LinkedAnimLayer;//[Offset: 0xb558, Size: 0xb0] 0x78404c4200
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb608, Size: 0x58] 0x78404c4180
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb660, Size: 0x58] 0x78404c4100
	AnimNode_ModifyCurve AnimGraphNode_ModifyCurve;//[Offset: 0xb6b8, Size: 0x58] 0x78404c4080
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb710, Size: 0x108] 0x78404c4000
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb818, Size: 0x108] 0x78404c3f80
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb920, Size: 0x108] 0x78404c3f00
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xba28, Size: 0x108] 0x78404c3e80
	Vector Velocity;//[Offset: 0xbb30, Size: 0xc] 0x78404c3e00
	float Play Rate Breathing;//[Offset: 0xbb3c, Size: 0x4] 0x78404c3d80
	float Play Rate Walking;//[Offset: 0xbb40, Size: 0x4] 0x78404c3d00
	float Play Rate Running;//[Offset: 0xbb44, Size: 0x4] 0x78404c3c80
	float Field Of View Standing;//[Offset: 0xbb48, Size: 0x4] 0x78404c3c00
	float Field Of View Aiming;//[Offset: 0xbb4c, Size: 0x4] 0x78404c3b80
	float Field Of View Running;//[Offset: 0xbb50, Size: 0x4] 0x78404c3b00
	float Mapped Speed;//[Offset: 0xbb54, Size: 0x4] 0x78404c3a80
	Character* Character;//[Offset: 0xbb58, Size: 0x8] 0x78404c3a00
	bool Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb60, Size: 0x1] 0x78404c3980
	bool Aiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb61, Size: 0x1] 0x78404c3900
	bool bCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb62, Size: 0x1] 0x78404c3880
	bool Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb63, Size: 0x1] 0x78404c3800
	Vector Aiming Location Lag;//[Offset: 0xbb64, Size: 0xc] 0x78404c3780
	Vector Aiming Movement Location Lag;//[Offset: 0xbb70, Size: 0xc] 0x78404c3700
	Vector Aiming Rotation Lag;//[Offset: 0xbb7c, Size: 0xc] 0x78404c3680
	Rotator Aiming Rotation Lag Rotator;//[Offset: 0xbb88, Size: 0xc] 0x78404c3600
	Vector Aiming Movement Rotation Lag;//[Offset: 0xbb94, Size: 0xc] 0x78404c3580
	Rotator Aiming Movement Rotation Lag Rotator;//[Offset: 0xbba0, Size: 0xc] 0x78404c3500
	Vector Standing Location Lag;//[Offset: 0xbbac, Size: 0xc] 0x78404c3480
	Vector Standing Movement Location Lag;//[Offset: 0xbbb8, Size: 0xc] 0x78404c3400
	Vector Standing Rotation Lag;//[Offset: 0xbbc4, Size: 0xc] 0x78404c3380
	Rotator Standing Rotation Lag Rotator;//[Offset: 0xbbd0, Size: 0xc] 0x78404c3300
	Vector Standing Movement Rotation Lag;//[Offset: 0xbbdc, Size: 0xc] 0x78404c3280
	Rotator Standing Movement Rotation Lag Rotator;//[Offset: 0xbbe8, Size: 0xc] 0x78404c3200
	Transform Offset Attachments;//[Offset: 0xbc00, Size: 0x30] 0x78404c5280
	Transform Offset Aiming;//[Offset: 0xbc30, Size: 0x30] 0x78404c5200
	float Pitch;//[Offset: 0xbc60, Size: 0x4] 0x78404c5180
	float Turn Rate;//[Offset: 0xbc64, Size: 0x4] 0x78404c5100
	float Previous Pitch;//[Offset: 0xbc68, Size: 0x4] 0x78404c5080
	float First Person View Scale;//[Offset: 0xbc6c, Size: 0x4] 0x78404c5000
	float Camera Pitch Acceleration;//[Offset: 0xbc70, Size: 0x4] 0x78404c4f80
	Vector2D Character Input Movement;//[Offset: 0xbc74, Size: 0x8] 0x78404c4f00
	Vector2D Character Input Movement Smooth;//[Offset: 0xbc7c, Size: 0x8] 0x78404c4e80
	Vector2D Character Input Look;//[Offset: 0xbc84, Size: 0x8] 0x78404c4e00
	AnimSequenceBase* Pose Idle;//[Offset: 0xbc90, Size: 0x8] 0x78404c4d80
	AnimSequenceBase* Pose Aim;//[Offset: 0xbc98, Size: 0x8] 0x78404c4d00
	DataTable* Data Table Animation Poses;//[Offset: 0xbca0, Size: 0x8] 0x78404c4c80
	Actor* Actor Weapon;//[Offset: 0xbca8, Size: 0x8] 0x78404c4c00
	SScope Settings Scope;//[Offset: 0xbcb0, Size: 0xe0] 0x78404c4b80
	SAnimationSettings Settings Animation;//[Offset: 0xbd90, Size: 0x280] 0x78404c4b00
	SMovement Settings Movement;//[Offset: 0xc010, Size: 0x38] 0x78404c4a80
	VectorSpringState Spring State Standing Lag Location;//[Offset: 0xc048, Size: 0x18] 0x78404c4a00
	VectorSpringState Spring State Standing Lag Rotation;//[Offset: 0xc060, Size: 0x18] 0x78404c4980
	VectorSpringState Spring State Aiming Movement Lag Location;//[Offset: 0xc078, Size: 0x18] 0x78404c4900
	VectorSpringState Spring State Aiming Movement Lag Rotation;//[Offset: 0xc090, Size: 0x18] 0x78404c4880
	VectorSpringState Spring State Aiming Lag Location;//[Offset: 0xc0a8, Size: 0x18] 0x78404c4800
	VectorSpringState Spring State Aiming Lag Rotation;//[Offset: 0xc0c0, Size: 0x18] 0x78404c4780
	VectorSpringState Spring State Standing Movement Lag Location;//[Offset: 0xc0d8, Size: 0x18] 0x78404c4700
	VectorSpringState Spring State Standing Movement Lag Rotation;//[Offset: 0xc0f0, Size: 0x18] 0x78404c4680
	StaticMeshComponent* Static Mesh Scope;//[Offset: 0xc108, Size: 0x8] 0x78404c4600
	Vector World Space Location Scope;//[Offset: 0xc110, Size: 0xc] 0x78404c4580
	Vector Component Offset Location Scope;//[Offset: 0xc11c, Size: 0xc] 0x78404c4500
	Rotator Component Offset Rotation Scope;//[Offset: 0xc128, Size: 0xc] 0x78404c4480
	bool Replace Aiming Pose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc134, Size: 0x1] 0x78404c4400
	BlendSpaceBase* Blend Space Walking;//[Offset: 0xc138, Size: 0x8] 0x78404c4380
	BlendSpaceBase* Blend Space Leaning;//[Offset: 0xc140, Size: 0x8] 0x78404c4300
	AnimSequenceBase* Sequence Turning;//[Offset: 0xc148, Size: 0x8] 0x78404c4280
	AnimSequenceBase* Sequence Running;//[Offset: 0xc150, Size: 0x8] 0x78404c6300
	AnimSequenceBase* Sequence Breathing Standing;//[Offset: 0xc158, Size: 0x8] 0x78404c6280
	AnimSequenceBase* Sequence Breathing Aiming;//[Offset: 0xc160, Size: 0x8] 0x78404c6200
	AnimSequenceBase* Sequence Walking Aiming;//[Offset: 0xc168, Size: 0x8] 0x78404c6180
	SkeletalMeshComponent* Static Mesh Weapon Body;//[Offset: 0xc170, Size: 0x8] 0x78404c6100
	float Start Position Breathing Standing;//[Offset: 0xc178, Size: 0x4] 0x78404c6080
	float Aim Blend Time;//[Offset: 0xc17c, Size: 0x4] 0x78404c6000
	float Alpha Walking;//[Offset: 0xc180, Size: 0x4] 0x78404c5f80
	float Play Rate Walking Aiming;//[Offset: 0xc184, Size: 0x4] 0x78404c5f00
	float Alpha Lag Movement;//[Offset: 0xc188, Size: 0x4] 0x78404c5e80
	float Alpha Turning;//[Offset: 0xc18c, Size: 0x4] 0x78404c5e00
	float Play Rate Turning;//[Offset: 0xc190, Size: 0x4] 0x78404c5d80
	float Alpha Walking Lean;//[Offset: 0xc194, Size: 0x4] 0x78404c5d00
	float Play Rate Walking Crouching;//[Offset: 0xc198, Size: 0x4] 0x78404c5c80
	float Alpha Breathing;//[Offset: 0xc19c, Size: 0x4] 0x78404c5c00
	float Play Rate Crouching;//[Offset: 0xc1a0, Size: 0x4] 0x78404c5b80
	float Play Rate Aim;//[Offset: 0xc1a4, Size: 0x4] 0x78404c5b00
	bool Aim Offset By Ironsights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1a8, Size: 0x1] 0x78404c5a80
	FName Socket Name Scope;//[Offset: 0xc1ac, Size: 0x8] 0x78404c5a00
	CameraComponent* Camera Component;//[Offset: 0xc1b8, Size: 0x8] 0x78404c5980
	SWeaponSettings Settings Weapon;//[Offset: 0xc1c0, Size: 0xf8] 0x78404c5900
	VectorSpringState Spring State Recoil Location;//[Offset: 0xc2b8, Size: 0x18] 0x78404c5880
	Vector Current Recoil Location;//[Offset: 0xc2d0, Size: 0xc] 0x78404c5800
	Vector Current Recoil Rotation;//[Offset: 0xc2dc, Size: 0xc] 0x78404c5780
	VectorSpringState Spring State Recoil Rotation;//[Offset: 0xc2e8, Size: 0x18] 0x78404c5700
	int Shot Count;//[Offset: 0xc300, Size: 0x4] 0x78404c5680
	float Leaning Alpha;//[Offset: 0xc304, Size: 0x4] 0x78404c5600
	bool Is Leaning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc308, Size: 0x1] 0x78404c5580
	bool Leaning Switched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc309, Size: 0x1] 0x78404c5500
	bool Lowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30a, Size: 0x1] 0x78404c5480
	float Alpha Lag Look;//[Offset: 0xc30c, Size: 0x4] 0x78404c5400
	Vector Breathing Loop;//[Offset: 0xc310, Size: 0xc] 0x78404c5380
	float Explicit Time;//[Offset: 0xc31c, Size: 0x4] 0x78404c5300
	Vector Breathing Loop Aiming;//[Offset: 0xc320, Size: 0xc] 0x78404c7380
	Vector Standing Rotation Lag Look Offset;//[Offset: 0xc32c, Size: 0xc] 0x78404c7300
	VectorSpringState Spring State Lag Look Offset;//[Offset: 0xc338, Size: 0x18] 0x78404c7280
	SSpringInterpVector Spring Data Look Offset Rotation;//[Offset: 0xc350, Size: 0xc] 0x78404c7200
	Vector Current Look Offset Location;//[Offset: 0xc35c, Size: 0xc] 0x78404c7180
	VectorSpringState Spring State Look Offset Location;//[Offset: 0xc368, Size: 0x18] 0x78404c7100
	SSpringInterpVector Spring Data Look Offset Location;//[Offset: 0xc380, Size: 0xc] 0x78404c7080
	Vector Target Recoil Location;//[Offset: 0xc38c, Size: 0xc] 0x78404c7000
	Vector Target Recoil Rotation;//[Offset: 0xc398, Size: 0xc] 0x78404c6f80
	SRecoilState Recoil State Weapon;//[Offset: 0xc3a8, Size: 0x30] 0x78404c6f00
	Vector Leaning Location;//[Offset: 0xc3d8, Size: 0xc] 0x78404c6e80
	Rotator Leaning Rotation;//[Offset: 0xc3e4, Size: 0xc] 0x78404c6e00
	SViemodelAnimatedOffsets Viewmodel Animated Offsets;//[Offset: 0xc3f0, Size: 0x48] 0x78404c6d80
	void Retarget Hands To IK Bones(PoseLink In, out PoseLink Retarget Hands To IK Bones);// 0x6d94ba8 0x783120eda0
	void Get Stance Lowered(PoseLink Lowered, PoseLink Movement, PoseLink Movement Lean, PoseLink Turning, PoseLink Movement Crouched, out PoseLink Get Stance Lowered);// 0x6d94ba8 0x783120ee80
	void Set Up Montage Slots Lowered(PoseLink Pose Lowered, out PoseLink Set Up Montage Slots Lowered);// 0x6d94ba8 0x783120ef60
	void Get Pose Lowered(out PoseLink Get Pose Lowered);// 0x6d94ba8 0x783120f040
	void AnimGraph(out PoseLink AnimGraph);// 0x6d94ba8 0x783120f120
	void Get Leaning Offsets(Vector CallFunc_GetVectorValue_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out);// 0x6d94ba8 0x783120f200
	void Update Recoil Values(interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, SRecoilState CallFunc_Get_Recoil_State_Weapon_Value, Vector CallFunc_GetVectorValue_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_GetVectorValue_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue);// 0x6d94ba8 0x783120f2e0
	float Get Play Rate Walking Crouching(float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120f3c0
	float Get Play Rate Walking Aiming(bool ___bool_Variable, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120f4a0
	float Get Aim Play Rate(interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Get_Aim_Speed_Multiplier_ReturnValue);// 0x6d94ba8 0x783120f580
	float Get Aim Blend Time(interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, float CallFunc_Get_Aim_Duration_ReturnValue);// 0x6d94ba8 0x783120f660
	float Get Play Rate Breathing(float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120f740
	bool Is Not Running(bool CallFunc_Not_PreBool_ReturnValue);// 0x6d94ba8 0x783120f820
	float Get Play Rate Turning();// 0x6d94ba8 0x783120f900
	float Get Alpha Walking Lean(float CallFunc_GetCurveValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120f9e0
	float Get Alpha Turning(float CallFunc_GetCurveValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120fac0
	float Get Play Rate Running(float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120fba0
	float Get Alpha Lag Movement(float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120fc80
	float Get Alpha Walking(float CallFunc_GetCurveValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120fd60
	float Get Play Rate Walking(float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120fe40
	float Get Alpha Breathing(float CallFunc_GetCurveValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x6d94ba8 0x783120ff20
	void Calculate Lag Values(float Clamped Movement Input Vertical, float Clamped Movement Input Horizontal, float Clamped Yaw Input, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_Abs_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Vector CallFunc_Custom_Vector_Spring_Interp_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FClamp_ReturnValue);// 0x6d94ba8 0x783120caa0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_45BCEEAC420DF41DD9DF4D9EB72F9864();// 0x6d94ba8 0x783120cb80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_C79A1F0446B8180A6F11EC874F262C89();// 0x6d94ba8 0x783120cc60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_E082A71840E41D4879C7DF990E67A9A9();// 0x6d94ba8 0x783120cd40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_D9E593BC4D9EE89DCC7B1F9E40664C00();// 0x6d94ba8 0x783120ce20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_0385AC2B4C2E9C0F35F5EABB10C94498();// 0x6d94ba8 0x783120cf00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_9B10508E465325F0F159E3BCE671BDD9();// 0x6d94ba8 0x783120cfe0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_561B5A944D7CD072D213E29CAC6C1A4A();// 0x6d94ba8 0x783120d0c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_28C25945444F8238269686A0814C8849();// 0x6d94ba8 0x783120d1a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_3EEF54C7427DD4B05718E8B2BCC87C29();// 0x6d94ba8 0x783120d360
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_DFDED3B94A8EE2C382266FBA5596E3ED();// 0x6d94ba8 0x783120d440
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_E5AD4F93432A61D879FD35946EA5A30A();// 0x6d94ba8 0x783120d520
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_5870CC904776D8987FA7F3AB54A2A011();// 0x6d94ba8 0x783120d600
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_586B58AC44461736CF8431BA0E466DBC();// 0x6d94ba8 0x783120d6e0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_638DFEE8426E84523A0A98A8024BD255();// 0x6d94ba8 0x783120d7c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_35D40590453AABA5E1C6EFAD9664914B();// 0x6d94ba8 0x783120d8a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_83A665CD4C47B5BCCA9060B1E469FCFA();// 0x6d94ba8 0x783120d980
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_TransitionResult_92F0157C40119D3D69F83B8CF68A5F84();// 0x6d94ba8 0x783120da60
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_TransitionResult_2D1B89C9453617A0B0C79C8BB85319B6();// 0x6d94ba8 0x783120db40
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_TransitionResult_6BF4EBD743761F57462733A002BB8F1C();// 0x6d94ba8 0x783120dc20
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_TransitionResult_304DA1064E5166924E6427847620EDE4();// 0x6d94ba8 0x783120dd00
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_6F910BD04C7924565CF592B64AD2C0C3();// 0x6d94ba8 0x783120dde0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_212FD87F4CB388E627D900B21D37DA6E();// 0x6d94ba8 0x783120dec0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_1850215D433042B1001162BDE241FD44();// 0x6d94ba8 0x783120dfa0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_E6CD44914F933E1CA80D61A468E889B1();// 0x6d94ba8 0x783120e080
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_A78FA7F94D3624F7592E7C8D6FC23FA3();// 0x6d94ba8 0x783120e160
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x6d94ba8 0x783120e240
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_739476A24B836E6CA6A8C1912427CD37();// 0x6d94ba8 0x783120e320
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_F961C33D4BD9268707C49FB2DD64719E();// 0x6d94ba8 0x783120e400
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_B4C3A44C4359FD94E7E6CA9F42CAF060();// 0x6d94ba8 0x783120e4e0
	void BlueprintBeginPlay();// 0x6d94ba8 0x783120e5c0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_CD6F7B3345679FB30C2F42ABCA7D762E();// 0x6d94ba8 0x783120e6a0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_956349D04F6665887CBED49767B949D5();// 0x6d94ba8 0x783120aea0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_ModifyBone_67091914463A40662E9F72A92A65B178();// 0x6d94ba8 0x783120af80
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_31D4374042F46551121D3C8121540AC6();// 0x6d94ba8 0x7836a04220
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_LPSP_FP_PCH_AnimGraphNode_SequencePlayer_333E865643405153D9AAE29D09135FF1();// 0x6d94ba8 0x783120b220
	void ExecuteUbergraph_ABP_LPSP_FP_PCH(int EntryPoint, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool ___bool_Variable, int ___int_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_Subtract_Rotators_ReturnValue, int ___int_Variable, Transform CallFunc_Negate_Transform_Out, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_Vector_To_Rotator_Out, Rotator CallFunc_Vector_To_Rotator_Out, Rotator CallFunc_Vector_To_Rotator_Out, float K2Node_Event_DeltaTimeX, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, FName CallFunc_Get_Socket_Name_Scope_ReturnValue, SWeaponSettings CallFunc_Get_Settings_Weapon_ReturnValue, bool ___bool_Variable, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Shot_Count_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_Get_Alpha_Weapon_Lag_Look_Value, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_Vector_To_Rotator_Out, float CallFunc_Get_Leaning_Alpha_Value, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Leaning_Value, bool CallFunc_Has_Leaning_Switched_Value, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Lowered_Value, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FName ___name_Variable, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Get_Breathing_Loop_Value, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_Get_Explicit_Time_Breathing_Value, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Get_Breathing_Loop_Aiming_Value, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, Character* K2Node_DynamicCast_As__, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, SViemodelAnimatedOffsets CallFunc_Get_Viewmodel_Animated_Offsets_Offsets, float CallFunc_RandomFloatInRange_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Get_Field_Of_View_Running_ReturnValue, float CallFunc_Get_Play_Rate_Running_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Field_Of_View_ReturnValue, float CallFunc_Get_Aim_Play_Rate_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Get_Alpha_Breathing_ReturnValue, float CallFunc_Get_Play_Rate_Breathing_ReturnValue, float CallFunc_Get_Play_Rate_Walking_Crouching_ReturnValue, float CallFunc_Get_Play_Rate_Walking_ReturnValue, float CallFunc_Get_Alpha_Walking_Lean_ReturnValue, float CallFunc_Get_Play_Rate_Turning_ReturnValue, float CallFunc_Get_Alpha_Turning_ReturnValue, float CallFunc_Get_Alpha_Lag_Movement_ReturnValue, float CallFunc_Get_Play_Rate_Walking_Aiming_ReturnValue, float CallFunc_Get_Alpha_Walking_ReturnValue, float CallFunc_Get_Aim_Blend_Time_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, DataTable* CallFunc_Get_Character_Animation_Poses_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SMovement CallFunc_Get_Character_Settings_Movement_ReturnValue, SScope CallFunc_Get_Settings_Scope_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SAnimationSettings CallFunc_Get_Settings_Animation_ReturnValue, SkeletalMeshComponent* CallFunc_Get_Static_Mesh_Body_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Running_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Aiming_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_IsCrouching_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, PawnMovementComponent* CallFunc_GetMovementComponent_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, Vector CallFunc_InverseTransformDirection_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SceneComponent* CallFunc_GetAttachParent_ReturnValue, Transform CallFunc_Get_Offset_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Rotator CallFunc_Negate_Rotator_ReturnValue, Vector CallFunc_NegateVector_ReturnValue, BP_LPSP_PCH_C* K2Node_DynamicCast_AsBP_LPSP_PCH, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_NegateVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, int K2Node_Select_Default, BP_LPSP_WEP_C* K2Node_DynamicCast_AsBP_LPSP_WEP, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, CameraComponent* CallFunc_Get_Camera_Component_Camera_Component, bool CallFunc_Get_Camera_Component_Is_Valid, FName K2Node_Select_Default, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Showing_Scope_ReturnValue, bool CallFunc_Is_Showing_Ironsights_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Transform CallFunc_GetSocketTransform_ReturnValue, float CallFunc_Abs_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_DoesSocketExist_ReturnValue, Vector CallFunc_TransformDirection_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, StaticMeshComponent* CallFunc_Get_Static_Mesh_Ironsights_ReturnValue, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_MakeVector_ReturnValue, StaticMeshComponent* CallFunc_Get_Static_Mesh_Scope_ReturnValue, Vector CallFunc_TransformDirection_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SBlenspace CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SBlenspace CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, CameraComponent* CallFunc_Get_Camera_Component_Camera_Component, bool CallFunc_Get_Camera_Component_Is_Valid, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_GetControlRotation_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, Rotator CallFunc_NormalizedDeltaRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Vector2DInterpTo_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanOR_ReturnValue, Vector2D CallFunc_Get_Input_Movement_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, float CallFunc_GetMaxSpeed_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_Get_Input_Look_ReturnValue, Rotator CallFunc_Vector_To_Rotator_Out, Transform CallFunc_Add_Transforms_ReturnValue);// 0x6d94ba8 0x783120b300

--------------------------------
Class: AnimNode_LinkedInputPose.AnimNode_Base
	FName Name;//[Offset: 0x10, Size: 0x8] 0x7875a4ce80
	FName Graph;//[Offset: 0x18, Size: 0x8] 0x7875a4cf00
	PoseLink InputPose;//[Offset: 0x20, Size: 0x10] 0x7875a4cf80

--------------------------------
Class: AnimNode_Fabrik.AnimNode_SkeletalControlBase.AnimNode_Base
	Transform EffectorTransform;//[Offset: 0xd0, Size: 0x30] 0x78759d3480
	BoneSocketTarget EffectorTarget;//[Offset: 0x100, Size: 0x60] 0x78759d3500
	BoneReference TipBone;//[Offset: 0x160, Size: 0x10] 0x78759d3580
	BoneReference RootBone;//[Offset: 0x170, Size: 0x10] 0x78759d3600
	float Precision;//[Offset: 0x180, Size: 0x4] 0x78759d3680
	int MaxIterations;//[Offset: 0x184, Size: 0x4] 0x78759d3700
	byte EffectorTransformSpace;//[Offset: 0x188, Size: 0x1] 0x78759d3780
	byte EffectorRotationSource;//[Offset: 0x189, Size: 0x1] 0x78759d3800

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10] 0x787595c680
	int LODThreshold;//[Offset: 0x20, Size: 0x4] 0x787595c700
	float ActualAlpha;//[Offset: 0x24, Size: 0x4] 0x787595c780
	enum AlphaInputType;//[Offset: 0x28, Size: 0x1] 0x787800a2e0
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1] 0x787595c880
	float Alpha;//[Offset: 0x2c, Size: 0x4] 0x787595c900
	InputScaleBias AlphaScaleBias;//[Offset: 0x30, Size: 0x8] 0x787595ca80
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x38, Size: 0x48] 0x787595cf80
	FName AlphaCurveName;//[Offset: 0x80, Size: 0x8] 0x787595d000
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x88, Size: 0x30] 0x787595b600

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: BoneSocketTarget
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1] 0x78759d2880
	BoneReference BoneReference;//[Offset: 0x4, Size: 0x10] 0x78759d2900
	SocketReference SocketReference;//[Offset: 0x20, Size: 0x40] 0x78759d2a00

--------------------------------
Class: SocketReference
	FName SocketName;//[Offset: 0x30, Size: 0x8] 0x78759d2980

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10] 0x7875a4e200

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 0x10] 0x7875a4e280

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0xc8, Size: 0x10] 0x78759d5a00
	Vector Translation;//[Offset: 0xd8, Size: 0xc] 0x78759d5a80
	Rotator Rotation;//[Offset: 0xe4, Size: 0xc] 0x78759d5b00
	Vector Scale;//[Offset: 0xf0, Size: 0xc] 0x78759d5b80
	byte TranslationMode;//[Offset: 0xfc, Size: 0x1] 0x78759d5c00
	byte RotationMode;//[Offset: 0xfd, Size: 0x1] 0x78759d5c80
	byte ScaleMode;//[Offset: 0xfe, Size: 0x1] 0x78759d5d00
	byte TranslationSpace;//[Offset: 0xff, Size: 0x1] 0x78759d5d80
	byte RotationSpace;//[Offset: 0x100, Size: 0x1] 0x78759d5e00
	byte ScaleSpace;//[Offset: 0x101, Size: 0x1] 0x78759d5e80

--------------------------------
Class: AnimNode_ModifyCurve.AnimNode_Base
	PoseLink SourcePose;//[Offset: 0x10, Size: 0x10] 0x78759d5780
	float[] CurveValues;//[Offset: 0x20, Size: 0x10] 0x78759e0ce0
	FName[] CurveNames;//[Offset: 0x30, Size: 0x10] 0x78759e0d80
	float Alpha;//[Offset: 0x50, Size: 0x4] 0x78759d5900
	enum ApplyMode;//[Offset: 0x54, Size: 0x1] 0x78759e0e20

--------------------------------
Class: AnimNode_SequenceEvaluator.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x38, Size: 0x8] 0x78759d9a00
	float ExplicitTime;//[Offset: 0x40, Size: 0x4] 0x78759d9a80
	bool bShouldLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1] 0x78759d9b00
	bool bTeleportToExplicitTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1] 0x78759d9b80
	byte ReinitializationBehavior;//[Offset: 0x46, Size: 0x1] 0x78759d9c00
	float StartPosition;//[Offset: 0x48, Size: 0x4] 0x78759d9c80

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x10, Size: 0x10] 0x78759dd100
	PoseLink B;//[Offset: 0x20, Size: 0x10] 0x78759dd180
	enum AlphaInputType;//[Offset: 0x30, Size: 0x1] 0x78759e24a0
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1] 0x78759dd280
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1] 0x78759dd300
	float Alpha;//[Offset: 0x34, Size: 0x4] 0x78759dd380
	InputScaleBias AlphaScaleBias;//[Offset: 0x38, Size: 0x8] 0x78759dd400
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48] 0x78759dd480
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8] 0x78759dd500
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x90, Size: 0x30] 0x78759dd580

--------------------------------
Class: AnimNode_ApplyMeshSpaceAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x10, Size: 0x10] 0x7875a4d500
	PoseLink Additive;//[Offset: 0x20, Size: 0x10] 0x7875a4d580
	enum AlphaInputType;//[Offset: 0x30, Size: 0x1] 0x78759e7180
	float Alpha;//[Offset: 0x34, Size: 0x4] 0x7875a4d680
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1] 0x7875a4b600
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x40, Size: 0x48] 0x7875a4b680
	FName AlphaCurveName;//[Offset: 0x88, Size: 0x8] 0x7875a4b700
	InputScaleBias AlphaScaleBias;//[Offset: 0x90, Size: 0x8] 0x7875a4b780
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x98, Size: 0x30] 0x7875a4b800
	int LODThreshold;//[Offset: 0xc8, Size: 0x4] 0x7875a4b880

--------------------------------
Class: AnimNode_LinkedAnimLayer.AnimNode_LinkedAnimGraph.AnimNode_CustomProperty.AnimNode_Base
	class AnimLayerInterface* Interface;//[Offset: 0xa0, Size: 0x8] 0x78759e6dc0
	FName Layer;//[Offset: 0xa8, Size: 0x8] 0x7875a4d000

--------------------------------
Class: AnimNode_LinkedAnimGraph.AnimNode_CustomProperty.AnimNode_Base
	PoseLink[] InputPoses;//[Offset: 0x58, Size: 0x10] 0x78759e6e60
	FName[] InputPoseNames;//[Offset: 0x68, Size: 0x10] 0x78759e6f00
	class AnimInstance* InstanceClass;//[Offset: 0x78, Size: 0x8] 0x78759e6fa0
	FName Tag;//[Offset: 0x80, Size: 0x8] 0x7875a4d180
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1] 0x7875a4d200
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1] 0x7875a4d280

--------------------------------
Class: AnimNode_CustomProperty.AnimNode_Base
	FName[] SourcePropertyNames;//[Offset: 0x10, Size: 0x10] 0x78759e7040
	FName[] DestPropertyNames;//[Offset: 0x20, Size: 0x10] 0x78759e70e0
	Object* TargetInstance;//[Offset: 0x30, Size: 0x8] 0x7875a4d480

--------------------------------
Class: SAnimation
	AnimSequenceBase* SequenceBaseFirstPerson_8_08712ABA417F305946384FB15FC48C58;//[Offset: 0x0, Size: 0x8] 0x7836885e00
	AnimSequenceBase* SequenceBaseThirdPerson_10_70F63EB84A68DE52F2CCEB862471AEA3;//[Offset: 0x8, Size: 0x8] 0x7836885d80

--------------------------------
Class: SBlenspace
	BlendSpaceBase* Blendspace_8_08712ABA417F305946384FB15FC48C58;//[Offset: 0x0, Size: 0x8] 0x7836881d00

--------------------------------
Class: BP_LPSP_CASING_Small_C.BP_LPSP_Casing_C.LPSPCasing.Actor.Object

--------------------------------
Class: BP_LPSP_CASING_Shell_C.BP_LPSP_Casing_C.LPSPCasing.Actor.Object

--------------------------------
Class: BP_LPSP_CASING_GL_C.BP_LPSP_Casing_C.LPSPCasing.Actor.Object

--------------------------------
Class: BP_LPSP_CASING_Big_C.BP_LPSP_Casing_C.LPSPCasing.Actor.Object

--------------------------------
Class: BPFL_LPSP_Utility_C.BlueprintFunctionLibrary.Object
	static void Make Map From Arrays(out MaterialInstance*[] Materials, out FName[] Names, Object* __WorldContext, out <FName,MaterialInstance*> Return Map, <FName,MaterialInstance*> Map, int ___int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, MaterialInstance* CallFunc_Array_Get_Item, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x6d94ba8 0x782edb5800
	static void Make Skin Map From Old Map(<FName,MaterialInstance*> Names In Map Form, out MaterialInstance*[] Materials, Object* __WorldContext, out <FName,MaterialInstance*> Return Map, FName[] CallFunc_Map_Keys_Keys, <FName,MaterialInstance*> CallFunc_Make_Map_From_Arrays_Return_Map);// 0x6d94ba8 0x782edb59c0
	static void Material Arrays To SSkin(out MaterialInstance*[] Body, out MaterialInstance*[] Iron Sights, out MaterialInstance*[] Magazine, out MaterialInstance*[] Muzzle, out MaterialInstance*[] Scope, out MaterialInstance*[] Laser, out MaterialInstance*[] Grip, DataTableRowHandle Row Handle Laser Light, DataTableRowHandle Row Handle Flash light, SSkin SkinSet Names, Object* __WorldContext, out SSkin SSkin, <FName,MaterialInstance*> Grip Map, <FName,MaterialInstance*> Laser Map, <FName,MaterialInstance*> Scope Map, <FName,MaterialInstance*> Muzzle Map, <FName,MaterialInstance*> Magazine Map, <FName,MaterialInstance*> Iron Sights Map, <FName,MaterialInstance*> Body Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map, SSkin K2Node_MakeStruct_SSkin, <FName,MaterialInstance*> CallFunc_Make_Skin_Map_From_Old_Map_Return_Map);// 0x6d94ba8 0x782edb5aa0
	static void Break Skin To Arrays(SSkin Skin, Object* __WorldContext, out MaterialInstance*[] Body, out MaterialInstance*[] Iron Sights, out MaterialInstance*[] Magzine, out MaterialInstance*[] Muzzle, out MaterialInstance*[] Scope, out MaterialInstance*[] Laser, out MaterialInstance*[] Grip, out DataTableRowHandle Row Handle Laser Light, out DataTableRowHandle Row Handle Flash light, MaterialInstance*[] Grip Material, MaterialInstance*[] Laser Material, MaterialInstance*[] Scope Material, MaterialInstance*[] Muzzle Material, MaterialInstance*[] Magazine, MaterialInstance*[] IronSights, MaterialInstance*[] Map Body, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance*[] CallFunc_Map_Values_Values);// 0x6d94ba8 0x782edb5b80
	void Get Animation From Data Table Pure(DataTable* Table, FName Name, Object* __WorldContext, out bool Is Valid, out AnimMontage* Animation Montage, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* K2Node_DynamicCast_As_____, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782edb5c60
	void Get Sound From Data Table Pure(DataTable* Table, FName Name, Object* __WorldContext, out bool Is Valid, out SSound Sound Cue, SSound CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782edb5d40
	static void Update Component Physical Settings From Row Handle(PrimitiveComponent* Component, DataTableRowHandle Row Handle, Object* __WorldContext, SPhysical Settings, SPhysical CallFunc_Get_Settings_Physical_Value);// 0x6d94ba8 0x782edb5e20
	static void Update Component Physical Settings(PrimitiveComponent* Component, SPhysical Settings, Object* __WorldContext);// 0x6d94ba8 0x782edb5f00
	void Get Animation Sequence From Data Table(DataTable* Table, FName Name, Object* __WorldContext, out bool Is Valid, out SAnimation Animation Sequence, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782edb5fe0
	void Get Animation Montage From Data Table(DataTable* Table, FName Name, Object* __WorldContext, out bool Is Valid, out AnimMontage* Montage First Person, out AnimMontage* Montage Third Person, SAnimation CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimMontage* CallFunc_Sequence_To_Montage_Montage, AnimMontage* CallFunc_Sequence_To_Montage_Montage);// 0x6d94ba8 0x782edb60c0
	void Get Sound From Data Table(DataTable* Table, FName Name, Object* __WorldContext, out bool Is Valid, out SSound Sound Cue, SSound CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782edb61a0
	void Map Materials To Component(PrimitiveComponent* Component, <FName,MaterialInstance*> Material Map, Object* __WorldContext, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, MaterialInstance*[] CallFunc_Map_Values_Values, MaterialInstance* CallFunc_Array_Get_Item, FName[] CallFunc_Map_Keys_Keys, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x782edb6360
	static void Get Settings Physical(DataTableRowHandle Row Handle, Object* __WorldContext, out SPhysical Value, SPhysical CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x782edb6440
	static void Copy All Weapon Settings(Actor* From, Actor* To, Object* __WorldContext, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Laser_Turned_On_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, SSkin CallFunc_Get_Skin_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Current_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Muzzle_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Muzzle_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Scope_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Scope_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Grip_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Grip_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Laser_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Laser_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Slide_Racked_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handle_Magazine_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handle_Ironsights_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Hidden_Magazine_ReturnValue);// 0x6d94ba8 0x782edb6520
	static void Get All Weapon Settings(Actor* From, Object* __WorldContext, out SWeaponAllSettings Settings, bool Magazine Hidden, DataTableRowHandle IronSights, DataTableRowHandle Magazine, bool Slide Racked, DataTableRowHandle Laser Settings, DataTableRowHandle Laser Mesh, DataTableRowHandle Grip Settings, DataTableRowHandle Grip Mesh, DataTableRowHandle Scope Settings, DataTableRowHandle Scope Mesh, DataTableRowHandle Muzzle Settings, DataTableRowHandle Muzzle Mesh, int Ammunition Current, SSkin Skin, byte Bolt State, bool Laser On, SWeaponAllSettings Weapon Settings, bool CallFunc_IsValid_ReturnValue, SWeaponAllSettings K2Node_MakeStruct_SWeaponAllSettings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Is_Slide_Racked_ReturnValue, bool CallFunc_Is_Laser_Turned_On_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Bolt_State_ReturnValue, SSkin CallFunc_Get_Skin_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Current_ReturnValue, DataTableRowHandle CallFunc_Get_Attachment_Handles_Muzzle_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Muzzle_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Scope_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Scope_Settings, DataTableRowHandle CallFunc_Get_Attachment_Handles_Grip_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Grip_Settings, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handles_Laser_Mesh, DataTableRowHandle CallFunc_Get_Attachment_Handles_Laser_Settings, DataTableRowHandle CallFunc_Get_Attachment_Handle_Magazine_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, DataTableRowHandle CallFunc_Get_Attachment_Handle_Ironsights_ReturnValue, bool CallFunc_Is_Hidden_Magazine_ReturnValue);// 0x6d94ba8 0x782edb6600
	static void Set All Weapon Settings(Actor* To, SWeaponAllSettings Settings, Object* __WorldContext, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess);// 0x6d94ba8 0x782edb66e0

--------------------------------
Class: BPI_LPSP_Interactable_C.Interface.Object
	void Get Interaction Type(out byte Type);// 0x6d94ba8 0x782edb8e40
	void On Interacted(Pawn* Interaction Owner);// 0x6d94ba8 0x782edb8ba0
	void On Set Can Interact(bool Value);// 0x6d94ba8 0x784ccc92a0
	bool Can Interact();// 0x6d94ba8 0x782edb9000

--------------------------------
Class: BPI_LPSP_CH_C.Interface.Object
	void Get Viewmodel Animated Offsets(out SViemodelAnimatedOffsets Offsets);// 0x6d94ba8 0x782edbc640
	void Get Holster State(out byte State);// 0x6d94ba8 0x782edbc720
	void Get Recoil State Weapon(out SRecoilState Value);// 0x6d94ba8 0x782edbc800
	void Get Recoil State Camera(out SRecoilState Value);// 0x6d94ba8 0x782edbc8e0
	void Get Breathing Loop Aiming(out Vector Value);// 0x6d94ba8 0x782edbc9c0
	void Get Breathing Loop(out Vector Value);// 0x6d94ba8 0x782edb90e0
	void Get Explicit Time Breathing(out float Value);// 0x6d94ba8 0x782edb91c0
	void Is Lowered(out bool Value);// 0x6d94ba8 0x782edb92a0
	void Has Leaning Switched(out bool Value);// 0x6d94ba8 0x782edb9380
	void Is Leaning(out bool Value);// 0x6d94ba8 0x782edb9460
	void Get Leaning Alpha(out float Value);// 0x6d94ba8 0x782edb9540
	void Get Ammunition Prompt(out FText Text, out SlateColor Color);// 0x6d94ba8 0x782edb9620
	void Get Component Interactor(out BPAC_LPSP_Interactor_C* Component);// 0x6d94ba8 0x782edb9700
	void Get Facing Rotation(out Rotator Value);// 0x6d94ba8 0x782edb97e0
	void On Pick Up();// 0x6d94ba8 0x782edb98c0
	void Add Ammunition Pool(<byte,int> Ammunition Pool);// 0x6d94ba8 0x782edb99a0
	void Add Ammunition Pool Value(byte Ammo Type, int Value);// 0x6d94ba8 0x782edb9a80
	void Get Alpha Weapon Lag Look(out float Value);// 0x6d94ba8 0x782edb9c40
	void Should Show Ammunition Prompt(out bool Show);// 0x6d94ba8 0x782edb9d20
	void Get Show Reload Prompt(out bool Value);// 0x6d94ba8 0x782edb9e00
	void Set Ammunition Pool Value(byte Ammo Type, int Value);// 0x6d94ba8 0x782edb9ee0
	void Get Ammunition Pool Value(byte Ammo Type, out int Value);// 0x6d94ba8 0x782edb9fc0
	void On Ammunition Set(bool Fill, int Amount);// 0x6d94ba8 0x782edba0a0
	int Get Shot Count();// 0x6d94ba8 0x782edba180
	void Get Camera Component(out CameraComponent* Camera Component, out bool Is Valid);// 0x6d94ba8 0x782edba260
	bool Is Camera Right Shoulder();// 0x6d94ba8 0x782edba340
	void On Set Knife Visibility(bool Visible);// 0x6d94ba8 0x782edba420
	bool Has Highlighted Weapon In Inventory();// 0x6d94ba8 0x782edba500
	bool Has Inventory Space();// 0x6d94ba8 0x782edba5e0
	Actor* Get Actor Weapon();// 0x6d94ba8 0x782edba6c0
	Actor* Get Actor Pickup();// 0x6d94ba8 0x782edba7a0
	void On Try Fire Projectile();// 0x6d94ba8 0x782edba880
	void On Set Ability Tags(GameplayTagContainer Value);// 0x6d94ba8 0x782edba960
	GameplayTagContainer Get Ability Tags();// 0x6d94ba8 0x782edbaa40
	int Get Grenades Current();// 0x6d94ba8 0x782edbab20
	Vector2D Get Input Movement();// 0x6d94ba8 0x782edbac00
	Vector2D Get Input Look();// 0x6d94ba8 0x782edbace0
	float Get Sensitivity Multiplier();// 0x6d94ba8 0x782edb7400
	float Get Field Of View Running();// 0x6d94ba8 0x782edb74e0
	int Get Field Of View();// 0x6d94ba8 0x782edb75c0
	float Get Aim Speed Multiplier();// 0x6d94ba8 0x782edb76a0
	float Get Aim Duration();// 0x6d94ba8 0x782edb7780
	bool Is Tutorial Text Visible();// 0x6d94ba8 0x782edb7860
	bool Is Running();// 0x6d94ba8 0x782edb7940
	bool Is Aiming();// 0x6d94ba8 0x782edb7b00
	void On Throw Grenade();// 0x6d94ba8 0x782edb7cc0

--------------------------------
Class: BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Grenade_02_C.BP_LPSP_PROJ_Grenade_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_GL_C.BP_LPSP_PROJ_Grenade_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Bullet_Sniper_C.BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Bullet_Handgun_C.BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Bullet_Explosive_C.BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Bullet_Explosive_Small_C.BP_LPSP_PROJ_Bullet_Explosive_C.BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_Bullet_Pellet_C.BP_LPSP_PROJ_Bullet_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: ABP_LPSP_WEP_AR_01_C.ABP_LPSP_WEP_C.AnimInstance.Object

--------------------------------
Class: BP_LPSP_WEP_Sniper_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Sniper_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Sniper_03_Heavy_C.BP_LPSP_WEP_Sniper_03_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834557000
	BP_LPSP_WEP_Attachment_C* SMesh Extras Handle 01;//[Offset: 0x14f8, Size: 0x8] 0x7834556f80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 04;//[Offset: 0x1500, Size: 0x8] 0x7834556f00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 03;//[Offset: 0x1508, Size: 0x8] 0x7834556e80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x1510, Size: 0x8] 0x7834556e00

--------------------------------
Class: BP_LPSP_WEP_Sniper_02_1_C.BP_LPSP_WEP_Sniper_02_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834556d80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Grenade 01;//[Offset: 0x14f8, Size: 0x8] 0x7834556d00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x1500, Size: 0x8] 0x7834556c80

--------------------------------
Class: BP_LPSP_WEP_Sniper_03_Tactical_C.BP_LPSP_WEP_Sniper_03_Heavy_C.BP_LPSP_WEP_Sniper_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Sniper_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Bullets;//[Offset: 0x14f0, Size: 0x8] 0x7834556c00

--------------------------------
Class: BP_LPSP_WEP_Sniper_02_2_C.BP_LPSP_WEP_Sniper_02_1_C.BP_LPSP_WEP_Sniper_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_05_C.BP_LPSP_WEP_C.Actor.Object
	void UserConstructionScript();// 0x6d94ba8 0x782e5d1900

--------------------------------
Class: BP_LPSP_WEP_Sniper_01_1_C.BP_LPSP_WEP_Sniper_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f8, Size: 0x8] 0x7834556b80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 03;//[Offset: 0x1500, Size: 0x8] 0x7834556b00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x1508, Size: 0x8] 0x7834556a80

--------------------------------
Class: BP_LPSP_WEP_Sniper_01_2_C.BP_LPSP_WEP_Sniper_01_1_C.BP_LPSP_WEP_Sniper_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_04_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_05_1_C.BP_LPSP_WEP_SMG_05_C.BP_LPSP_WEP_C.Actor.Object
	SceneComponent* Extras;//[Offset: 0x14f0, Size: 0x8] 0x7834556a00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 06;//[Offset: 0x14f8, Size: 0x8] 0x7834556980
	BP_LPSP_WEP_Attachment_C* SMesh Extras Bullets;//[Offset: 0x1500, Size: 0x8] 0x7834556900
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 05;//[Offset: 0x1508, Size: 0x8] 0x7834556880
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 04;//[Offset: 0x1510, Size: 0x8] 0x7834556800
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x1518, Size: 0x8] 0x7834556780
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x1520, Size: 0x8] 0x7834556700
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 03;//[Offset: 0x1528, Size: 0x8] 0x7834556680

--------------------------------
Class: BP_LPSP_WEP_SMG_05_3_C.BP_LPSP_WEP_SMG_05_1_C.BP_LPSP_WEP_SMG_05_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_05_2_C.BP_LPSP_WEP_SMG_05_1_C.BP_LPSP_WEP_SMG_05_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_04_1_C.BP_LPSP_WEP_SMG_04_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834556600
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834556580

--------------------------------
Class: BP_LPSP_WEP_SMG_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_03_1_C.BP_LPSP_WEP_SMG_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_04_2_C.BP_LPSP_WEP_SMG_04_1_C.BP_LPSP_WEP_SMG_04_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_03_2_C.BP_LPSP_WEP_SMG_03_1_C.BP_LPSP_WEP_SMG_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_SMG_02_3_C.BP_LPSP_WEP_SMG_02_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834556400
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834556380

--------------------------------
Class: BP_LPSP_WEP_SMG_02_2_C.BP_LPSP_WEP_SMG_02_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834558400
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834558380

--------------------------------
Class: BP_LPSP_WEP_SMG_02_1_C.BP_LPSP_WEP_SMG_02_2_C.BP_LPSP_WEP_SMG_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Shotgun_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Bullets;//[Offset: 0x14f0, Size: 0x8] 0x7834558200

--------------------------------
Class: BP_LPSP_WEP_SMG_01_1_C.BP_LPSP_WEP_SMG_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834558180

--------------------------------
Class: BP_LPSP_WEP_SMG_01_3_C.BP_LPSP_WEP_SMG_01_1_C.BP_LPSP_WEP_SMG_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Shotgun_01_Tech_C.BP_LPSP_WEP_Shotgun_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834558080
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x1500, Size: 0x8] 0x7834558000

--------------------------------
Class: BP_LPSP_WEP_SMG_01_2_C.BP_LPSP_WEP_SMG_01_1_C.BP_LPSP_WEP_SMG_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_RL_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Shotgun_01_1_C.BP_LPSP_WEP_Shotgun_01_Tech_C.BP_LPSP_WEP_Shotgun_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_04_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_RL_01_1_C.BP_LPSP_WEP_RL_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rail 01;//[Offset: 0x14f0, Size: 0x8] 0x7834557f80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rail 02;//[Offset: 0x14f8, Size: 0x8] 0x7834557f00

--------------------------------
Class: BP_LPSP_WEP_Handgun_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_04_2_C.BP_LPSP_WEP_Handgun_04_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834557e80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834557e00

--------------------------------
Class: BP_LPSP_WEP_Handgun_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_04_1_C.BP_LPSP_WEP_Handgun_04_2_C.BP_LPSP_WEP_Handgun_04_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_03_1_C.BP_LPSP_WEP_Handgun_03_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f0, Size: 0x8] 0x7834557d80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f8, Size: 0x8] 0x7834557d00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 03;//[Offset: 0x1500, Size: 0x8] 0x7834557c80

--------------------------------
Class: BP_LPSP_WEP_Handgun_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_03_2_C.BP_LPSP_WEP_Handgun_03_1_C.BP_LPSP_WEP_Handgun_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_02_2_C.BP_LPSP_WEP_Handgun_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_02_1_C.BP_LPSP_WEP_Handgun_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_01_1_C.BP_LPSP_WEP_Handgun_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_Handgun_01_2_C.BP_LPSP_WEP_Handgun_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_GL_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_03_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_GL_01_3_C.BP_LPSP_WEP_GL_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_GL_01_2_C.BP_LPSP_WEP_GL_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_GL_01_1_C.BP_LPSP_WEP_GL_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834557b80
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 03;//[Offset: 0x14f8, Size: 0x8] 0x7834557b00
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x1500, Size: 0x8] 0x7834557a80

--------------------------------
Class: BP_LPSP_WEP_AR_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_03_2_C.BP_LPSP_WEP_AR_03_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f0, Size: 0x8] 0x7834557900
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f8, Size: 0x8] 0x7834557880
	ParticleSystem* Jetpack Particles;//[Offset: 0x1500, Size: 0x8] 0x7834557800
	DataTableRowHandle Jetpack Surfaces Row Handle;//[Offset: 0x1508, Size: 0x10] 0x7834557780

--------------------------------
Class: BP_LPSP_WEP_AR_03_1_C.BP_LPSP_WEP_AR_03_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 02;//[Offset: 0x14f0, Size: 0x8] 0x7834557700
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rails 01;//[Offset: 0x14f8, Size: 0x8] 0x7834557680
	ParticleSystem* Jetpack Particles;//[Offset: 0x1500, Size: 0x8] 0x7834557600
	DataTableRowHandle Jetpack Surfaces Row Handle;//[Offset: 0x1508, Size: 0x10] 0x7834557580

--------------------------------
Class: BP_LPSP_WEP_AR_03_4_C.BP_LPSP_WEP_AR_03_2_C.BP_LPSP_WEP_AR_03_C.BP_LPSP_WEP_C.Actor.Object
	ParticleSystem* Jetpack Particles;//[Offset: 0x1518, Size: 0x8] 0x7834556500
	DataTableRowHandle Jetpack Surfaces Row Handle;//[Offset: 0x1520, Size: 0x10] 0x7834557500

--------------------------------
Class: BP_LPSP_WEP_AR_03_3_C.BP_LPSP_WEP_AR_03_2_C.BP_LPSP_WEP_AR_03_C.BP_LPSP_WEP_C.Actor.Object
	ParticleSystem* Jetpack Particles;//[Offset: 0x1518, Size: 0x8] 0x7834557480
	DataTableRowHandle Jetpack Surfaces Row Handle;//[Offset: 0x1520, Size: 0x10] 0x7834557400

--------------------------------
Class: BP_LPSP_WEP_AR_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_02_4_C.BP_LPSP_WEP_AR_02_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rail;//[Offset: 0x14f0, Size: 0x8] 0x7834559380
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rail Side;//[Offset: 0x14f8, Size: 0x8] 0x7834559300

--------------------------------
Class: BP_LPSP_WEP_AR_02_3_C.BP_LPSP_WEP_AR_02_4_C.BP_LPSP_WEP_AR_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_02_2_C.BP_LPSP_WEP_AR_02_4_C.BP_LPSP_WEP_AR_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_02_1_C.BP_LPSP_WEP_AR_02_4_C.BP_LPSP_WEP_AR_02_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_01_1_C.BP_LPSP_WEP_AR_01_C.BP_LPSP_WEP_C.Actor.Object
	BP_LPSP_WEP_Attachment_C* SMesh Extras Bullets;//[Offset: 0x14f0, Size: 0x8] 0x7834559280
	BP_LPSP_WEP_Attachment_C* SMesh Extras Rail;//[Offset: 0x14f8, Size: 0x8] 0x7834559200

--------------------------------
Class: BP_LPSP_WEP_AR_01_4_C.BP_LPSP_WEP_AR_01_1_C.BP_LPSP_WEP_AR_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_01_3_C.BP_LPSP_WEP_AR_01_1_C.BP_LPSP_WEP_AR_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BP_LPSP_WEP_AR_01_2_C.BP_LPSP_WEP_AR_01_1_C.BP_LPSP_WEP_AR_01_C.BP_LPSP_WEP_C.Actor.Object

--------------------------------
Class: BTTask_Focus_C.BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa8, Size: 0x8] 0x783435be80
	bool MoveIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1] 0x783435be00
	BlackboardKeySelector EnemyKey;//[Offset: 0xb8, Size: 0x28] 0x783435bd80
	bool isFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1] 0x783435bd00
	void OnFail_B7E77F6346E764FF8AB185A309EAB396(byte MovementResult);// 0x6d94ba8 0x7831be1580
	void OnSuccess_B7E77F6346E764FF8AB185A309EAB396(byte MovementResult);// 0x6d94ba8 0x7831be1740
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x6d94ba8 0x7831be1900
	void ExecuteUbergraph_BTTask_Focus(int EntryPoint, byte K2Node_CustomEvent_MovementResult, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_MovementResult, delegate K2Node_CreateDelegate_OutputDelegate, byte ___byte_Variable, byte ___byte_Variable, float ___float_Variable, float ___float_Variable, float ___float_Variable, AIController* K2Node_Event_OwnerController, Pawn* K2Node_Event_ControlledPawn, BP_BaseAI_Pawn_C* K2Node_DynamicCast_AsBP_Base_AI_Pawn, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, const Actor*[] K2Node_MakeArray_Array, Vector CallFunc_GetActorUpVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Object* CallFunc_GetBlackboardValueAsObject_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess, bool ___bool_Variable, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_RotateAngleAxis_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FPS_GameInstance_C* K2Node_DynamicCast_AsFPS_Game_Instance, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_ElementIndex, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector K2Node_Select_Default, AIAsyncTaskBlueprintProxy* CallFunc_CreateMoveToProxyObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x7831be19e0

--------------------------------
Class: DT_Explosion_C.DT_BaseDamage_C.DamageType.Object

--------------------------------
Class: DT_Grenade_C.DT_BaseDamage_C.DamageType.Object

--------------------------------
Class: DT_M16_C.DT_BaseDamage_C.DamageType.Object

--------------------------------
Class: DT_Knife_C.DT_BaseDamage_C.DamageType.Object

--------------------------------
Class: DT_FallDamage_C.DT_BaseDamage_C.DamageType.Object

--------------------------------
Class: WBP_LPSP_Interface_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8] 0x783436af80
	WidgetAnimation* Fade;//[Offset: 0x268, Size: 0x8] 0x783436af00
	TextBlock* CurrentAmmoText;//[Offset: 0x270, Size: 0x8] 0x783436ae80
	TextBlock* CurrentGrenadeText;//[Offset: 0x278, Size: 0x8] 0x783436ae00
	TextBlock* TotalAmmoText;//[Offset: 0x280, Size: 0x8] 0x783436ad80
	Character* Character;//[Offset: 0x288, Size: 0x8] 0x783436ad00
	Vector2D Image Sizes;//[Offset: 0x290, Size: 0x8] 0x783436ac80
	Actor* Actor Weapon;//[Offset: 0x298, Size: 0x8] 0x783436ac00
	FText Get Text Debug Abilities(Character* CallFunc_GetPlayerCharacter_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, GameplayTagContainer CallFunc_Get_Ability_Tags_ReturnValue, FString CallFunc_GetDebugStringFromGameplayTagContainer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x7836a0be60
	SlateColor Update Text Color Ammunition Current(SlateColor K2Node_MakeStruct_SlateColor, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Total_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Current_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x783136db40
	SlateColor Update Text Color Ammunition Pool(SlateColor K2Node_MakeStruct_SlateColor, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Get_Ammunition_Type_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Ammunition_Pool_Value_Value, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Ammunition_Total_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x6d94ba8 0x783136dec0
	FText Get Text Time Scale(float CallFunc_GetGlobalTimeDilation_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x6d94ba8 0x783136e4e0
	FText Get Text Grenade Count(interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Grenades_Current_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x783136e6a0
	FText Get Text Ammunition Total(interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, byte CallFunc_Get_Ammunition_Type_ReturnValue, int CallFunc_Get_Ammunition_Pool_Value_Value, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x6d94ba8 0x783136e080
	FText Get Text Ammunition Current(interface classNone K2Node_DynamicCast_AsInterface_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Get_Ammunition_Current_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x6d94ba8 0x7831363ce0
	void OnInitialized();// 0x6d94ba8 0x7836d56280
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x7831b7b680
	void ExecuteUbergraph_WBP_LPSP_Interface(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, interface classNone K2Node_DynamicCast_AsInterface_Character, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_Get_Actor_Weapon_ReturnValue);// 0x6d94ba8 0x7831b7b760

--------------------------------
Class: WBP_LPSP_Crosshair_Circle_C.WBP_LPSP_Crosshair_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8] 0x783436c180
	WBP_LPSP_Dot_C* Dot;//[Offset: 0x2c0, Size: 0x8] 0x783436c100
	CanvasPanel* PanelCrosshair;//[Offset: 0x2c8, Size: 0x8] 0x783436c080
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x6d94ba8 0x7831b7b5a0
	void OnInitialized();// 0x6d94ba8 0x78307a0940
	void ExecuteUbergraph_WBP_LPSP_Crosshair_Circle(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x6d94ba8 0x78307a0b00

--------------------------------
Class: BP_LPSP_PROJ_RL_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object

--------------------------------
Class: BP_LPSP_PROJ_RL_Homing_C.BP_LPSP_PROJ_RL_C.BP_LPSP_Projectile_C.LPSPProjectile.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8] 0x783436b800
	float Homing Detection Radius;//[Offset: 0x3e8, Size: 0x4] 0x783436b680
	class Object* Homing Class Filter;//[Offset: 0x3f0, Size: 0x8] 0x7850068760
	byte[] Homing Object Types;//[Offset: 0x3f8, Size: 0x10] 0x78500686c0
	Actor* Homing Target;//[Offset: 0x408, Size: 0x8] 0x783436d680
	void Try Get Homing Target(out Actor*[] Targets, int Index, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Actor*[] K2Node_MakeArray_Array, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue);// 0x6d94ba8 0x7830195480
	void On Launch(bool bCinematic, Vector Velocity);// 0x6d94ba8 0x787d0336c0
	void ExecuteUbergraph_BP_LPSP_PROJ_RL_Homing(int EntryPoint, const Actor*[] ___object_Variable, float CallFunc_RandomFloatInRange_ReturnValue, bool K2Node_Event_bCinematic, Vector K2Node_Event_Velocity, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Actor*[] CallFunc_SphereOverlapActors_OutActors, bool CallFunc_SphereOverlapActors_ReturnValue);// 0x6d94ba8 0x787d0320e0

--------------------------------
Class: BP_LPSP_GM_C.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 0x8] 0x783688e280
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c8, Size: 0x8] 0x783688e380
	void ReceiveBeginPlay();// 0x6d94ba8 0x78358b8200
	void ReceiveDestroyed();// 0x6d94ba8 0x78358b7f60
	void ExecuteUbergraph_BP_LPSP_GM(int EntryPoint);// 0x6d94ba8 0x78358b7e80

--------------------------------
Class: BP_PlayMainController_C.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 0x8] 0x783688e400
	UTCSwipeToMoveComponent_C* UTCSwipeToMoveComponent;//[Offset: 0x578, Size: 0x8] 0x783688e480
	BP_LPSP_WEP_C* Weapon;//[Offset: 0x580, Size: 0x8] 0x783688e500
	void InpTchEvt_Moved(byte FingerIndex, Vector Location);// 0x6d94ba8 0x78358b7b00
	void InpTchEvt_Released(byte FingerIndex, Vector Location);// 0x6d94ba8 0x78358b7780
	void InpTchEvt_Pressed(byte FingerIndex, Vector Location);// 0x6d94ba8 0x78358baf80
	void BndEvt__BP_PlayMainController_UTCSwipeToMoveComponent_K2Node_ComponentBoundEvent_0_On Delta X Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78358ba960
	void BndEvt__BP_PlayMainController_UTCSwipeToMoveComponent_K2Node_ComponentBoundEvent_1_On Delta Y Changed__DelegateSignature(float Value);// 0x6d94ba8 0x78358badc0
	void ExecuteUbergraph_BP_PlayMainController(int EntryPoint, int ___int_Loop_Counter_Variable, byte ___byte_Variable, int CallFunc_Add_IntInt_ReturnValue, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, int ___int_Array_Index_Variable, int ___int_Array_Index_Variable, byte K2Node_InputTouchEvent_FingerIndex, Vector K2Node_InputTouchEvent_Location, UTCComponent_C*[] CallFunc_K2_GetComponentsByClass_ReturnValue, int ___int_Loop_Counter_Variable, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_Is_Finger_Location_Exists_Result, int CallFunc_Add_IntInt_ReturnValue, UTCComponent_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UTCComponent_C*[] CallFunc_Filter_By_Active_Active_Components, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Vector ___struct_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, UTCComponent_C*[] CallFunc_Filter_By_Bounds_In_Bounds, UTCComponent_C*[] CallFunc_Filter_By_Bounds_W_out_Bounds, UTCComponent_C*[] CallFunc_Filter_By_Bounds_Both, Vector CallFunc_MakeVector_ReturnValue, UTCComponent_C*[] CallFunc_Sort_By_Priority_W__Higher_Priority, UTCComponent_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Is_Finger_Slots_Available_ReturnValue, bool CallFunc_Is_Finger_Location_Exists_Result, int ___int_Loop_Counter_Variable, int ___int_Array_Index_Variable, UTCComponent_C* CallFunc_Array_Get_Item, bool CallFunc_Is_Finger_Location_Exists_Result, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_ComponentBoundEvent_Value, float K2Node_ComponentBoundEvent_Value, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, BP_LPSP_WEP_C*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, BP_LPSP_WEP_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_K2_AddRelativeRotation_SweepHitResult, bool CallFunc_Less_IntInt_ReturnValue);// 0x6d94ba8 0x78358ba420

--------------------------------
